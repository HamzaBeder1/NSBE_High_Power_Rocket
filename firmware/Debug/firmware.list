
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080048a0  080048a0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a0  080048a0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a4  080048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080048a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  080048b4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080048b4  000061d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f09  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bac  00000000  00000000  0000ff45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00011af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a6  00000000  00000000  00012508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d5d  00000000  00000000  00012cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c640  00000000  00000000  00037a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b5f  00000000  00000000  0004404b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  00125bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001283fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004848 	.word	0x08004848

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004848 	.word	0x08004848

080001c8 <HAL_I2C_MasterTxCpltCallback>:

uint8_t Buffer_Dest[BUFFERSIZE];
uint8_t Buffer_Src[BUFFERSIZE];

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive_DMA(&hI2C, MPU6050ADDR, Buffer_Dest , 1) != HAL_OK)
 80001d0:	2301      	movs	r3, #1
 80001d2:	4a07      	ldr	r2, [pc, #28]	@ (80001f0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80001d4:	21d2      	movs	r1, #210	@ 0xd2
 80001d6:	4807      	ldr	r0, [pc, #28]	@ (80001f4 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 80001d8:	f001 f9a6 	bl	8001528 <HAL_I2C_Master_Receive_DMA>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <HAL_I2C_MasterTxCpltCallback+0x1e>
	  		Error_Handler();
 80001e2:	f000 f8fd 	bl	80003e0 <Error_Handler>
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000010c 	.word	0x2000010c
 80001f4:	20000028 	.word	0x20000028

080001f8 <main>:


int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  Buffer_Src[0] = 0xAA;
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <main+0x80>)
 80001fe:	22aa      	movs	r2, #170	@ 0xaa
 8000200:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 8000202:	f000 fa6a 	bl	80006da <HAL_Init>
  SystemClock_Config();
 8000206:	f000 f83d 	bl	8000284 <SystemClock_Config>
  I2C_Init();
 800020a:	f000 f881 	bl	8000310 <I2C_Init>
  DMA_Init();
 800020e:	f000 f8c1 	bl	8000394 <DMA_Init>

  while (1)
  {
	  if(HAL_I2C_Master_Transmit_DMA(&hI2C, BMP180ADDR, Buffer_Src, 1) != HAL_OK)
 8000212:	2301      	movs	r3, #1
 8000214:	4a18      	ldr	r2, [pc, #96]	@ (8000278 <main+0x80>)
 8000216:	21ee      	movs	r1, #238	@ 0xee
 8000218:	4818      	ldr	r0, [pc, #96]	@ (800027c <main+0x84>)
 800021a:	f001 f871 	bl	8001300 <HAL_I2C_Master_Transmit_DMA>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <main+0x30>
	    		  Error_Handler();
 8000224:	f000 f8dc 	bl	80003e0 <Error_Handler>
	  while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY)
 8000228:	bf00      	nop
 800022a:	4814      	ldr	r0, [pc, #80]	@ (800027c <main+0x84>)
 800022c:	f001 fb3f 	bl	80018ae <HAL_I2C_GetState>
 8000230:	4603      	mov	r3, r0
 8000232:	2b20      	cmp	r3, #32
 8000234:	d1f9      	bne.n	800022a <main+0x32>
	  	      {
	  	      }
	  while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);
 8000236:	bf00      	nop
 8000238:	4810      	ldr	r0, [pc, #64]	@ (800027c <main+0x84>)
 800023a:	f001 fb46 	bl	80018ca <HAL_I2C_GetError>
 800023e:	4603      	mov	r3, r0
 8000240:	2b04      	cmp	r3, #4
 8000242:	d0f9      	beq.n	8000238 <main+0x40>
	  if(HAL_I2C_Master_Receive_DMA(&hI2C, BMP180ADDR, Buffer_Dest , 1) != HAL_OK)
 8000244:	2301      	movs	r3, #1
 8000246:	4a0e      	ldr	r2, [pc, #56]	@ (8000280 <main+0x88>)
 8000248:	21ee      	movs	r1, #238	@ 0xee
 800024a:	480c      	ldr	r0, [pc, #48]	@ (800027c <main+0x84>)
 800024c:	f001 f96c 	bl	8001528 <HAL_I2C_Master_Receive_DMA>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <main+0x62>
	    	  		Error_Handler();
 8000256:	f000 f8c3 	bl	80003e0 <Error_Handler>
	  while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY);
 800025a:	bf00      	nop
 800025c:	4807      	ldr	r0, [pc, #28]	@ (800027c <main+0x84>)
 800025e:	f001 fb26 	bl	80018ae <HAL_I2C_GetState>
 8000262:	4603      	mov	r3, r0
 8000264:	2b20      	cmp	r3, #32
 8000266:	d1f9      	bne.n	800025c <main+0x64>
	  while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);
 8000268:	bf00      	nop
 800026a:	4804      	ldr	r0, [pc, #16]	@ (800027c <main+0x84>)
 800026c:	f001 fb2d 	bl	80018ca <HAL_I2C_GetError>
 8000270:	4603      	mov	r3, r0
 8000272:	2b04      	cmp	r3, #4
 8000274:	d0f9      	beq.n	800026a <main+0x72>
	  if(HAL_I2C_Master_Transmit_DMA(&hI2C, BMP180ADDR, Buffer_Src, 1) != HAL_OK)
 8000276:	e7cc      	b.n	8000212 <main+0x1a>
 8000278:	20000170 	.word	0x20000170
 800027c:	20000028 	.word	0x20000028
 8000280:	2000010c 	.word	0x2000010c

08000284 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b096      	sub	sp, #88	@ 0x58
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2244      	movs	r2, #68	@ 0x44
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f004 faac 	bl	80047f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002aa:	f002 ffc7 	bl	800323c <HAL_PWREx_ControlVoltageScaling>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002b4:	f000 f894 	bl	80003e0 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002b8:	2310      	movs	r3, #16
 80002ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002c4:	2360      	movs	r3, #96	@ 0x60
 80002c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 f809 	bl	80032e8 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002dc:	f000 f880 	bl	80003e0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f4:	463b      	mov	r3, r7
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f003 fbd1 	bl	8003aa0 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000304:	f000 f86c 	bl	80003e0 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3758      	adds	r7, #88	@ 0x58
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <I2C_Init>:


//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 8000314:	4b1c      	ldr	r3, [pc, #112]	@ (8000388 <I2C_Init+0x78>)
 8000316:	4a1d      	ldr	r2, [pc, #116]	@ (800038c <I2C_Init+0x7c>)
 8000318:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 800031a:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <I2C_Init+0x78>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000320:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <I2C_Init+0x78>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000326:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <I2C_Init+0x78>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <I2C_Init+0x78>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 8000332:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <I2C_Init+0x78>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000338:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <I2C_Init+0x78>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <I2C_Init+0x78>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <I2C_Init+0x78>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
	hI2C.Init.Timing = 0x00100D14;
 800034a:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <I2C_Init+0x78>)
 800034c:	4a10      	ldr	r2, [pc, #64]	@ (8000390 <I2C_Init+0x80>)
 800034e:	605a      	str	r2, [r3, #4]

	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000350:	480d      	ldr	r0, [pc, #52]	@ (8000388 <I2C_Init+0x78>)
 8000352:	f000 ff39 	bl	80011c8 <HAL_I2C_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <I2C_Init+0x50>
	{
		Error_Handler();
 800035c:	f000 f840 	bl	80003e0 <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000360:	2100      	movs	r1, #0
 8000362:	4809      	ldr	r0, [pc, #36]	@ (8000388 <I2C_Init+0x78>)
 8000364:	f002 fec4 	bl	80030f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <I2C_Init+0x62>
	{
		Error_Handler();
 800036e:	f000 f837 	bl	80003e0 <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 8000372:	2100      	movs	r1, #0
 8000374:	4804      	ldr	r0, [pc, #16]	@ (8000388 <I2C_Init+0x78>)
 8000376:	f002 ff06 	bl	8003186 <HAL_I2CEx_ConfigDigitalFilter>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <I2C_Init+0x74>
    {
    	Error_Handler();
 8000380:	f000 f82e 	bl	80003e0 <Error_Handler>
    }
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028
 800038c:	40005400 	.word	0x40005400
 8000390:	00100d14 	.word	0x00100d14

08000394 <DMA_Init>:

void DMA_Init(void){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800039a:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <DMA_Init+0x48>)
 800039c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800039e:	4a0f      	ldr	r2, [pc, #60]	@ (80003dc <DMA_Init+0x48>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80003a6:	4b0d      	ldr	r3, [pc, #52]	@ (80003dc <DMA_Init+0x48>)
 80003a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	2010      	movs	r0, #16
 80003b8:	f000 fadf 	bl	800097a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003bc:	2010      	movs	r0, #16
 80003be:	f000 faf8 	bl	80009b2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	2011      	movs	r0, #17
 80003c8:	f000 fad7 	bl	800097a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003cc:	2011      	movs	r0, #17
 80003ce:	f000 faf0 	bl	80009b2 <HAL_NVIC_EnableIRQ>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <Error_Handler>:



void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  __disable_irq();
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <Error_Handler+0x8>

080003ec <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x44>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <HAL_MspInit+0x44>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	@ 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8000434:	b580      	push	{r7, lr}
 8000436:	b0ac      	sub	sp, #176	@ 0xb0
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 800043c:	4b57      	ldr	r3, [pc, #348]	@ (800059c <HAL_I2C_MspInit+0x168>)
 800043e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000440:	4a56      	ldr	r2, [pc, #344]	@ (800059c <HAL_I2C_MspInit+0x168>)
 8000442:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000446:	6593      	str	r3, [r2, #88]	@ 0x58
 8000448:	4b54      	ldr	r3, [pc, #336]	@ (800059c <HAL_I2C_MspInit+0x168>)
 800044a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800044c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000450:	613b      	str	r3, [r7, #16]
 8000452:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b51      	ldr	r3, [pc, #324]	@ (800059c <HAL_I2C_MspInit+0x168>)
 8000456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000458:	4a50      	ldr	r2, [pc, #320]	@ (800059c <HAL_I2C_MspInit+0x168>)
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000460:	4b4e      	ldr	r3, [pc, #312]	@ (800059c <HAL_I2C_MspInit+0x168>)
 8000462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000464:	f003 0302 	and.w	r3, r3, #2
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000470:	2288      	movs	r2, #136	@ 0x88
 8000472:	2100      	movs	r1, #0
 8000474:	4618      	mov	r0, r3
 8000476:	f004 f9bb 	bl	80047f0 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800047a:	2340      	movs	r3, #64	@ 0x40
 800047c:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800047e:	2300      	movs	r3, #0
 8000480:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000486:	4618      	mov	r0, r3
 8000488:	f003 fcf6 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 8000492:	f7ff ffa5 	bl	80003e0 <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000496:	23c0      	movs	r3, #192	@ 0xc0
 8000498:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800049a:	2312      	movs	r3, #18
 800049c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049e:	2301      	movs	r3, #1
 80004a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80004a2:	2302      	movs	r3, #2
 80004a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004a6:	2304      	movs	r3, #4
 80004a8:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 80004aa:	4b3c      	ldr	r3, [pc, #240]	@ (800059c <HAL_I2C_MspInit+0x168>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	4a3b      	ldr	r2, [pc, #236]	@ (800059c <HAL_I2C_MspInit+0x168>)
 80004b0:	f043 0302 	orr.w	r3, r3, #2
 80004b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b6:	4b39      	ldr	r3, [pc, #228]	@ (800059c <HAL_I2C_MspInit+0x168>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ba:	f003 0302 	and.w	r3, r3, #2
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4835      	ldr	r0, [pc, #212]	@ (80005a0 <HAL_I2C_MspInit+0x16c>)
 80004ca:	f000 fcd3 	bl	8000e74 <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 80004ce:	4b35      	ldr	r3, [pc, #212]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004d0:	4a35      	ldr	r2, [pc, #212]	@ (80005a8 <HAL_I2C_MspInit+0x174>)
 80004d2:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80004d4:	4b33      	ldr	r3, [pc, #204]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004d6:	2203      	movs	r2, #3
 80004d8:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004da:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004dc:	2210      	movs	r2, #16
 80004de:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e0:	4b30      	ldr	r3, [pc, #192]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004e6:	4b2f      	ldr	r3, [pc, #188]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004ec:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004f2:	4b2c      	ldr	r3, [pc, #176]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80004f8:	4b2a      	ldr	r3, [pc, #168]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80004fe:	4b29      	ldr	r3, [pc, #164]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 8000504:	4827      	ldr	r0, [pc, #156]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 8000506:	f000 fa6f 	bl	80009e8 <HAL_DMA_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000510:	f7ff ff66 	bl	80003e0 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a23      	ldr	r2, [pc, #140]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 8000518:	639a      	str	r2, [r3, #56]	@ 0x38
 800051a:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <HAL_I2C_MspInit+0x170>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000520:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 8000522:	4a23      	ldr	r2, [pc, #140]	@ (80005b0 <HAL_I2C_MspInit+0x17c>)
 8000524:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000526:	4b21      	ldr	r3, [pc, #132]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 8000528:	2203      	movs	r2, #3
 800052a:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800052c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000532:	4b1e      	ldr	r3, [pc, #120]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800053e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000544:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000550:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 8000556:	4815      	ldr	r0, [pc, #84]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 8000558:	f000 fa46 	bl	80009e8 <HAL_DMA_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <HAL_I2C_MspInit+0x132>
		Error_Handler();
 8000562:	f7ff ff3d 	bl	80003e0 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a10      	ldr	r2, [pc, #64]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 800056a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800056c:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <HAL_I2C_MspInit+0x178>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	201f      	movs	r0, #31
 8000578:	f000 f9ff 	bl	800097a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800057c:	201f      	movs	r0, #31
 800057e:	f000 fa18 	bl	80009b2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	2020      	movs	r0, #32
 8000588:	f000 f9f7 	bl	800097a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800058c:	2020      	movs	r0, #32
 800058e:	f000 fa10 	bl	80009b2 <HAL_NVIC_EnableIRQ>
}
 8000592:	bf00      	nop
 8000594:	37b0      	adds	r7, #176	@ 0xb0
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000400 	.word	0x48000400
 80005a4:	2000007c 	.word	0x2000007c
 80005a8:	4002006c 	.word	0x4002006c
 80005ac:	200000c4 	.word	0x200000c4
 80005b0:	40020080 	.word	0x40020080

080005b4 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
   while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <NMI_Handler+0x4>

080005bc <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <MemManage_Handler+0x4>

080005cc <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <UsageFault_Handler+0x4>

080005dc <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800060a:	f000 f8bb 	bl	8000784 <HAL_IncTick>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000618:	4802      	ldr	r0, [pc, #8]	@ (8000624 <DMA1_Channel6_IRQHandler+0x10>)
 800061a:	f000 fb3e 	bl	8000c9a <HAL_DMA_IRQHandler>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000007c 	.word	0x2000007c

08000628 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <DMA1_Channel7_IRQHandler+0x10>)
 800062e:	f000 fb34 	bl	8000c9a <HAL_DMA_IRQHandler>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000c4 	.word	0x200000c4

0800063c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 8000640:	4802      	ldr	r0, [pc, #8]	@ (800064c <I2C1_EV_IRQHandler+0x10>)
 8000642:	f001 f861 	bl	8001708 <HAL_I2C_EV_IRQHandler>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028

08000650 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <I2C1_ER_IRQHandler+0x10>)
 8000656:	f001 f871 	bl	800173c <HAL_I2C_ER_IRQHandler>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000028 	.word	0x20000028

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff ffea 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	@ (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f004 f8a3 	bl	8004800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fd9d 	bl	80001f8 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006cc:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 80006d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d4:	200001d8 	.word	0x200001d8

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>

080006da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f93d 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ea:	200f      	movs	r0, #15
 80006ec:	f000 f80e 	bl	800070c <HAL_InitTick>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	e001      	b.n	8000700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006fc:	f7ff fe76 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000700:	79fb      	ldrb	r3, [r7, #7]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <HAL_InitTick+0x6c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d023      	beq.n	8000768 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000720:	4b16      	ldr	r3, [pc, #88]	@ (800077c <HAL_InitTick+0x70>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <HAL_InitTick+0x6c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f949 	bl	80009ce <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10f      	bne.n	8000762 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d809      	bhi.n	800075c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 f913 	bl	800097a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000754:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <HAL_InitTick+0x74>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	e007      	b.n	800076c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e004      	b.n	800076c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e001      	b.n	800076c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000768:	2301      	movs	r3, #1
 800076a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000008 	.word	0x20000008
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008
 80007a8:	200001d4 	.word	0x200001d4

080007ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <HAL_GetTick+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200001d4 	.word	0x200001d4

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4907      	ldr	r1, [pc, #28]	@ (8000860 <__NVIC_EnableIRQ+0x38>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	@ (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	@ 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	@ 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000930:	d301      	bcc.n	8000936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2301      	movs	r3, #1
 8000934:	e00f      	b.n	8000956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <SysTick_Config+0x40>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093e:	210f      	movs	r1, #15
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f7ff ff8e 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <SysTick_Config+0x40>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <SysTick_Config+0x40>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff29 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff3e 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff8e 	bl	80008b8 <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5d 	bl	8000864 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff31 	bl	8000828 <__NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffa2 	bl	8000920 <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d101      	bne.n	80009fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e098      	b.n	8000b2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b4d      	ldr	r3, [pc, #308]	@ (8000b38 <HAL_DMA_Init+0x150>)
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d80f      	bhi.n	8000a26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b3c <HAL_DMA_Init+0x154>)
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a4b      	ldr	r2, [pc, #300]	@ (8000b40 <HAL_DMA_Init+0x158>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	009a      	lsls	r2, r3, #2
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a48      	ldr	r2, [pc, #288]	@ (8000b44 <HAL_DMA_Init+0x15c>)
 8000a22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a24:	e00e      	b.n	8000a44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b46      	ldr	r3, [pc, #280]	@ (8000b48 <HAL_DMA_Init+0x160>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a43      	ldr	r2, [pc, #268]	@ (8000b40 <HAL_DMA_Init+0x158>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	009a      	lsls	r2, r3, #2
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a42      	ldr	r2, [pc, #264]	@ (8000b4c <HAL_DMA_Init+0x164>)
 8000a42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2202      	movs	r2, #2
 8000a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a1b      	ldr	r3, [r3, #32]
 8000a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a9e:	d039      	beq.n	8000b14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	4a27      	ldr	r2, [pc, #156]	@ (8000b44 <HAL_DMA_Init+0x15c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d11a      	bne.n	8000ae0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000aaa:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <HAL_DMA_Init+0x168>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f003 031c 	and.w	r3, r3, #28
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4924      	ldr	r1, [pc, #144]	@ (8000b50 <HAL_DMA_Init+0x168>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <HAL_DMA_Init+0x168>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6859      	ldr	r1, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad0:	f003 031c 	and.w	r3, r3, #28
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	491d      	ldr	r1, [pc, #116]	@ (8000b50 <HAL_DMA_Init+0x168>)
 8000ada:	4313      	orrs	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
 8000ade:	e019      	b.n	8000b14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_DMA_Init+0x16c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae8:	f003 031c 	and.w	r3, r3, #28
 8000aec:	210f      	movs	r1, #15
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4917      	ldr	r1, [pc, #92]	@ (8000b54 <HAL_DMA_Init+0x16c>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <HAL_DMA_Init+0x16c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6859      	ldr	r1, [r3, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f003 031c 	and.w	r3, r3, #28
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	4911      	ldr	r1, [pc, #68]	@ (8000b54 <HAL_DMA_Init+0x16c>)
 8000b10:	4313      	orrs	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40020407 	.word	0x40020407
 8000b3c:	bffdfff8 	.word	0xbffdfff8
 8000b40:	cccccccd 	.word	0xcccccccd
 8000b44:	40020000 	.word	0x40020000
 8000b48:	bffdfbf8 	.word	0xbffdfbf8
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	400200a8 	.word	0x400200a8
 8000b54:	400204a8 	.word	0x400204a8

08000b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d101      	bne.n	8000b78 <HAL_DMA_Start_IT+0x20>
 8000b74:	2302      	movs	r3, #2
 8000b76:	e04b      	b.n	8000c10 <HAL_DMA_Start_IT+0xb8>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d13a      	bne.n	8000c02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0201 	bic.w	r2, r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f92f 	bl	8000e14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d008      	beq.n	8000bd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 020e 	orr.w	r2, r2, #14
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e00f      	b.n	8000bf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0204 	bic.w	r2, r2, #4
 8000bde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 020a 	orr.w	r2, r2, #10
 8000bee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f042 0201 	orr.w	r2, r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e005      	b.n	8000c0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d005      	beq.n	8000c3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2204      	movs	r2, #4
 8000c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e029      	b.n	8000c90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 020e 	bic.w	r2, r2, #14
 8000c4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c60:	f003 021c 	and.w	r2, r3, #28
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	4798      	blx	r3
    }
  }
  return status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f003 031c 	and.w	r3, r3, #28
 8000cba:	2204      	movs	r2, #4
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d026      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x7a>
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d021      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d107      	bne.n	8000cee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0204 	bic.w	r2, r2, #4
 8000cec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	f003 021c 	and.w	r2, r3, #28
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d071      	beq.n	8000dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d12:	e06c      	b.n	8000dee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d18:	f003 031c 	and.w	r3, r3, #28
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d02e      	beq.n	8000d86 <HAL_DMA_IRQHandler+0xec>
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d029      	beq.n	8000d86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0320 	and.w	r3, r3, #32
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10b      	bne.n	8000d58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 020a 	bic.w	r2, r2, #10
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5c:	f003 021c 	and.w	r2, r3, #28
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	2102      	movs	r1, #2
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d038      	beq.n	8000dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d84:	e033      	b.n	8000dee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f003 031c 	and.w	r3, r3, #28
 8000d8e:	2208      	movs	r2, #8
 8000d90:	409a      	lsls	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d02a      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x156>
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d025      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 020e 	bic.w	r2, r2, #14
 8000db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db8:	f003 021c 	and.w	r2, r3, #28
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
}
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e06:	b2db      	uxtb	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f003 021c 	and.w	r2, r3, #28
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fa01 f202 	lsl.w	r2, r1, r2
 8000e34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	d108      	bne.n	8000e58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e56:	e007      	b.n	8000e68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	60da      	str	r2, [r3, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e17f      	b.n	8001184 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8171 	beq.w	800117e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d005      	beq.n	8000eb4 <HAL_GPIO_Init+0x40>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d118      	bne.n	8000f54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d017      	beq.n	8000f90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d123      	bne.n	8000fe4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	6939      	ldr	r1, [r7, #16]
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80ac 	beq.w	800117e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b5f      	ldr	r3, [pc, #380]	@ (80011a4 <HAL_GPIO_Init+0x330>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	4a5e      	ldr	r2, [pc, #376]	@ (80011a4 <HAL_GPIO_Init+0x330>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	@ 0x60
 8001032:	4b5c      	ldr	r3, [pc, #368]	@ (80011a4 <HAL_GPIO_Init+0x330>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800103e:	4a5a      	ldr	r2, [pc, #360]	@ (80011a8 <HAL_GPIO_Init+0x334>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001068:	d025      	beq.n	80010b6 <HAL_GPIO_Init+0x242>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4f      	ldr	r2, [pc, #316]	@ (80011ac <HAL_GPIO_Init+0x338>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d01f      	beq.n	80010b2 <HAL_GPIO_Init+0x23e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4e      	ldr	r2, [pc, #312]	@ (80011b0 <HAL_GPIO_Init+0x33c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x23a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4d      	ldr	r2, [pc, #308]	@ (80011b4 <HAL_GPIO_Init+0x340>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x236>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4c      	ldr	r2, [pc, #304]	@ (80011b8 <HAL_GPIO_Init+0x344>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x232>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4b      	ldr	r2, [pc, #300]	@ (80011bc <HAL_GPIO_Init+0x348>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x22e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4a      	ldr	r2, [pc, #296]	@ (80011c0 <HAL_GPIO_Init+0x34c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x22a>
 800109a:	2306      	movs	r3, #6
 800109c:	e00c      	b.n	80010b8 <HAL_GPIO_Init+0x244>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00a      	b.n	80010b8 <HAL_GPIO_Init+0x244>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x244>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x244>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x244>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x244>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x244>
 80010b6:	2300      	movs	r3, #0
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c8:	4937      	ldr	r1, [pc, #220]	@ (80011a8 <HAL_GPIO_Init+0x334>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fa:	4a32      	ldr	r2, [pc, #200]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001100:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001124:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800112a:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114e:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_GPIO_Init+0x350>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa22 f303 	lsr.w	r3, r2, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	f47f ae78 	bne.w	8000e84 <HAL_GPIO_Init+0x10>
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	48000400 	.word	0x48000400
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000c00 	.word	0x48000c00
 80011b8:	48001000 	.word	0x48001000
 80011bc:	48001400 	.word	0x48001400
 80011c0:	48001800 	.word	0x48001800
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e08d      	b.n	80012f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f920 	bl	8000434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2224      	movs	r2, #36	@ 0x24
 80011f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001218:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001228:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	e006      	b.n	8001250 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800124e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d108      	bne.n	800126a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	e007      	b.n	800127a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001278:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800128c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800129c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69d9      	ldr	r1, [r3, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af02      	add	r7, sp, #8
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	461a      	mov	r2, r3
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
 8001310:	4613      	mov	r3, r2
 8001312:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b20      	cmp	r3, #32
 8001322:	f040 80ef 	bne.w	8001504 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001334:	d101      	bne.n	800133a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8001336:	2302      	movs	r3, #2
 8001338:	e0e5      	b.n	8001506 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_I2C_Master_Transmit_DMA+0x48>
 8001344:	2302      	movs	r3, #2
 8001346:	e0de      	b.n	8001506 <HAL_I2C_Master_Transmit_DMA+0x206>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2221      	movs	r2, #33	@ 0x21
 8001354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2210      	movs	r2, #16
 800135c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	893a      	ldrh	r2, [r7, #8]
 8001370:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a66      	ldr	r2, [pc, #408]	@ (8001510 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a66      	ldr	r2, [pc, #408]	@ (8001514 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800137c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001382:	b29b      	uxth	r3, r3
 8001384:	2bff      	cmp	r3, #255	@ 0xff
 8001386:	d906      	bls.n	8001396 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	22ff      	movs	r2, #255	@ 0xff
 800138c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800138e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e007      	b.n	80013a6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013a4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01a      	beq.n	80013e4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013c8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013dc:	3b01      	subs	r3, #1
 80013de:	b29a      	uxth	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d074      	beq.n	80014d6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d022      	beq.n	800143a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f8:	4a47      	ldr	r2, [pc, #284]	@ (8001518 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80013fa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001400:	4a46      	ldr	r2, [pc, #280]	@ (800151c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001410:	2200      	movs	r2, #0
 8001412:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001424:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800142a:	f7ff fb95 	bl	8000b58 <HAL_DMA_Start_IT>
 800142e:	4603      	mov	r3, r0
 8001430:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d13a      	bne.n	80014ae <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8001438:	e013      	b.n	8001462 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2220      	movs	r2, #32
 800143e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e051      	b.n	8001506 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	8979      	ldrh	r1, [r7, #10]
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f001 fd27 	bl	8002ec8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b29a      	uxth	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001494:	2110      	movs	r1, #16
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f001 fd48 	bl	8002f2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e028      	b.n	8001500 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2220      	movs	r2, #32
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f043 0210 	orr.w	r2, r3, #16
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e017      	b.n	8001506 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80014da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	8979      	ldrh	r1, [r7, #10]
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f001 fcec 	bl	8002ec8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80014f8:	2101      	movs	r1, #1
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f001 fd16 	bl	8002f2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001504:	2302      	movs	r3, #2
  }
}
 8001506:	4618      	mov	r0, r3
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	ffff0000 	.word	0xffff0000
 8001514:	08001d3f 	.word	0x08001d3f
 8001518:	08002d17 	.word	0x08002d17
 800151c:	08002e5f 	.word	0x08002e5f
 8001520:	80002000 	.word	0x80002000
 8001524:	080018e3 	.word	0x080018e3

08001528 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	817b      	strh	r3, [r7, #10]
 8001538:	4613      	mov	r3, r2
 800153a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b20      	cmp	r3, #32
 8001546:	f040 80cd 	bne.w	80016e4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001558:	d101      	bne.n	800155e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800155a:	2302      	movs	r3, #2
 800155c:	e0c3      	b.n	80016e6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_I2C_Master_Receive_DMA+0x44>
 8001568:	2302      	movs	r3, #2
 800156a:	e0bc      	b.n	80016e6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2222      	movs	r2, #34	@ 0x22
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2210      	movs	r2, #16
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	893a      	ldrh	r2, [r7, #8]
 8001594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4a55      	ldr	r2, [pc, #340]	@ (80016f0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800159a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a55      	ldr	r2, [pc, #340]	@ (80016f4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	2bff      	cmp	r3, #255	@ 0xff
 80015aa:	d906      	bls.n	80015ba <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80015b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e007      	b.n	80015ca <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015be:	b29a      	uxth	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d070      	beq.n	80016b4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d020      	beq.n	800161c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015de:	4a46      	ldr	r2, [pc, #280]	@ (80016f8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e6:	4a45      	ldr	r2, [pc, #276]	@ (80016fc <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ee:	2200      	movs	r2, #0
 80015f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f6:	2200      	movs	r2, #0
 80015f8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3324      	adds	r3, #36	@ 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800160c:	f7ff faa4 	bl	8000b58 <HAL_DMA_Start_IT>
 8001610:	4603      	mov	r3, r0
 8001612:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001614:	7cfb      	ldrb	r3, [r7, #19]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d138      	bne.n	800168c <HAL_I2C_Master_Receive_DMA+0x164>
 800161a:	e013      	b.n	8001644 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2220      	movs	r2, #32
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001630:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e050      	b.n	80016e6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001648:	b2da      	uxtb	r2, r3
 800164a:	8979      	ldrh	r1, [r7, #10]
 800164c:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f001 fc38 	bl	8002ec8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001672:	2110      	movs	r1, #16
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f001 fc59 	bl	8002f2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e029      	b.n	80016e0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2220      	movs	r2, #32
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	f043 0210 	orr.w	r2, r3, #16
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e018      	b.n	80016e6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a13      	ldr	r2, [pc, #76]	@ (8001704 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	8979      	ldrh	r1, [r7, #10]
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f001 fbfc 	bl	8002ec8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016d8:	2102      	movs	r1, #2
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f001 fc26 	bl	8002f2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e000      	b.n	80016e6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80016e4:	2302      	movs	r3, #2
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	ffff0000 	.word	0xffff0000
 80016f4:	08001d3f 	.word	0x08001d3f
 80016f8:	08002dad 	.word	0x08002dad
 80016fc:	08002e5f 	.word	0x08002e5f
 8001700:	80002400 	.word	0x80002400
 8001704:	080018e3 	.word	0x080018e3

08001708 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	68f9      	ldr	r1, [r7, #12]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
  }
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00f      	beq.n	800177e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00a      	beq.n	800177e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800177c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00f      	beq.n	80017a8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00a      	beq.n	80017a8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f043 0208 	orr.w	r2, r3, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00f      	beq.n	80017d2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c0:	f043 0202 	orr.w	r2, r3, #2
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 030b 	and.w	r3, r3, #11
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80017e2:	68f9      	ldr	r1, [r7, #12]
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f001 f95b 	bl	8002aa0 <I2C_ITError>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	70fb      	strb	r3, [r7, #3]
 800183a:	4613      	mov	r3, r2
 800183c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018bc:	b2db      	uxtb	r3, r3
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b088      	sub	sp, #32
 80018e6:	af02      	add	r7, sp, #8
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <I2C_Master_ISR_IT+0x1e>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e121      	b.n	8001b44 <I2C_Master_ISR_IT+0x262>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b00      	cmp	r3, #0
 8001910:	d012      	beq.n	8001938 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	f043 0204 	orr.w	r2, r3, #4
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f001 f9cc 	bl	8002cce <I2C_Flush_TXDR>
 8001936:	e0f2      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d022      	beq.n	8001988 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01d      	beq.n	8001988 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001986:	e0ca      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d128      	bne.n	80019e4 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001998:	2b00      	cmp	r3, #0
 800199a:	d023      	beq.n	80019e4 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01e      	beq.n	80019e4 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80b6 	beq.w	8001b1e <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80019e2:	e09c      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06a      	beq.n	8001ac4 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d065      	beq.n	8001ac4 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d04e      	beq.n	8001aa0 <I2C_Master_ISR_IT+0x1be>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d14a      	bne.n	8001aa0 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a16:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2bff      	cmp	r3, #255	@ 0xff
 8001a20:	d91c      	bls.n	8001a5c <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d103      	bne.n	8001a3e <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001a3c:	e002      	b.n	8001a44 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	22ff      	movs	r2, #255	@ 0xff
 8001a42:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	8a79      	ldrh	r1, [r7, #18]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f001 fa37 	bl	8002ec8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a5a:	e032      	b.n	8001ac2 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a6e:	d00b      	beq.n	8001a88 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a7a:	8a79      	ldrh	r1, [r7, #18]
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	9000      	str	r0, [sp, #0]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f001 fa21 	bl	8002ec8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a86:	e01c      	b.n	8001ac2 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	8a79      	ldrh	r1, [r7, #18]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f001 fa15 	bl	8002ec8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9e:	e010      	b.n	8001ac2 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001aae:	d003      	beq.n	8001ab8 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fcdc 	bl	800246e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ab6:	e032      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fff0 	bl	8002aa0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ac0:	e02d      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
 8001ac2:	e02c      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d027      	beq.n	8001b1e <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d022      	beq.n	8001b1e <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d119      	bne.n	8001b16 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001af0:	d015      	beq.n	8001b1e <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001afa:	d108      	bne.n	8001b0e <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	e007      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fcad 	bl	800246e <I2C_ITMasterSeqCplt>
 8001b14:	e003      	b.n	8001b1e <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b16:	2140      	movs	r1, #64	@ 0x40
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 ffc1 	bl	8002aa0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001b32:	6979      	ldr	r1, [r7, #20]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fd33 	bl	80025a0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <I2C_Slave_ISR_IT+0x24>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e0e2      	b.n	8001d36 <I2C_Slave_ISR_IT+0x1ea>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b8c:	6939      	ldr	r1, [r7, #16]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fdce 	bl	8002730 <I2C_ITSlaveCplt>
 8001b94:	e0ca      	b.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d04b      	beq.n	8001c38 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d046      	beq.n	8001c38 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d128      	bne.n	8001c06 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b28      	cmp	r3, #40	@ 0x28
 8001bbe:	d108      	bne.n	8001bd2 <I2C_Slave_ISR_IT+0x86>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bc6:	d104      	bne.n	8001bd2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001bc8:	6939      	ldr	r1, [r7, #16]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 ff14 	bl	80029f8 <I2C_ITListenCplt>
 8001bd0:	e031      	b.n	8001c36 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b29      	cmp	r3, #41	@ 0x29
 8001bdc:	d10e      	bne.n	8001bfc <I2C_Slave_ISR_IT+0xb0>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001be4:	d00a      	beq.n	8001bfc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2210      	movs	r2, #16
 8001bec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f001 f86d 	bl	8002cce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fc77 	bl	80024e8 <I2C_ITSlaveSeqCplt>
 8001bfa:	e01c      	b.n	8001c36 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2210      	movs	r2, #16
 8001c02:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001c04:	e08f      	b.n	8001d26 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f043 0204 	orr.w	r2, r3, #4
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <I2C_Slave_ISR_IT+0xdc>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c26:	d17e      	bne.n	8001d26 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 ff36 	bl	8002aa0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c34:	e077      	b.n	8001d26 <I2C_Slave_ISR_IT+0x1da>
 8001c36:	e076      	b.n	8001d26 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d02f      	beq.n	8001ca2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d02a      	beq.n	8001ca2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d018      	beq.n	8001c88 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d14b      	bne.n	8001d2a <I2C_Slave_ISR_IT+0x1de>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c98:	d047      	beq.n	8001d2a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fc24 	bl	80024e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001ca0:	e043      	b.n	8001d2a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001cb6:	6939      	ldr	r1, [r7, #16]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 fb54 	bl	8002366 <I2C_ITAddrCplt>
 8001cbe:	e035      	b.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d030      	beq.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d02b      	beq.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d018      	beq.n	8001d10 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001d0e:	e00d      	b.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d16:	d002      	beq.n	8001d1e <I2C_Slave_ISR_IT+0x1d2>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 fbe2 	bl	80024e8 <I2C_ITSlaveSeqCplt>
 8001d24:	e002      	b.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001d26:	bf00      	nop
 8001d28:	e000      	b.n	8001d2c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001d2a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b088      	sub	sp, #32
 8001d42:	af02      	add	r7, sp, #8
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <I2C_Master_ISR_DMA+0x1a>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0e7      	b.n	8001f28 <I2C_Master_ISR_DMA+0x1ea>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d011      	beq.n	8001d98 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d80:	f043 0204 	orr.w	r2, r3, #4
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d88:	2120      	movs	r1, #32
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f001 f8ce 	bl	8002f2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 ff9c 	bl	8002cce <I2C_Flush_TXDR>
 8001d96:	e0c2      	b.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d07f      	beq.n	8001ea2 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d07a      	beq.n	8001ea2 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dba:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d05c      	beq.n	8001e80 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2bff      	cmp	r3, #255	@ 0xff
 8001ddc:	d914      	bls.n	8001e08 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d103      	bne.n	8001dfa <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001df8:	e002      	b.n	8001e00 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	22ff      	movs	r2, #255	@ 0xff
 8001dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001e00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e010      	b.n	8001e2a <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e1a:	d003      	beq.n	8001e24 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e002      	b.n	8001e2a <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001e24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e28:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	8a79      	ldrh	r1, [r7, #18]
 8001e32:	2300      	movs	r3, #0
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f001 f845 	bl	8002ec8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b22      	cmp	r3, #34	@ 0x22
 8001e5a:	d108      	bne.n	8001e6e <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e6c:	e057      	b.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e7e:	e04e      	b.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e8e:	d003      	beq.n	8001e98 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 faec 	bl	800246e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001e96:	e042      	b.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e98:	2140      	movs	r1, #64	@ 0x40
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fe00 	bl	8002aa0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001ea0:	e03d      	b.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d028      	beq.n	8001efe <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d023      	beq.n	8001efe <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d119      	bne.n	8001ef4 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ece:	d025      	beq.n	8001f1c <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ed8:	d108      	bne.n	8001eec <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ee8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001eea:	e017      	b.n	8001f1c <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fabe 	bl	800246e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001ef2:	e013      	b.n	8001f1c <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ef4:	2140      	movs	r1, #64	@ 0x40
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fdd2 	bl	8002aa0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001efc:	e00e      	b.n	8001f1c <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fb43 	bl	80025a0 <I2C_ITMasterCplt>
 8001f1a:	e000      	b.n	8001f1e <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001f1c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001f3c:	4b90      	ldr	r3, [pc, #576]	@ (8002180 <I2C_Mem_ISR_DMA+0x250>)
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <I2C_Mem_ISR_DMA+0x1e>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e12f      	b.n	80021ae <I2C_Mem_ISR_DMA+0x27e>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d011      	beq.n	8001f8e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0204 	orr.w	r2, r3, #4
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f7e:	2120      	movs	r1, #32
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 ffd3 	bl	8002f2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fea1 	bl	8002cce <I2C_Flush_TXDR>
 8001f8c:	e10a      	b.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fb4:	e0f6      	b.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d06d      	beq.n	800209c <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d068      	beq.n	800209c <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fca:	2101      	movs	r1, #1
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f001 f831 	bl	8003034 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 ffa9 	bl	8002f2c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d056      	beq.n	8002092 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2bff      	cmp	r3, #255	@ 0xff
 8001fec:	d91e      	bls.n	800202c <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d103      	bne.n	800200a <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002008:	e002      	b.n	8002010 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	22ff      	movs	r2, #255	@ 0xff
 800200e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002014:	b299      	uxth	r1, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201a:	b2da      	uxtb	r2, r3
 800201c:	2300      	movs	r3, #0
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 ff4f 	bl	8002ec8 <I2C_TransferConfig>
 800202a:	e011      	b.n	8002050 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	b299      	uxth	r1, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	b2da      	uxtb	r2, r3
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 ff3c 	bl	8002ec8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b22      	cmp	r3, #34	@ 0x22
 800206c:	d108      	bne.n	8002080 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800207c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800207e:	e091      	b.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800208e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002090:	e088      	b.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002092:	2140      	movs	r1, #64	@ 0x40
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fd03 	bl	8002aa0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800209a:	e083      	b.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d070      	beq.n	8002188 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d06b      	beq.n	8002188 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020b0:	2101      	movs	r1, #1
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 ffbe 	bl	8003034 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80020b8:	2110      	movs	r1, #16
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 ff36 	bl	8002f2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b22      	cmp	r3, #34	@ 0x22
 80020ca:	d101      	bne.n	80020d0 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <I2C_Mem_ISR_DMA+0x254>)
 80020ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2bff      	cmp	r3, #255	@ 0xff
 80020d8:	d91e      	bls.n	8002118 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d103      	bne.n	80020f6 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80020f4:	e002      	b.n	80020fc <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	22ff      	movs	r2, #255	@ 0xff
 80020fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	b299      	uxth	r1, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002106:	b2da      	uxtb	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fed9 	bl	8002ec8 <I2C_TransferConfig>
 8002116:	e011      	b.n	800213c <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	b299      	uxth	r1, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212c:	b2da      	uxtb	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fec6 	bl	8002ec8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b22      	cmp	r3, #34	@ 0x22
 8002158:	d108      	bne.n	800216c <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002168:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800216a:	e01b      	b.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800217a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800217c:	e012      	b.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
 800217e:	bf00      	nop
 8002180:	80002000 	.word	0x80002000
 8002184:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f9fe 	bl	80025a0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop

080021b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <I2C_Slave_ISR_DMA+0x24>
 80021d8:	2302      	movs	r3, #2
 80021da:	e0c0      	b.n	800235e <I2C_Slave_ISR_DMA+0x1a6>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fa98 	bl	8002730 <I2C_ITSlaveCplt>
 8002200:	e0a8      	b.n	8002354 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8095 	beq.w	8002338 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 808f 	beq.w	8002338 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d104      	bne.n	800222e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	d07d      	beq.n	800232a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800224c:	2301      	movs	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800226e:	2301      	movs	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d128      	bne.n	80022ca <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b28      	cmp	r3, #40	@ 0x28
 8002282:	d108      	bne.n	8002296 <I2C_Slave_ISR_DMA+0xde>
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800228a:	d104      	bne.n	8002296 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fbb2 	bl	80029f8 <I2C_ITListenCplt>
 8002294:	e048      	b.n	8002328 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b29      	cmp	r3, #41	@ 0x29
 80022a0:	d10e      	bne.n	80022c0 <I2C_Slave_ISR_DMA+0x108>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022a8:	d00a      	beq.n	80022c0 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2210      	movs	r2, #16
 80022b0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fd0b 	bl	8002cce <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f915 	bl	80024e8 <I2C_ITSlaveSeqCplt>
 80022be:	e033      	b.n	8002328 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2210      	movs	r2, #16
 80022c6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80022c8:	e034      	b.n	8002334 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2210      	movs	r2, #16
 80022d0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <I2C_Slave_ISR_DMA+0x13c>
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f2:	d11f      	bne.n	8002334 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b21      	cmp	r3, #33	@ 0x21
 80022f8:	d002      	beq.n	8002300 <I2C_Slave_ISR_DMA+0x148>
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b29      	cmp	r3, #41	@ 0x29
 80022fe:	d103      	bne.n	8002308 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2221      	movs	r2, #33	@ 0x21
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
 8002306:	e008      	b.n	800231a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b22      	cmp	r3, #34	@ 0x22
 800230c:	d002      	beq.n	8002314 <I2C_Slave_ISR_DMA+0x15c>
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b2a      	cmp	r3, #42	@ 0x2a
 8002312:	d102      	bne.n	800231a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2222      	movs	r2, #34	@ 0x22
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	4619      	mov	r1, r3
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fbbd 	bl	8002aa0 <I2C_ITError>
      if (treatdmanack == 1U)
 8002326:	e005      	b.n	8002334 <I2C_Slave_ISR_DMA+0x17c>
 8002328:	e004      	b.n	8002334 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2210      	movs	r2, #16
 8002330:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002332:	e00f      	b.n	8002354 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002334:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002336:	e00d      	b.n	8002354 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f809 	bl	8002366 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800237c:	2b28      	cmp	r3, #40	@ 0x28
 800237e:	d16a      	bne.n	8002456 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	0c1b      	lsrs	r3, r3, #16
 8002398:	b29b      	uxth	r3, r3
 800239a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800239e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80023ba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d138      	bne.n	8002436 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80023c4:	897b      	ldrh	r3, [r7, #10]
 80023c6:	09db      	lsrs	r3, r3, #7
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	89bb      	ldrh	r3, [r7, #12]
 80023cc:	4053      	eors	r3, r2
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f003 0306 	and.w	r3, r3, #6
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11c      	bne.n	8002412 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80023d8:	897b      	ldrh	r3, [r7, #10]
 80023da:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d13b      	bne.n	8002466 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2208      	movs	r2, #8
 80023fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002404:	89ba      	ldrh	r2, [r7, #12]
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fa0f 	bl	800182e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002410:	e029      	b.n	8002466 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002412:	893b      	ldrh	r3, [r7, #8]
 8002414:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fe0a 	bl	8003034 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002428:	89ba      	ldrh	r2, [r7, #12]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff f9fd 	bl	800182e <HAL_I2C_AddrCallback>
}
 8002434:	e017      	b.n	8002466 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002436:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fdfa 	bl	8003034 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002448:	89ba      	ldrh	r2, [r7, #12]
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4619      	mov	r1, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff f9ed 	bl	800182e <HAL_I2C_AddrCallback>
}
 8002454:	e007      	b.n	8002466 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b21      	cmp	r3, #33	@ 0x21
 8002488:	d115      	bne.n	80024b6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2211      	movs	r2, #17
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800249e:	2101      	movs	r1, #1
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fdc7 	bl	8003034 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fd fe8a 	bl	80001c8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024b4:	e014      	b.n	80024e0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2212      	movs	r2, #18
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024ca:	2102      	movs	r1, #2
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fdb1 	bl	8003034 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff f989 	bl	80017f2 <HAL_I2C_MasterRxCpltCallback>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e00c      	b.n	8002536 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002534:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b29      	cmp	r3, #41	@ 0x29
 8002540:	d112      	bne.n	8002568 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2228      	movs	r2, #40	@ 0x28
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2221      	movs	r2, #33	@ 0x21
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002550:	2101      	movs	r1, #1
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fd6e 	bl	8003034 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff f950 	bl	8001806 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002566:	e017      	b.n	8002598 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b2a      	cmp	r3, #42	@ 0x2a
 8002572:	d111      	bne.n	8002598 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2228      	movs	r2, #40	@ 0x28
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2222      	movs	r2, #34	@ 0x22
 8002580:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002582:	2102      	movs	r1, #2
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fd55 	bl	8003034 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff f941 	bl	800181a <HAL_I2C_SlaveRxCpltCallback>
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2220      	movs	r2, #32
 80025b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b21      	cmp	r3, #33	@ 0x21
 80025c0:	d107      	bne.n	80025d2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025c2:	2101      	movs	r1, #1
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fd35 	bl	8003034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2211      	movs	r2, #17
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d0:	e00c      	b.n	80025ec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b22      	cmp	r3, #34	@ 0x22
 80025dc:	d106      	bne.n	80025ec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025de:	2102      	movs	r1, #2
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fd27 	bl	8003034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2212      	movs	r2, #18
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002728 <I2C_ITMasterCplt+0x188>)
 80025f8:	400b      	ands	r3, r1
 80025fa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	@ (800272c <I2C_ITMasterCplt+0x18c>)
 8002606:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2210      	movs	r2, #16
 8002618:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f043 0204 	orr.w	r2, r3, #4
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b60      	cmp	r3, #96	@ 0x60
 8002630:	d10a      	bne.n	8002648 <I2C_ITMasterCplt+0xa8>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	b2db      	uxtb	r3, r3
 8002644:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002646:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fb40 	bl	8002cce <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b60      	cmp	r3, #96	@ 0x60
 800265e:	d002      	beq.n	8002666 <I2C_ITMasterCplt+0xc6>
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d006      	beq.n	8002674 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fa17 	bl	8002aa0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002672:	e054      	b.n	800271e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b21      	cmp	r3, #33	@ 0x21
 800267e:	d124      	bne.n	80026ca <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b40      	cmp	r3, #64	@ 0x40
 8002698:	d10b      	bne.n	80026b2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff f8d7 	bl	800185e <HAL_I2C_MemTxCpltCallback>
}
 80026b0:	e035      	b.n	800271e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fd fd80 	bl	80001c8 <HAL_I2C_MasterTxCpltCallback>
}
 80026c8:	e029      	b.n	800271e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b22      	cmp	r3, #34	@ 0x22
 80026d4:	d123      	bne.n	800271e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b40      	cmp	r3, #64	@ 0x40
 80026ee:	d10b      	bne.n	8002708 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff f8b6 	bl	8001872 <HAL_I2C_MemRxCpltCallback>
}
 8002706:	e00a      	b.n	800271e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff f86a 	bl	80017f2 <HAL_I2C_MasterRxCpltCallback>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	fe00e800 	.word	0xfe00e800
 800272c:	ffff0000 	.word	0xffff0000

08002730 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002752:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2220      	movs	r2, #32
 800275a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	2b21      	cmp	r3, #33	@ 0x21
 8002760:	d002      	beq.n	8002768 <I2C_ITSlaveCplt+0x38>
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	2b29      	cmp	r3, #41	@ 0x29
 8002766:	d108      	bne.n	800277a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002768:	f248 0101 	movw	r1, #32769	@ 0x8001
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fc61 	bl	8003034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2221      	movs	r2, #33	@ 0x21
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
 8002778:	e019      	b.n	80027ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	2b22      	cmp	r3, #34	@ 0x22
 800277e:	d002      	beq.n	8002786 <I2C_ITSlaveCplt+0x56>
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	2b2a      	cmp	r3, #42	@ 0x2a
 8002784:	d108      	bne.n	8002798 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002786:	f248 0102 	movw	r1, #32770	@ 0x8002
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fc52 	bl	8003034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2222      	movs	r2, #34	@ 0x22
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30
 8002796:	e00a      	b.n	80027ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002798:	7afb      	ldrb	r3, [r7, #11]
 800279a:	2b28      	cmp	r3, #40	@ 0x28
 800279c:	d107      	bne.n	80027ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800279e:	f248 0103 	movw	r1, #32771	@ 0x8003
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc46 	bl	8003034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b89      	ldr	r3, [pc, #548]	@ (80029f0 <I2C_ITSlaveCplt+0x2c0>)
 80027ca:	400b      	ands	r3, r1
 80027cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fa7d 	bl	8002cce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d013      	beq.n	8002806 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01f      	beq.n	8002836 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002804:	e017      	b.n	8002836 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d049      	beq.n	8002936 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d044      	beq.n	8002936 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d128      	bne.n	8002908 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b28      	cmp	r3, #40	@ 0x28
 80028c0:	d108      	bne.n	80028d4 <I2C_ITSlaveCplt+0x1a4>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028c8:	d104      	bne.n	80028d4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028ca:	6979      	ldr	r1, [r7, #20]
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f893 	bl	80029f8 <I2C_ITListenCplt>
 80028d2:	e030      	b.n	8002936 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b29      	cmp	r3, #41	@ 0x29
 80028de:	d10e      	bne.n	80028fe <I2C_ITSlaveCplt+0x1ce>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028e6:	d00a      	beq.n	80028fe <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f9ec 	bl	8002cce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fdf6 	bl	80024e8 <I2C_ITSlaveSeqCplt>
 80028fc:	e01b      	b.n	8002936 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2210      	movs	r2, #16
 8002904:	61da      	str	r2, [r3, #28]
 8002906:	e016      	b.n	8002936 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2210      	movs	r2, #16
 800290e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <I2C_ITSlaveCplt+0x1fa>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002928:	d105      	bne.n	8002936 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8b5 	bl	8002aa0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002948:	2b00      	cmp	r3, #0
 800294a:	d010      	beq.n	800296e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8a4 	bl	8002aa0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b28      	cmp	r3, #40	@ 0x28
 8002962:	d141      	bne.n	80029e8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002964:	6979      	ldr	r1, [r7, #20]
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f846 	bl	80029f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800296c:	e03c      	b.n	80029e8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002976:	d014      	beq.n	80029a2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fdb5 	bl	80024e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <I2C_ITSlaveCplt+0x2c4>)
 8002982:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe ff55 	bl	800184a <HAL_I2C_ListenCpltCallback>
}
 80029a0:	e022      	b.n	80029e8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b22      	cmp	r3, #34	@ 0x22
 80029ac:	d10e      	bne.n	80029cc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fe ff28 	bl	800181a <HAL_I2C_SlaveRxCpltCallback>
}
 80029ca:	e00d      	b.n	80029e8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe ff0f 	bl	8001806 <HAL_I2C_SlaveTxCpltCallback>
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	fe00e800 	.word	0xfe00e800
 80029f4:	ffff0000 	.word	0xffff0000

080029f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a25      	ldr	r2, [pc, #148]	@ (8002a9c <I2C_ITListenCplt+0xa4>)
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d022      	beq.n	8002a74 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a74:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fadb 	bl	8003034 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2210      	movs	r2, #16
 8002a84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fedb 	bl	800184a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	ffff0000 	.word	0xffff0000

08002aa0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a6d      	ldr	r2, [pc, #436]	@ (8002c74 <I2C_ITError+0x1d4>)
 8002abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b28      	cmp	r3, #40	@ 0x28
 8002ad6:	d005      	beq.n	8002ae4 <I2C_ITError+0x44>
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b29      	cmp	r3, #41	@ 0x29
 8002adc:	d002      	beq.n	8002ae4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ae2:	d10b      	bne.n	8002afc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 faa4 	bl	8003034 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2228      	movs	r2, #40	@ 0x28
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a60      	ldr	r2, [pc, #384]	@ (8002c78 <I2C_ITError+0x1d8>)
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002afa:	e030      	b.n	8002b5e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002afc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fa97 	bl	8003034 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8e1 	bl	8002cce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b60      	cmp	r3, #96	@ 0x60
 8002b16:	d01f      	beq.n	8002b58 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d114      	bne.n	8002b58 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d109      	bne.n	8002b50 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2210      	movs	r2, #16
 8002b42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2220      	movs	r2, #32
 8002b56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d039      	beq.n	8002be0 <I2C_ITError+0x140>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b11      	cmp	r3, #17
 8002b70:	d002      	beq.n	8002b78 <I2C_ITError+0xd8>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b21      	cmp	r3, #33	@ 0x21
 8002b76:	d133      	bne.n	8002be0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b86:	d107      	bne.n	8002b98 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe f92b 	bl	8000df8 <HAL_DMA_GetState>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d017      	beq.n	8002bd8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	4a33      	ldr	r2, [pc, #204]	@ (8002c7c <I2C_ITError+0x1dc>)
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f82b 	bl	8000c18 <HAL_DMA_Abort_IT>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d04d      	beq.n	8002c64 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bd6:	e045      	b.n	8002c64 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f851 	bl	8002c80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bde:	e041      	b.n	8002c64 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d039      	beq.n	8002c5c <I2C_ITError+0x1bc>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	d002      	beq.n	8002bf4 <I2C_ITError+0x154>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b22      	cmp	r3, #34	@ 0x22
 8002bf2:	d133      	bne.n	8002c5c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c02:	d107      	bne.n	8002c14 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f8ed 	bl	8000df8 <HAL_DMA_GetState>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d017      	beq.n	8002c54 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <I2C_ITError+0x1dc>)
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd ffed 	bl	8000c18 <HAL_DMA_Abort_IT>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d011      	beq.n	8002c68 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c52:	e009      	b.n	8002c68 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f813 	bl	8002c80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c5a:	e005      	b.n	8002c68 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f80f 	bl	8002c80 <I2C_TreatErrorCallback>
  }
}
 8002c62:	e002      	b.n	8002c6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c68:	bf00      	nop
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	ffff0000 	.word	0xffff0000
 8002c78:	08001b4d 	.word	0x08001b4d
 8002c7c:	08002e8d 	.word	0x08002e8d

08002c80 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b60      	cmp	r3, #96	@ 0x60
 8002c92:	d10e      	bne.n	8002cb2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fdf5 	bl	800189a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cb0:	e009      	b.n	8002cc6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fe fde0 	bl	8001886 <HAL_I2C_ErrorCallback>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d103      	bne.n	8002cec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d007      	beq.n	8002d0a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	619a      	str	r2, [r3, #24]
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d32:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d104      	bne.n	8002d48 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d3e:	2120      	movs	r1, #32
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f8f3 	bl	8002f2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002d46:	e02d      	b.n	8002da4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002d50:	441a      	add	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2bff      	cmp	r3, #255	@ 0xff
 8002d5e:	d903      	bls.n	8002d68 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	22ff      	movs	r2, #255	@ 0xff
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d66:	e004      	b.n	8002d72 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3328      	adds	r3, #40	@ 0x28
 8002d82:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002d88:	f7fd fee6 	bl	8000b58 <HAL_DMA_Start_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002d92:	2110      	movs	r1, #16
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fe83 	bl	8002aa0 <I2C_ITError>
}
 8002d9a:	e003      	b.n	8002da4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002d9c:	2140      	movs	r1, #64	@ 0x40
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f8c4 	bl	8002f2c <I2C_Enable_IRQ>
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dc8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f8a8 	bl	8002f2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002ddc:	e03b      	b.n	8002e56 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002de6:	441a      	add	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	@ 0xff
 8002df4:	d911      	bls.n	8002e1a <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d103      	bne.n	8002e12 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e10:	e008      	b.n	8002e24 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	22ff      	movs	r2, #255	@ 0xff
 8002e16:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e18:	e004      	b.n	8002e24 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3324      	adds	r3, #36	@ 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e3a:	f7fd fe8d 	bl	8000b58 <HAL_DMA_Start_IT>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002e44:	2110      	movs	r1, #16
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fe2a 	bl	8002aa0 <I2C_ITError>
}
 8002e4c:	e003      	b.n	8002e56 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002e4e:	2140      	movs	r1, #64	@ 0x40
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f86b 	bl	8002f2c <I2C_Enable_IRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002e7c:	2110      	movs	r1, #16
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7ff fe0e 	bl	8002aa0 <I2C_ITError>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff fee0 	bl	8002c80 <I2C_TreatErrorCallback>
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee0:	7a7b      	ldrb	r3, [r7, #9]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ef6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	0d5b      	lsrs	r3, r3, #21
 8002f02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f06:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <I2C_TransferConfig+0x60>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	ea02 0103 	and.w	r1, r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	03ff63ff 	.word	0x03ff63ff

08002f2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f40:	4a39      	ldr	r2, [pc, #228]	@ (8003028 <I2C_Enable_IRQ+0xfc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d032      	beq.n	8002fac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f4a:	4a38      	ldr	r2, [pc, #224]	@ (800302c <I2C_Enable_IRQ+0x100>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d02d      	beq.n	8002fac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f54:	4a36      	ldr	r2, [pc, #216]	@ (8003030 <I2C_Enable_IRQ+0x104>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d028      	beq.n	8002fac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da03      	bge.n	8002f6a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002f7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002f8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d103      	bne.n	8002f9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002f9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d133      	bne.n	800300a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f043 0320 	orr.w	r3, r3, #32
 8002fa8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002faa:	e02e      	b.n	800300a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da03      	bge.n	8002fbc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002fba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002fcc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002fde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d103      	bne.n	8002fee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002fec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d103      	bne.n	8002ffc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ffa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	2b40      	cmp	r3, #64	@ 0x40
 8003000:	d103      	bne.n	800300a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003008:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	08001d3f 	.word	0x08001d3f
 800302c:	080021b9 	.word	0x080021b9
 8003030:	08001f31 	.word	0x08001f31

08003034 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00f      	beq.n	800306e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003054:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003062:	2b28      	cmp	r3, #40	@ 0x28
 8003064:	d003      	beq.n	800306e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800306c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00f      	beq.n	8003098 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800307e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800308c:	2b28      	cmp	r3, #40	@ 0x28
 800308e:	d003      	beq.n	8003098 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003096:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003098:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da03      	bge.n	80030a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d103      	bne.n	80030b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d103      	bne.n	80030c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f043 0320 	orr.w	r3, r3, #32
 80030c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	2b40      	cmp	r3, #64	@ 0x40
 80030c8:	d103      	bne.n	80030d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43da      	mvns	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	400a      	ands	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	d138      	bne.n	8003178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003110:	2302      	movs	r3, #2
 8003112:	e032      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	@ 0x24
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	d139      	bne.n	8003210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e033      	b.n	8003212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	@ 0x24
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003224:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <HAL_PWREx_GetVoltageRange+0x18>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40007000 	.word	0x40007000

0800323c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800324a:	d130      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800324c:	4b23      	ldr	r3, [pc, #140]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003258:	d038      	beq.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800325a:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003262:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800326a:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2232      	movs	r2, #50	@ 0x32
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	3301      	adds	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003280:	e002      	b.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3b01      	subs	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003288:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003294:	d102      	bne.n	800329c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f2      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800329c:	4b0f      	ldr	r3, [pc, #60]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a8:	d110      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e00f      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d007      	beq.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032bc:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032c4:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000
 80032e0:	20000000 	.word	0x20000000
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e3ca      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4b97      	ldr	r3, [pc, #604]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003304:	4b94      	ldr	r3, [pc, #592]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80e4 	beq.w	80034e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_RCC_OscConfig+0x4a>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	f040 808b 	bne.w	8003440 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 8087 	bne.w	8003440 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003332:	4b89      	ldr	r3, [pc, #548]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_RCC_OscConfig+0x62>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e3a2      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	4b82      	ldr	r3, [pc, #520]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_RCC_OscConfig+0x7c>
 800335a:	4b7f      	ldr	r3, [pc, #508]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003362:	e005      	b.n	8003370 <HAL_RCC_OscConfig+0x88>
 8003364:	4b7c      	ldr	r3, [pc, #496]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003370:	4293      	cmp	r3, r2
 8003372:	d223      	bcs.n	80033bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fd1d 	bl	8003db8 <RCC_SetFlashLatencyFromMSIRange>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e383      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003388:	4b73      	ldr	r3, [pc, #460]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a72      	ldr	r2, [pc, #456]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800338e:	f043 0308 	orr.w	r3, r3, #8
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b70      	ldr	r3, [pc, #448]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	496d      	ldr	r1, [pc, #436]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	4968      	ldr	r1, [pc, #416]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
 80033ba:	e025      	b.n	8003408 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033bc:	4b66      	ldr	r3, [pc, #408]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a65      	ldr	r2, [pc, #404]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033c2:	f043 0308 	orr.w	r3, r3, #8
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b63      	ldr	r3, [pc, #396]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4960      	ldr	r1, [pc, #384]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033da:	4b5f      	ldr	r3, [pc, #380]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	495b      	ldr	r1, [pc, #364]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fcdd 	bl	8003db8 <RCC_SetFlashLatencyFromMSIRange>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e343      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003408:	f000 fc4a 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b52      	ldr	r3, [pc, #328]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	4950      	ldr	r1, [pc, #320]	@ (800355c <HAL_RCC_OscConfig+0x274>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	4a4e      	ldr	r2, [pc, #312]	@ (8003560 <HAL_RCC_OscConfig+0x278>)
 8003426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003428:	4b4e      	ldr	r3, [pc, #312]	@ (8003564 <HAL_RCC_OscConfig+0x27c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd f96d 	bl	800070c <HAL_InitTick>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d052      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	e327      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d032      	beq.n	80034ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003448:	4b43      	ldr	r3, [pc, #268]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a42      	ldr	r2, [pc, #264]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003454:	f7fd f9aa 	bl	80007ac <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800345c:	f7fd f9a6 	bl	80007ac <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e310      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346e:	4b3a      	ldr	r3, [pc, #232]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347a:	4b37      	ldr	r3, [pc, #220]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a36      	ldr	r2, [pc, #216]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b34      	ldr	r3, [pc, #208]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4931      	ldr	r1, [pc, #196]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003498:	4b2f      	ldr	r3, [pc, #188]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	492c      	ldr	r1, [pc, #176]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
 80034ac:	e01a      	b.n	80034e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a29      	ldr	r2, [pc, #164]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ba:	f7fd f977 	bl	80007ac <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c2:	f7fd f973 	bl	80007ac <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e2dd      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034d4:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f0      	bne.n	80034c2 <HAL_RCC_OscConfig+0x1da>
 80034e0:	e000      	b.n	80034e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d074      	beq.n	80035da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x21a>
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d10e      	bne.n	800351a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d10b      	bne.n	800351a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d064      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2f0>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d160      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e2ba      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x24a>
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0b      	ldr	r2, [pc, #44]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e026      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800353a:	d115      	bne.n	8003568 <HAL_RCC_OscConfig+0x280>
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a05      	ldr	r2, [pc, #20]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 8003542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b03      	ldr	r3, [pc, #12]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a02      	ldr	r2, [pc, #8]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e014      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	08004860 	.word	0x08004860
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004
 8003568:	4ba0      	ldr	r3, [pc, #640]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a9f      	ldr	r2, [pc, #636]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b9d      	ldr	r3, [pc, #628]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a9c      	ldr	r2, [pc, #624]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 800357a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800357e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd f910 	bl	80007ac <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fd f90c 	bl	80007ac <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	@ 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e276      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	4b92      	ldr	r3, [pc, #584]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x2a8>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd f8fc 	bl	80007ac <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fd f8f8 	bl	80007ac <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	@ 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e262      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ca:	4b88      	ldr	r3, [pc, #544]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2d0>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d060      	beq.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_OscConfig+0x310>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d119      	bne.n	8003626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d116      	bne.n	8003626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f8:	4b7c      	ldr	r3, [pc, #496]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_OscConfig+0x328>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e23f      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b76      	ldr	r3, [pc, #472]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	4973      	ldr	r1, [pc, #460]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	e040      	b.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d023      	beq.n	8003676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362e:	4b6f      	ldr	r3, [pc, #444]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6e      	ldr	r2, [pc, #440]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fd f8b7 	bl	80007ac <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003642:	f7fd f8b3 	bl	80007ac <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e21d      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	4b65      	ldr	r3, [pc, #404]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b62      	ldr	r3, [pc, #392]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	495f      	ldr	r1, [pc, #380]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
 8003674:	e018      	b.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b5d      	ldr	r3, [pc, #372]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5c      	ldr	r2, [pc, #368]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 800367c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd f893 	bl	80007ac <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7fd f88f 	bl	80007ac <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1f9      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03c      	beq.n	800372e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036bc:	4b4b      	ldr	r3, [pc, #300]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036c2:	4a4a      	ldr	r2, [pc, #296]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd f86e 	bl	80007ac <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fd f86a 	bl	80007ac <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1d4      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036e6:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80036e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCC_OscConfig+0x3ec>
 80036f4:	e01b      	b.n	800372e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f6:	4b3d      	ldr	r3, [pc, #244]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80036f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036fc:	4a3b      	ldr	r2, [pc, #236]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fd f851 	bl	80007ac <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370e:	f7fd f84d 	bl	80007ac <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e1b7      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003720:	4b32      	ldr	r3, [pc, #200]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80a6 	beq.w	8003888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003740:	4b2a      	ldr	r3, [pc, #168]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10d      	bne.n	8003768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003750:	4a26      	ldr	r2, [pc, #152]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003756:	6593      	str	r3, [r2, #88]	@ 0x58
 8003758:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003764:	2301      	movs	r3, #1
 8003766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003768:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <HAL_RCC_OscConfig+0x508>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d118      	bne.n	80037a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003774:	4b1e      	ldr	r3, [pc, #120]	@ (80037f0 <HAL_RCC_OscConfig+0x508>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1d      	ldr	r2, [pc, #116]	@ (80037f0 <HAL_RCC_OscConfig+0x508>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003780:	f7fd f814 	bl	80007ac <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fd f810 	bl	80007ac <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e17a      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <HAL_RCC_OscConfig+0x508>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4d8>
 80037ae:	4b0f      	ldr	r3, [pc, #60]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b4:	4a0d      	ldr	r2, [pc, #52]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037be:	e029      	b.n	8003814 <HAL_RCC_OscConfig+0x52c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d115      	bne.n	80037f4 <HAL_RCC_OscConfig+0x50c>
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	4a07      	ldr	r2, [pc, #28]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d8:	4b04      	ldr	r3, [pc, #16]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	4a03      	ldr	r2, [pc, #12]	@ (80037ec <HAL_RCC_OscConfig+0x504>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e8:	e014      	b.n	8003814 <HAL_RCC_OscConfig+0x52c>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40007000 	.word	0x40007000
 80037f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a9b      	ldr	r2, [pc, #620]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003804:	4b98      	ldr	r3, [pc, #608]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	4a97      	ldr	r2, [pc, #604]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fc ffc6 	bl	80007ac <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fc ffc2 	bl	80007ac <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e12a      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ed      	beq.n	8003824 <HAL_RCC_OscConfig+0x53c>
 8003848:	e015      	b.n	8003876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fc ffaf 	bl	80007ac <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fc ffab 	bl	80007ac <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e113      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003868:	4b7f      	ldr	r3, [pc, #508]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ed      	bne.n	8003852 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7ffb      	ldrb	r3, [r7, #31]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b7a      	ldr	r3, [pc, #488]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	4a79      	ldr	r2, [pc, #484]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003886:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80fe 	beq.w	8003a8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	2b02      	cmp	r3, #2
 8003898:	f040 80d0 	bne.w	8003a3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800389c:	4b72      	ldr	r3, [pc, #456]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0203 	and.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d130      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	3b01      	subs	r3, #1
 80038bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d127      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d11f      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038dc:	2a07      	cmp	r2, #7
 80038de:	bf14      	ite	ne
 80038e0:	2201      	movne	r2, #1
 80038e2:	2200      	moveq	r2, #0
 80038e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d113      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d06e      	beq.n	80039f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d069      	beq.n	80039ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003924:	4b50      	ldr	r3, [pc, #320]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0ad      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003934:	4b4c      	ldr	r3, [pc, #304]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a4b      	ldr	r2, [pc, #300]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800393a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003940:	f7fc ff34 	bl	80007ac <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fc ff30 	bl	80007ac <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e09a      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395a:	4b43      	ldr	r3, [pc, #268]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003966:	4b40      	ldr	r3, [pc, #256]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <HAL_RCC_OscConfig+0x784>)
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003976:	3a01      	subs	r2, #1
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003980:	0212      	lsls	r2, r2, #8
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003988:	0852      	lsrs	r2, r2, #1
 800398a:	3a01      	subs	r2, #1
 800398c:	0552      	lsls	r2, r2, #21
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003994:	0852      	lsrs	r2, r2, #1
 8003996:	3a01      	subs	r2, #1
 8003998:	0652      	lsls	r2, r2, #25
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039a0:	0912      	lsrs	r2, r2, #4
 80039a2:	0452      	lsls	r2, r2, #17
 80039a4:	430a      	orrs	r2, r1
 80039a6:	4930      	ldr	r1, [pc, #192]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039c4:	f7fc fef2 	bl	80007ac <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fc feee 	bl	80007ac <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e058      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	4b22      	ldr	r3, [pc, #136]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ea:	e050      	b.n	8003a8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04f      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d148      	bne.n	8003a8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a19      	ldr	r2, [pc, #100]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a08:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a16      	ldr	r2, [pc, #88]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a14:	f7fc feca 	bl	80007ac <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fc fec6 	bl	80007ac <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e030      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x734>
 8003a3a:	e028      	b.n	8003a8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d023      	beq.n	8003a8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a08      	ldr	r2, [pc, #32]	@ (8003a68 <HAL_RCC_OscConfig+0x780>)
 8003a48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fc fead 	bl	80007ac <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a54:	e00c      	b.n	8003a70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a56:	f7fc fea9 	bl	80007ac <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d905      	bls.n	8003a70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e013      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a70:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_RCC_OscConfig+0x7b0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ec      	bne.n	8003a56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a7c:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <HAL_RCC_OscConfig+0x7b0>)
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4905      	ldr	r1, [pc, #20]	@ (8003a98 <HAL_RCC_OscConfig+0x7b0>)
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <HAL_RCC_OscConfig+0x7b4>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]
 8003a88:	e001      	b.n	8003a8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	feeefffc 	.word	0xfeeefffc

08003aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0e7      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b75      	ldr	r3, [pc, #468]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d910      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b72      	ldr	r3, [pc, #456]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0207 	bic.w	r2, r3, #7
 8003aca:	4970      	ldr	r1, [pc, #448]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0cf      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d010      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	4b66      	ldr	r3, [pc, #408]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d908      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b63      	ldr	r3, [pc, #396]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4960      	ldr	r1, [pc, #384]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d04c      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	4b5a      	ldr	r3, [pc, #360]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d121      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0a6      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3e:	4b54      	ldr	r3, [pc, #336]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d115      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e09a      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b56:	4b4e      	ldr	r3, [pc, #312]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e08e      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b66:	4b4a      	ldr	r3, [pc, #296]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e086      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b46      	ldr	r3, [pc, #280]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4943      	ldr	r1, [pc, #268]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fc fe10 	bl	80007ac <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fc fe0c 	bl	80007ac <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e06e      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	4b31      	ldr	r3, [pc, #196]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d208      	bcs.n	8003be6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	492b      	ldr	r1, [pc, #172]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be6:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d210      	bcs.n	8003c16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf4:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 0207 	bic.w	r2, r3, #7
 8003bfc:	4923      	ldr	r1, [pc, #140]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c04:	4b21      	ldr	r3, [pc, #132]	@ (8003c8c <HAL_RCC_ClockConfig+0x1ec>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e036      	b.n	8003c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c22:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4918      	ldr	r1, [pc, #96]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c40:	4b13      	ldr	r3, [pc, #76]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4910      	ldr	r1, [pc, #64]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c54:	f000 f824 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	490b      	ldr	r1, [pc, #44]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f4>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	4a09      	ldr	r2, [pc, #36]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f8>)
 8003c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_ClockConfig+0x1fc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fd47 	bl	800070c <HAL_InitTick>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c82:	7afb      	ldrb	r3, [r7, #11]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08004860 	.word	0x08004860
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	20000004 	.word	0x20000004

08003ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	@ 0x24
 8003ca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cae:	4b3e      	ldr	r3, [pc, #248]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0c      	cmp	r3, #12
 8003ccc:	d121      	bne.n	8003d12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d11e      	bne.n	8003d12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cd4:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ce0:	4b31      	ldr	r3, [pc, #196]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e005      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10d      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d102      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d18:	4b25      	ldr	r3, [pc, #148]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e004      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d24:	4b23      	ldr	r3, [pc, #140]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d134      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d003      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0xac>
 8003d44:	e005      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d46:	4b1a      	ldr	r3, [pc, #104]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d48:	617b      	str	r3, [r7, #20]
      break;
 8003d4a:	e005      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d4e:	617b      	str	r3, [r7, #20]
      break;
 8003d50:	e002      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	617b      	str	r3, [r7, #20]
      break;
 8003d56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d58:	4b13      	ldr	r3, [pc, #76]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	3301      	adds	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d66:	4b10      	ldr	r3, [pc, #64]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	fb03 f202 	mul.w	r2, r3, r2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	0e5b      	lsrs	r3, r3, #25
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	3301      	adds	r3, #1
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d98:	69bb      	ldr	r3, [r7, #24]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3724      	adds	r7, #36	@ 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	08004870 	.word	0x08004870
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dd0:	f7ff fa26 	bl	8003220 <HAL_PWREx_GetVoltageRange>
 8003dd4:	6178      	str	r0, [r7, #20]
 8003dd6:	e014      	b.n	8003e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dd8:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ddc:	4a24      	ldr	r2, [pc, #144]	@ (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de4:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003df0:	f7ff fa16 	bl	8003220 <HAL_PWREx_GetVoltageRange>
 8003df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e08:	d10b      	bne.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b80      	cmp	r3, #128	@ 0x80
 8003e0e:	d919      	bls.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e14:	d902      	bls.n	8003e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e16:	2302      	movs	r3, #2
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	e013      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e010      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b80      	cmp	r3, #128	@ 0x80
 8003e26:	d902      	bls.n	8003e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e28:	2303      	movs	r3, #3
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	e00a      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b80      	cmp	r3, #128	@ 0x80
 8003e32:	d102      	bne.n	8003e3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e34:	2302      	movs	r3, #2
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	e004      	b.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b70      	cmp	r3, #112	@ 0x70
 8003e3e:	d101      	bne.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e40:	2301      	movs	r3, #1
 8003e42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 0207 	bic.w	r2, r3, #7
 8003e4c:	4909      	ldr	r1, [pc, #36]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e54:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d001      	beq.n	8003e66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40022000 	.word	0x40022000

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e80:	2300      	movs	r3, #0
 8003e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e84:	2300      	movs	r3, #0
 8003e86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d041      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e9c:	d02a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ea2:	d824      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ea4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ea8:	d008      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eae:	d81e      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb8:	d010      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003eba:	e018      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ebc:	4b86      	ldr	r3, [pc, #536]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a85      	ldr	r2, [pc, #532]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fabb 	bl	800444c <RCCEx_PLLSAI1_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eda:	e00c      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3320      	adds	r3, #32
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fba6 	bl	8004634 <RCCEx_PLLSAI2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eec:	e003      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003efc:	4b76      	ldr	r3, [pc, #472]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f0a:	4973      	ldr	r1, [pc, #460]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f12:	e001      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d041      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f2c:	d02a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f32:	d824      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f3e:	d81e      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f48:	d010      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f4a:	e018      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f4c:	4b62      	ldr	r3, [pc, #392]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a61      	ldr	r2, [pc, #388]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f58:	e015      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fa73 	bl	800444c <RCCEx_PLLSAI1_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f6a:	e00c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3320      	adds	r3, #32
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fb5e 	bl	8004634 <RCCEx_PLLSAI2_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	74fb      	strb	r3, [r7, #19]
      break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f8c:	4b52      	ldr	r3, [pc, #328]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f9a:	494f      	ldr	r1, [pc, #316]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a0 	beq.w	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b41      	ldr	r3, [pc, #260]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	4a40      	ldr	r2, [pc, #256]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fec:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff8:	f7fc fbd8 	bl	80007ac <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ffe:	e009      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fc fbd4 	bl	80007ac <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d902      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	74fb      	strb	r3, [r7, #19]
        break;
 8004012:	e005      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004014:	4b31      	ldr	r3, [pc, #196]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0ef      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d15c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004026:	4b2c      	ldr	r3, [pc, #176]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004030:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	429a      	cmp	r2, r3
 8004042:	d019      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004044:	4b24      	ldr	r3, [pc, #144]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004050:	4b21      	ldr	r3, [pc, #132]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	4a20      	ldr	r2, [pc, #128]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004060:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004066:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004070:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fc fb93 	bl	80007ac <HAL_GetTick>
 8004086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004088:	e00b      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fc fb8f 	bl	80007ac <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d902      	bls.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	74fb      	strb	r3, [r7, #19]
            break;
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a2:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ec      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b6:	4b08      	ldr	r3, [pc, #32]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c6:	4904      	ldr	r1, [pc, #16]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ce:	e009      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e4:	7c7b      	ldrb	r3, [r7, #17]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b9e      	ldr	r3, [pc, #632]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	4a9d      	ldr	r2, [pc, #628]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004102:	4b98      	ldr	r3, [pc, #608]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004110:	4994      	ldr	r1, [pc, #592]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004124:	4b8f      	ldr	r3, [pc, #572]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 020c 	bic.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004132:	498c      	ldr	r1, [pc, #560]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004146:	4b87      	ldr	r3, [pc, #540]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	4983      	ldr	r1, [pc, #524]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004168:	4b7e      	ldr	r3, [pc, #504]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	497b      	ldr	r1, [pc, #492]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800418a:	4b76      	ldr	r3, [pc, #472]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004198:	4972      	ldr	r1, [pc, #456]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ba:	496a      	ldr	r1, [pc, #424]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ce:	4b65      	ldr	r3, [pc, #404]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	4961      	ldr	r1, [pc, #388]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fe:	4959      	ldr	r1, [pc, #356]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004212:	4b54      	ldr	r3, [pc, #336]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004220:	4950      	ldr	r1, [pc, #320]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004234:	4b4b      	ldr	r3, [pc, #300]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	4948      	ldr	r1, [pc, #288]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004256:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004264:	493f      	ldr	r1, [pc, #252]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d028      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004278:	4b3a      	ldr	r3, [pc, #232]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004286:	4937      	ldr	r1, [pc, #220]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004296:	d106      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004298:	4b32      	ldr	r3, [pc, #200]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a31      	ldr	r2, [pc, #196]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042a2:	60d3      	str	r3, [r2, #12]
 80042a4:	e011      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ae:	d10c      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f8c8 	bl	800444c <RCCEx_PLLSAI1_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d028      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042d6:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	491f      	ldr	r1, [pc, #124]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042f4:	d106      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004300:	60d3      	str	r3, [r2, #12]
 8004302:	e011      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800430c:	d10c      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f000 f899 	bl	800444c <RCCEx_PLLSAI1_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02b      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	4908      	ldr	r1, [pc, #32]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004352:	d109      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a02      	ldr	r2, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800435e:	60d3      	str	r3, [r2, #12]
 8004360:	e014      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f867 	bl	800444c <RCCEx_PLLSAI1_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004398:	4b2b      	ldr	r3, [pc, #172]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043a6:	4928      	ldr	r1, [pc, #160]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f844 	bl	800444c <RCCEx_PLLSAI1_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d014      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	74bb      	strb	r3, [r7, #18]
 80043d2:	e011      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3320      	adds	r3, #32
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f925 	bl	8004634 <RCCEx_PLLSAI2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004404:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004412:	490d      	ldr	r1, [pc, #52]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004426:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004436:	4904      	ldr	r1, [pc, #16]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800443e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000

0800444c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800445a:	4b75      	ldr	r3, [pc, #468]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004466:	4b72      	ldr	r3, [pc, #456]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0203 	and.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d10d      	bne.n	8004492 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
       ||
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800447e:	4b6c      	ldr	r3, [pc, #432]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
       ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d047      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e044      	b.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d018      	beq.n	80044d2 <RCCEx_PLLSAI1_Config+0x86>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d825      	bhi.n	80044f0 <RCCEx_PLLSAI1_Config+0xa4>
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x62>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d009      	beq.n	80044c0 <RCCEx_PLLSAI1_Config+0x74>
 80044ac:	e020      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ae:	4b60      	ldr	r3, [pc, #384]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044be:	e01a      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d0:	e013      	b.n	80044fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044d2:	4b57      	ldr	r3, [pc, #348]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044de:	4b54      	ldr	r3, [pc, #336]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ee:	e006      	b.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e004      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004506:	4b4a      	ldr	r3, [pc, #296]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	3b01      	subs	r3, #1
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	430b      	orrs	r3, r1
 800451c:	4944      	ldr	r1, [pc, #272]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d17d      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004528:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a40      	ldr	r2, [pc, #256]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fc f93a 	bl	80007ac <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800453a:	e009      	b.n	8004550 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800453c:	f7fc f936 	bl	80007ac <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
        break;
 800454e:	e005      	b.n	800455c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004550:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ef      	bne.n	800453c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d160      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d111      	bne.n	800458c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	4b31      	ldr	r3, [pc, #196]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	0912      	lsrs	r2, r2, #4
 8004580:	0452      	lsls	r2, r2, #17
 8004582:	430a      	orrs	r2, r1
 8004584:	492a      	ldr	r1, [pc, #168]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	610b      	str	r3, [r1, #16]
 800458a:	e027      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d112      	bne.n	80045b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004592:	4b27      	ldr	r3, [pc, #156]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800459a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6892      	ldr	r2, [r2, #8]
 80045a2:	0211      	lsls	r1, r2, #8
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6912      	ldr	r2, [r2, #16]
 80045a8:	0852      	lsrs	r2, r2, #1
 80045aa:	3a01      	subs	r2, #1
 80045ac:	0552      	lsls	r2, r2, #21
 80045ae:	430a      	orrs	r2, r1
 80045b0:	491f      	ldr	r1, [pc, #124]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	610b      	str	r3, [r1, #16]
 80045b6:	e011      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6892      	ldr	r2, [r2, #8]
 80045c8:	0211      	lsls	r1, r2, #8
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6952      	ldr	r2, [r2, #20]
 80045ce:	0852      	lsrs	r2, r2, #1
 80045d0:	3a01      	subs	r2, #1
 80045d2:	0652      	lsls	r2, r2, #25
 80045d4:	430a      	orrs	r2, r1
 80045d6:	4916      	ldr	r1, [pc, #88]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045dc:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fc f8e0 	bl	80007ac <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ee:	e009      	b.n	8004604 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f0:	f7fc f8dc 	bl	80007ac <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d902      	bls.n	8004604 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	73fb      	strb	r3, [r7, #15]
          break;
 8004602:	e005      	b.n	8004610 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004604:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004616:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	4904      	ldr	r1, [pc, #16]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000

08004634 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004642:	4b6a      	ldr	r3, [pc, #424]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d018      	beq.n	8004680 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800464e:	4b67      	ldr	r3, [pc, #412]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0203 	and.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d10d      	bne.n	800467a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
       ||
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004666:	4b61      	ldr	r3, [pc, #388]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
       ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d047      	beq.n	800470a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e044      	b.n	800470a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d018      	beq.n	80046ba <RCCEx_PLLSAI2_Config+0x86>
 8004688:	2b03      	cmp	r3, #3
 800468a:	d825      	bhi.n	80046d8 <RCCEx_PLLSAI2_Config+0xa4>
 800468c:	2b01      	cmp	r3, #1
 800468e:	d002      	beq.n	8004696 <RCCEx_PLLSAI2_Config+0x62>
 8004690:	2b02      	cmp	r3, #2
 8004692:	d009      	beq.n	80046a8 <RCCEx_PLLSAI2_Config+0x74>
 8004694:	e020      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004696:	4b55      	ldr	r3, [pc, #340]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11d      	bne.n	80046de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a6:	e01a      	b.n	80046de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a8:	4b50      	ldr	r3, [pc, #320]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e013      	b.n	80046e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ba:	4b4c      	ldr	r3, [pc, #304]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046c6:	4b49      	ldr	r3, [pc, #292]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046d6:	e006      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      break;
 80046dc:	e004      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ee:	4b3f      	ldr	r3, [pc, #252]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	430b      	orrs	r3, r1
 8004704:	4939      	ldr	r1, [pc, #228]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004706:	4313      	orrs	r3, r2
 8004708:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d167      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004710:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a35      	ldr	r2, [pc, #212]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800471a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471c:	f7fc f846 	bl	80007ac <HAL_GetTick>
 8004720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004722:	e009      	b.n	8004738 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004724:	f7fc f842 	bl	80007ac <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	73fb      	strb	r3, [r7, #15]
        break;
 8004736:	e005      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004738:	4b2c      	ldr	r3, [pc, #176]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ef      	bne.n	8004724 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d14a      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d111      	bne.n	8004774 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004750:	4b26      	ldr	r3, [pc, #152]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
 8004760:	0211      	lsls	r1, r2, #8
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68d2      	ldr	r2, [r2, #12]
 8004766:	0912      	lsrs	r2, r2, #4
 8004768:	0452      	lsls	r2, r2, #17
 800476a:	430a      	orrs	r2, r1
 800476c:	491f      	ldr	r1, [pc, #124]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	614b      	str	r3, [r1, #20]
 8004772:	e011      	b.n	8004798 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004774:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800477c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6892      	ldr	r2, [r2, #8]
 8004784:	0211      	lsls	r1, r2, #8
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6912      	ldr	r2, [r2, #16]
 800478a:	0852      	lsrs	r2, r2, #1
 800478c:	3a01      	subs	r2, #1
 800478e:	0652      	lsls	r2, r2, #25
 8004790:	430a      	orrs	r2, r1
 8004792:	4916      	ldr	r1, [pc, #88]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004798:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fc f802 	bl	80007ac <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047aa:	e009      	b.n	80047c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047ac:	f7fb fffe 	bl	80007ac <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d902      	bls.n	80047c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	73fb      	strb	r3, [r7, #15]
          break;
 80047be:	e005      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047c0:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ef      	beq.n	80047ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047d2:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4904      	ldr	r1, [pc, #16]	@ (80047ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000

080047f0 <memset>:
 80047f0:	4402      	add	r2, r0
 80047f2:	4603      	mov	r3, r0
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d100      	bne.n	80047fa <memset+0xa>
 80047f8:	4770      	bx	lr
 80047fa:	f803 1b01 	strb.w	r1, [r3], #1
 80047fe:	e7f9      	b.n	80047f4 <memset+0x4>

08004800 <__libc_init_array>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	4d0d      	ldr	r5, [pc, #52]	@ (8004838 <__libc_init_array+0x38>)
 8004804:	4c0d      	ldr	r4, [pc, #52]	@ (800483c <__libc_init_array+0x3c>)
 8004806:	1b64      	subs	r4, r4, r5
 8004808:	10a4      	asrs	r4, r4, #2
 800480a:	2600      	movs	r6, #0
 800480c:	42a6      	cmp	r6, r4
 800480e:	d109      	bne.n	8004824 <__libc_init_array+0x24>
 8004810:	4d0b      	ldr	r5, [pc, #44]	@ (8004840 <__libc_init_array+0x40>)
 8004812:	4c0c      	ldr	r4, [pc, #48]	@ (8004844 <__libc_init_array+0x44>)
 8004814:	f000 f818 	bl	8004848 <_init>
 8004818:	1b64      	subs	r4, r4, r5
 800481a:	10a4      	asrs	r4, r4, #2
 800481c:	2600      	movs	r6, #0
 800481e:	42a6      	cmp	r6, r4
 8004820:	d105      	bne.n	800482e <__libc_init_array+0x2e>
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	f855 3b04 	ldr.w	r3, [r5], #4
 8004828:	4798      	blx	r3
 800482a:	3601      	adds	r6, #1
 800482c:	e7ee      	b.n	800480c <__libc_init_array+0xc>
 800482e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004832:	4798      	blx	r3
 8004834:	3601      	adds	r6, #1
 8004836:	e7f2      	b.n	800481e <__libc_init_array+0x1e>
 8004838:	080048a0 	.word	0x080048a0
 800483c:	080048a0 	.word	0x080048a0
 8004840:	080048a0 	.word	0x080048a0
 8004844:	080048a4 	.word	0x080048a4

08004848 <_init>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	bf00      	nop
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr

08004854 <_fini>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr
