
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d64  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001eec  08001eec  00002eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f34  08001f34  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f34  08001f34  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f34  08001f34  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f34  08001f34  00002f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f38  08001f38  00002f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f3c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001f48  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001f48  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bd5  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001311  00000000  00000000  00009c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0000af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000646  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247f6  00000000  00000000  0000bdb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009962  00000000  00000000  000305ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e116f  00000000  00000000  00039f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b07d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002114  00000000  00000000  0011b0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0011d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ed4 	.word	0x08001ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001ed4 	.word	0x08001ed4

080001c8 <main>:

void SystemClock_Config(void);
I2C_HandleTypeDef hI2C;

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  HAL_Init();
 80001ce:	f000 f94c 	bl	800046a <HAL_Init>
  SystemClock_Config();
 80001d2:	f000 f815 	bl	8000200 <SystemClock_Config>
  I2C_Init();
 80001d6:	f000 f859 	bl	800028c <I2C_Init>
  while (1)
  {
	  if(HAL_I2C_Master_Transmit(&hI2C, 0b11101110, (uint8_t*) "1234", 4, 10000) != HAL_OK)
 80001da:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001de:	9300      	str	r3, [sp, #0]
 80001e0:	2304      	movs	r3, #4
 80001e2:	4a05      	ldr	r2, [pc, #20]	@ (80001f8 <main+0x30>)
 80001e4:	21ee      	movs	r1, #238	@ 0xee
 80001e6:	4805      	ldr	r0, [pc, #20]	@ (80001fc <main+0x34>)
 80001e8:	f000 fcea 	bl	8000bc0 <HAL_I2C_Master_Transmit>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f3      	beq.n	80001da <main+0x12>
		Error_Handler();
 80001f2:	f000 f8a5 	bl	8000340 <Error_Handler>
	  if(HAL_I2C_Master_Transmit(&hI2C, 0b11101110, (uint8_t*) "1234", 4, 10000) != HAL_OK)
 80001f6:	e7f0      	b.n	80001da <main+0x12>
 80001f8:	08001eec 	.word	0x08001eec
 80001fc:	20000028 	.word	0x20000028

08000200 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b096      	sub	sp, #88	@ 0x58
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2244      	movs	r2, #68	@ 0x44
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fe34 	bl	8001e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	463b      	mov	r3, r7
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000222:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000226:	f001 f80b 	bl	8001240 <HAL_PWREx_ControlVoltageScaling>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000230:	f000 f886 	bl	8000340 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000234:	2310      	movs	r3, #16
 8000236:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000240:	2360      	movs	r3, #96	@ 0x60
 8000242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000244:	2300      	movs	r3, #0
 8000246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	4618      	mov	r0, r3
 800024e:	f001 f84d 	bl	80012ec <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000258:	f000 f872 	bl	8000340 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000260:	2300      	movs	r3, #0
 8000262:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	463b      	mov	r3, r7
 8000272:	2100      	movs	r1, #0
 8000274:	4618      	mov	r0, r3
 8000276:	f001 fc15 	bl	8001aa4 <HAL_RCC_ClockConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000280:	f000 f85e 	bl	8000340 <Error_Handler>
  }
}
 8000284:	bf00      	nop
 8000286:	3758      	adds	r7, #88	@ 0x58
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <I2C_Init>:


//PB6 = SCL1, PB7 = SDA1
void I2C_Init(){
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000292:	23c0      	movs	r3, #192	@ 0xc0
 8000294:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000296:	2312      	movs	r3, #18
 8000298:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80002a2:	2304      	movs	r3, #4
 80002a4:	61fb      	str	r3, [r7, #28]
	__GPIOB_CLK_ENABLE();
 80002a6:	4b21      	ldr	r3, [pc, #132]	@ (800032c <I2C_Init+0xa0>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	4a20      	ldr	r2, [pc, #128]	@ (800032c <I2C_Init+0xa0>)
 80002ac:	f043 0302 	orr.w	r3, r3, #2
 80002b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002b2:	4b1e      	ldr	r3, [pc, #120]	@ (800032c <I2C_Init+0xa0>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b6:	f003 0302 	and.w	r3, r3, #2
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002be:	f107 030c 	add.w	r3, r7, #12
 80002c2:	4619      	mov	r1, r3
 80002c4:	481a      	ldr	r0, [pc, #104]	@ (8000330 <I2C_Init+0xa4>)
 80002c6:	f000 fa2b 	bl	8000720 <HAL_GPIO_Init>

	__I2C1_CLK_ENABLE();
 80002ca:	4b18      	ldr	r3, [pc, #96]	@ (800032c <I2C_Init+0xa0>)
 80002cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002ce:	4a17      	ldr	r2, [pc, #92]	@ (800032c <I2C_Init+0xa0>)
 80002d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80002d6:	4b15      	ldr	r3, [pc, #84]	@ (800032c <I2C_Init+0xa0>)
 80002d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
	hI2C.Instance = I2C1;
 80002e2:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <I2C_Init+0xa8>)
 80002e4:	4a14      	ldr	r2, [pc, #80]	@ (8000338 <I2C_Init+0xac>)
 80002e6:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <I2C_Init+0xa8>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ee:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <I2C_Init+0xa8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <I2C_Init+0xa8>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	60da      	str	r2, [r3, #12]
	hI2C.Init.OwnAddress1 = 0;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <I2C_Init+0xa8>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000300:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <I2C_Init+0xa8>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <I2C_Init+0xa8>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
	hI2C.Init.Timing = 0x00100D14;
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <I2C_Init+0xa8>)
 800030e:	4a0b      	ldr	r2, [pc, #44]	@ (800033c <I2C_Init+0xb0>)
 8000310:	605a      	str	r2, [r3, #4]

	//hI2CInit.Init.ClockSpeed = 100000;
	//hI2C.Init.DutyCycle = I2C_DUTYCYCLE_2;

	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000312:	4808      	ldr	r0, [pc, #32]	@ (8000334 <I2C_Init+0xa8>)
 8000314:	f000 fbae 	bl	8000a74 <HAL_I2C_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <I2C_Init+0x96>
	{
		Error_Handler();
 800031e:	f000 f80f 	bl	8000340 <Error_Handler>
	}
}
 8000322:	bf00      	nop
 8000324:	3720      	adds	r7, #32
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	48000400 	.word	0x48000400
 8000334:	20000028 	.word	0x20000028
 8000338:	40005400 	.word	0x40005400
 800033c:	00100d14 	.word	0x00100d14

08000340 <Error_Handler>:



void Error_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop
  __disable_irq();
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <Error_Handler+0x8>

0800034c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <HAL_MspInit+0x44>)
 8000354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000356:	4a0e      	ldr	r2, [pc, #56]	@ (8000390 <HAL_MspInit+0x44>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6613      	str	r3, [r2, #96]	@ 0x60
 800035e:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <HAL_MspInit+0x44>)
 8000360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036a:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <HAL_MspInit+0x44>)
 800036c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800036e:	4a08      	ldr	r2, [pc, #32]	@ (8000390 <HAL_MspInit+0x44>)
 8000370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000374:	6593      	str	r3, [r2, #88]	@ 0x58
 8000376:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <HAL_MspInit+0x44>)
 8000378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800037a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800037e:	603b      	str	r3, [r7, #0]
 8000380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <NMI_Handler+0x4>

0800039c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <HardFault_Handler+0x4>

080003a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <MemManage_Handler+0x4>

080003ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <BusFault_Handler+0x4>

080003b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <UsageFault_Handler+0x4>

080003bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ea:	f000 f893 	bl	8000514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <SystemInit+0x20>)
 80003fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003fe:	4a05      	ldr	r2, [pc, #20]	@ (8000414 <SystemInit+0x20>)
 8000400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000418:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000450 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800041c:	f7ff ffea 	bl	80003f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	@ (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	@ (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	@ (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000446:	f001 fd21 	bl	8001e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800044a:	f7ff febd 	bl	80001c8 <main>

0800044e <LoopForever>:

LoopForever:
    b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000450:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800045c:	08001f3c 	.word	0x08001f3c
  ldr r2, =_sbss
 8000460:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000464:	20000080 	.word	0x20000080

08000468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC1_2_IRQHandler>

0800046a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000470:	2300      	movs	r3, #0
 8000472:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000474:	2003      	movs	r0, #3
 8000476:	f000 f91f 	bl	80006b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800047a:	200f      	movs	r0, #15
 800047c:	f000 f80e 	bl	800049c <HAL_InitTick>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000486:	2301      	movs	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	e001      	b.n	8000490 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800048c:	f7ff ff5e 	bl	800034c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000490:	79fb      	ldrb	r3, [r7, #7]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004a4:	2300      	movs	r3, #0
 80004a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <HAL_InitTick+0x6c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d023      	beq.n	80004f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <HAL_InitTick+0x70>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <HAL_InitTick+0x6c>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004be:	fbb3 f3f1 	udiv	r3, r3, r1
 80004c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f91d 	bl	8000706 <HAL_SYSTICK_Config>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	d809      	bhi.n	80004ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d8:	2200      	movs	r2, #0
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	f04f 30ff 	mov.w	r0, #4294967295
 80004e0:	f000 f8f5 	bl	80006ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <HAL_InitTick+0x74>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
 80004ea:	e007      	b.n	80004fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004ec:	2301      	movs	r3, #1
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e004      	b.n	80004fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	73fb      	strb	r3, [r7, #15]
 80004f6:	e001      	b.n	80004fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000008 	.word	0x20000008
 800050c:	20000000 	.word	0x20000000
 8000510:	20000004 	.word	0x20000004

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	@ (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000008 	.word	0x20000008
 8000538:	2000007c 	.word	0x2000007c

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	@ (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000007c 	.word	0x2000007c

08000554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000586:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db0a      	blt.n	80005e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	490c      	ldr	r1, [pc, #48]	@ (8000604 <__NVIC_SetPriority+0x4c>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	0112      	lsls	r2, r2, #4
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	440b      	add	r3, r1
 80005dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e0:	e00a      	b.n	80005f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4908      	ldr	r1, [pc, #32]	@ (8000608 <__NVIC_SetPriority+0x50>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	3b04      	subs	r3, #4
 80005f0:	0112      	lsls	r2, r2, #4
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	440b      	add	r3, r1
 80005f6:	761a      	strb	r2, [r3, #24]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	@ 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	f1c3 0307 	rsb	r3, r3, #7
 8000626:	2b04      	cmp	r3, #4
 8000628:	bf28      	it	cs
 800062a:	2304      	movcs	r3, #4
 800062c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3304      	adds	r3, #4
 8000632:	2b06      	cmp	r3, #6
 8000634:	d902      	bls.n	800063c <NVIC_EncodePriority+0x30>
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3b03      	subs	r3, #3
 800063a:	e000      	b.n	800063e <NVIC_EncodePriority+0x32>
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	43da      	mvns	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	401a      	ands	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000654:	f04f 31ff 	mov.w	r1, #4294967295
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43d9      	mvns	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	4313      	orrs	r3, r2
         );
}
 8000666:	4618      	mov	r0, r3
 8000668:	3724      	adds	r7, #36	@ 0x24
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000684:	d301      	bcc.n	800068a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000686:	2301      	movs	r3, #1
 8000688:	e00f      	b.n	80006aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <SysTick_Config+0x40>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000692:	210f      	movs	r1, #15
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f7ff ff8e 	bl	80005b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <SysTick_Config+0x40>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <SysTick_Config+0x40>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff47 	bl	8000554 <__NVIC_SetPriorityGrouping>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006e0:	f7ff ff5c 	bl	800059c <__NVIC_GetPriorityGrouping>
 80006e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	6978      	ldr	r0, [r7, #20]
 80006ec:	f7ff ff8e 	bl	800060c <NVIC_EncodePriority>
 80006f0:	4602      	mov	r2, r0
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff5d 	bl	80005b8 <__NVIC_SetPriority>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ffb0 	bl	8000674 <SysTick_Config>
 8000714:	4603      	mov	r3, r0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800072e:	e17f      	b.n	8000a30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	2101      	movs	r1, #1
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	fa01 f303 	lsl.w	r3, r1, r3
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	f000 8171 	beq.w	8000a2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	2b01      	cmp	r3, #1
 8000752:	d005      	beq.n	8000760 <HAL_GPIO_Init+0x40>
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 0303 	and.w	r3, r3, #3
 800075c:	2b02      	cmp	r3, #2
 800075e:	d130      	bne.n	80007c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2203      	movs	r2, #3
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	4013      	ands	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	68da      	ldr	r2, [r3, #12]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	4313      	orrs	r3, r2
 8000788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000796:	2201      	movs	r2, #1
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	091b      	lsrs	r3, r3, #4
 80007ac:	f003 0201 	and.w	r2, r3, #1
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d118      	bne.n	8000800 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80007d4:	2201      	movs	r2, #1
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	43db      	mvns	r3, r3
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	08db      	lsrs	r3, r3, #3
 80007ea:	f003 0201 	and.w	r2, r3, #1
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	2b03      	cmp	r3, #3
 800080a:	d017      	beq.n	800083c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2203      	movs	r2, #3
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	689a      	ldr	r2, [r3, #8]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4313      	orrs	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	2b02      	cmp	r3, #2
 8000846:	d123      	bne.n	8000890 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	08da      	lsrs	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	f003 0307 	and.w	r3, r3, #7
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	220f      	movs	r2, #15
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	08da      	lsrs	r2, r3, #3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3208      	adds	r2, #8
 800088a:	6939      	ldr	r1, [r7, #16]
 800088c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 0203 	and.w	r2, r3, #3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f000 80ac 	beq.w	8000a2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a50 <HAL_GPIO_Init+0x330>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d6:	4a5e      	ldr	r2, [pc, #376]	@ (8000a50 <HAL_GPIO_Init+0x330>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008de:	4b5c      	ldr	r3, [pc, #368]	@ (8000a50 <HAL_GPIO_Init+0x330>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008ea:	4a5a      	ldr	r2, [pc, #360]	@ (8000a54 <HAL_GPIO_Init+0x334>)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3302      	adds	r3, #2
 80008f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	220f      	movs	r2, #15
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000914:	d025      	beq.n	8000962 <HAL_GPIO_Init+0x242>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4f      	ldr	r2, [pc, #316]	@ (8000a58 <HAL_GPIO_Init+0x338>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d01f      	beq.n	800095e <HAL_GPIO_Init+0x23e>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a4e      	ldr	r2, [pc, #312]	@ (8000a5c <HAL_GPIO_Init+0x33c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d019      	beq.n	800095a <HAL_GPIO_Init+0x23a>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a4d      	ldr	r2, [pc, #308]	@ (8000a60 <HAL_GPIO_Init+0x340>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0x236>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a4c      	ldr	r2, [pc, #304]	@ (8000a64 <HAL_GPIO_Init+0x344>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d00d      	beq.n	8000952 <HAL_GPIO_Init+0x232>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a4b      	ldr	r2, [pc, #300]	@ (8000a68 <HAL_GPIO_Init+0x348>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d007      	beq.n	800094e <HAL_GPIO_Init+0x22e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a4a      	ldr	r2, [pc, #296]	@ (8000a6c <HAL_GPIO_Init+0x34c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_GPIO_Init+0x22a>
 8000946:	2306      	movs	r3, #6
 8000948:	e00c      	b.n	8000964 <HAL_GPIO_Init+0x244>
 800094a:	2307      	movs	r3, #7
 800094c:	e00a      	b.n	8000964 <HAL_GPIO_Init+0x244>
 800094e:	2305      	movs	r3, #5
 8000950:	e008      	b.n	8000964 <HAL_GPIO_Init+0x244>
 8000952:	2304      	movs	r3, #4
 8000954:	e006      	b.n	8000964 <HAL_GPIO_Init+0x244>
 8000956:	2303      	movs	r3, #3
 8000958:	e004      	b.n	8000964 <HAL_GPIO_Init+0x244>
 800095a:	2302      	movs	r3, #2
 800095c:	e002      	b.n	8000964 <HAL_GPIO_Init+0x244>
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <HAL_GPIO_Init+0x244>
 8000962:	2300      	movs	r3, #0
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	f002 0203 	and.w	r2, r2, #3
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	4093      	lsls	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000974:	4937      	ldr	r1, [pc, #220]	@ (8000a54 <HAL_GPIO_Init+0x334>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000982:	4b3b      	ldr	r3, [pc, #236]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009a6:	4a32      	ldr	r2, [pc, #200]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009ac:	4b30      	ldr	r3, [pc, #192]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009d0:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a24:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <HAL_GPIO_Init+0x350>)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa22 f303 	lsr.w	r3, r2, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f47f ae78 	bne.w	8000730 <HAL_GPIO_Init+0x10>
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010000 	.word	0x40010000
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	48000800 	.word	0x48000800
 8000a60:	48000c00 	.word	0x48000c00
 8000a64:	48001000 	.word	0x48001000
 8000a68:	48001400 	.word	0x48001400
 8000a6c:	48001800 	.word	0x48001800
 8000a70:	40010400 	.word	0x40010400

08000a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e08d      	b.n	8000ba2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d106      	bne.n	8000aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f885 	bl	8000baa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2224      	movs	r2, #36	@ 0x24
 8000aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f022 0201 	bic.w	r2, r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d107      	bne.n	8000aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	e006      	b.n	8000afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d108      	bne.n	8000b16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	e007      	b.n	8000b26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691a      	ldr	r2, [r3, #16]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	430a      	orrs	r2, r1
 8000b62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69d9      	ldr	r1, [r3, #28]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a1a      	ldr	r2, [r3, #32]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0201 	orr.w	r2, r2, #1
 8000b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	460b      	mov	r3, r1
 8000bce:	817b      	strh	r3, [r7, #10]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b20      	cmp	r3, #32
 8000bde:	f040 80fd 	bne.w	8000ddc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d101      	bne.n	8000bf0 <HAL_I2C_Master_Transmit+0x30>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e0f6      	b.n	8000dde <HAL_I2C_Master_Transmit+0x21e>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000bf8:	f7ff fca0 	bl	800053c <HAL_GetTick>
 8000bfc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2319      	movs	r3, #25
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f000 f914 	bl	8000e38 <I2C_WaitOnFlagUntilTimeout>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e0e1      	b.n	8000dde <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2221      	movs	r2, #33	@ 0x21
 8000c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2210      	movs	r2, #16
 8000c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	893a      	ldrh	r2, [r7, #8]
 8000c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	2bff      	cmp	r3, #255	@ 0xff
 8000c4a:	d906      	bls.n	8000c5a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	22ff      	movs	r2, #255	@ 0xff
 8000c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000c52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e007      	b.n	8000c6a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000c64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d024      	beq.n	8000cbc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	8979      	ldrh	r1, [r7, #10]
 8000cae:	4b4e      	ldr	r3, [pc, #312]	@ (8000de8 <HAL_I2C_Master_Transmit+0x228>)
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 fa83 	bl	80011c0 <I2C_TransferConfig>
 8000cba:	e066      	b.n	8000d8a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	8979      	ldrh	r1, [r7, #10]
 8000cc4:	4b48      	ldr	r3, [pc, #288]	@ (8000de8 <HAL_I2C_Master_Transmit+0x228>)
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f000 fa78 	bl	80011c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000cd0:	e05b      	b.n	8000d8a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	6a39      	ldr	r1, [r7, #32]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f000 f907 	bl	8000eea <I2C_WaitOnTXISFlagUntilTimeout>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e07b      	b.n	8000dde <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d034      	beq.n	8000d8a <HAL_I2C_Master_Transmit+0x1ca>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d130      	bne.n	8000d8a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f000 f880 	bl	8000e38 <I2C_WaitOnFlagUntilTimeout>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e04d      	b.n	8000dde <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2bff      	cmp	r3, #255	@ 0xff
 8000d4a:	d90e      	bls.n	8000d6a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	22ff      	movs	r2, #255	@ 0xff
 8000d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	8979      	ldrh	r1, [r7, #10]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f000 fa2c 	bl	80011c0 <I2C_TransferConfig>
 8000d68:	e00f      	b.n	8000d8a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	8979      	ldrh	r1, [r7, #10]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 fa1b 	bl	80011c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d19e      	bne.n	8000cd2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	6a39      	ldr	r1, [r7, #32]
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f8ed 	bl	8000f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e01a      	b.n	8000dde <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2220      	movs	r2, #32
 8000dae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6859      	ldr	r1, [r3, #4]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_I2C_Master_Transmit+0x22c>)
 8000dbc:	400b      	ands	r3, r1
 8000dbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e000      	b.n	8000dde <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8000ddc:	2302      	movs	r3, #2
  }
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	80002000 	.word	0x80002000
 8000dec:	fe00e800 	.word	0xfe00e800

08000df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d103      	bne.n	8000e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d007      	beq.n	8000e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	699a      	ldr	r2, [r3, #24]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0201 	orr.w	r2, r2, #1
 8000e2a:	619a      	str	r2, [r3, #24]
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e48:	e03b      	b.n	8000ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f8d6 	bl	8001000 <I2C_IsErrorOccurred>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e041      	b.n	8000ee2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d02d      	beq.n	8000ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e66:	f7ff fb69 	bl	800053c <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d302      	bcc.n	8000e7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d122      	bne.n	8000ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	4013      	ands	r3, r2
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d113      	bne.n	8000ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f043 0220 	orr.w	r2, r3, #32
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d0b4      	beq.n	8000e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ef6:	e033      	b.n	8000f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 f87f 	bl	8001000 <I2C_IsErrorOccurred>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e031      	b.n	8000f70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d025      	beq.n	8000f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f14:	f7ff fb12 	bl	800053c <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d302      	bcc.n	8000f2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11a      	bne.n	8000f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d013      	beq.n	8000f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3c:	f043 0220 	orr.w	r2, r3, #32
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2220      	movs	r2, #32
 8000f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e007      	b.n	8000f70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d1c4      	bne.n	8000ef8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f84:	e02f      	b.n	8000fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f838 	bl	8001000 <I2C_IsErrorOccurred>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e02d      	b.n	8000ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f9a:	f7ff facf 	bl	800053c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d302      	bcc.n	8000fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11a      	bne.n	8000fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	2b20      	cmp	r3, #32
 8000fbc:	d013      	beq.n	8000fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f043 0220 	orr.w	r2, r3, #32
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e007      	b.n	8000ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0320 	and.w	r3, r3, #32
 8000ff0:	2b20      	cmp	r3, #32
 8000ff2:	d1c8      	bne.n	8000f86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	d068      	beq.n	80010fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2210      	movs	r2, #16
 8001032:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001034:	e049      	b.n	80010ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d045      	beq.n	80010ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800103e:	f7ff fa7d 	bl	800053c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	429a      	cmp	r2, r3
 800104c:	d302      	bcc.n	8001054 <I2C_IsErrorOccurred+0x54>
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d13a      	bne.n	80010ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001066:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001076:	d121      	bne.n	80010bc <I2C_IsErrorOccurred+0xbc>
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800107e:	d01d      	beq.n	80010bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001080:	7cfb      	ldrb	r3, [r7, #19]
 8001082:	2b20      	cmp	r3, #32
 8001084:	d01a      	beq.n	80010bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001094:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001096:	f7ff fa51 	bl	800053c <HAL_GetTick>
 800109a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800109c:	e00e      	b.n	80010bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800109e:	f7ff fa4d 	bl	800053c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b19      	cmp	r3, #25
 80010aa:	d907      	bls.n	80010bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	f043 0320 	orr.w	r3, r3, #32
 80010b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80010ba:	e006      	b.n	80010ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d1e9      	bne.n	800109e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d003      	beq.n	80010e0 <I2C_IsErrorOccurred+0xe0>
 80010d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0aa      	beq.n	8001036 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2220      	movs	r2, #32
 80010ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001142:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00b      	beq.n	800116c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800116c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01c      	beq.n	80011ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff fe3b 	bl	8000df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6859      	ldr	r1, [r3, #4]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <I2C_IsErrorOccurred+0x1bc>)
 8001186:	400b      	ands	r3, r1
 8001188:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	431a      	orrs	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3728      	adds	r7, #40	@ 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	fe00e800 	.word	0xfe00e800

080011c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	817b      	strh	r3, [r7, #10]
 80011ce:	4613      	mov	r3, r2
 80011d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011d2:	897b      	ldrh	r3, [r7, #10]
 80011d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80011d8:	7a7b      	ldrb	r3, [r7, #9]
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	0d5b      	lsrs	r3, r3, #21
 80011fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <I2C_TransferConfig+0x60>)
 8001200:	430b      	orrs	r3, r1
 8001202:	43db      	mvns	r3, r3
 8001204:	ea02 0103 	and.w	r1, r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	430a      	orrs	r2, r1
 8001210:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	03ff63ff 	.word	0x03ff63ff

08001224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <HAL_PWREx_GetVoltageRange+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800124e:	d130      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800125c:	d038      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001266:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2232      	movs	r2, #50	@ 0x32
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001284:	e002      	b.n	800128c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3b01      	subs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128c:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001298:	d102      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f2      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ac:	d110      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e00f      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012be:	d007      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c8:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000
 80012e4:	20000000 	.word	0x20000000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e3ca      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fe:	4b97      	ldr	r3, [pc, #604]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001308:	4b94      	ldr	r3, [pc, #592]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80e4 	beq.w	80014e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_RCC_OscConfig+0x4a>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	f040 808b 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b01      	cmp	r3, #1
 8001332:	f040 8087 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001336:	4b89      	ldr	r3, [pc, #548]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x62>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e3a2      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4b82      	ldr	r3, [pc, #520]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_RCC_OscConfig+0x7c>
 800135e:	4b7f      	ldr	r3, [pc, #508]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001366:	e005      	b.n	8001374 <HAL_RCC_OscConfig+0x88>
 8001368:	4b7c      	ldr	r3, [pc, #496]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001374:	4293      	cmp	r3, r2
 8001376:	d223      	bcs.n	80013c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fd1d 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e383      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b73      	ldr	r3, [pc, #460]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a72      	ldr	r2, [pc, #456]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b70      	ldr	r3, [pc, #448]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	496d      	ldr	r1, [pc, #436]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b6c      	ldr	r3, [pc, #432]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4968      	ldr	r1, [pc, #416]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e025      	b.n	800140c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4b66      	ldr	r3, [pc, #408]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a65      	ldr	r2, [pc, #404]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b63      	ldr	r3, [pc, #396]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4960      	ldr	r1, [pc, #384]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013de:	4b5f      	ldr	r3, [pc, #380]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	495b      	ldr	r1, [pc, #364]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fcdd 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e343      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800140c:	f000 fc4a 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	4b52      	ldr	r3, [pc, #328]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	4950      	ldr	r1, [pc, #320]	@ (8001560 <HAL_RCC_OscConfig+0x274>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	4a4e      	ldr	r2, [pc, #312]	@ (8001564 <HAL_RCC_OscConfig+0x278>)
 800142a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800142c:	4b4e      	ldr	r3, [pc, #312]	@ (8001568 <HAL_RCC_OscConfig+0x27c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f833 	bl	800049c <HAL_InitTick>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d052      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	e327      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d032      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800144c:	4b43      	ldr	r3, [pc, #268]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a42      	ldr	r2, [pc, #264]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001458:	f7ff f870 	bl	800053c <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001460:	f7ff f86c 	bl	800053c <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e310      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001472:	4b3a      	ldr	r3, [pc, #232]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147e:	4b37      	ldr	r3, [pc, #220]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a36      	ldr	r2, [pc, #216]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4931      	ldr	r1, [pc, #196]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149c:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	492c      	ldr	r1, [pc, #176]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e01a      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b2:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a29      	ldr	r2, [pc, #164]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014be:	f7ff f83d 	bl	800053c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c6:	f7ff f839 	bl	800053c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e2dd      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x1da>
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d074      	beq.n	80015de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x21a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d10e      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d10b      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d064      	beq.n	80015dc <HAL_RCC_OscConfig+0x2f0>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d160      	bne.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e2ba      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x24a>
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e026      	b.n	8001584 <HAL_RCC_OscConfig+0x298>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800153e:	d115      	bne.n	800156c <HAL_RCC_OscConfig+0x280>
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a05      	ldr	r2, [pc, #20]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a02      	ldr	r2, [pc, #8]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e014      	b.n	8001584 <HAL_RCC_OscConfig+0x298>
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	08001ef4 	.word	0x08001ef4
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004
 800156c:	4ba0      	ldr	r3, [pc, #640]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a9f      	ldr	r2, [pc, #636]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b9d      	ldr	r3, [pc, #628]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a9c      	ldr	r2, [pc, #624]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7fe ffd6 	bl	800053c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7fe ffd2 	bl	800053c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e276      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a6:	4b92      	ldr	r3, [pc, #584]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x2a8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7fe ffc2 	bl	800053c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7fe ffbe 	bl	800053c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	@ 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e262      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ce:	4b88      	ldr	r3, [pc, #544]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d0>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d060      	beq.n	80016ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x310>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d119      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d116      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	4b7c      	ldr	r3, [pc, #496]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x328>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e23f      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	4973      	ldr	r1, [pc, #460]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001628:	e040      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d023      	beq.n	800167a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001632:	4b6f      	ldr	r3, [pc, #444]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6e      	ldr	r2, [pc, #440]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7fe ff7d 	bl	800053c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7fe ff79 	bl	800053c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e21d      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b62      	ldr	r3, [pc, #392]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	495f      	ldr	r1, [pc, #380]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e018      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b5d      	ldr	r3, [pc, #372]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5c      	ldr	r2, [pc, #368]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7fe ff59 	bl	800053c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168e:	f7fe ff55 	bl	800053c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1f9      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03c      	beq.n	8001732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	4b4b      	ldr	r3, [pc, #300]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c6:	4a4a      	ldr	r2, [pc, #296]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7fe ff34 	bl	800053c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7fe ff30 	bl	800053c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1d4      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x3ec>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001700:	4a3b      	ldr	r2, [pc, #236]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7fe ff17 	bl	800053c <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7fe ff13 	bl	800053c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1b7      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	4b32      	ldr	r3, [pc, #200]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ef      	bne.n	8001712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a6 	beq.w	800188c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001744:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10d      	bne.n	800176c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	4a26      	ldr	r2, [pc, #152]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	@ 0x58
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001768:	2301      	movs	r3, #1
 800176a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <HAL_RCC_OscConfig+0x508>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d118      	bne.n	80017aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <HAL_RCC_OscConfig+0x508>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	@ (80017f4 <HAL_RCC_OscConfig+0x508>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001784:	f7fe feda 	bl	800053c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7fe fed6 	bl	800053c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e17a      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d8>
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c2:	e029      	b.n	8001818 <HAL_RCC_OscConfig+0x52c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d115      	bne.n	80017f8 <HAL_RCC_OscConfig+0x50c>
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d2:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e2:	4a03      	ldr	r2, [pc, #12]	@ (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x52c>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fe:	4a9b      	ldr	r2, [pc, #620]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001808:	4b98      	ldr	r3, [pc, #608]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	4a97      	ldr	r2, [pc, #604]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d016      	beq.n	800184e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7fe fe8c 	bl	800053c <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7fe fe88 	bl	800053c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e12a      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ed      	beq.n	8001828 <HAL_RCC_OscConfig+0x53c>
 800184c:	e015      	b.n	800187a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7fe fe75 	bl	800053c <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7fe fe71 	bl	800053c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e113      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ed      	bne.n	8001856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187a:	7ffb      	ldrb	r3, [r7, #31]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b7a      	ldr	r3, [pc, #488]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	4a79      	ldr	r2, [pc, #484]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80fe 	beq.w	8001a92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	2b02      	cmp	r3, #2
 800189c:	f040 80d0 	bne.w	8001a40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018a0:	4b72      	ldr	r3, [pc, #456]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d130      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	3b01      	subs	r3, #1
 80018c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d127      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11f      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018e0:	2a07      	cmp	r2, #7
 80018e2:	bf14      	ite	ne
 80018e4:	2201      	movne	r2, #1
 80018e6:	2200      	moveq	r2, #0
 80018e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d113      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d109      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d06e      	beq.n	80019f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d069      	beq.n	80019f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800191c:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001928:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0ad      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001938:	4b4c      	ldr	r3, [pc, #304]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001944:	f7fe fdfa 	bl	800053c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7fe fdf6 	bl	800053c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e09a      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195e:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b40      	ldr	r3, [pc, #256]	@ (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001970:	4013      	ands	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800197a:	3a01      	subs	r2, #1
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001984:	0212      	lsls	r2, r2, #8
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800198c:	0852      	lsrs	r2, r2, #1
 800198e:	3a01      	subs	r2, #1
 8001990:	0552      	lsls	r2, r2, #21
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	3a01      	subs	r2, #1
 800199c:	0652      	lsls	r2, r2, #25
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a4:	0912      	lsrs	r2, r2, #4
 80019a6:	0452      	lsls	r2, r2, #17
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4930      	ldr	r1, [pc, #192]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c8:	f7fe fdb8 	bl	800053c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7fe fdb4 	bl	800053c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e058      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ee:	e050      	b.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04f      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d148      	bne.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a18:	f7fe fd90 	bl	800053c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7fe fd8c 	bl	800053c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e030      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x734>
 8001a3e:	e028      	b.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d023      	beq.n	8001a8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7fe fd73 	bl	800053c <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a58:	e00c      	b.n	8001a74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7fe fd6f 	bl	800053c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d905      	bls.n	8001a74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e013      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_RCC_OscConfig+0x7b0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ec      	bne.n	8001a5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_OscConfig+0x7b0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4905      	ldr	r1, [pc, #20]	@ (8001a9c <HAL_RCC_OscConfig+0x7b0>)
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_RCC_OscConfig+0x7b4>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e001      	b.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	feeefffc 	.word	0xfeeefffc

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0e7      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b75      	ldr	r3, [pc, #468]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b72      	ldr	r3, [pc, #456]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4970      	ldr	r1, [pc, #448]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0cf      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4b66      	ldr	r3, [pc, #408]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d908      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4960      	ldr	r1, [pc, #384]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d04c      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d121      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0a6      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b42:	4b54      	ldr	r3, [pc, #336]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e09a      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e08e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e086      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4943      	ldr	r1, [pc, #268]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b8c:	f7fe fcd6 	bl	800053c <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7fe fcd2 	bl	800053c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e06e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b3a      	ldr	r3, [pc, #232]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d208      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	492b      	ldr	r1, [pc, #172]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d210      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 0207 	bic.w	r2, r3, #7
 8001c00:	4923      	ldr	r1, [pc, #140]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e036      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4918      	ldr	r1, [pc, #96]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4910      	ldr	r1, [pc, #64]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c58:	f000 f824 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	490b      	ldr	r1, [pc, #44]	@ (8001c98 <HAL_RCC_ClockConfig+0x1f4>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc0d 	bl	800049c <HAL_InitTick>
 8001c82:	4603      	mov	r3, r0
 8001c84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08001ef4 	.word	0x08001ef4
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d121      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d11e      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e005      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d00:	4a2b      	ldr	r2, [pc, #172]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e004      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d28:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d134      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d003      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0xac>
 8001d48:	e005      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4c:	617b      	str	r3, [r7, #20]
      break;
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d52:	617b      	str	r3, [r7, #20]
      break;
 8001d54:	e002      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	617b      	str	r3, [r7, #20]
      break;
 8001d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	fb03 f202 	mul.w	r2, r3, r2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	0e5b      	lsrs	r3, r3, #25
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08001f04 	.word	0x08001f04
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	007a1200 	.word	0x007a1200

08001dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd4:	f7ff fa26 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001dd8:	6178      	str	r0, [r7, #20]
 8001dda:	e014      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de8:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df4:	f7ff fa16 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e0c:	d10b      	bne.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b80      	cmp	r3, #128	@ 0x80
 8001e12:	d919      	bls.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e18:	d902      	bls.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e013      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e010      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b80      	cmp	r3, #128	@ 0x80
 8001e2a:	d902      	bls.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e00a      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b80      	cmp	r3, #128	@ 0x80
 8001e36:	d102      	bne.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e004      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b70      	cmp	r3, #112	@ 0x70
 8001e42:	d101      	bne.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e44:	2301      	movs	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 0207 	bic.w	r2, r3, #7
 8001e50:	4909      	ldr	r1, [pc, #36]	@ (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022000 	.word	0x40022000

08001e7c <memset>:
 8001e7c:	4402      	add	r2, r0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d100      	bne.n	8001e86 <memset+0xa>
 8001e84:	4770      	bx	lr
 8001e86:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8a:	e7f9      	b.n	8001e80 <memset+0x4>

08001e8c <__libc_init_array>:
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8001ec4 <__libc_init_array+0x38>)
 8001e90:	4c0d      	ldr	r4, [pc, #52]	@ (8001ec8 <__libc_init_array+0x3c>)
 8001e92:	1b64      	subs	r4, r4, r5
 8001e94:	10a4      	asrs	r4, r4, #2
 8001e96:	2600      	movs	r6, #0
 8001e98:	42a6      	cmp	r6, r4
 8001e9a:	d109      	bne.n	8001eb0 <__libc_init_array+0x24>
 8001e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8001ecc <__libc_init_array+0x40>)
 8001e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8001ed0 <__libc_init_array+0x44>)
 8001ea0:	f000 f818 	bl	8001ed4 <_init>
 8001ea4:	1b64      	subs	r4, r4, r5
 8001ea6:	10a4      	asrs	r4, r4, #2
 8001ea8:	2600      	movs	r6, #0
 8001eaa:	42a6      	cmp	r6, r4
 8001eac:	d105      	bne.n	8001eba <__libc_init_array+0x2e>
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb4:	4798      	blx	r3
 8001eb6:	3601      	adds	r6, #1
 8001eb8:	e7ee      	b.n	8001e98 <__libc_init_array+0xc>
 8001eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ebe:	4798      	blx	r3
 8001ec0:	3601      	adds	r6, #1
 8001ec2:	e7f2      	b.n	8001eaa <__libc_init_array+0x1e>
 8001ec4:	08001f34 	.word	0x08001f34
 8001ec8:	08001f34 	.word	0x08001f34
 8001ecc:	08001f34 	.word	0x08001f34
 8001ed0:	08001f38 	.word	0x08001f38

08001ed4 <_init>:
 8001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed6:	bf00      	nop
 8001ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eda:	bc08      	pop	{r3}
 8001edc:	469e      	mov	lr, r3
 8001ede:	4770      	bx	lr

08001ee0 <_fini>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr
