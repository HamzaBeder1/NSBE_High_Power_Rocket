
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005694  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800581c  0800581c  0000681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a8  080059a8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  2000000c  080059bc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  080059bc  000075a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e0a  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298c  00000000  00000000  00018e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af5  00000000  00000000  0001c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036ad  00000000  00000000  0001d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fd5  00000000  00000000  000207ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef3a7  00000000  00000000  0003478f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123b36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  00123b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00127544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005804 	.word	0x08005804

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005804 	.word	0x08005804

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
{
	buffer_idx++;
	HAL_UART_Receive_IT(&huart3, &buffer[buffer_idx], 1);
}
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b0a0      	sub	sp, #128	@ 0x80
 80001dc:	af00      	add	r7, sp, #0
 HAL_Init();
 80001de:	f000 fd4a 	bl	8000c76 <HAL_Init>
 SystemClock_Config();
 80001e2:	f000 f8b7 	bl	8000354 <SystemClock_Config>
 GPIO_Init();
 80001e6:	f000 f8fb 	bl	80003e0 <GPIO_Init>
 //DMA_Init();
 //I2C_Init();
 SPI_Init();
 80001ea:	f000 fc2b 	bl	8000a44 <SPI_Init>
 uint8_t arr[] = {30, 0, 11, 28, 7, 12};
 80001ee:	4a50      	ldr	r2, [pc, #320]	@ (8000330 <main+0x158>)
 80001f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80001f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001f8:	6018      	str	r0, [r3, #0]
 80001fa:	3304      	adds	r3, #4
 80001fc:	8019      	strh	r1, [r3, #0]
 //initDS3231(2024, arr, 1, 12);
 //get_bmp_t();
 //initMPU6050(0);
 uint8_t timeData[6] = {30, 14, 4, 3, 24, 12};
 80001fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000334 <main+0x15c>)
 8000200:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000208:	6018      	str	r0, [r3, #0]
 800020a:	3304      	adds	r3, #4
 800020c:	8019      	strh	r1, [r3, #0]
 char header[] = "Time,Acceleration";
 800020e:	4b4a      	ldr	r3, [pc, #296]	@ (8000338 <main+0x160>)
 8000210:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000214:	461d      	mov	r5, r3
 8000216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800021a:	682b      	ldr	r3, [r5, #0]
 800021c:	8023      	strh	r3, [r4, #0]
 bool result = initialize_SD_card();
 800021e:	f000 fb61 	bl	80008e4 <initialize_SD_card>
 8000222:	4603      	mov	r3, r0
 8000224:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 if(!result)
 8000228:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800022c:	f083 0301 	eor.w	r3, r3, #1
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <main+0x62>
	  while(1);
 8000236:	bf00      	nop
 8000238:	e7fd      	b.n	8000236 <main+0x5e>
 result = is_SD_card_initialized();
 800023a:	f000 fbf7 	bl	8000a2c <is_SD_card_initialized>
 800023e:	4603      	mov	r3, r0
 8000240:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 if(!result)
 8000244:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000248:	f083 0301 	eor.w	r3, r3, #1
 800024c:	b2db      	uxtb	r3, r3
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <main+0x7e>
	  while(1);
 8000252:	bf00      	nop
 8000254:	e7fd      	b.n	8000252 <main+0x7a>
 res = f_mount(&fs, "0:", 1);
 8000256:	2201      	movs	r2, #1
 8000258:	4938      	ldr	r1, [pc, #224]	@ (800033c <main+0x164>)
 800025a:	4839      	ldr	r0, [pc, #228]	@ (8000340 <main+0x168>)
 800025c:	f004 fd4a 	bl	8004cf4 <f_mount>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b37      	ldr	r3, [pc, #220]	@ (8000344 <main+0x16c>)
 8000266:	701a      	strb	r2, [r3, #0]
 if(res != FR_OK)
 8000268:	4b36      	ldr	r3, [pc, #216]	@ (8000344 <main+0x16c>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0x9c>
	  while(1);
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0x98>
 res = f_open(&file, "text.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000274:	220a      	movs	r2, #10
 8000276:	4934      	ldr	r1, [pc, #208]	@ (8000348 <main+0x170>)
 8000278:	4834      	ldr	r0, [pc, #208]	@ (800034c <main+0x174>)
 800027a:	f004 fd81 	bl	8004d80 <f_open>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b30      	ldr	r3, [pc, #192]	@ (8000344 <main+0x16c>)
 8000284:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 8000286:	4b2f      	ldr	r3, [pc, #188]	@ (8000344 <main+0x16c>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d126      	bne.n	80002dc <main+0x104>
	  const char* text = "Hello, SD card!\n";
 800028e:	4b30      	ldr	r3, [pc, #192]	@ (8000350 <main+0x178>)
 8000290:	67bb      	str	r3, [r7, #120]	@ 0x78
	  UINT bytesWritten;
	  res = f_write(&file, text, strlen(text), &bytesWritten);
 8000292:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000294:	f7ff ff98 	bl	80001c8 <strlen>
 8000298:	4602      	mov	r2, r0
 800029a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800029e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80002a0:	482a      	ldr	r0, [pc, #168]	@ (800034c <main+0x174>)
 80002a2:	f005 f866 	bl	8005372 <f_write>
 80002a6:	4603      	mov	r3, r0
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <main+0x16c>)
 80002ac:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 80002ae:	4b25      	ldr	r3, [pc, #148]	@ (8000344 <main+0x16c>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0xe2>
		  while(1);
 80002b6:	bf00      	nop
 80002b8:	e7fd      	b.n	80002b6 <main+0xde>
	  f_close(&file);
 80002ba:	4824      	ldr	r0, [pc, #144]	@ (800034c <main+0x174>)
 80002bc:	f005 fa4c 	bl	8005758 <f_close>
 }
 else
	  while(1);
 res = f_open(&file, "text.txt", FA_READ);
 80002c0:	2201      	movs	r2, #1
 80002c2:	4921      	ldr	r1, [pc, #132]	@ (8000348 <main+0x170>)
 80002c4:	4821      	ldr	r0, [pc, #132]	@ (800034c <main+0x174>)
 80002c6:	f004 fd5b 	bl	8004d80 <f_open>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000344 <main+0x16c>)
 80002d0:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 80002d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <main+0x16c>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d121      	bne.n	800031e <main+0x146>
 80002da:	e000      	b.n	80002de <main+0x106>
	  while(1);
 80002dc:	e7fe      	b.n	80002dc <main+0x104>
	  char buffer[64];
	  UINT bytesRead;
	  res = f_read(&file, buffer, sizeof(buffer) - 1, &bytesRead);
 80002de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80002e2:	1d39      	adds	r1, r7, #4
 80002e4:	223f      	movs	r2, #63	@ 0x3f
 80002e6:	4819      	ldr	r0, [pc, #100]	@ (800034c <main+0x174>)
 80002e8:	f004 ff04 	bl	80050f4 <f_read>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <main+0x16c>)
 80002f2:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 80002f4:	4b13      	ldr	r3, [pc, #76]	@ (8000344 <main+0x16c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <main+0x128>
		  while(1);
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <main+0x124>
	  buffer[bytesRead] = '\0';
 8000300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000302:	3380      	adds	r3, #128	@ 0x80
 8000304:	443b      	add	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	f803 2c7c 	strb.w	r2, [r3, #-124]
	  f_close(&file);
 800030c:	480f      	ldr	r0, [pc, #60]	@ (800034c <main+0x174>)
 800030e:	f005 fa23 	bl	8005758 <f_close>
 }
 else
	  while(1);

 int x = 21;
 8000312:	2315      	movs	r3, #21
 8000314:	677b      	str	r3, [r7, #116]	@ 0x74
 x+=1;
 8000316:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000318:	3301      	adds	r3, #1
 800031a:	677b      	str	r3, [r7, #116]	@ 0x74
 800031c:	e000      	b.n	8000320 <main+0x148>
	  while(1);
 800031e:	e7fe      	b.n	800031e <main+0x146>
 while (1)
 {
	  //getDateAndTime();
	 // getAccelMPU6050(second);
	  //getAltitudeBMP180(second);
	  int x = 21;
 8000320:	2315      	movs	r3, #21
 8000322:	673b      	str	r3, [r7, #112]	@ 0x70
	  x+=1;
 8000324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000326:	3301      	adds	r3, #1
 8000328:	673b      	str	r3, [r7, #112]	@ 0x70
 {
 800032a:	bf00      	nop
 800032c:	e7f8      	b.n	8000320 <main+0x148>
 800032e:	bf00      	nop
 8000330:	08005840 	.word	0x08005840
 8000334:	08005848 	.word	0x08005848
 8000338:	08005850 	.word	0x08005850
 800033c:	0800581c 	.word	0x0800581c
 8000340:	20000028 	.word	0x20000028
 8000344:	20000488 	.word	0x20000488
 8000348:	08005820 	.word	0x08005820
 800034c:	20000258 	.word	0x20000258
 8000350:	0800582c 	.word	0x0800582c

08000354 <SystemClock_Config>:
 }
}
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	@ 0x58
 8000358:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2244      	movs	r2, #68	@ 0x44
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f005 fa22 	bl	80057ac <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]
 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800037a:	f001 f849 	bl	8001410 <HAL_PWREx_ControlVoltageScaling>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x34>
 {
   Error_Handler();
 8000384:	f000 f85e 	bl	8000444 <Error_Handler>
 }
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000388:	2310      	movs	r3, #16
 800038a:	617b      	str	r3, [r7, #20]
 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.MSICalibrationValue = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000394:	2360      	movs	r3, #96	@ 0x60
 8000396:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000398:	2300      	movs	r3, #0
 800039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 f88b 	bl	80014bc <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x5c>
 {
   Error_Handler();
 80003ac:	f000 f84a 	bl	8000444 <Error_Handler>
 }
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	603b      	str	r3, [r7, #0]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c4:	463b      	mov	r3, r7
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fc53 	bl	8001c74 <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x84>
 {
   Error_Handler();
 80003d4:	f000 f836 	bl	8000444 <Error_Handler>
 }
}
 80003d8:	bf00      	nop
 80003da:	3758      	adds	r7, #88	@ 0x58
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <GPIO_Init>:
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
}
void GPIO_Init(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */
	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <GPIO_Init+0x60>)
 80003f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f8:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <GPIO_Init+0x60>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <GPIO_Init+0x60>)
 8000402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]
	 /*Configure GPIO pin Output Level */
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000416:	f000 ffd5 	bl	80013c4 <HAL_GPIO_WritePin>
	 /*Configure GPIO pin : PA9 */
	 GPIO_InitStruct.Pin = GPIO_PIN_9;
 800041a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800041e:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000434:	f000 fe1c 	bl	8001070 <HAL_GPIO_Init>
	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <Error_Handler>:
 {
   Error_Handler();
 }*/
}
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
 __disable_irq();
 while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <send_command>:
#include "sd.h"


static bool is_initialized = 0;

bool send_command(uint8_t* cmd, uint8_t response){
 8000450:	b580      	push	{r7, lr}
 8000452:	b08a      	sub	sp, #40	@ 0x28
 8000454:	af02      	add	r7, sp, #8
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	bool success = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800046a:	f000 ffab 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 6, HAL_MAX_DELAY);
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	2206      	movs	r2, #6
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	4836      	ldr	r0, [pc, #216]	@ (8000550 <send_command+0x100>)
 8000478:	f001 fe72 	bl	8002160 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000486:	f000 ff9d 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fc68 	bl	8000d60 <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	e053      	b.n	800053e <send_command+0xee>
		uint8_t result[1];
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800049c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a0:	f000 ff90 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, result, 1, HAL_MAX_DELAY);
 80004a4:	23ff      	movs	r3, #255	@ 0xff
 80004a6:	743b      	strb	r3, [r7, #16]
 80004a8:	f107 0214 	add.w	r2, r7, #20
 80004ac:	f107 0110 	add.w	r1, r7, #16
 80004b0:	f04f 33ff 	mov.w	r3, #4294967295
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2301      	movs	r3, #1
 80004b8:	4825      	ldr	r0, [pc, #148]	@ (8000550 <send_command+0x100>)
 80004ba:	f001 ffa7 	bl	800240c <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c8:	f000 ff7c 	bl	80013c4 <HAL_GPIO_WritePin>
		if(result[0] == response){
 80004cc:	7d3b      	ldrb	r3, [r7, #20]
 80004ce:	78fa      	ldrb	r2, [r7, #3]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d12e      	bne.n	8000532 <send_command+0xe2>
			if(cmd[0] == 0x48){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b48      	cmp	r3, #72	@ 0x48
 80004da:	d127      	bne.n	800052c <send_command+0xdc>
				uint8_t result_cmd8[4];
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e6:	f000 ff6d 	bl	80013c4 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF, 0xFF, 0xFF}, result_cmd8, 4, HAL_MAX_DELAY);
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <send_command+0x104>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	f107 020c 	add.w	r2, r7, #12
 80004f4:	f107 0108 	add.w	r1, r7, #8
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2304      	movs	r3, #4
 8000500:	4813      	ldr	r0, [pc, #76]	@ (8000550 <send_command+0x100>)
 8000502:	f001 ff83 	bl	800240c <HAL_SPI_TransmitReceive>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000510:	f000 ff58 	bl	80013c4 <HAL_GPIO_WritePin>
				if(result_cmd8[0] != 0x00 || result_cmd8[1] != 0x00 || result_cmd8[2] != 0x01 || result_cmd8[3] != 0xAA)
 8000514:	7b3b      	ldrb	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <send_command+0xe8>
 800051a:	7b7b      	ldrb	r3, [r7, #13]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10b      	bne.n	8000538 <send_command+0xe8>
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d108      	bne.n	8000538 <send_command+0xe8>
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	2baa      	cmp	r3, #170	@ 0xaa
 800052a:	d105      	bne.n	8000538 <send_command+0xe8>
					continue;
			}
			success = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	77fb      	strb	r3, [r7, #31]
 8000530:	e009      	b.n	8000546 <send_command+0xf6>
			break;
		}
		HAL_Delay(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fc14 	bl	8000d60 <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	3301      	adds	r3, #1
 800053c:	61bb      	str	r3, [r7, #24]
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000544:	dba7      	blt.n	8000496 <send_command+0x46>
	}
	return success;
 8000546:	7ffb      	ldrb	r3, [r7, #31]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000518 	.word	0x20000518
 8000554:	08005864 	.word	0x08005864

08000558 <initialize_SPI_mode>:

void initialize_SPI_mode(){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f000 ff2c 	bl	80013c4 <HAL_GPIO_WritePin>
	uint8_t dummy[10];
	memset(dummy, 0xFF, sizeof(dummy));
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	220a      	movs	r2, #10
 8000570:	21ff      	movs	r1, #255	@ 0xff
 8000572:	4618      	mov	r0, r3
 8000574:	f005 f91a 	bl	80057ac <memset>
	HAL_SPI_Transmit(&hspi1, dummy, sizeof(dummy), HAL_MAX_DELAY);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	220a      	movs	r2, #10
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <initialize_SPI_mode+0x38>)
 8000582:	f001 fded 	bl	8002160 <HAL_SPI_Transmit>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000518 	.word	0x20000518

08000594 <read_block>:

bool read_block(uint32_t block, uint8_t* data){
 8000594:	b580      	push	{r7, lr}
 8000596:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800059a:	af02      	add	r7, sp, #8
 800059c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005a0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005aa:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80005ae:	6019      	str	r1, [r3, #0]
	uint8_t cmd17[6];
	cmd17[0] = 0x51;
 80005b0:	2351      	movs	r3, #81	@ 0x51
 80005b2:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
	cmd17[1] = (block >> 24)&0xFF;
 80005b6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005ba:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	0e1b      	lsrs	r3, r3, #24
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	cmd17[2] = (block >> 16)&0xFF;
 80005c8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005cc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	cmd17[3] = (block >> 8) & 0xFF;
 80005da:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005de:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
	cmd17[4] = (block)&0xFF;
 80005ec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005f0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
	cmd17[5] = 0xFF;
 80005fc:	23ff      	movs	r3, #255	@ 0xff
 80005fe:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
	bool result = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	result = send_command(cmd17, 0x00);
 8000608:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff1e 	bl	8000450 <send_command>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	if(!result)
 800061a:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 800061e:	f083 0301 	eor.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <read_block+0x98>
		return 0;
 8000628:	2300      	movs	r3, #0
 800062a:	e07e      	b.n	800072a <read_block+0x196>
	uint8_t response[1];
	for(int i = 0; i < 1000; i++){
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000632:	e027      	b.n	8000684 <read_block+0xf0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f000 fec1 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 8000642:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000646:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800064a:	22ff      	movs	r2, #255	@ 0xff
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000652:	f107 010c 	add.w	r1, r7, #12
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2301      	movs	r3, #1
 800065e:	4835      	ldr	r0, [pc, #212]	@ (8000734 <read_block+0x1a0>)
 8000660:	f001 fed4 	bl	800240c <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800066a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066e:	f000 fea9 	bl	80013c4 <HAL_GPIO_WritePin>
		if(response[0] == 0xFE){
 8000672:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8000676:	2bfe      	cmp	r3, #254	@ 0xfe
 8000678:	d00a      	beq.n	8000690 <read_block+0xfc>
	for(int i = 0; i < 1000; i++){
 800067a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800067e:	3301      	adds	r3, #1
 8000680:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000684:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800068c:	dbd2      	blt.n	8000634 <read_block+0xa0>
 800068e:	e000      	b.n	8000692 <read_block+0xfe>
			break;
 8000690:	bf00      	nop
		}
	}

	if(response[0] != 0xFE)
 8000692:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8000696:	2bfe      	cmp	r3, #254	@ 0xfe
 8000698:	d001      	beq.n	800069e <read_block+0x10a>
		return 0;
 800069a:	2300      	movs	r3, #0
 800069c:	e045      	b.n	800072a <read_block+0x196>

	uint8_t send[512];
	memset(send, 0xFF,512);
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a6:	21ff      	movs	r1, #255	@ 0xff
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 f87f 	bl	80057ac <memset>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f000 fe84 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send, data, 512, HAL_MAX_DELAY);
 80006bc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80006c0:	f5a3 720a 	sub.w	r2, r3, #552	@ 0x228
 80006c4:	f107 0118 	add.w	r1, r7, #24
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	4817      	ldr	r0, [pc, #92]	@ (8000734 <read_block+0x1a0>)
 80006d6:	f001 fe99 	bl	800240c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f000 fe6e 	bl	80013c4 <HAL_GPIO_WritePin>

	uint8_t crc[2];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f2:	f000 fe67 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF}, crc, 2, HAL_MAX_DELAY);
 80006f6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80006fa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <read_block+0x1a4>)
 8000700:	8812      	ldrh	r2, [r2, #0]
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	f107 0214 	add.w	r2, r7, #20
 8000708:	f107 0110 	add.w	r1, r7, #16
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2302      	movs	r3, #2
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <read_block+0x1a0>)
 8000716:	f001 fe79 	bl	800240c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000724:	f000 fe4e 	bl	80013c4 <HAL_GPIO_WritePin>
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000518 	.word	0x20000518
 8000738:	08005868 	.word	0x08005868

0800073c <write_block>:

bool write_block(uint32_t block, uint8_t* data){
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	@ 0x38
 8000740:	af02      	add	r7, sp, #8
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	uint8_t cmd24[6];
	cmd24[0] = 0x58;
 8000746:	2358      	movs	r3, #88	@ 0x58
 8000748:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	cmd24[1] = (block >> 24)&0xFF;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	0e1b      	lsrs	r3, r3, #24
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	cmd24[2] = (block >> 16)&0xFF;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	0c1b      	lsrs	r3, r3, #16
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	cmd24[3] = (block >> 8) & 0xFF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	cmd24[4] = (block)&0xFF;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	cmd24[5] = 0xFF;
 8000772:	23ff      	movs	r3, #255	@ 0xff
 8000774:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	bool result = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	result = send_command(cmd24, 0x00);
 800077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe63 	bl	8000450 <send_command>
 800078a:	4603      	mov	r3, r0
 800078c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if(!result)
 8000790:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000794:	f083 0301 	eor.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <write_block+0x66>
		return 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	e097      	b.n	80008d2 <write_block+0x196>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f000 fe0a 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFE}, 1, HAL_MAX_DELAY);
 80007b0:	23fe      	movs	r3, #254	@ 0xfe
 80007b2:	f887 3020 	strb.w	r3, [r7, #32]
 80007b6:	f107 0120 	add.w	r1, r7, #32
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	2201      	movs	r2, #1
 80007c0:	4846      	ldr	r0, [pc, #280]	@ (80008dc <write_block+0x1a0>)
 80007c2:	f001 fccd 	bl	8002160 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f000 fdf8 	bl	80013c4 <HAL_GPIO_WritePin>

	for(int i = 0; i < 512; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007d8:	e01d      	b.n	8000816 <write_block+0xda>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e4:	f000 fdee 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t[]){data[i]}, 1, HAL_MAX_DELAY);
 80007e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	743b      	strb	r3, [r7, #16]
 80007f2:	f107 0110 	add.w	r1, r7, #16
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	2201      	movs	r2, #1
 80007fc:	4837      	ldr	r0, [pc, #220]	@ (80008dc <write_block+0x1a0>)
 80007fe:	f001 fcaf 	bl	8002160 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080c:	f000 fdda 	bl	80013c4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 512; i++){
 8000810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000812:	3301      	adds	r3, #1
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800081c:	dbdd      	blt.n	80007da <write_block+0x9e>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f000 fdcc 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFF, 0xFF}, 2, HAL_MAX_DELAY);
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <write_block+0x1a4>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	83bb      	strh	r3, [r7, #28]
 8000832:	f107 011c 	add.w	r1, r7, #28
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2202      	movs	r2, #2
 800083c:	4827      	ldr	r0, [pc, #156]	@ (80008dc <write_block+0x1a0>)
 800083e:	f001 fc8f 	bl	8002160 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084c:	f000 fdba 	bl	80013c4 <HAL_GPIO_WritePin>

	uint8_t response[1];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f000 fdb3 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 800085e:	23ff      	movs	r3, #255	@ 0xff
 8000860:	753b      	strb	r3, [r7, #20]
 8000862:	f107 0218 	add.w	r2, r7, #24
 8000866:	f107 0114 	add.w	r1, r7, #20
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	481a      	ldr	r0, [pc, #104]	@ (80008dc <write_block+0x1a0>)
 8000874:	f001 fdca 	bl	800240c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000882:	f000 fd9f 	bl	80013c4 <HAL_GPIO_WritePin>
	if((uint8_t)(response[0]&0x1F) != 0x05)
 8000886:	7e3b      	ldrb	r3, [r7, #24]
 8000888:	f003 031f 	and.w	r3, r3, #31
 800088c:	2b05      	cmp	r3, #5
 800088e:	d001      	beq.n	8000894 <write_block+0x158>
		return 0;
 8000890:	2300      	movs	r3, #0
 8000892:	e01e      	b.n	80008d2 <write_block+0x196>

	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f000 fd91 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 80008a2:	23ff      	movs	r3, #255	@ 0xff
 80008a4:	733b      	strb	r3, [r7, #12]
 80008a6:	f107 0218 	add.w	r2, r7, #24
 80008aa:	f107 010c 	add.w	r1, r7, #12
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	4809      	ldr	r0, [pc, #36]	@ (80008dc <write_block+0x1a0>)
 80008b8:	f001 fda8 	bl	800240c <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f000 fd7d 	bl	80013c4 <HAL_GPIO_WritePin>
		if(response[0] != 0x00)
 80008ca:	7e3b      	ldrb	r3, [r7, #24]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0e1      	beq.n	8000894 <write_block+0x158>
			break;
	}

	return 1;
 80008d0:	2301      	movs	r3, #1
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3730      	adds	r7, #48	@ 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000518 	.word	0x20000518
 80008e0:	08005868 	.word	0x08005868

080008e4 <initialize_SD_card>:

bool initialize_SD_card(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
	uint8_t cmd0[6] = {0x40, 0x00, 0x00, 0x00, 0x00, 0x95};
 80008ea:	4a4a      	ldr	r2, [pc, #296]	@ (8000a14 <initialize_SD_card+0x130>)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f4:	6018      	str	r0, [r3, #0]
 80008f6:	3304      	adds	r3, #4
 80008f8:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd8[6] = {0x48, 0x00, 0x00, 0x01, 0xAA, 0x87};
 80008fa:	4a47      	ldr	r2, [pc, #284]	@ (8000a18 <initialize_SD_card+0x134>)
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000904:	6018      	str	r0, [r3, #0]
 8000906:	3304      	adds	r3, #4
 8000908:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd55[6] = {0x77, 0x00, 0x00, 0x00, 0x00, 0xFF};
 800090a:	4a44      	ldr	r2, [pc, #272]	@ (8000a1c <initialize_SD_card+0x138>)
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000914:	6018      	str	r0, [r3, #0]
 8000916:	3304      	adds	r3, #4
 8000918:	8019      	strh	r1, [r3, #0]
		  uint8_t acdm41[6] = {0x69, 0x40,0x00, 0x00, 0x00, 0xFF};
 800091a:	4a41      	ldr	r2, [pc, #260]	@ (8000a20 <initialize_SD_card+0x13c>)
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000924:	6018      	str	r0, [r3, #0]
 8000926:	3304      	adds	r3, #4
 8000928:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd16[6] = {0x50, 0x00, 0x00, 0x02, 0x00, 0xFF};
 800092a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a24 <initialize_SD_card+0x140>)
 800092c:	463b      	mov	r3, r7
 800092e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000932:	6018      	str	r0, [r3, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	8019      	strh	r1, [r3, #0]
		  bool result = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		  initialize_SPI_mode();
 800093e:	f7ff fe0b 	bl	8000558 <initialize_SPI_mode>
		  while(result == 0)
 8000942:	e008      	b.n	8000956 <initialize_SD_card+0x72>
			  result = send_command(cmd0, 0x01);
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	2101      	movs	r1, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fd80 	bl	8000450 <send_command>
 8000950:	4603      	mov	r3, r0
 8000952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1ef      	bne.n	8000944 <initialize_SD_card+0x60>
		  result = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 800096a:	e008      	b.n	800097e <initialize_SD_card+0x9a>
			  result = send_command(cmd8, 0x01);
 800096c:	f107 0318 	add.w	r3, r7, #24
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fd6c 	bl	8000450 <send_command>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 800097e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000982:	f083 0301 	eor.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1ef      	bne.n	800096c <initialize_SD_card+0x88>
		  result = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000992:	e01a      	b.n	80009ca <initialize_SD_card+0xe6>
			  bool temp = send_command(cmd55, 0x01);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2101      	movs	r1, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fd58 	bl	8000450 <send_command>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			  if(!temp)
 80009a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009aa:	f083 0301 	eor.w	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d109      	bne.n	80009c8 <initialize_SD_card+0xe4>
				  continue;
			  result = send_command(acdm41, 0x00);
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd48 	bl	8000450 <send_command>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80009c6:	e000      	b.n	80009ca <initialize_SD_card+0xe6>
				  continue;
 80009c8:	bf00      	nop
		  while(result == 0){
 80009ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1dd      	bne.n	8000994 <initialize_SD_card+0xb0>
		  }
		  result = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 80009de:	e007      	b.n	80009f0 <initialize_SD_card+0x10c>
			  result = send_command(cmd16, 0x00);
 80009e0:	463b      	mov	r3, r7
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fd33 	bl	8000450 <send_command>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 80009f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f0      	bne.n	80009e0 <initialize_SD_card+0xfc>
		  }
		  result = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  is_initialized = 1;
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <initialize_SD_card+0x144>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
		  return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	0800586c 	.word	0x0800586c
 8000a18:	08005874 	.word	0x08005874
 8000a1c:	0800587c 	.word	0x0800587c
 8000a20:	08005884 	.word	0x08005884
 8000a24:	0800588c 	.word	0x0800588c
 8000a28:	20000514 	.word	0x20000514

08000a2c <is_SD_card_initialized>:

bool is_SD_card_initialized(){
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	return is_initialized;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <is_SD_card_initialized+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000514 	.word	0x20000514

08000a44 <SPI_Init>:
 #include "spi.h"

SPI_HandleTypeDef hspi1;
//PA5 = SCK, PA6 = MISO, PA7 = MOSI, PA9 = CS
void SPI_Init(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	 /* USER CODE END SPI1_Init 0 */
	 /* USER CODE BEGIN SPI1_Init 1 */
	 /* USER CODE END SPI1_Init 1 */
	 /* SPI1 parameter configuration*/
	 hspi1.Instance = SPI1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <SPI_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000abc <SPI_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
	 hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <SPI_Init+0x74>)
 8000a50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a54:	605a      	str	r2, [r3, #4]
	 hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <SPI_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	 hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <SPI_Init+0x74>)
 8000a5e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a62:	60da      	str	r2, [r3, #12]
	 hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <SPI_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
	 hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <SPI_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
	 hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <SPI_Init+0x74>)
 8000a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a76:	619a      	str	r2, [r3, #24]
	 hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <SPI_Init+0x74>)
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	61da      	str	r2, [r3, #28]
	 hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <SPI_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
	 hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <SPI_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
	 hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <SPI_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	 hspi1.Init.CRCPolynomial = 7;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <SPI_Init+0x74>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <SPI_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	@ 0x30
	 hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <SPI_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
	 if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <SPI_Init+0x74>)
 8000aa4:	f001 fad2 	bl	800204c <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SPI_Init+0x6e>
	 {
	   Error_Handler();
 8000aae:	f7ff fcc9 	bl	8000444 <Error_Handler>
	 }
	 /* USER CODE BEGIN SPI1_Init 2 */
	 /* USER CODE END SPI1_Init 2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000518 	.word	0x20000518
 8000abc:	40013000 	.word	0x40013000

08000ac0 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a17      	ldr	r2, [pc, #92]	@ (8000b84 <HAL_SPI_MspInit+0x7c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d128      	bne.n	8000b7c <HAL_SPI_MspInit+0x74>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	4a16      	ldr	r2, [pc, #88]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b5a:	23e0      	movs	r3, #224	@ 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f000 fa7a 	bl	8001070 <HAL_GPIO_Init>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	@ 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013000 	.word	0x40013000
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
#include "main.h"
#include "stm32l4xx_it.h"
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000be2:	f000 f89d 	bl	8000d20 <HAL_IncTick>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <USART3_IRQHandler+0x10>)
 8000bf2:	f001 ff29 	bl	8002a48 <HAL_UART_IRQHandler>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000048c 	.word	0x2000048c

08000c00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f004 fdb3 	bl	80057bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c56:	f7ff fabf 	bl	80001d8 <main>

08000c5a <LoopForever>:

LoopForever:
    b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c68:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c70:	200005a8 	.word	0x200005a8

08000c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_2_IRQHandler>

08000c76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f943 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f80e 	bl	8000ca8 <HAL_InitTick>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	e001      	b.n	8000c9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c98:	f7ff ff12 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_InitTick+0x6c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d023      	beq.n	8000d04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_InitTick+0x70>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_InitTick+0x6c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f941 	bl	8000f5a <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10f      	bne.n	8000cfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d809      	bhi.n	8000cf8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 f919 	bl	8000f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_InitTick+0x74>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e007      	b.n	8000d08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e004      	b.n	8000d08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e001      	b.n	8000d08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	2000057c 	.word	0x2000057c

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000057c 	.word	0x2000057c

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff47 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff5c 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffb0 	bl	8000ec8 <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d008      	beq.n	8000f9c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e022      	b.n	8000fe2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 020e 	bic.w	r2, r2, #14
 8000faa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc0:	f003 021c 	and.w	r2, r3, #28
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	2101      	movs	r1, #1
 8000fca:	fa01 f202 	lsl.w	r2, r1, r2
 8000fce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d005      	beq.n	8001012 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2204      	movs	r2, #4
 800100a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e029      	b.n	8001066 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 020e 	bic.w	r2, r2, #14
 8001020:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f003 021c 	and.w	r2, r3, #28
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	2101      	movs	r1, #1
 8001040:	fa01 f202 	lsl.w	r2, r1, r2
 8001044:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	4798      	blx	r3
    }
  }
  return status;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e17f      	b.n	8001380 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 8171 	beq.w	800137a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d005      	beq.n	80010b0 <HAL_GPIO_Init+0x40>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	f003 0201 	and.w	r2, r3, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b03      	cmp	r3, #3
 800111c:	d118      	bne.n	8001150 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001124:	2201      	movs	r2, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	f003 0201 	and.w	r2, r3, #1
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d017      	beq.n	800118c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	6939      	ldr	r1, [r7, #16]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80ac 	beq.w	800137a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	4b5f      	ldr	r3, [pc, #380]	@ (80013a0 <HAL_GPIO_Init+0x330>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001226:	4a5e      	ldr	r2, [pc, #376]	@ (80013a0 <HAL_GPIO_Init+0x330>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6613      	str	r3, [r2, #96]	@ 0x60
 800122e:	4b5c      	ldr	r3, [pc, #368]	@ (80013a0 <HAL_GPIO_Init+0x330>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800123a:	4a5a      	ldr	r2, [pc, #360]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001264:	d025      	beq.n	80012b2 <HAL_GPIO_Init+0x242>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	@ (80013a8 <HAL_GPIO_Init+0x338>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01f      	beq.n	80012ae <HAL_GPIO_Init+0x23e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	@ (80013ac <HAL_GPIO_Init+0x33c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x23a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	@ (80013b0 <HAL_GPIO_Init+0x340>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x236>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_GPIO_Init+0x344>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x232>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	@ (80013b8 <HAL_GPIO_Init+0x348>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x22e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4a      	ldr	r2, [pc, #296]	@ (80013bc <HAL_GPIO_Init+0x34c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x22a>
 8001296:	2306      	movs	r3, #6
 8001298:	e00c      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 800129a:	2307      	movs	r3, #7
 800129c:	e00a      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 800129e:	2305      	movs	r3, #5
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012a2:	2304      	movs	r3, #4
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x244>
 80012b2:	2300      	movs	r3, #0
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c4:	4937      	ldr	r1, [pc, #220]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d2:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f6:	4a32      	ldr	r2, [pc, #200]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012fc:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001320:	4a27      	ldr	r2, [pc, #156]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800134a:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001374:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f47f ae78 	bne.w	8001080 <HAL_GPIO_Init+0x10>
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000c00 	.word	0x48000c00
 80013b4:	48001000 	.word	0x48001000
 80013b8:	48001400 	.word	0x48001400
 80013bc:	48001800 	.word	0x48001800
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <HAL_PWREx_GetVoltageRange+0x18>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40007000 	.word	0x40007000

08001410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800141e:	d130      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800142c:	d038      	beq.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001436:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001438:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2232      	movs	r2, #50	@ 0x32
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	4a1b      	ldr	r2, [pc, #108]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9b      	lsrs	r3, r3, #18
 8001450:	3301      	adds	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001454:	e002      	b.n	800145c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3b01      	subs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001468:	d102      	bne.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x60>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f2      	bne.n	8001456 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147c:	d110      	bne.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e00f      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800148e:	d007      	beq.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001498:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800149e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000
 80014b4:	20000000 	.word	0x20000000
 80014b8:	431bde83 	.word	0x431bde83

080014bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e3ca      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b97      	ldr	r3, [pc, #604]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d8:	4b94      	ldr	r3, [pc, #592]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80e4 	beq.w	80016b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_RCC_OscConfig+0x4a>
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	f040 808b 	bne.w	8001614 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2b01      	cmp	r3, #1
 8001502:	f040 8087 	bne.w	8001614 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001506:	4b89      	ldr	r3, [pc, #548]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x62>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e3a2      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1a      	ldr	r2, [r3, #32]
 8001522:	4b82      	ldr	r3, [pc, #520]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <HAL_RCC_OscConfig+0x7c>
 800152e:	4b7f      	ldr	r3, [pc, #508]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001536:	e005      	b.n	8001544 <HAL_RCC_OscConfig+0x88>
 8001538:	4b7c      	ldr	r3, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001544:	4293      	cmp	r3, r2
 8001546:	d223      	bcs.n	8001590 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd1d 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e383      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155c:	4b73      	ldr	r3, [pc, #460]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a72      	ldr	r2, [pc, #456]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b70      	ldr	r3, [pc, #448]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	496d      	ldr	r1, [pc, #436]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157a:	4b6c      	ldr	r3, [pc, #432]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	4968      	ldr	r1, [pc, #416]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
 800158e:	e025      	b.n	80015dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001590:	4b66      	ldr	r3, [pc, #408]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a65      	ldr	r2, [pc, #404]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b63      	ldr	r3, [pc, #396]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4960      	ldr	r1, [pc, #384]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	495b      	ldr	r1, [pc, #364]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fcdd 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e343      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015dc:	f000 fc4a 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b52      	ldr	r3, [pc, #328]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	4950      	ldr	r1, [pc, #320]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001734 <HAL_RCC_OscConfig+0x278>)
 80015fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb51 	bl	8000ca8 <HAL_InitTick>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d052      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	e327      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d032      	beq.n	8001682 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800161c:	4b43      	ldr	r3, [pc, #268]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a42      	ldr	r2, [pc, #264]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001628:	f7ff fb8e 	bl	8000d48 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001630:	f7ff fb8a 	bl	8000d48 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e310      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001642:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a36      	ldr	r2, [pc, #216]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4931      	ldr	r1, [pc, #196]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	492c      	ldr	r1, [pc, #176]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
 8001680:	e01a      	b.n	80016b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a29      	ldr	r2, [pc, #164]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800168e:	f7ff fb5b 	bl	8000d48 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001696:	f7ff fb57 	bl	8000d48 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e2dd      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x1da>
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d074      	beq.n	80017ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x21a>
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d10e      	bne.n	80016ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d10b      	bne.n	80016ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d064      	beq.n	80017ac <HAL_RCC_OscConfig+0x2f0>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d160      	bne.n	80017ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e2ba      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x24a>
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e026      	b.n	8001754 <HAL_RCC_OscConfig+0x298>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800170e:	d115      	bne.n	800173c <HAL_RCC_OscConfig+0x280>
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a05      	ldr	r2, [pc, #20]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001716:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a02      	ldr	r2, [pc, #8]	@ (800172c <HAL_RCC_OscConfig+0x270>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x298>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	080058e0 	.word	0x080058e0
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004
 800173c:	4ba0      	ldr	r3, [pc, #640]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a9f      	ldr	r2, [pc, #636]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b9d      	ldr	r3, [pc, #628]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a9c      	ldr	r2, [pc, #624]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff faf4 	bl	8000d48 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff faf0 	bl	8000d48 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e276      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	4b92      	ldr	r3, [pc, #584]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x2a8>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fae0 	bl	8000d48 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fadc 	bl	8000d48 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e262      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179e:	4b88      	ldr	r3, [pc, #544]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x2d0>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d060      	beq.n	800187c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x310>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d119      	bne.n	80017fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d116      	bne.n	80017fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017cc:	4b7c      	ldr	r3, [pc, #496]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x328>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e23f      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b76      	ldr	r3, [pc, #472]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	4973      	ldr	r1, [pc, #460]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	e040      	b.n	800187c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d023      	beq.n	800184a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6e      	ldr	r2, [pc, #440]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fa9b 	bl	8000d48 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fa97 	bl	8000d48 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e21d      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001828:	4b65      	ldr	r3, [pc, #404]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b62      	ldr	r3, [pc, #392]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	495f      	ldr	r1, [pc, #380]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
 8001848:	e018      	b.n	800187c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5c      	ldr	r2, [pc, #368]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff fa77 	bl	8000d48 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff fa73 	bl	8000d48 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1f9      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001870:	4b53      	ldr	r3, [pc, #332]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d03c      	beq.n	8001902 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01c      	beq.n	80018ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001890:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001896:	4a4a      	ldr	r2, [pc, #296]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff fa52 	bl	8000d48 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fa4e 	bl	8000d48 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1d4      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ba:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ef      	beq.n	80018a8 <HAL_RCC_OscConfig+0x3ec>
 80018c8:	e01b      	b.n	8001902 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b3d      	ldr	r3, [pc, #244]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d0:	4a3b      	ldr	r2, [pc, #236]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fa35 	bl	8000d48 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fa31 	bl	8000d48 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1b7      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	4b32      	ldr	r3, [pc, #200]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ef      	bne.n	80018e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a6 	beq.w	8001a5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001914:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10d      	bne.n	800193c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192a:	6593      	str	r3, [r2, #88]	@ 0x58
 800192c:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001938:	2301      	movs	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193c:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_RCC_OscConfig+0x508>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d118      	bne.n	800197a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <HAL_RCC_OscConfig+0x508>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_RCC_OscConfig+0x508>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7ff f9f8 	bl	8000d48 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7ff f9f4 	bl	8000d48 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e17a      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_RCC_OscConfig+0x508>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x4d8>
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001992:	e029      	b.n	80019e8 <HAL_RCC_OscConfig+0x52c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d115      	bne.n	80019c8 <HAL_RCC_OscConfig+0x50c>
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a2:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b2:	4a03      	ldr	r2, [pc, #12]	@ (80019c0 <HAL_RCC_OscConfig+0x504>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x52c>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40007000 	.word	0x40007000
 80019c8:	4b9c      	ldr	r3, [pc, #624]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ce:	4a9b      	ldr	r2, [pc, #620]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d8:	4b98      	ldr	r3, [pc, #608]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019de:	4a97      	ldr	r2, [pc, #604]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d016      	beq.n	8001a1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f9aa 	bl	8000d48 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff f9a6 	bl	8000d48 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e12a      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ed      	beq.n	80019f8 <HAL_RCC_OscConfig+0x53c>
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f993 	bl	8000d48 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff f98f 	bl	8000d48 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e113      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ed      	bne.n	8001a26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4a:	7ffb      	ldrb	r3, [r7, #31]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a50:	4b7a      	ldr	r3, [pc, #488]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	4a79      	ldr	r2, [pc, #484]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80fe 	beq.w	8001c62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	f040 80d0 	bne.w	8001c10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a70:	4b72      	ldr	r3, [pc, #456]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d130      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d127      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d11f      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ab0:	2a07      	cmp	r2, #7
 8001ab2:	bf14      	ite	ne
 8001ab4:	2201      	movne	r2, #1
 8001ab6:	2200      	moveq	r2, #0
 8001ab8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d113      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d06e      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	d069      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001aec:	4b53      	ldr	r3, [pc, #332]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001af8:	4b50      	ldr	r3, [pc, #320]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0ad      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b08:	4b4c      	ldr	r3, [pc, #304]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b14:	f7ff f918 	bl	8000d48 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f914 	bl	8000d48 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e09a      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2e:	4b43      	ldr	r3, [pc, #268]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3a:	4b40      	ldr	r3, [pc, #256]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <HAL_RCC_OscConfig+0x784>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b4a:	3a01      	subs	r2, #1
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b54:	0212      	lsls	r2, r2, #8
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b5c:	0852      	lsrs	r2, r2, #1
 8001b5e:	3a01      	subs	r2, #1
 8001b60:	0552      	lsls	r2, r2, #21
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b68:	0852      	lsrs	r2, r2, #1
 8001b6a:	3a01      	subs	r2, #1
 8001b6c:	0652      	lsls	r2, r2, #25
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b74:	0912      	lsrs	r2, r2, #4
 8001b76:	0452      	lsls	r2, r2, #17
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	4930      	ldr	r1, [pc, #192]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2d      	ldr	r2, [pc, #180]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4a2a      	ldr	r2, [pc, #168]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b98:	f7ff f8d6 	bl	8000d48 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f8d2 	bl	8000d48 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e058      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bbe:	e050      	b.n	8001c62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e04f      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d148      	bne.n	8001c62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4a16      	ldr	r2, [pc, #88]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001be8:	f7ff f8ae 	bl	8000d48 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f8aa 	bl	8000d48 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e030      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x734>
 8001c0e:	e028      	b.n	8001c62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d023      	beq.n	8001c5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <HAL_RCC_OscConfig+0x780>)
 8001c1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff f891 	bl	8000d48 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c28:	e00c      	b.n	8001c44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff f88d 	bl	8000d48 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d905      	bls.n	8001c44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e013      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_OscConfig+0x7b0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ec      	bne.n	8001c2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_RCC_OscConfig+0x7b0>)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4905      	ldr	r1, [pc, #20]	@ (8001c6c <HAL_RCC_OscConfig+0x7b0>)
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_RCC_OscConfig+0x7b4>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
 8001c5c:	e001      	b.n	8001c62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	feeefffc 	.word	0xfeeefffc

08001c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0e7      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b75      	ldr	r3, [pc, #468]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b72      	ldr	r3, [pc, #456]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 0207 	bic.w	r2, r3, #7
 8001c9e:	4970      	ldr	r1, [pc, #448]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0cf      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4b66      	ldr	r3, [pc, #408]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d908      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b63      	ldr	r3, [pc, #396]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4960      	ldr	r1, [pc, #384]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d04c      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d121      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0a6      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d12:	4b54      	ldr	r3, [pc, #336]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d115      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e09a      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e08e      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e086      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4a:	4b46      	ldr	r3, [pc, #280]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 0203 	bic.w	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4943      	ldr	r1, [pc, #268]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fff4 	bl	8000d48 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7fe fff0 	bl	8000d48 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e06e      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 020c 	and.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d208      	bcs.n	8001dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	492b      	ldr	r1, [pc, #172]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dba:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d210      	bcs.n	8001dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc8:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 0207 	bic.w	r2, r3, #7
 8001dd0:	4923      	ldr	r1, [pc, #140]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd8:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <HAL_RCC_ClockConfig+0x1ec>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e036      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4918      	ldr	r1, [pc, #96]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4910      	ldr	r1, [pc, #64]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e28:	f000 f824 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	490b      	ldr	r1, [pc, #44]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f4>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f8>)
 8001e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_RCC_ClockConfig+0x1fc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ff2b 	bl	8000ca8 <HAL_InitTick>
 8001e52:	4603      	mov	r3, r0
 8001e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e56:	7afb      	ldrb	r3, [r7, #11]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	080058e0 	.word	0x080058e0
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e82:	4b3e      	ldr	r3, [pc, #248]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d121      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d11e      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea8:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb4:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d102      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	e004      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef8:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d134      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f02:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d003      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0xac>
 8001f18:	e005      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f1c:	617b      	str	r3, [r7, #20]
      break;
 8001f1e:	e005      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f20:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f22:	617b      	str	r3, [r7, #20]
      break;
 8001f24:	e002      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	617b      	str	r3, [r7, #20]
      break;
 8001f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	3301      	adds	r3, #1
 8001f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	fb03 f202 	mul.w	r2, r3, r2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	0e5b      	lsrs	r3, r3, #25
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	080058f0 	.word	0x080058f0
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f98:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fa4:	f7ff fa26 	bl	80013f4 <HAL_PWREx_GetVoltageRange>
 8001fa8:	6178      	str	r0, [r7, #20]
 8001faa:	e014      	b.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b25      	ldr	r3, [pc, #148]	@ (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	4a24      	ldr	r2, [pc, #144]	@ (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb8:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fc4:	f7ff fa16 	bl	80013f4 <HAL_PWREx_GetVoltageRange>
 8001fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fdc:	d10b      	bne.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	@ 0x80
 8001fe2:	d919      	bls.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fe8:	d902      	bls.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fea:	2302      	movs	r3, #2
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e013      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	e010      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b80      	cmp	r3, #128	@ 0x80
 8001ffa:	d902      	bls.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e00a      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b80      	cmp	r3, #128	@ 0x80
 8002006:	d102      	bne.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e004      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b70      	cmp	r3, #112	@ 0x70
 8002012:	d101      	bne.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002014:	2301      	movs	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 0207 	bic.w	r2, r3, #7
 8002020:	4909      	ldr	r1, [pc, #36]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002028:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	40022000 	.word	0x40022000

0800204c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07c      	b.n	8002158 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe fd45 	bl	8000b08 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002094:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800209e:	d902      	bls.n	80020a6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e002      	b.n	80020ac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80020b4:	d007      	beq.n	80020c6 <HAL_SPI_Init+0x7a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020be:	d002      	beq.n	80020c6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020d6:	d903      	bls.n	80020e0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80020de:	e002      	b.n	80020e6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	ea42 0103 	orr.w	r1, r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0204 	and.w	r2, r3, #4
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	ea42 0103 	orr.w	r1, r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_SPI_Transmit+0x26>
 8002182:	2302      	movs	r3, #2
 8002184:	e13e      	b.n	8002404 <HAL_SPI_Transmit+0x2a4>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800218e:	f7fe fddb 	bl	8000d48 <HAL_GetTick>
 8002192:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d002      	beq.n	80021a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
 80021a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021a4:	e125      	b.n	80023f2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_Transmit+0x52>
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021b6:	e11c      	b.n	80023f2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2203      	movs	r2, #3
 80021bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002202:	d107      	bne.n	8002214 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002212:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221e:	2b40      	cmp	r3, #64	@ 0x40
 8002220:	d007      	beq.n	8002232 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800223a:	d947      	bls.n	80022cc <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d004      	beq.n	800224e <HAL_SPI_Transmit+0xee>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d138      	bne.n	80022c0 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	881a      	ldrh	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3302      	adds	r3, #2
 800225c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800226c:	e028      	b.n	80022c0 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b02      	cmp	r3, #2
 800227a:	d10f      	bne.n	800229c <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3302      	adds	r3, #2
 800228a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800229a:	e011      	b.n	80022c0 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_SPI_Transmit+0x15a>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d00a      	beq.n	80022c0 <HAL_SPI_Transmit+0x160>
 80022aa:	f7fe fd4d 	bl	8000d48 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d802      	bhi.n	80022c0 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022be:	e098      	b.n	80023f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1d1      	bne.n	800226e <HAL_SPI_Transmit+0x10e>
 80022ca:	e070      	b.n	80023ae <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <HAL_SPI_Transmit+0x17e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d162      	bne.n	80023a4 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d90f      	bls.n	8002308 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	881a      	ldrh	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3302      	adds	r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b02      	subs	r3, #2
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002306:	e04d      	b.n	80023a4 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	60ba      	str	r2, [r7, #8]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	320c      	adds	r2, #12
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002326:	e03d      	b.n	80023a4 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d124      	bne.n	8002380 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d90f      	bls.n	8002360 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3302      	adds	r3, #2
 800234e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b02      	subs	r3, #2
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800235e:	e021      	b.n	80023a4 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	60ba      	str	r2, [r7, #8]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	320c      	adds	r2, #12
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800237e:	e011      	b.n	80023a4 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_SPI_Transmit+0x23e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d00a      	beq.n	80023a4 <HAL_SPI_Transmit+0x244>
 800238e:	f7fe fcdb 	bl	8000d48 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d802      	bhi.n	80023a4 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023a2:	e026      	b.n	80023f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1bc      	bne.n	8002328 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fb02 	bl	80029bc <SPI_EndRxTxTransaction>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	77fb      	strb	r3, [r7, #31]
 80023ee:	e000      	b.n	80023f2 <HAL_SPI_Transmit+0x292>
  }

error:
 80023f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002402:	7ffb      	ldrb	r3, [r7, #31]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002426:	2301      	movs	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_SPI_TransmitReceive+0x32>
 800243a:	2302      	movs	r3, #2
 800243c:	e1e2      	b.n	8002804 <HAL_SPI_TransmitReceive+0x3f8>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002446:	f7fe fc7f 	bl	8000d48 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002452:	b2db      	uxtb	r3, r3
 8002454:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d00e      	beq.n	8002480 <HAL_SPI_TransmitReceive+0x74>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002468:	d106      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x6c>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d003      	beq.n	8002480 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800247e:	e1b7      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x86>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x86>
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002498:	e1aa      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d003      	beq.n	80024ae <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2205      	movs	r2, #5
 80024aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	887a      	ldrh	r2, [r7, #2]
 80024c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	887a      	ldrh	r2, [r7, #2]
 80024da:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024f0:	d805      	bhi.n	80024fe <HAL_SPI_TransmitReceive+0xf2>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d908      	bls.n	8002510 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e007      	b.n	8002520 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800251e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252a:	2b40      	cmp	r3, #64	@ 0x40
 800252c:	d007      	beq.n	800253e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002546:	d975      	bls.n	8002634 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_SPI_TransmitReceive+0x14e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d160      	bne.n	800261c <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3302      	adds	r3, #2
 8002568:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002578:	e050      	b.n	800261c <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01c      	beq.n	80025ba <HAL_SPI_TransmitReceive+0x1ae>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d017      	beq.n	80025ba <HAL_SPI_TransmitReceive+0x1ae>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d110      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3302      	adds	r3, #2
 80025a6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01a      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x1f0>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d113      	bne.n	80025fc <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3302      	adds	r3, #2
 80025e4:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d00b      	beq.n	800261c <HAL_SPI_TransmitReceive+0x210>
 8002604:	f7fe fba0 	bl	8000d48 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002610:	429a      	cmp	r2, r3
 8002612:	d803      	bhi.n	800261c <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800261a:	e0e9      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1a9      	bne.n	800257a <HAL_SPI_TransmitReceive+0x16e>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1a3      	bne.n	800257a <HAL_SPI_TransmitReceive+0x16e>
 8002632:	e0c9      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_SPI_TransmitReceive+0x23c>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	f040 80b3 	bne.w	80027ae <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d90f      	bls.n	8002672 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3302      	adds	r3, #2
 8002660:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b02      	subs	r3, #2
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002670:	e09d      	b.n	80027ae <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	60ba      	str	r2, [r7, #8]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	320c      	adds	r2, #12
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002690:	e08d      	b.n	80027ae <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d031      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x2f0>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d02c      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x2f0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d125      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d90f      	bls.n	80026da <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3302      	adds	r3, #2
 80026c8:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b02      	subs	r3, #2
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026d8:	e00e      	b.n	80026f8 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	320c      	adds	r2, #12
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d042      	beq.n	800278e <HAL_SPI_TransmitReceive+0x382>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b01      	cmp	r3, #1
 8002714:	d13b      	bne.n	800278e <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d920      	bls.n	8002764 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3302      	adds	r3, #2
 8002732:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b02      	subs	r3, #2
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d81b      	bhi.n	800278a <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	e012      	b.n	800278a <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f103 020c 	add.w	r2, r3, #12
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	1c59      	adds	r1, r3, #1
 8002770:	6079      	str	r1, [r7, #4]
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800278a:	2301      	movs	r3, #1
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d00b      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x3a2>
 8002796:	f7fe fad7 	bl	8000d48 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d803      	bhi.n	80027ae <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80027ac:	e020      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f47f af6c 	bne.w	8002692 <HAL_SPI_TransmitReceive+0x286>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f47f af65 	bne.w	8002692 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f8f5 	bl	80029bc <SPI_EndRxTxTransaction>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ec:	e000      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80027ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002800:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002804:	4618      	mov	r0, r3
 8002806:	3728      	adds	r7, #40	@ 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281a:	e04c      	b.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d048      	beq.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800282a:	f7fe fa8d 	bl	8000d48 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d83d      	bhi.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002852:	d111      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800285c:	d004      	beq.n	8002868 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002866:	d107      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002880:	d10f      	bne.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e00e      	b.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d101      	bne.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xbe>
 80028c6:	2201      	movs	r2, #1
 80028c8:	e000      	b.n	80028cc <SPI_WaitFlagStateUntilTimeout+0xc0>
 80028ca:	2200      	movs	r2, #0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d1a4      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80028ea:	e05a      	b.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80028f2:	d109      	bne.n	8002908 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002906:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d048      	beq.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002916:	f7fe fa17 	bl	8000d48 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d83d      	bhi.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800293e:	d111      	bne.n	8002964 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002948:	d004      	beq.n	8002954 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002952:	d107      	bne.n	8002964 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296c:	d10f      	bne.n	800298e <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800298c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e008      	b.n	80029b4 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d19c      	bne.n	80028ec <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff ff81 	bl	80028dc <SPI_WaitFifoStateUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e027      	b.n	8002a40 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	2180      	movs	r1, #128	@ 0x80
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff ff06 	bl	800280c <SPI_WaitFlagStateUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e014      	b.n	8002a40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff ff5a 	bl	80028dc <SPI_WaitFifoStateUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e000      	b.n	8002a40 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a76:	4013      	ands	r3, r2
 8002a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d115      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00f      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 82ca 	beq.w	800303a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
      }
      return;
 8002aae:	e2c4      	b.n	800303a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8117 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ac6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002aca:	4b85      	ldr	r3, [pc, #532]	@ (8002ce0 <HAL_UART_IRQHandler+0x298>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 810a 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d011      	beq.n	8002b04 <HAL_UART_IRQHandler+0xbc>
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d011      	beq.n	8002b34 <HAL_UART_IRQHandler+0xec>
 8002b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2202      	movs	r2, #2
 8002b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b2a:	f043 0204 	orr.w	r2, r3, #4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <HAL_UART_IRQHandler+0x11c>
 8002b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2204      	movs	r2, #4
 8002b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d017      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b96:	f043 0208 	orr.w	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x18a>
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8230 	beq.w	800303e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1a:	2b40      	cmp	r3, #64	@ 0x40
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d04f      	beq.n	8002cca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa32 	bl	8003094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	d141      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3308      	adds	r3, #8
 8002c44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c4c:	e853 3f00 	ldrex	r3, [r3]
 8002c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3308      	adds	r3, #8
 8002c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c7a:	e841 2300 	strex	r3, r2, [r1]
 8002c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1d9      	bne.n	8002c3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c96:	4a13      	ldr	r2, [pc, #76]	@ (8002ce4 <HAL_UART_IRQHandler+0x29c>)
 8002c98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f9a5 	bl	8000fee <HAL_DMA_Abort_IT>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d017      	beq.n	8002cda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e00f      	b.n	8002cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9d4 	bl	8003068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e00b      	b.n	8002cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9d0 	bl	8003068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	e007      	b.n	8002cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f9cc 	bl	8003068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002cd8:	e1b1      	b.n	800303e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cda:	bf00      	nop
    return;
 8002cdc:	e1af      	b.n	800303e <HAL_UART_IRQHandler+0x5f6>
 8002cde:	bf00      	nop
 8002ce0:	04000120 	.word	0x04000120
 8002ce4:	0800315d 	.word	0x0800315d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 816a 	bne.w	8002fc6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8163 	beq.w	8002fc6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 815c 	beq.w	8002fc6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2210      	movs	r2, #16
 8002d14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d20:	2b40      	cmp	r3, #64	@ 0x40
 8002d22:	f040 80d4 	bne.w	8002ece <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80ad 	beq.w	8002e96 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d46:	429a      	cmp	r2, r3
 8002d48:	f080 80a5 	bcs.w	8002e96 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 8086 	bne.w	8002e74 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1da      	bne.n	8002d68 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3308      	adds	r3, #8
 8002db8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e1      	bne.n	8002db2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3308      	adds	r3, #8
 8002df4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e3      	bne.n	8002dee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e44:	f023 0310 	bic.w	r3, r3, #16
 8002e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e4      	bne.n	8002e34 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f87f 	bl	8000f72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f8f4 	bl	800307c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002e94:	e0d5      	b.n	8003042 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	f040 80ce 	bne.w	8003042 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	f040 80c5 	bne.w	8003042 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f8d8 	bl	800307c <HAL_UARTEx_RxEventCallback>
      return;
 8002ecc:	e0b9      	b.n	8003042 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80ab 	beq.w	8003046 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a6 	beq.w	8003046 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e4      	bne.n	8002efa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3308      	adds	r3, #8
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3308      	adds	r3, #8
 8002f50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f54:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e3      	bne.n	8002f30 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f023 0310 	bic.w	r3, r3, #16
 8002f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	e841 2300 	strex	r3, r2, [r1]
 8002faa:	617b      	str	r3, [r7, #20]
   return(result);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e4      	bne.n	8002f7c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f85c 	bl	800307c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fc4:	e03f      	b.n	8003046 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x5a8>
 8002fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002fe6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8f7 	bl	80031dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fee:	e02d      	b.n	800304c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00e      	beq.n	800301a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01c      	beq.n	800304a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
    }
    return;
 8003018:	e017      	b.n	800304a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800301e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d012      	beq.n	800304c <HAL_UART_IRQHandler+0x604>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8a8 	bl	8003188 <UART_EndTransmit_IT>
    return;
 8003038:	e008      	b.n	800304c <HAL_UART_IRQHandler+0x604>
      return;
 800303a:	bf00      	nop
 800303c:	e006      	b.n	800304c <HAL_UART_IRQHandler+0x604>
    return;
 800303e:	bf00      	nop
 8003040:	e004      	b.n	800304c <HAL_UART_IRQHandler+0x604>
      return;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <HAL_UART_IRQHandler+0x604>
      return;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_UART_IRQHandler+0x604>
    return;
 800304a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800304c:	37e8      	adds	r7, #232	@ 0xe8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop

08003054 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b095      	sub	sp, #84	@ 0x54
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80030bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e6      	bne.n	800309c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3308      	adds	r3, #8
 80030d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3308      	adds	r3, #8
 80030ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e5      	bne.n	80030ce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003106:	2b01      	cmp	r3, #1
 8003108:	d118      	bne.n	800313c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	60bb      	str	r3, [r7, #8]
   return(result);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f023 0310 	bic.w	r3, r3, #16
 800311e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6979      	ldr	r1, [r7, #20]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	613b      	str	r3, [r7, #16]
   return(result);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e6      	bne.n	800310a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003150:	bf00      	nop
 8003152:	3754      	adds	r7, #84	@ 0x54
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff ff74 	bl	8003068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	60bb      	str	r3, [r7, #8]
   return(result);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	613b      	str	r3, [r7, #16]
   return(result);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e6      	bne.n	8003190 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ff40 	bl	8003054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031d4:	bf00      	nop
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80031f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
	switch(pdrv){
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d108      	bne.n	8003222 <disk_status+0x22>
	case DEV_MMC:
		if(is_SD_card_initialized())
 8003210:	f7fd fc0c 	bl	8000a2c <is_SD_card_initialized>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <disk_status+0x1e>
			return 0;
 800321a:	2300      	movs	r3, #0
 800321c:	e002      	b.n	8003224 <disk_status+0x24>
		else
			return STA_NOINIT;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <disk_status+0x24>
	default:
		return STA_NOINIT;
 8003222:	2301      	movs	r3, #1
	}
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat = STA_NOINIT;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <disk_initialize+0x24>
	case DEV_MMC:
		if(initialize_SD_card() == 1)
 8003240:	f7fd fb50 	bl	80008e4 <initialize_SD_card>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <disk_initialize+0x28>
			stat = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
		break;
 800324e:	e001      	b.n	8003254 <disk_initialize+0x28>
	default:
		return STA_NOINIT;
 8003250:	2301      	movs	r3, #1
 8003252:	e001      	b.n	8003258 <disk_initialize+0x2c>
		break;
 8003254:	bf00      	nop
	}
	return stat;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4603      	mov	r3, r0
 800326e:	73fb      	strb	r3, [r7, #15]
  switch(pdrv){
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d127      	bne.n	80032c6 <disk_read+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 8003276:	f7fd fbd9 	bl	8000a2c <is_SD_card_initialized>
 800327a:	4603      	mov	r3, r0
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <disk_read+0x2a>
			return RES_NOTRDY;
 8003286:	2303      	movs	r3, #3
 8003288:	e01e      	b.n	80032c8 <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e014      	b.n	80032ba <disk_read+0x5a>
			if(!read_block(sector+i, buff+(i*512)))
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	18d0      	adds	r0, r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	025b      	lsls	r3, r3, #9
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f7fd f978 	bl	8000594 <read_block>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <disk_read+0x54>
				return RES_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e009      	b.n	80032c8 <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3e6      	bcc.n	8003290 <disk_read+0x30>
		}
		return RES_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <disk_read+0x68>
	default:
		return RES_PARERR;
 80032c6:	2304      	movs	r3, #4
	}
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4603      	mov	r3, r0
 80032de:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d127      	bne.n	8003336 <disk_write+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 80032e6:	f7fd fba1 	bl	8000a2c <is_SD_card_initialized>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <disk_write+0x2a>
			return RES_NOTRDY;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e01e      	b.n	8003338 <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e014      	b.n	800332a <disk_write+0x5a>
			if(!write_block(sector+i, buff+(i*512)))
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	18d0      	adds	r0, r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	025b      	lsls	r3, r3, #9
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	4619      	mov	r1, r3
 8003310:	f7fd fa14 	bl	800073c <write_block>
 8003314:	4603      	mov	r3, r0
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <disk_write+0x54>
				return RES_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e009      	b.n	8003338 <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3301      	adds	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d3e6      	bcc.n	8003300 <disk_write+0x30>
		}
		return RES_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <disk_write+0x68>
	default:
		return RES_PARERR;
 8003336:	2304      	movs	r3, #4
	}
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	603a      	str	r2, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	460b      	mov	r3, r1
 800334e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]

  switch(cmd){
 8003354:	79bb      	ldrb	r3, [r7, #6]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d825      	bhi.n	80033a6 <disk_ioctl+0x66>
 800335a:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <disk_ioctl+0x20>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003375 	.word	0x08003375
 8003364:	0800337b 	.word	0x0800337b
 8003368:	08003387 	.word	0x08003387
 800336c:	08003395 	.word	0x08003395
 8003370:	080033a1 	.word	0x080033a1
  case CTRL_SYNC:
	  res = RES_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
	  break;
 8003378:	e018      	b.n	80033ac <disk_ioctl+0x6c>
  case GET_SECTOR_COUNT:
	  *(DWORD*)buff = 67,108,864;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2243      	movs	r2, #67	@ 0x43
 800337e:	601a      	str	r2, [r3, #0]
	  res = RES_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
	  break;
 8003384:	e012      	b.n	80033ac <disk_ioctl+0x6c>
  case GET_SECTOR_SIZE:
	  *(WORD*)buff = 512;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800338c:	801a      	strh	r2, [r3, #0]
	  res = RES_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
	  break;
 8003392:	e00b      	b.n	80033ac <disk_ioctl+0x6c>
  case GET_BLOCK_SIZE:
	  *(DWORD*)buff = 32;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2220      	movs	r2, #32
 8003398:	601a      	str	r2, [r3, #0]
	  res = RES_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
	  break;
 800339e:	e005      	b.n	80033ac <disk_ioctl+0x6c>
  case CTRL_TRIM:
	  res = RES_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]
	  break;
 80033a4:	e002      	b.n	80033ac <disk_ioctl+0x6c>
  default:
	  res = RES_PARERR;
 80033a6:	2304      	movs	r3, #4
 80033a8:	73fb      	strb	r3, [r7, #15]
	  break;
 80033aa:	bf00      	nop
  }
}
 80033ac:	bf00      	nop
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop

080033bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3301      	adds	r3, #1
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80033cc:	89fb      	ldrh	r3, [r7, #14]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	b21a      	sxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b21b      	sxth	r3, r3
 80033dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80033de:	89fb      	ldrh	r3, [r7, #14]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3303      	adds	r3, #3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	3202      	adds	r2, #2
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	3201      	adds	r2, #1
 8003412:	7812      	ldrb	r2, [r2, #0]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
	return rv;
 8003424:	68fb      	ldr	r3, [r7, #12]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	887a      	ldrh	r2, [r7, #2]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	1c53      	adds	r3, r2, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1c59      	adds	r1, r3, #1
 80034e4:	6179      	str	r1, [r7, #20]
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f1      	bne.n	80034da <mem_cpy+0x1a>
	}
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	617a      	str	r2, [r7, #20]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3b01      	subs	r3, #1
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f3      	bne.n	8003512 <mem_set+0x10>
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	@ 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	61fa      	str	r2, [r7, #28]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	61ba      	str	r2, [r7, #24]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <mem_cmp+0x40>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0eb      	beq.n	8003550 <mem_cmp+0x18>

	return r;
 8003578:	697b      	ldr	r3, [r7, #20]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	@ 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003590:	e002      	b.n	8003598 <chk_chr+0x12>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3301      	adds	r3, #1
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <chk_chr+0x26>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d1f2      	bne.n	8003592 <chk_chr+0xc>
	return *str;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	781b      	ldrb	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e029      	b.n	8003624 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80035d0:	4a27      	ldr	r2, [pc, #156]	@ (8003670 <chk_lock+0xb4>)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01d      	beq.n	800361a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80035de:	4a24      	ldr	r2, [pc, #144]	@ (8003670 <chk_lock+0xb4>)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d116      	bne.n	800361e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80035f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003670 <chk_lock+0xb4>)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003600:	429a      	cmp	r2, r3
 8003602:	d10c      	bne.n	800361e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003604:	4a1a      	ldr	r2, [pc, #104]	@ (8003670 <chk_lock+0xb4>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	3308      	adds	r3, #8
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003614:	429a      	cmp	r2, r3
 8003616:	d102      	bne.n	800361e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003618:	e007      	b.n	800362a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3301      	adds	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d9d2      	bls.n	80035d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d109      	bne.n	8003644 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <chk_lock+0x80>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d101      	bne.n	8003640 <chk_lock+0x84>
 800363c:	2300      	movs	r3, #0
 800363e:	e010      	b.n	8003662 <chk_lock+0xa6>
 8003640:	2312      	movs	r3, #18
 8003642:	e00e      	b.n	8003662 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <chk_lock+0xa0>
 800364a:	4a09      	ldr	r2, [pc, #36]	@ (8003670 <chk_lock+0xb4>)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	330c      	adds	r3, #12
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800365a:	d101      	bne.n	8003660 <chk_lock+0xa4>
 800365c:	2310      	movs	r3, #16
 800365e:	e000      	b.n	8003662 <chk_lock+0xa6>
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000588 	.word	0x20000588

08003674 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e002      	b.n	8003686 <enq_lock+0x12>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3301      	adds	r3, #1
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d806      	bhi.n	800369a <enq_lock+0x26>
 800368c:	4a09      	ldr	r2, [pc, #36]	@ (80036b4 <enq_lock+0x40>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	4413      	add	r3, r2
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f2      	bne.n	8003680 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b02      	cmp	r3, #2
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000588 	.word	0x20000588

080036b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e01f      	b.n	8003708 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80036c8:	4a41      	ldr	r2, [pc, #260]	@ (80037d0 <inc_lock+0x118>)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d113      	bne.n	8003702 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80036da:	4a3d      	ldr	r2, [pc, #244]	@ (80037d0 <inc_lock+0x118>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d109      	bne.n	8003702 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80036ee:	4a38      	ldr	r2, [pc, #224]	@ (80037d0 <inc_lock+0x118>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	4413      	add	r3, r2
 80036f6:	3308      	adds	r3, #8
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80036fe:	429a      	cmp	r2, r3
 8003700:	d006      	beq.n	8003710 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3301      	adds	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d9dc      	bls.n	80036c8 <inc_lock+0x10>
 800370e:	e000      	b.n	8003712 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003710:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d132      	bne.n	800377e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e002      	b.n	8003724 <inc_lock+0x6c>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d806      	bhi.n	8003738 <inc_lock+0x80>
 800372a:	4a29      	ldr	r2, [pc, #164]	@ (80037d0 <inc_lock+0x118>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	4413      	add	r3, r2
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f2      	bne.n	800371e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d101      	bne.n	8003742 <inc_lock+0x8a>
 800373e:	2300      	movs	r3, #0
 8003740:	e040      	b.n	80037c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4922      	ldr	r1, [pc, #136]	@ (80037d0 <inc_lock+0x118>)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	440b      	add	r3, r1
 800374e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	491e      	ldr	r1, [pc, #120]	@ (80037d0 <inc_lock+0x118>)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	440b      	add	r3, r1
 800375c:	3304      	adds	r3, #4
 800375e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	491a      	ldr	r1, [pc, #104]	@ (80037d0 <inc_lock+0x118>)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	440b      	add	r3, r1
 800376c:	3308      	adds	r3, #8
 800376e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003770:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <inc_lock+0x118>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	4413      	add	r3, r2
 8003778:	330c      	adds	r3, #12
 800377a:	2200      	movs	r2, #0
 800377c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <inc_lock+0xe0>
 8003784:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <inc_lock+0x118>)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4413      	add	r3, r2
 800378c:	330c      	adds	r3, #12
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <inc_lock+0xe0>
 8003794:	2300      	movs	r3, #0
 8003796:	e015      	b.n	80037c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <inc_lock+0xf8>
 800379e:	4a0c      	ldr	r2, [pc, #48]	@ (80037d0 <inc_lock+0x118>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	330c      	adds	r3, #12
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	e001      	b.n	80037b4 <inc_lock+0xfc>
 80037b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037b4:	4906      	ldr	r1, [pc, #24]	@ (80037d0 <inc_lock+0x118>)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	440b      	add	r3, r1
 80037bc:	330c      	adds	r3, #12
 80037be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	20000588 	.word	0x20000588

080037d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d825      	bhi.n	8003834 <dec_lock+0x60>
		n = Files[i].ctr;
 80037e8:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <dec_lock+0x74>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	4413      	add	r3, r2
 80037f0:	330c      	adds	r3, #12
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80037f6:	89fb      	ldrh	r3, [r7, #14]
 80037f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fc:	d101      	bne.n	8003802 <dec_lock+0x2e>
 80037fe:	2300      	movs	r3, #0
 8003800:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003802:	89fb      	ldrh	r3, [r7, #14]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <dec_lock+0x3a>
 8003808:	89fb      	ldrh	r3, [r7, #14]
 800380a:	3b01      	subs	r3, #1
 800380c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800380e:	4a0e      	ldr	r2, [pc, #56]	@ (8003848 <dec_lock+0x74>)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	4413      	add	r3, r2
 8003816:	330c      	adds	r3, #12
 8003818:	89fa      	ldrh	r2, [r7, #14]
 800381a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800381c:	89fb      	ldrh	r3, [r7, #14]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <dec_lock+0x5a>
 8003822:	4a09      	ldr	r2, [pc, #36]	@ (8003848 <dec_lock+0x74>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	4413      	add	r3, r2
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	737b      	strb	r3, [r7, #13]
 8003832:	e001      	b.n	8003838 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003834:	2302      	movs	r3, #2
 8003836:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003838:	7b7b      	ldrb	r3, [r7, #13]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000588 	.word	0x20000588

0800384c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e010      	b.n	800387c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800385a:	4a0d      	ldr	r2, [pc, #52]	@ (8003890 <clear_lock+0x44>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	4413      	add	r3, r2
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d105      	bne.n	8003876 <clear_lock+0x2a>
 800386a:	4a09      	ldr	r2, [pc, #36]	@ (8003890 <clear_lock+0x44>)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	4413      	add	r3, r2
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d9eb      	bls.n	800385a <clear_lock+0xe>
	}
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	20000588 	.word	0x20000588

08003894 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	78db      	ldrb	r3, [r3, #3]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d034      	beq.n	8003912 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7858      	ldrb	r0, [r3, #1]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80038b8:	2301      	movs	r3, #1
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	f7ff fd08 	bl	80032d0 <disk_write>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e022      	b.n	8003912 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d217      	bcs.n	8003912 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	789b      	ldrb	r3, [r3, #2]
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e010      	b.n	800390c <sync_window+0x78>
					wsect += fs->fsize;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7858      	ldrb	r0, [r3, #1]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80038fe:	2301      	movs	r3, #1
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	f7ff fce5 	bl	80032d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3b01      	subs	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d8eb      	bhi.n	80038ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d01b      	beq.n	800396c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ffad 	bl	8003894 <sync_window>
 800393a:	4603      	mov	r3, r0
 800393c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d113      	bne.n	800396c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7858      	ldrb	r0, [r3, #1]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800394e:	2301      	movs	r3, #1
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	f7ff fc85 	bl	8003260 <disk_read>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff87 	bl	8003894 <sync_window>
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d158      	bne.n	8003a42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d148      	bne.n	8003a2a <sync_fs+0xb2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	791b      	ldrb	r3, [r3, #4]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d144      	bne.n	8003a2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3330      	adds	r3, #48	@ 0x30
 80039a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fda9 	bl	8003502 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3330      	adds	r3, #48	@ 0x30
 80039b4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80039b8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fd38 	bl	8003432 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3330      	adds	r3, #48	@ 0x30
 80039c6:	4921      	ldr	r1, [pc, #132]	@ (8003a4c <sync_fs+0xd4>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fd4d 	bl	8003468 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3330      	adds	r3, #48	@ 0x30
 80039d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80039d6:	491e      	ldr	r1, [pc, #120]	@ (8003a50 <sync_fs+0xd8>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fd45 	bl	8003468 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3330      	adds	r3, #48	@ 0x30
 80039e2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7ff fd3b 	bl	8003468 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3330      	adds	r3, #48	@ 0x30
 80039f6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7ff fd31 	bl	8003468 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7858      	ldrb	r0, [r3, #1]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f7ff fc56 	bl	80032d0 <disk_write>
			fs->fsi_flag = 0;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	785b      	ldrb	r3, [r3, #1]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fc84 	bl	8003340 <disk_ioctl>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <sync_fs+0xca>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	41615252 	.word	0x41615252
 8003a50:	61417272 	.word	0x61417272

08003a54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	3b02      	subs	r3, #2
 8003a62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	3b02      	subs	r3, #2
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d301      	bcc.n	8003a74 <clust2sect+0x20>
 8003a70:	2300      	movs	r3, #0
 8003a72:	e008      	b.n	8003a86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	895b      	ldrh	r3, [r3, #10]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	fb03 f202 	mul.w	r2, r3, r2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	4413      	add	r3, r2
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d904      	bls.n	8003ab2 <get_fat+0x20>
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e08e      	b.n	8003bd6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d061      	beq.n	8003b8a <get_fat+0xf8>
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	dc7b      	bgt.n	8003bc2 <get_fat+0x130>
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d002      	beq.n	8003ad4 <get_fat+0x42>
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d041      	beq.n	8003b56 <get_fat+0xc4>
 8003ad2:	e076      	b.n	8003bc2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	0a5b      	lsrs	r3, r3, #9
 8003aea:	4413      	add	r3, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	6938      	ldr	r0, [r7, #16]
 8003af0:	f7ff ff14 	bl	800391c <move_window>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d166      	bne.n	8003bc8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	60fa      	str	r2, [r7, #12]
 8003b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6a1a      	ldr	r2, [r3, #32]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	0a5b      	lsrs	r3, r3, #9
 8003b16:	4413      	add	r3, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6938      	ldr	r0, [r7, #16]
 8003b1c:	f7ff fefe 	bl	800391c <move_window>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d152      	bne.n	8003bcc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <get_fat+0xba>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	e002      	b.n	8003b52 <get_fat+0xc0>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b52:	617b      	str	r3, [r7, #20]
			break;
 8003b54:	e03f      	b.n	8003bd6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	4413      	add	r3, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	6938      	ldr	r0, [r7, #16]
 8003b64:	f7ff feda 	bl	800391c <move_window>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d130      	bne.n	8003bd0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fc1c 	bl	80033bc <ld_word>
 8003b84:	4603      	mov	r3, r0
 8003b86:	617b      	str	r3, [r7, #20]
			break;
 8003b88:	e025      	b.n	8003bd6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	09db      	lsrs	r3, r3, #7
 8003b92:	4413      	add	r3, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	6938      	ldr	r0, [r7, #16]
 8003b98:	f7ff fec0 	bl	800391c <move_window>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003bb0:	4413      	add	r3, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fc1a 	bl	80033ec <ld_dword>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bbe:	617b      	str	r3, [r7, #20]
			break;
 8003bc0:	e009      	b.n	8003bd6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e006      	b.n	8003bd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bc8:	bf00      	nop
 8003bca:	e004      	b.n	8003bd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bcc:	bf00      	nop
 8003bce:	e002      	b.n	8003bd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003bd4:	bf00      	nop
		}
	}

	return val;
 8003bd6:	697b      	ldr	r3, [r7, #20]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b089      	sub	sp, #36	@ 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003bec:	2302      	movs	r3, #2
 8003bee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f240 80d9 	bls.w	8003daa <put_fat+0x1ca>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	f080 80d3 	bcs.w	8003daa <put_fat+0x1ca>
		switch (fs->fs_type) {
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	f000 8096 	beq.w	8003d3a <put_fat+0x15a>
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	f300 80cb 	bgt.w	8003daa <put_fat+0x1ca>
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d002      	beq.n	8003c1e <put_fat+0x3e>
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d06e      	beq.n	8003cfa <put_fat+0x11a>
 8003c1c:	e0c5      	b.n	8003daa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4413      	add	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	0a5b      	lsrs	r3, r3, #9
 8003c34:	4413      	add	r3, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fe6f 	bl	800391c <move_window>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 80a9 	bne.w	8003d9c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	61b9      	str	r1, [r7, #24]
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	4413      	add	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <put_fat+0xa4>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	b25a      	sxtb	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	b25b      	sxtb	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e001      	b.n	8003c88 <put_fat+0xa8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	0a5b      	lsrs	r3, r3, #9
 8003c9a:	4413      	add	r3, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f7ff fe3c 	bl	800391c <move_window>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ca8:	7ffb      	ldrb	r3, [r7, #31]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d178      	bne.n	8003da0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cba:	4413      	add	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <put_fat+0xf0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e00e      	b.n	8003cee <put_fat+0x10e>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f023 030f 	bic.w	r3, r3, #15
 8003cda:	b25a      	sxtb	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b25b      	sxtb	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	70da      	strb	r2, [r3, #3]
			break;
 8003cf8:	e057      	b.n	8003daa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	4413      	add	r3, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f7ff fe08 	bl	800391c <move_window>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d10:	7ffb      	ldrb	r3, [r7, #31]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d146      	bne.n	8003da4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003d24:	4413      	add	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	b292      	uxth	r2, r2
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fb80 	bl	8003432 <st_word>
			fs->wflag = 1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	70da      	strb	r2, [r3, #3]
			break;
 8003d38:	e037      	b.n	8003daa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	09db      	lsrs	r3, r3, #7
 8003d42:	4413      	add	r3, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff fde8 	bl	800391c <move_window>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d128      	bne.n	8003da8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fb3d 	bl	80033ec <ld_dword>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d78:	4323      	orrs	r3, r4
 8003d7a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003d8a:	4413      	add	r3, r2
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fb6a 	bl	8003468 <st_dword>
			fs->wflag = 1;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	70da      	strb	r2, [r3, #3]
			break;
 8003d9a:	e006      	b.n	8003daa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003d9c:	bf00      	nop
 8003d9e:	e004      	b.n	8003daa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003da0:	bf00      	nop
 8003da2:	e002      	b.n	8003daa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003da8:	bf00      	nop
		}
	}
	return res;
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3724      	adds	r7, #36	@ 0x24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd90      	pop	{r4, r7, pc}

08003db4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d904      	bls.n	8003dda <remove_chain+0x26>
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d301      	bcc.n	8003dde <remove_chain+0x2a>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e04b      	b.n	8003e76 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	69b8      	ldr	r0, [r7, #24]
 8003dec:	f7ff fef8 	bl	8003be0 <put_fat>
 8003df0:	4603      	mov	r3, r0
 8003df2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <remove_chain+0x4a>
 8003dfa:	7ffb      	ldrb	r3, [r7, #31]
 8003dfc:	e03b      	b.n	8003e76 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fe46 	bl	8003a92 <get_fat>
 8003e06:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d031      	beq.n	8003e72 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <remove_chain+0x64>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e02e      	b.n	8003e76 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d101      	bne.n	8003e24 <remove_chain+0x70>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e028      	b.n	8003e76 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003e24:	2200      	movs	r2, #0
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	69b8      	ldr	r0, [r7, #24]
 8003e2a:	f7ff fed9 	bl	8003be0 <put_fat>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003e32:	7ffb      	ldrb	r3, [r7, #31]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <remove_chain+0x88>
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	e01c      	b.n	8003e76 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	3b02      	subs	r3, #2
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d20b      	bcs.n	8003e62 <remove_chain+0xae>
			fs->free_clst++;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	791b      	ldrb	r3, [r3, #4]
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3c6      	bcc.n	8003dfe <remove_chain+0x4a>
 8003e70:	e000      	b.n	8003e74 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003e72:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b088      	sub	sp, #32
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <create_chain+0x2c>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d31b      	bcc.n	8003ee2 <create_chain+0x64>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	e018      	b.n	8003ee2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fded 	bl	8003a92 <get_fat>
 8003eb8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d801      	bhi.n	8003ec4 <create_chain+0x46>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e070      	b.n	8003fa6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d101      	bne.n	8003ed0 <create_chain+0x52>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	e06a      	b.n	8003fa6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d201      	bcs.n	8003ede <create_chain+0x60>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	e063      	b.n	8003fa6 <create_chain+0x128>
		scl = clst;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d307      	bcc.n	8003f06 <create_chain+0x88>
				ncl = 2;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d901      	bls.n	8003f06 <create_chain+0x88>
 8003f02:	2300      	movs	r3, #0
 8003f04:	e04f      	b.n	8003fa6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003f06:	69f9      	ldr	r1, [r7, #28]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fdc2 	bl	8003a92 <get_fat>
 8003f0e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d003      	beq.n	8003f24 <create_chain+0xa6>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d101      	bne.n	8003f28 <create_chain+0xaa>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	e03e      	b.n	8003fa6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1da      	bne.n	8003ee6 <create_chain+0x68>
 8003f30:	2300      	movs	r3, #0
 8003f32:	e038      	b.n	8003fa6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003f34:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003f36:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3a:	69f9      	ldr	r1, [r7, #28]
 8003f3c:	6938      	ldr	r0, [r7, #16]
 8003f3e:	f7ff fe4f 	bl	8003be0 <put_fat>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <create_chain+0xe2>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	6938      	ldr	r0, [r7, #16]
 8003f58:	f7ff fe42 	bl	8003be0 <put_fat>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d116      	bne.n	8003f94 <create_chain+0x116>
		fs->last_clst = ncl;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	3b02      	subs	r3, #2
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d804      	bhi.n	8003f84 <create_chain+0x106>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	1e5a      	subs	r2, r3, #1
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	791b      	ldrb	r3, [r3, #4]
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	711a      	strb	r2, [r3, #4]
 8003f92:	e007      	b.n	8003fa4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d102      	bne.n	8003fa0 <create_chain+0x122>
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9e:	e000      	b.n	8003fa2 <create_chain+0x124>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003fa4:	69fb      	ldr	r3, [r7, #28]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	0a5b      	lsrs	r3, r3, #9
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	8952      	ldrh	r2, [r2, #10]
 8003fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1d1a      	adds	r2, r3, #4
 8003fd8:	613a      	str	r2, [r7, #16]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <clmt_clust+0x3a>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e010      	b.n	800400a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d307      	bcc.n	8004000 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003ffe:	e7e9      	b.n	8003fd4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004000:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	4413      	add	r3, r2
}
 800400a:	4618      	mov	r0, r3
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b086      	sub	sp, #24
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800402c:	d204      	bcs.n	8004038 <dir_sdi+0x22>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <dir_sdi+0x26>
		return FR_INT_ERR;
 8004038:	2302      	movs	r3, #2
 800403a:	e063      	b.n	8004104 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <dir_sdi+0x46>
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d902      	bls.n	800405c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	8912      	ldrh	r2, [r2, #8]
 800406a:	4293      	cmp	r3, r2
 800406c:	d301      	bcc.n	8004072 <dir_sdi+0x5c>
 800406e:	2302      	movs	r3, #2
 8004070:	e048      	b.n	8004104 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	61da      	str	r2, [r3, #28]
 800407a:	e029      	b.n	80040d0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	895b      	ldrh	r3, [r3, #10]
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004084:	e019      	b.n	80040ba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6979      	ldr	r1, [r7, #20]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fd01 	bl	8003a92 <get_fat>
 8004090:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d101      	bne.n	800409e <dir_sdi+0x88>
 800409a:	2301      	movs	r3, #1
 800409c:	e032      	b.n	8004104 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d904      	bls.n	80040ae <dir_sdi+0x98>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d301      	bcc.n	80040b2 <dir_sdi+0x9c>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e028      	b.n	8004104 <dir_sdi+0xee>
			ofs -= csz;
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d2e1      	bcs.n	8004086 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	6938      	ldr	r0, [r7, #16]
 80040c6:	f7ff fcc5 	bl	8003a54 <clust2sect>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <dir_sdi+0xcc>
 80040de:	2302      	movs	r3, #2
 80040e0:	e010      	b.n	8004104 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	0a5b      	lsrs	r3, r3, #9
 80040ea:	441a      	add	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fc:	441a      	add	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	3320      	adds	r3, #32
 8004122:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <dir_next+0x28>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004132:	d301      	bcc.n	8004138 <dir_next+0x2c>
 8004134:	2304      	movs	r3, #4
 8004136:	e0aa      	b.n	800428e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 8098 	bne.w	8004274 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	8912      	ldrh	r2, [r2, #8]
 800415e:	4293      	cmp	r3, r2
 8004160:	f0c0 8088 	bcc.w	8004274 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	61da      	str	r2, [r3, #28]
 800416a:	2304      	movs	r3, #4
 800416c:	e08f      	b.n	800428e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	0a5b      	lsrs	r3, r3, #9
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	8952      	ldrh	r2, [r2, #10]
 8004176:	3a01      	subs	r2, #1
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d17a      	bne.n	8004274 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f7ff fc83 	bl	8003a92 <get_fat>
 800418c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d801      	bhi.n	8004198 <dir_next+0x8c>
 8004194:	2302      	movs	r3, #2
 8004196:	e07a      	b.n	800428e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d101      	bne.n	80041a4 <dir_next+0x98>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e074      	b.n	800428e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d358      	bcc.n	8004260 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
 80041ba:	2304      	movs	r3, #4
 80041bc:	e067      	b.n	800428e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7ff fe59 	bl	8003e7e <create_chain>
 80041cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <dir_next+0xcc>
 80041d4:	2307      	movs	r3, #7
 80041d6:	e05a      	b.n	800428e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <dir_next+0xd6>
 80041de:	2302      	movs	r3, #2
 80041e0:	e055      	b.n	800428e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d101      	bne.n	80041ee <dir_next+0xe2>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e04f      	b.n	800428e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff fb50 	bl	8003894 <sync_window>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <dir_next+0xf2>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e047      	b.n	800428e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3330      	adds	r3, #48	@ 0x30
 8004202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff f97a 	bl	8003502 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fc1d 	bl	8003a54 <clust2sect>
 800421a:	4602      	mov	r2, r0
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004220:	e012      	b.n	8004248 <dir_next+0x13c>
						fs->wflag = 1;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fb33 	bl	8003894 <sync_window>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <dir_next+0x12c>
 8004234:	2301      	movs	r3, #1
 8004236:	e02a      	b.n	800428e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	3301      	adds	r3, #1
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	895b      	ldrh	r3, [r3, #10]
 800424c:	461a      	mov	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4293      	cmp	r3, r2
 8004252:	d3e6      	bcc.n	8004222 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fbf3 	bl	8003a54 <clust2sect>
 800426e:	4602      	mov	r2, r0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80042a6:	2100      	movs	r1, #0
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff feb4 	bl	8004016 <dir_sdi>
 80042ae:	4603      	mov	r3, r0
 80042b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d12b      	bne.n	8004310 <dir_alloc+0x7a>
		n = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4619      	mov	r1, r3
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff fb2a 	bl	800391c <move_window>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11d      	bne.n	800430e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2be5      	cmp	r3, #229	@ 0xe5
 80042da:	d004      	beq.n	80042e6 <dir_alloc+0x50>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	3301      	adds	r3, #1
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d102      	bne.n	80042fa <dir_alloc+0x64>
 80042f4:	e00c      	b.n	8004310 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80042fa:	2101      	movs	r1, #1
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff05 	bl	800410c <dir_next>
 8004302:	4603      	mov	r3, r0
 8004304:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0d7      	beq.n	80042bc <dir_alloc+0x26>
 800430c:	e000      	b.n	8004310 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800430e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b04      	cmp	r3, #4
 8004314:	d101      	bne.n	800431a <dir_alloc+0x84>
 8004316:	2307      	movs	r3, #7
 8004318:	75fb      	strb	r3, [r7, #23]
	return res;
 800431a:	7dfb      	ldrb	r3, [r7, #23]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	331a      	adds	r3, #26
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff f842 	bl	80033bc <ld_word>
 8004338:	4603      	mov	r3, r0
 800433a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d109      	bne.n	8004358 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	3314      	adds	r3, #20
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff f837 	bl	80033bc <ld_word>
 800434e:	4603      	mov	r3, r0
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	331a      	adds	r3, #26
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	b292      	uxth	r2, r2
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff f85a 	bl	8003432 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d109      	bne.n	800439a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f103 0214 	add.w	r2, r3, #20
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	b29b      	uxth	r3, r3
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7ff f84c 	bl	8003432 <st_word>
	}
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80043b0:	2100      	movs	r1, #0
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fe2f 	bl	8004016 <dir_sdi>
 80043b8:	4603      	mov	r3, r0
 80043ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <dir_find+0x24>
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	e03e      	b.n	8004444 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4619      	mov	r1, r3
 80043cc:	6938      	ldr	r0, [r7, #16]
 80043ce:	f7ff faa5 	bl	800391c <move_window>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d12f      	bne.n	800443c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <dir_find+0x4e>
 80043ea:	2304      	movs	r3, #4
 80043ec:	75fb      	strb	r3, [r7, #23]
 80043ee:	e028      	b.n	8004442 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	330b      	adds	r3, #11
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	330b      	adds	r3, #11
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <dir_find+0x86>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a18      	ldr	r0, [r3, #32]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3324      	adds	r3, #36	@ 0x24
 800441a:	220b      	movs	r2, #11
 800441c:	4619      	mov	r1, r3
 800441e:	f7ff f88b 	bl	8003538 <mem_cmp>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004428:	2100      	movs	r1, #0
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fe6e 	bl	800410c <dir_next>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0c5      	beq.n	80043c6 <dir_find+0x24>
 800443a:	e002      	b.n	8004442 <dir_find+0xa0>
		if (res != FR_OK) break;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004440:	bf00      	nop

	return res;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800445a:	2101      	movs	r1, #1
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff1a 	bl	8004296 <dir_alloc>
 8004462:	4603      	mov	r3, r0
 8004464:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d11c      	bne.n	80044a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4619      	mov	r1, r3
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f7ff fa52 	bl	800391c <move_window>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d111      	bne.n	80044a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	2220      	movs	r2, #32
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff f839 	bl	8003502 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a18      	ldr	r0, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3324      	adds	r3, #36	@ 0x24
 8004498:	220b      	movs	r2, #11
 800449a:	4619      	mov	r1, r3
 800449c:	f7ff f810 	bl	80034c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2201      	movs	r2, #1
 80044a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3324      	adds	r3, #36	@ 0x24
 80044c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80044c6:	220b      	movs	r2, #11
 80044c8:	2120      	movs	r1, #32
 80044ca:	68b8      	ldr	r0, [r7, #8]
 80044cc:	f7ff f819 	bl	8003502 <mem_set>
	si = i = 0; ni = 8;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	2308      	movs	r3, #8
 80044da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	61fa      	str	r2, [r7, #28]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80044ea:	7efb      	ldrb	r3, [r7, #27]
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d94e      	bls.n	800458e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80044f0:	7efb      	ldrb	r3, [r7, #27]
 80044f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80044f4:	d006      	beq.n	8004504 <create_name+0x54>
 80044f6:	7efb      	ldrb	r3, [r7, #27]
 80044f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80044fa:	d110      	bne.n	800451e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80044fc:	e002      	b.n	8004504 <create_name+0x54>
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3301      	adds	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b2f      	cmp	r3, #47	@ 0x2f
 800450e:	d0f6      	beq.n	80044fe <create_name+0x4e>
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b5c      	cmp	r3, #92	@ 0x5c
 800451a:	d0f0      	beq.n	80044fe <create_name+0x4e>
			break;
 800451c:	e038      	b.n	8004590 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800451e:	7efb      	ldrb	r3, [r7, #27]
 8004520:	2b2e      	cmp	r3, #46	@ 0x2e
 8004522:	d003      	beq.n	800452c <create_name+0x7c>
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d30c      	bcc.n	8004546 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b0b      	cmp	r3, #11
 8004530:	d002      	beq.n	8004538 <create_name+0x88>
 8004532:	7efb      	ldrb	r3, [r7, #27]
 8004534:	2b2e      	cmp	r3, #46	@ 0x2e
 8004536:	d001      	beq.n	800453c <create_name+0x8c>
 8004538:	2306      	movs	r3, #6
 800453a:	e044      	b.n	80045c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800453c:	2308      	movs	r3, #8
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	230b      	movs	r3, #11
 8004542:	617b      	str	r3, [r7, #20]
			continue;
 8004544:	e022      	b.n	800458c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004546:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800454a:	2b00      	cmp	r3, #0
 800454c:	da04      	bge.n	8004558 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800454e:	7efb      	ldrb	r3, [r7, #27]
 8004550:	3b80      	subs	r3, #128	@ 0x80
 8004552:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <create_name+0x120>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004558:	7efb      	ldrb	r3, [r7, #27]
 800455a:	4619      	mov	r1, r3
 800455c:	481d      	ldr	r0, [pc, #116]	@ (80045d4 <create_name+0x124>)
 800455e:	f7ff f812 	bl	8003586 <chk_chr>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <create_name+0xbc>
 8004568:	2306      	movs	r3, #6
 800456a:	e02c      	b.n	80045c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800456c:	7efb      	ldrb	r3, [r7, #27]
 800456e:	2b60      	cmp	r3, #96	@ 0x60
 8004570:	d905      	bls.n	800457e <create_name+0xce>
 8004572:	7efb      	ldrb	r3, [r7, #27]
 8004574:	2b7a      	cmp	r3, #122	@ 0x7a
 8004576:	d802      	bhi.n	800457e <create_name+0xce>
 8004578:	7efb      	ldrb	r3, [r7, #27]
 800457a:	3b20      	subs	r3, #32
 800457c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	613a      	str	r2, [r7, #16]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	4413      	add	r3, r2
 8004588:	7efa      	ldrb	r2, [r7, #27]
 800458a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800458c:	e7a6      	b.n	80044dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800458e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	441a      	add	r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <create_name+0xf4>
 80045a0:	2306      	movs	r3, #6
 80045a2:	e010      	b.n	80045c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2be5      	cmp	r3, #229	@ 0xe5
 80045aa:	d102      	bne.n	80045b2 <create_name+0x102>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2205      	movs	r2, #5
 80045b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80045b2:	7efb      	ldrb	r3, [r7, #27]
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d801      	bhi.n	80045bc <create_name+0x10c>
 80045b8:	2204      	movs	r2, #4
 80045ba:	e000      	b.n	80045be <create_name+0x10e>
 80045bc:	2200      	movs	r2, #0
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	330b      	adds	r3, #11
 80045c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80045c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	08005920 	.word	0x08005920
 80045d4:	0800589c 	.word	0x0800589c

080045d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80045ec:	e002      	b.n	80045f4 <follow_path+0x1c>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80045fa:	d0f8      	beq.n	80045ee <follow_path+0x16>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b5c      	cmp	r3, #92	@ 0x5c
 8004602:	d0f4      	beq.n	80045ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b1f      	cmp	r3, #31
 8004610:	d80a      	bhi.n	8004628 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2280      	movs	r2, #128	@ 0x80
 8004616:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800461a:	2100      	movs	r1, #0
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff fcfa 	bl	8004016 <dir_sdi>
 8004622:	4603      	mov	r3, r0
 8004624:	75fb      	strb	r3, [r7, #23]
 8004626:	e043      	b.n	80046b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004628:	463b      	mov	r3, r7
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff3f 	bl	80044b0 <create_name>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d134      	bne.n	80046a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff feb0 	bl	80043a2 <dir_find>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800464c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d127      	bne.n	80046aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d122      	bne.n	80046aa <follow_path+0xd2>
 8004664:	2305      	movs	r3, #5
 8004666:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004668:	e01f      	b.n	80046aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800466a:	7afb      	ldrb	r3, [r7, #11]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11c      	bne.n	80046ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	799b      	ldrb	r3, [r3, #6]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004680:	2305      	movs	r3, #5
 8004682:	75fb      	strb	r3, [r7, #23]
 8004684:	e014      	b.n	80046b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	4413      	add	r3, r2
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff fe43 	bl	8004324 <ld_clust>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80046a4:	e7c0      	b.n	8004628 <follow_path+0x50>
			if (res != FR_OK) break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <follow_path+0xd8>
				break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80046ae:	bf00      	nop
			}
		}
	}

	return res;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b087      	sub	sp, #28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d031      	beq.n	8004734 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e002      	b.n	80046de <get_ldnumber+0x24>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	3301      	adds	r3, #1
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d903      	bls.n	80046ee <get_ldnumber+0x34>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80046ec:	d1f4      	bne.n	80046d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80046f4:	d11c      	bne.n	8004730 <get_ldnumber+0x76>
			tp = *path;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	60fa      	str	r2, [r7, #12]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	3b30      	subs	r3, #48	@ 0x30
 8004706:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b09      	cmp	r3, #9
 800470c:	d80e      	bhi.n	800472c <get_ldnumber+0x72>
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	429a      	cmp	r2, r3
 8004714:	d10a      	bne.n	800472c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <get_ldnumber+0x72>
					vol = (int)i;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3301      	adds	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	e002      	b.n	8004736 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004734:	693b      	ldr	r3, [r7, #16]
}
 8004736:	4618      	mov	r0, r3
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	70da      	strb	r2, [r3, #3]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff f8dc 	bl	800391c <move_window>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <check_fs+0x2a>
 800476a:	2304      	movs	r3, #4
 800476c:	e038      	b.n	80047e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3330      	adds	r3, #48	@ 0x30
 8004772:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fe20 	bl	80033bc <ld_word>
 800477c:	4603      	mov	r3, r0
 800477e:	461a      	mov	r2, r3
 8004780:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <check_fs+0x48>
 8004788:	2303      	movs	r3, #3
 800478a:	e029      	b.n	80047e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004792:	2be9      	cmp	r3, #233	@ 0xe9
 8004794:	d009      	beq.n	80047aa <check_fs+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800479c:	2beb      	cmp	r3, #235	@ 0xeb
 800479e:	d11e      	bne.n	80047de <check_fs+0x9a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047a6:	2b90      	cmp	r3, #144	@ 0x90
 80047a8:	d119      	bne.n	80047de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3330      	adds	r3, #48	@ 0x30
 80047ae:	3336      	adds	r3, #54	@ 0x36
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fe1b 	bl	80033ec <ld_dword>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047bc:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <check_fs+0xa4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d101      	bne.n	80047c6 <check_fs+0x82>
 80047c2:	2300      	movs	r3, #0
 80047c4:	e00c      	b.n	80047e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3330      	adds	r3, #48	@ 0x30
 80047ca:	3352      	adds	r3, #82	@ 0x52
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fe0d 	bl	80033ec <ld_dword>
 80047d2:	4603      	mov	r3, r0
 80047d4:	4a05      	ldr	r2, [pc, #20]	@ (80047ec <check_fs+0xa8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <check_fs+0x9a>
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80047de:	2302      	movs	r3, #2
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	00544146 	.word	0x00544146
 80047ec:	33544146 	.word	0x33544146

080047f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b096      	sub	sp, #88	@ 0x58
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ff58 	bl	80046ba <get_ldnumber>
 800480a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800480c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	da01      	bge.n	8004816 <find_volume+0x26>
 8004812:	230b      	movs	r3, #11
 8004814:	e22d      	b.n	8004c72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004816:	4aa1      	ldr	r2, [pc, #644]	@ (8004a9c <find_volume+0x2ac>)
 8004818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800481a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <find_volume+0x3a>
 8004826:	230c      	movs	r3, #12
 8004828:	e223      	b.n	8004c72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800482e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fcdb 	bl	8003200 <disk_status>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004850:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10c      	bne.n	8004876 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <find_volume+0x82>
 8004862:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800486e:	230a      	movs	r3, #10
 8004870:	e1ff      	b.n	8004c72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004872:	2300      	movs	r3, #0
 8004874:	e1fd      	b.n	8004c72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800487c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004882:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fccf 	bl	800322c <disk_initialize>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004894:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1e6      	b.n	8004c72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <find_volume+0xca>
 80048aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80048b6:	230a      	movs	r3, #10
 80048b8:	e1db      	b.n	8004c72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80048be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048c2:	f7ff ff3f 	bl	8004744 <check_fs>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80048cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d149      	bne.n	8004968 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048d4:	2300      	movs	r3, #0
 80048d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80048d8:	e01e      	b.n	8004918 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80048da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80048e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80048e8:	4413      	add	r3, r2
 80048ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	3304      	adds	r3, #4
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d006      	beq.n	8004904 <find_volume+0x114>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	3308      	adds	r3, #8
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fd76 	bl	80033ec <ld_dword>
 8004900:	4602      	mov	r2, r0
 8004902:	e000      	b.n	8004906 <find_volume+0x116>
 8004904:	2200      	movs	r2, #0
 8004906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	3358      	adds	r3, #88	@ 0x58
 800490c:	443b      	add	r3, r7
 800490e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004914:	3301      	adds	r3, #1
 8004916:	643b      	str	r3, [r7, #64]	@ 0x40
 8004918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491a:	2b03      	cmp	r3, #3
 800491c:	d9dd      	bls.n	80048da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800491e:	2300      	movs	r3, #0
 8004920:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <find_volume+0x13e>
 8004928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800492a:	3b01      	subs	r3, #1
 800492c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800492e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3358      	adds	r3, #88	@ 0x58
 8004934:	443b      	add	r3, r7
 8004936:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800493a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800493c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <find_volume+0x15e>
 8004942:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004944:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004946:	f7ff fefd 	bl	8004744 <check_fs>
 800494a:	4603      	mov	r3, r0
 800494c:	e000      	b.n	8004950 <find_volume+0x160>
 800494e:	2303      	movs	r3, #3
 8004950:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004954:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004958:	2b01      	cmp	r3, #1
 800495a:	d905      	bls.n	8004968 <find_volume+0x178>
 800495c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800495e:	3301      	adds	r3, #1
 8004960:	643b      	str	r3, [r7, #64]	@ 0x40
 8004962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004964:	2b03      	cmp	r3, #3
 8004966:	d9e2      	bls.n	800492e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004968:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800496c:	2b04      	cmp	r3, #4
 800496e:	d101      	bne.n	8004974 <find_volume+0x184>
 8004970:	2301      	movs	r3, #1
 8004972:	e17e      	b.n	8004c72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004974:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004978:	2b01      	cmp	r3, #1
 800497a:	d901      	bls.n	8004980 <find_volume+0x190>
 800497c:	230d      	movs	r3, #13
 800497e:	e178      	b.n	8004c72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004982:	3330      	adds	r3, #48	@ 0x30
 8004984:	330b      	adds	r3, #11
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fd18 	bl	80033bc <ld_word>
 800498c:	4603      	mov	r3, r0
 800498e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004992:	d001      	beq.n	8004998 <find_volume+0x1a8>
 8004994:	230d      	movs	r3, #13
 8004996:	e16c      	b.n	8004c72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499a:	3330      	adds	r3, #48	@ 0x30
 800499c:	3316      	adds	r3, #22
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe fd0c 	bl	80033bc <ld_word>
 80049a4:	4603      	mov	r3, r0
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80049a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <find_volume+0x1cc>
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	3330      	adds	r3, #48	@ 0x30
 80049b2:	3324      	adds	r3, #36	@ 0x24
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe fd19 	bl	80033ec <ld_dword>
 80049ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80049bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80049c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	789b      	ldrb	r3, [r3, #2]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d005      	beq.n	80049e0 <find_volume+0x1f0>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	789b      	ldrb	r3, [r3, #2]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d001      	beq.n	80049e0 <find_volume+0x1f0>
 80049dc:	230d      	movs	r3, #13
 80049de:	e148      	b.n	8004c72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80049e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e2:	789b      	ldrb	r3, [r3, #2]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f4:	461a      	mov	r2, r3
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80049fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fc:	895b      	ldrh	r3, [r3, #10]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <find_volume+0x224>
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	895b      	ldrh	r3, [r3, #10]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0a:	895b      	ldrh	r3, [r3, #10]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <find_volume+0x228>
 8004a14:	230d      	movs	r3, #13
 8004a16:	e12c      	b.n	8004c72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	3330      	adds	r3, #48	@ 0x30
 8004a1c:	3311      	adds	r3, #17
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fccc 	bl	80033bc <ld_word>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	891b      	ldrh	r3, [r3, #8]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <find_volume+0x24e>
 8004a3a:	230d      	movs	r3, #13
 8004a3c:	e119      	b.n	8004c72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	3330      	adds	r3, #48	@ 0x30
 8004a42:	3313      	adds	r3, #19
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fe fcb9 	bl	80033bc <ld_word>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <find_volume+0x272>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a56:	3330      	adds	r3, #48	@ 0x30
 8004a58:	3320      	adds	r3, #32
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fcc6 	bl	80033ec <ld_dword>
 8004a60:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	3330      	adds	r3, #48	@ 0x30
 8004a66:	330e      	adds	r3, #14
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe fca7 	bl	80033bc <ld_word>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004a72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <find_volume+0x28c>
 8004a78:	230d      	movs	r3, #13
 8004a7a:	e0fa      	b.n	8004c72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004a7c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a80:	4413      	add	r3, r2
 8004a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a84:	8912      	ldrh	r2, [r2, #8]
 8004a86:	0912      	lsrs	r2, r2, #4
 8004a88:	b292      	uxth	r2, r2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d204      	bcs.n	8004aa0 <find_volume+0x2b0>
 8004a96:	230d      	movs	r3, #13
 8004a98:	e0eb      	b.n	8004c72 <find_volume+0x482>
 8004a9a:	bf00      	nop
 8004a9c:	20000580 	.word	0x20000580
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004aa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004aa8:	8952      	ldrh	r2, [r2, #10]
 8004aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <find_volume+0x2ca>
 8004ab6:	230d      	movs	r3, #13
 8004ab8:	e0db      	b.n	8004c72 <find_volume+0x482>
		fmt = FS_FAT32;
 8004aba:	2303      	movs	r3, #3
 8004abc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d802      	bhi.n	8004ad0 <find_volume+0x2e0>
 8004aca:	2302      	movs	r3, #2
 8004acc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d802      	bhi.n	8004ae0 <find_volume+0x2f0>
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004aec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004aee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af2:	441a      	add	r2, r3
 8004af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004af8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	441a      	add	r2, r3
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004b02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d11e      	bne.n	8004b48 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0c:	3330      	adds	r3, #48	@ 0x30
 8004b0e:	332a      	adds	r3, #42	@ 0x2a
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fc53 	bl	80033bc <ld_word>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <find_volume+0x330>
 8004b1c:	230d      	movs	r3, #13
 8004b1e:	e0a8      	b.n	8004c72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b22:	891b      	ldrh	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <find_volume+0x33c>
 8004b28:	230d      	movs	r3, #13
 8004b2a:	e0a2      	b.n	8004c72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2e:	3330      	adds	r3, #48	@ 0x30
 8004b30:	332c      	adds	r3, #44	@ 0x2c
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fc5a 	bl	80033ec <ld_dword>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b46:	e01f      	b.n	8004b88 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4a:	891b      	ldrh	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <find_volume+0x364>
 8004b50:	230d      	movs	r3, #13
 8004b52:	e08e      	b.n	8004c72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5a:	441a      	add	r2, r3
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004b60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d103      	bne.n	8004b70 <find_volume+0x380>
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	e00a      	b.n	8004b86 <find_volume+0x396>
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	4613      	mov	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4413      	add	r3, r2
 8004b7a:	085a      	lsrs	r2, r3, #1
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004b86:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004b92:	0a5b      	lsrs	r3, r3, #9
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d201      	bcs.n	8004b9c <find_volume+0x3ac>
 8004b98:	230d      	movs	r3, #13
 8004b9a:	e06a      	b.n	8004c72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba2:	611a      	str	r2, [r3, #16]
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	2280      	movs	r2, #128	@ 0x80
 8004bb0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d149      	bne.n	8004c4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	3330      	adds	r3, #48	@ 0x30
 8004bbe:	3330      	adds	r3, #48	@ 0x30
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fbfb 	bl	80033bc <ld_word>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d140      	bne.n	8004c4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bce:	3301      	adds	r3, #1
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bd4:	f7fe fea2 	bl	800391c <move_window>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d137      	bne.n	8004c4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be0:	2200      	movs	r2, #0
 8004be2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	3330      	adds	r3, #48	@ 0x30
 8004be8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fbe5 	bl	80033bc <ld_word>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d127      	bne.n	8004c4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	3330      	adds	r3, #48	@ 0x30
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fbf2 	bl	80033ec <ld_dword>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c7c <find_volume+0x48c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d11e      	bne.n	8004c4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c12:	3330      	adds	r3, #48	@ 0x30
 8004c14:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fe fbe7 	bl	80033ec <ld_dword>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4a17      	ldr	r2, [pc, #92]	@ (8004c80 <find_volume+0x490>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d113      	bne.n	8004c4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	3330      	adds	r3, #48	@ 0x30
 8004c2a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fbdc 	bl	80033ec <ld_dword>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	3330      	adds	r3, #48	@ 0x30
 8004c3e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fbd2 	bl	80033ec <ld_dword>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c50:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004c54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <find_volume+0x494>)
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <find_volume+0x494>)
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <find_volume+0x494>)
 8004c64:	881a      	ldrh	r2, [r3, #0]
 8004c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004c6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c6c:	f7fe fdee 	bl	800384c <clear_lock>
#endif
	return FR_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3758      	adds	r7, #88	@ 0x58
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	41615252 	.word	0x41615252
 8004c80:	61417272 	.word	0x61417272
 8004c84:	20000584 	.word	0x20000584

08004c88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004c92:	2309      	movs	r3, #9
 8004c94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01c      	beq.n	8004cd6 <validate+0x4e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <validate+0x4e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d013      	beq.n	8004cd6 <validate+0x4e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	889a      	ldrh	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	88db      	ldrh	r3, [r3, #6]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d10c      	bne.n	8004cd6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fa9c 	bl	8003200 <disk_status>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <validate+0x4e>
			res = FR_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <validate+0x5a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	e000      	b.n	8004ce4 <validate+0x5c>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	6013      	str	r3, [r2, #0]
	return res;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004d06:	f107 0310 	add.w	r3, r7, #16
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fcd5 	bl	80046ba <get_ldnumber>
 8004d10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	da01      	bge.n	8004d1c <f_mount+0x28>
 8004d18:	230b      	movs	r3, #11
 8004d1a:	e02b      	b.n	8004d74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004d1c:	4a17      	ldr	r2, [pc, #92]	@ (8004d7c <f_mount+0x88>)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004d2c:	69b8      	ldr	r0, [r7, #24]
 8004d2e:	f7fe fd8d 	bl	800384c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	490d      	ldr	r1, [pc, #52]	@ (8004d7c <f_mount+0x88>)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <f_mount+0x66>
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <f_mount+0x6a>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e00a      	b.n	8004d74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004d5e:	f107 010c 	add.w	r1, r7, #12
 8004d62:	f107 0308 	add.w	r3, r7, #8
 8004d66:	2200      	movs	r2, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fd41 	bl	80047f0 <find_volume>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000580 	.word	0x20000580

08004d80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b098      	sub	sp, #96	@ 0x60
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <f_open+0x18>
 8004d94:	2309      	movs	r3, #9
 8004d96:	e1a9      	b.n	80050ec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004da0:	79fa      	ldrb	r2, [r7, #7]
 8004da2:	f107 0110 	add.w	r1, r7, #16
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fd20 	bl	80047f0 <find_volume>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8004db6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 818d 	bne.w	80050da <f_open+0x35a>
		dj.obj.fs = fs;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	f107 0314 	add.w	r3, r7, #20
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fc03 	bl	80045d8 <follow_path>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d118      	bne.n	8004e12 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004de0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004de4:	b25b      	sxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da03      	bge.n	8004df2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8004dea:	2306      	movs	r3, #6
 8004dec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004df0:	e00f      	b.n	8004e12 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	bf8c      	ite	hi
 8004df8:	2301      	movhi	r3, #1
 8004dfa:	2300      	movls	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fbd8 	bl	80035bc <chk_lock>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	f003 031c 	and.w	r3, r3, #28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d07f      	beq.n	8004f1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8004e1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d017      	beq.n	8004e54 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004e24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d10e      	bne.n	8004e4a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004e2c:	f7fe fc22 	bl	8003674 <enq_lock>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <f_open+0xc4>
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fb06 	bl	800444c <dir_register>
 8004e40:	4603      	mov	r3, r0
 8004e42:	e000      	b.n	8004e46 <f_open+0xc6>
 8004e44:	2312      	movs	r3, #18
 8004e46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	f043 0308 	orr.w	r3, r3, #8
 8004e50:	71fb      	strb	r3, [r7, #7]
 8004e52:	e010      	b.n	8004e76 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004e54:	7ebb      	ldrb	r3, [r7, #26]
 8004e56:	f003 0311 	and.w	r3, r3, #17
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <f_open+0xe6>
					res = FR_DENIED;
 8004e5e:	2307      	movs	r3, #7
 8004e60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004e64:	e007      	b.n	8004e76 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <f_open+0xf6>
 8004e70:	2308      	movs	r3, #8
 8004e72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d168      	bne.n	8004f50 <f_open+0x1d0>
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d063      	beq.n	8004f50 <f_open+0x1d0>
				dw = GET_FATTIME();
 8004e88:	f7fe f9b2 	bl	80031f0 <get_fattime>
 8004e8c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	330e      	adds	r3, #14
 8004e92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe fae7 	bl	8003468 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9c:	3316      	adds	r3, #22
 8004e9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fae1 	bl	8003468 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea8:	330b      	adds	r3, #11
 8004eaa:	2220      	movs	r2, #32
 8004eac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fa35 	bl	8004324 <ld_clust>
 8004eba:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fa4d 	bl	8004362 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eca:	331c      	adds	r3, #28
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe faca 	bl	8003468 <st_dword>
					fs->wflag = 1;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d037      	beq.n	8004f50 <f_open+0x1d0>
						dw = fs->winsect;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004ee6:	f107 0314 	add.w	r3, r7, #20
 8004eea:	2200      	movs	r2, #0
 8004eec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe ff60 	bl	8003db4 <remove_chain>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8004efa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d126      	bne.n	8004f50 <f_open+0x1d0>
							res = move_window(fs, dw);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fd08 	bl	800391c <move_window>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f16:	3a01      	subs	r2, #1
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e019      	b.n	8004f50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d115      	bne.n	8004f50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004f24:	7ebb      	ldrb	r3, [r7, #26]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <f_open+0x1b6>
					res = FR_NO_FILE;
 8004f2e:	2304      	movs	r3, #4
 8004f30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004f34:	e00c      	b.n	8004f50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <f_open+0x1d0>
 8004f40:	7ebb      	ldrb	r3, [r7, #26]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <f_open+0x1d0>
						res = FR_DENIED;
 8004f4a:	2307      	movs	r3, #7
 8004f4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004f50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d126      	bne.n	8004fa6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004f72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	bf8c      	ite	hi
 8004f7e:	2301      	movhi	r3, #1
 8004f80:	2300      	movls	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe fb93 	bl	80036b8 <inc_lock>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <f_open+0x226>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 8095 	bne.w	80050da <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff f9b4 	bl	8004324 <ld_clust>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	331c      	adds	r3, #28
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fa10 	bl	80033ec <ld_dword>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	88da      	ldrh	r2, [r3, #6]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	79fa      	ldrb	r2, [r7, #7]
 8004fea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3330      	adds	r3, #48	@ 0x30
 8005002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe fa7a 	bl	8003502 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d060      	beq.n	80050da <f_open+0x35a>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05c      	beq.n	80050da <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	657b      	str	r3, [r7, #84]	@ 0x54
 800503c:	e016      	b.n	800506c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fd25 	bl	8003a92 <get_fat>
 8005048:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800504a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800504c:	2b01      	cmp	r3, #1
 800504e:	d802      	bhi.n	8005056 <f_open+0x2d6>
 8005050:	2302      	movs	r3, #2
 8005052:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d102      	bne.n	8005064 <f_open+0x2e4>
 800505e:	2301      	movs	r3, #1
 8005060:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005064:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	657b      	str	r3, [r7, #84]	@ 0x54
 800506c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <f_open+0x2fc>
 8005074:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005078:	429a      	cmp	r2, r3
 800507a:	d8e0      	bhi.n	800503e <f_open+0x2be>
				}
				fp->clust = clst;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005080:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005082:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005086:	2b00      	cmp	r3, #0
 8005088:	d127      	bne.n	80050da <f_open+0x35a>
 800508a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	2b00      	cmp	r3, #0
 8005092:	d022      	beq.n	80050da <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe fcdb 	bl	8003a54 <clust2sect>
 800509e:	6478      	str	r0, [r7, #68]	@ 0x44
 80050a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <f_open+0x32e>
						res = FR_INT_ERR;
 80050a6:	2302      	movs	r3, #2
 80050a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80050ac:	e015      	b.n	80050da <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80050ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b0:	0a5a      	lsrs	r2, r3, #9
 80050b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b4:	441a      	add	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	7858      	ldrb	r0, [r3, #1]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	2301      	movs	r3, #1
 80050ca:	f7fe f8c9 	bl	8003260 <disk_read>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <f_open+0x35a>
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80050da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <f_open+0x368>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80050e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3760      	adds	r7, #96	@ 0x60
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08e      	sub	sp, #56	@ 0x38
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f107 0214 	add.w	r2, r7, #20
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fdb7 	bl	8004c88 <validate>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005120:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005124:	2b00      	cmp	r3, #0
 8005126:	d107      	bne.n	8005138 <f_read+0x44>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	7d5b      	ldrb	r3, [r3, #21]
 800512c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005130:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <f_read+0x4a>
 8005138:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800513c:	e115      	b.n	800536a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	7d1b      	ldrb	r3, [r3, #20]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <f_read+0x5a>
 800514a:	2307      	movs	r3, #7
 800514c:	e10d      	b.n	800536a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	429a      	cmp	r2, r3
 8005160:	f240 80fe 	bls.w	8005360 <f_read+0x26c>
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005168:	e0fa      	b.n	8005360 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80c6 	bne.w	8005304 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	0a5b      	lsrs	r3, r3, #9
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	8952      	ldrh	r2, [r2, #10]
 8005182:	3a01      	subs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d12f      	bne.n	80051ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	633b      	str	r3, [r7, #48]	@ 0x30
 800519c:	e013      	b.n	80051c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	4619      	mov	r1, r3
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7fe fefe 	bl	8003fae <clmt_clust>
 80051b2:	6338      	str	r0, [r7, #48]	@ 0x30
 80051b4:	e007      	b.n	80051c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f7fe fc67 	bl	8003a92 <get_fat>
 80051c4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d804      	bhi.n	80051d6 <f_read+0xe2>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2202      	movs	r2, #2
 80051d0:	755a      	strb	r2, [r3, #21]
 80051d2:	2302      	movs	r3, #2
 80051d4:	e0c9      	b.n	800536a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d104      	bne.n	80051e8 <f_read+0xf4>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	755a      	strb	r2, [r3, #21]
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0c0      	b.n	800536a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe fc2c 	bl	8003a54 <clust2sect>
 80051fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <f_read+0x11a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2202      	movs	r2, #2
 8005208:	755a      	strb	r2, [r3, #21]
 800520a:	2302      	movs	r3, #2
 800520c:	e0ad      	b.n	800536a <f_read+0x276>
			sect += csect;
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0a5b      	lsrs	r3, r3, #9
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d039      	beq.n	8005296 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	4413      	add	r3, r2
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	8952      	ldrh	r2, [r2, #10]
 800522c:	4293      	cmp	r3, r2
 800522e:	d905      	bls.n	800523c <f_read+0x148>
					cc = fs->csize - csect;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	895b      	ldrh	r3, [r3, #10]
 8005234:	461a      	mov	r2, r3
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	7858      	ldrb	r0, [r3, #1]
 8005240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005246:	f7fe f80b 	bl	8003260 <disk_read>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <f_read+0x166>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	755a      	strb	r2, [r3, #21]
 8005256:	2301      	movs	r3, #1
 8005258:	e087      	b.n	800536a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	7d1b      	ldrb	r3, [r3, #20]
 800525e:	b25b      	sxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	da14      	bge.n	800528e <f_read+0x19a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526e:	429a      	cmp	r2, r3
 8005270:	d90d      	bls.n	800528e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1a      	ldr	r2, [r3, #32]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	025b      	lsls	r3, r3, #9
 800527c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527e:	18d0      	adds	r0, r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3330      	adds	r3, #48	@ 0x30
 8005284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005288:	4619      	mov	r1, r3
 800528a:	f7fe f919 	bl	80034c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	025b      	lsls	r3, r3, #9
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005294:	e050      	b.n	8005338 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	429a      	cmp	r2, r3
 800529e:	d02e      	beq.n	80052fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	7d1b      	ldrb	r3, [r3, #20]
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da18      	bge.n	80052dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	7858      	ldrb	r0, [r3, #1]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	2301      	movs	r3, #1
 80052ba:	f7fe f809 	bl	80032d0 <disk_write>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <f_read+0x1da>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	755a      	strb	r2, [r3, #21]
 80052ca:	2301      	movs	r3, #1
 80052cc:	e04d      	b.n	800536a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	7d1b      	ldrb	r3, [r3, #20]
 80052d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	7858      	ldrb	r0, [r3, #1]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80052e6:	2301      	movs	r3, #1
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	f7fd ffb9 	bl	8003260 <disk_read>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <f_read+0x20a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	755a      	strb	r2, [r3, #21]
 80052fa:	2301      	movs	r3, #1
 80052fc:	e035      	b.n	800536a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d901      	bls.n	800531e <f_read+0x22a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532c:	4413      	add	r3, r2
 800532e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005330:	4619      	mov	r1, r3
 8005332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005334:	f7fe f8c4 	bl	80034c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533c:	4413      	add	r3, r2
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005346:	441a      	add	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	619a      	str	r2, [r3, #24]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005352:	441a      	add	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f47f af01 	bne.w	800516a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3738      	adds	r7, #56	@ 0x38
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08c      	sub	sp, #48	@ 0x30
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f107 0210 	add.w	r2, r7, #16
 8005390:	4611      	mov	r1, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fc78 	bl	8004c88 <validate>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800539e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <f_write+0x44>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	7d5b      	ldrb	r3, [r3, #21]
 80053aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80053ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <f_write+0x4a>
 80053b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053ba:	e14b      	b.n	8005654 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	7d1b      	ldrb	r3, [r3, #20]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <f_write+0x5a>
 80053c8:	2307      	movs	r3, #7
 80053ca:	e143      	b.n	8005654 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	441a      	add	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	f080 812d 	bcs.w	8005638 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80053e6:	e127      	b.n	8005638 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 80e3 	bne.w	80055bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	0a5b      	lsrs	r3, r3, #9
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	8952      	ldrh	r2, [r2, #10]
 8005400:	3a01      	subs	r2, #1
 8005402:	4013      	ands	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d143      	bne.n	8005494 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10c      	bne.n	800542e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11a      	bne.n	8005456 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe fd2a 	bl	8003e7e <create_chain>
 800542a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800542c:	e013      	b.n	8005456 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	4619      	mov	r1, r3
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7fe fdb6 	bl	8003fae <clmt_clust>
 8005442:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005444:	e007      	b.n	8005456 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f7fe fd15 	bl	8003e7e <create_chain>
 8005454:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80f2 	beq.w	8005642 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	2b01      	cmp	r3, #1
 8005462:	d104      	bne.n	800546e <f_write+0xfc>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2202      	movs	r2, #2
 8005468:	755a      	strb	r2, [r3, #21]
 800546a:	2302      	movs	r3, #2
 800546c:	e0f2      	b.n	8005654 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d104      	bne.n	8005480 <f_write+0x10e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	755a      	strb	r2, [r3, #21]
 800547c:	2301      	movs	r3, #1
 800547e:	e0e9      	b.n	8005654 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005484:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <f_write+0x122>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005492:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	7d1b      	ldrb	r3, [r3, #20]
 8005498:	b25b      	sxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	da18      	bge.n	80054d0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	7858      	ldrb	r0, [r3, #1]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1a      	ldr	r2, [r3, #32]
 80054ac:	2301      	movs	r3, #1
 80054ae:	f7fd ff0f 	bl	80032d0 <disk_write>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d004      	beq.n	80054c2 <f_write+0x150>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	755a      	strb	r2, [r3, #21]
 80054be:	2301      	movs	r3, #1
 80054c0:	e0c8      	b.n	8005654 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	7d1b      	ldrb	r3, [r3, #20]
 80054c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fe fabb 	bl	8003a54 <clust2sect>
 80054de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <f_write+0x17e>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2202      	movs	r2, #2
 80054ea:	755a      	strb	r2, [r3, #21]
 80054ec:	2302      	movs	r3, #2
 80054ee:	e0b1      	b.n	8005654 <f_write+0x2e2>
			sect += csect;
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	4413      	add	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0a5b      	lsrs	r3, r3, #9
 80054fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d03c      	beq.n	800557e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	4413      	add	r3, r2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	8952      	ldrh	r2, [r2, #10]
 800550e:	4293      	cmp	r3, r2
 8005510:	d905      	bls.n	800551e <f_write+0x1ac>
					cc = fs->csize - csect;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	895b      	ldrh	r3, [r3, #10]
 8005516:	461a      	mov	r2, r3
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	7858      	ldrb	r0, [r3, #1]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	69f9      	ldr	r1, [r7, #28]
 8005528:	f7fd fed2 	bl	80032d0 <disk_write>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <f_write+0x1ca>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	755a      	strb	r2, [r3, #21]
 8005538:	2301      	movs	r3, #1
 800553a:	e08b      	b.n	8005654 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	6a3a      	ldr	r2, [r7, #32]
 8005546:	429a      	cmp	r2, r3
 8005548:	d915      	bls.n	8005576 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	025b      	lsls	r3, r3, #9
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005562:	4619      	mov	r1, r3
 8005564:	f7fd ffac 	bl	80034c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	7d1b      	ldrb	r3, [r3, #20]
 800556c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	025b      	lsls	r3, r3, #9
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800557c:	e03f      	b.n	80055fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	d016      	beq.n	80055b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005590:	429a      	cmp	r2, r3
 8005592:	d210      	bcs.n	80055b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	7858      	ldrb	r0, [r3, #1]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800559e:	2301      	movs	r3, #1
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	f7fd fe5d 	bl	8003260 <disk_read>
 80055a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	755a      	strb	r2, [r3, #21]
 80055b2:	2301      	movs	r3, #1
 80055b4:	e04e      	b.n	8005654 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80055ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d901      	bls.n	80055d6 <f_write+0x264>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e4:	4413      	add	r3, r2
 80055e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e8:	69f9      	ldr	r1, [r7, #28]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd ff68 	bl	80034c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	7d1b      	ldrb	r3, [r3, #20]
 80055f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	4413      	add	r3, r2
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	441a      	add	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	619a      	str	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	429a      	cmp	r2, r3
 800561c:	bf38      	it	cc
 800561e:	461a      	movcc	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	441a      	add	r2, r3
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f47f aed4 	bne.w	80053e8 <f_write+0x76>
 8005640:	e000      	b.n	8005644 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005642:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	7d1b      	ldrb	r3, [r3, #20]
 8005648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3730      	adds	r7, #48	@ 0x30
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f107 0208 	add.w	r2, r7, #8
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fb0b 	bl	8004c88 <validate>
 8005672:	4603      	mov	r3, r0
 8005674:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d168      	bne.n	800574e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	7d1b      	ldrb	r3, [r3, #20]
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d062      	beq.n	800574e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7d1b      	ldrb	r3, [r3, #20]
 800568c:	b25b      	sxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	da15      	bge.n	80056be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	7858      	ldrb	r0, [r3, #1]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	2301      	movs	r3, #1
 80056a2:	f7fd fe15 	bl	80032d0 <disk_write>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <f_sync+0x54>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e04f      	b.n	8005750 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	7d1b      	ldrb	r3, [r3, #20]
 80056b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80056be:	f7fd fd97 	bl	80031f0 <get_fattime>
 80056c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f7fe f925 	bl	800391c <move_window>
 80056d2:	4603      	mov	r3, r0
 80056d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d138      	bne.n	800574e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	330b      	adds	r3, #11
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	330b      	adds	r3, #11
 80056ec:	f042 0220 	orr.w	r2, r2, #32
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	461a      	mov	r2, r3
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	f7fe fe2f 	bl	8004362 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f103 021c 	add.w	r2, r3, #28
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f7fd fea9 	bl	8003468 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3316      	adds	r3, #22
 800571a:	6939      	ldr	r1, [r7, #16]
 800571c:	4618      	mov	r0, r3
 800571e:	f7fd fea3 	bl	8003468 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3312      	adds	r3, #18
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f7fd fe82 	bl	8003432 <st_word>
					fs->wflag = 1;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2201      	movs	r2, #1
 8005732:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe f91e 	bl	8003978 <sync_fs>
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	7d1b      	ldrb	r3, [r3, #20]
 8005744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005748:	b2da      	uxtb	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800574e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff7b 	bl	800565c <f_sync>
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d118      	bne.n	80057a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f107 0208 	add.w	r2, r7, #8
 8005776:	4611      	mov	r1, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fa85 	bl	8004c88 <validate>
 800577e:	4603      	mov	r3, r0
 8005780:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe f821 	bl	80037d4 <dec_lock>
 8005792:	4603      	mov	r3, r0
 8005794:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <memset>:
 80057ac:	4402      	add	r2, r0
 80057ae:	4603      	mov	r3, r0
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <__libc_init_array>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4d0d      	ldr	r5, [pc, #52]	@ (80057f4 <__libc_init_array+0x38>)
 80057c0:	4c0d      	ldr	r4, [pc, #52]	@ (80057f8 <__libc_init_array+0x3c>)
 80057c2:	1b64      	subs	r4, r4, r5
 80057c4:	10a4      	asrs	r4, r4, #2
 80057c6:	2600      	movs	r6, #0
 80057c8:	42a6      	cmp	r6, r4
 80057ca:	d109      	bne.n	80057e0 <__libc_init_array+0x24>
 80057cc:	4d0b      	ldr	r5, [pc, #44]	@ (80057fc <__libc_init_array+0x40>)
 80057ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005800 <__libc_init_array+0x44>)
 80057d0:	f000 f818 	bl	8005804 <_init>
 80057d4:	1b64      	subs	r4, r4, r5
 80057d6:	10a4      	asrs	r4, r4, #2
 80057d8:	2600      	movs	r6, #0
 80057da:	42a6      	cmp	r6, r4
 80057dc:	d105      	bne.n	80057ea <__libc_init_array+0x2e>
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e4:	4798      	blx	r3
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7ee      	b.n	80057c8 <__libc_init_array+0xc>
 80057ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ee:	4798      	blx	r3
 80057f0:	3601      	adds	r6, #1
 80057f2:	e7f2      	b.n	80057da <__libc_init_array+0x1e>
 80057f4:	080059a8 	.word	0x080059a8
 80057f8:	080059a8 	.word	0x080059a8
 80057fc:	080059a8 	.word	0x080059a8
 8005800:	080059ac 	.word	0x080059ac

08005804 <_init>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr

08005810 <_fini>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr
