
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004874  08004874  00005874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b4  080048b4  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080048b4  080048b4  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b4  080048b4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000010  080048cc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080048cc  00006118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a695  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd4  00000000  00000000  000106d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  000124b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d1  00000000  00000000  00012f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000019e6  00000000  00000000  000136d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd60  00000000  00000000  000150b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c06  00000000  00000000  00021e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028dc  00000000  00000000  00103a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0010633c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800485c 	.word	0x0800485c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800485c 	.word	0x0800485c

080001c8 <readRegister>:
	HAL_I2C_Master_Transmit_DMA(&hI2C, addr & (0xFE), data, 2);
	while(!sensorReady);
	sensorReady = 0;
}

void readRegister(uint8_t addr, uint8_t regAddr, uint8_t *result, uint16_t size){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	603a      	str	r2, [r7, #0]
 80001d0:	461a      	mov	r2, r3
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	4613      	mov	r3, r2
 80001dc:	80bb      	strh	r3, [r7, #4]
	uint8_t data[1] = {regAddr};
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 1);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	b29b      	uxth	r3, r3
 80001e6:	005b      	lsls	r3, r3, #1
 80001e8:	b299      	uxth	r1, r3
 80001ea:	f107 020c 	add.w	r2, r7, #12
 80001ee:	2301      	movs	r3, #1
 80001f0:	4814      	ldr	r0, [pc, #80]	@ (8000244 <readRegister+0x7c>)
 80001f2:	f001 f8bd 	bl	8001370 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 80001f6:	bf00      	nop
 80001f8:	4b13      	ldr	r3, [pc, #76]	@ (8000248 <readRegister+0x80>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	f083 0301 	eor.w	r3, r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f8      	bne.n	80001f8 <readRegister+0x30>
	sensorReady = 0;
 8000206:	4b10      	ldr	r3, [pc, #64]	@ (8000248 <readRegister+0x80>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_DMA(&hI2C, (addr << 1) | (0x01), result, size);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	b21b      	sxth	r3, r3
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	b21b      	sxth	r3, r3
 8000218:	b299      	uxth	r1, r3
 800021a:	88bb      	ldrh	r3, [r7, #4]
 800021c:	683a      	ldr	r2, [r7, #0]
 800021e:	4809      	ldr	r0, [pc, #36]	@ (8000244 <readRegister+0x7c>)
 8000220:	f001 f9ba 	bl	8001598 <HAL_I2C_Master_Receive_DMA>
	while(!transmitterReady);
 8000224:	bf00      	nop
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <readRegister+0x84>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	f083 0301 	eor.w	r3, r3, #1
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2b00      	cmp	r3, #0
 8000232:	d1f8      	bne.n	8000226 <readRegister+0x5e>
	transmitterReady = 0;
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <readRegister+0x84>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	2000002c 	.word	0x2000002c
 8000248:	20000080 	.word	0x20000080
 800024c:	20000081 	.word	0x20000081

08000250 <I2C_Init>:

//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 8000254:	4b1c      	ldr	r3, [pc, #112]	@ (80002c8 <I2C_Init+0x78>)
 8000256:	4a1d      	ldr	r2, [pc, #116]	@ (80002cc <I2C_Init+0x7c>)
 8000258:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 800025a:	4b1b      	ldr	r3, [pc, #108]	@ (80002c8 <I2C_Init+0x78>)
 800025c:	2200      	movs	r2, #0
 800025e:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000260:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <I2C_Init+0x78>)
 8000262:	2200      	movs	r2, #0
 8000264:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000266:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <I2C_Init+0x78>)
 8000268:	2201      	movs	r2, #1
 800026a:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800026c:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <I2C_Init+0x78>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 8000272:	4b15      	ldr	r3, [pc, #84]	@ (80002c8 <I2C_Init+0x78>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000278:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <I2C_Init+0x78>)
 800027a:	2200      	movs	r2, #0
 800027c:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800027e:	4b12      	ldr	r3, [pc, #72]	@ (80002c8 <I2C_Init+0x78>)
 8000280:	2200      	movs	r2, #0
 8000282:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <I2C_Init+0x78>)
 8000286:	2200      	movs	r2, #0
 8000288:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 800028a:	4b0f      	ldr	r3, [pc, #60]	@ (80002c8 <I2C_Init+0x78>)
 800028c:	4a10      	ldr	r2, [pc, #64]	@ (80002d0 <I2C_Init+0x80>)
 800028e:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000290:	480d      	ldr	r0, [pc, #52]	@ (80002c8 <I2C_Init+0x78>)
 8000292:	f000 ffd1 	bl	8001238 <HAL_I2C_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <I2C_Init+0x50>
	{
		Error_Handler();
 800029c:	f000 f8d8 	bl	8000450 <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002a0:	2100      	movs	r1, #0
 80002a2:	4809      	ldr	r0, [pc, #36]	@ (80002c8 <I2C_Init+0x78>)
 80002a4:	f002 ff2e 	bl	8003104 <HAL_I2CEx_ConfigAnalogFilter>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <I2C_Init+0x62>
	{
		Error_Handler();
 80002ae:	f000 f8cf 	bl	8000450 <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <I2C_Init+0x78>)
 80002b6:	f002 ff70 	bl	800319a <HAL_I2CEx_ConfigDigitalFilter>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <I2C_Init+0x74>
    {
    	Error_Handler();
 80002c0:	f000 f8c6 	bl	8000450 <Error_Handler>
    }
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	40005400 	.word	0x40005400
 80002d0:	00100d14 	.word	0x00100d14

080002d4 <HAL_I2C_ErrorCallback>:


uint8_t WHO_AM_I_MPU6050 = 0x75;


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2CHandle){
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a05      	ldr	r2, [pc, #20]	@ (800030c <HAL_I2C_MasterTxCpltCallback+0x24>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d102      	bne.n	8000300 <HAL_I2C_MasterTxCpltCallback+0x18>
		sensorReady = 1;
 80002fa:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	601a      	str	r2, [r3, #0]
	}
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	40005400 	.word	0x40005400
 8000310:	20000080 	.word	0x20000080

08000314 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2CHandle){
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a05      	ldr	r2, [pc, #20]	@ (8000338 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d102      	bne.n	800032c <HAL_I2C_MasterRxCpltCallback+0x18>
		transmitterReady = 1;
 8000326:	4b05      	ldr	r3, [pc, #20]	@ (800033c <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000328:	2201      	movs	r2, #1
 800032a:	601a      	str	r2, [r3, #0]
	}
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40005400 	.word	0x40005400
 800033c:	20000081 	.word	0x20000081

08000340 <main>:


int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
  HAL_Init();
 8000346:	f000 fa00 	bl	800074a <HAL_Init>
  SystemClock_Config();
 800034a:	f000 f815 	bl	8000378 <SystemClock_Config>
  DMA_Init();
 800034e:	f000 f859 	bl	8000404 <DMA_Init>
  I2C_Init();
 8000352:	f7ff ff7d 	bl	8000250 <I2C_Init>

  uint8_t result[1];
  while (1)
  {
	  readRegister(MPU6050ADDR,WHO_AM_I_MPU6050, result, 1);
 8000356:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <main+0x34>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	4619      	mov	r1, r3
 800035c:	463a      	mov	r2, r7
 800035e:	2301      	movs	r3, #1
 8000360:	2069      	movs	r0, #105	@ 0x69
 8000362:	f7ff ff31 	bl	80001c8 <readRegister>
	  int x = 21;
 8000366:	2315      	movs	r3, #21
 8000368:	607b      	str	r3, [r7, #4]
	  x+=1;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3301      	adds	r3, #1
 800036e:	607b      	str	r3, [r7, #4]
  {
 8000370:	bf00      	nop
 8000372:	e7f0      	b.n	8000356 <main+0x16>
 8000374:	20000000 	.word	0x20000000

08000378 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b096      	sub	sp, #88	@ 0x58
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	2244      	movs	r2, #68	@ 0x44
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f004 fa3c 	bl	8004804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	463b      	mov	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800039e:	f002 ff57 	bl	8003250 <HAL_PWREx_ControlVoltageScaling>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003a8:	f000 f852 	bl	8000450 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ac:	2310      	movs	r3, #16
 80003ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003b0:	2301      	movs	r3, #1
 80003b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003b8:	2360      	movs	r3, #96	@ 0x60
 80003ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003bc:	2300      	movs	r3, #0
 80003be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 ff99 	bl	80032fc <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003d0:	f000 f83e 	bl	8000450 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003d8:	2300      	movs	r3, #0
 80003da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f003 fb61 	bl	8003ab4 <HAL_RCC_ClockConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003f8:	f000 f82a 	bl	8000450 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3758      	adds	r7, #88	@ 0x58
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <DMA_Init>:


//PB6 = SCL1, PB7 = SDA1


void DMA_Init(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800040a:	4b10      	ldr	r3, [pc, #64]	@ (800044c <DMA_Init+0x48>)
 800040c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800040e:	4a0f      	ldr	r2, [pc, #60]	@ (800044c <DMA_Init+0x48>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6493      	str	r3, [r2, #72]	@ 0x48
 8000416:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <DMA_Init+0x48>)
 8000418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	2010      	movs	r0, #16
 8000428:	f000 fadf 	bl	80009ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800042c:	2010      	movs	r0, #16
 800042e:	f000 faf8 	bl	8000a22 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2011      	movs	r0, #17
 8000438:	f000 fad7 	bl	80009ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800043c:	2011      	movs	r0, #17
 800043e:	f000 faf0 	bl	8000a22 <HAL_NVIC_EnableIRQ>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <Error_Handler>:
}



void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  __disable_irq();
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <Error_Handler+0x8>

0800045c <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <HAL_MspInit+0x44>)
 8000464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000466:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6613      	str	r3, [r2, #96]	@ 0x60
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <HAL_MspInit+0x44>)
 8000470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <HAL_MspInit+0x44>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800047e:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000484:	6593      	str	r3, [r2, #88]	@ 0x58
 8000486:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_MspInit+0x44>)
 8000488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800048a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b0ac      	sub	sp, #176	@ 0xb0
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 80004ac:	4b57      	ldr	r3, [pc, #348]	@ (800060c <HAL_I2C_MspInit+0x168>)
 80004ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b0:	4a56      	ldr	r2, [pc, #344]	@ (800060c <HAL_I2C_MspInit+0x168>)
 80004b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80004b8:	4b54      	ldr	r3, [pc, #336]	@ (800060c <HAL_I2C_MspInit+0x168>)
 80004ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004c4:	4b51      	ldr	r3, [pc, #324]	@ (800060c <HAL_I2C_MspInit+0x168>)
 80004c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c8:	4a50      	ldr	r2, [pc, #320]	@ (800060c <HAL_I2C_MspInit+0x168>)
 80004ca:	f043 0302 	orr.w	r3, r3, #2
 80004ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004d0:	4b4e      	ldr	r3, [pc, #312]	@ (800060c <HAL_I2C_MspInit+0x168>)
 80004d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d4:	f003 0302 	and.w	r3, r3, #2
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004e0:	2288      	movs	r2, #136	@ 0x88
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f004 f98d 	bl	8004804 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004ea:	2340      	movs	r3, #64	@ 0x40
 80004ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fcc8 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 8000502:	f7ff ffa5 	bl	8000450 <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000506:	23c0      	movs	r3, #192	@ 0xc0
 8000508:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800050a:	2312      	movs	r3, #18
 800050c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800050e:	2301      	movs	r3, #1
 8000510:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000512:	2302      	movs	r3, #2
 8000514:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000516:	2304      	movs	r3, #4
 8000518:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 800051a:	4b3c      	ldr	r3, [pc, #240]	@ (800060c <HAL_I2C_MspInit+0x168>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	4a3b      	ldr	r2, [pc, #236]	@ (800060c <HAL_I2C_MspInit+0x168>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000526:	4b39      	ldr	r3, [pc, #228]	@ (800060c <HAL_I2C_MspInit+0x168>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	4835      	ldr	r0, [pc, #212]	@ (8000610 <HAL_I2C_MspInit+0x16c>)
 800053a:	f000 fcd3 	bl	8000ee4 <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 800053e:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000540:	4a35      	ldr	r2, [pc, #212]	@ (8000618 <HAL_I2C_MspInit+0x174>)
 8000542:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000544:	4b33      	ldr	r3, [pc, #204]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000546:	2203      	movs	r2, #3
 8000548:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800054a:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 800054c:	2210      	movs	r2, #16
 800054e:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000550:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000556:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800055c:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000562:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000568:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800056e:	4b29      	ldr	r3, [pc, #164]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 8000574:	4827      	ldr	r0, [pc, #156]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000576:	f000 fa6f 	bl	8000a58 <HAL_DMA_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000580:	f7ff ff66 	bl	8000450 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a23      	ldr	r2, [pc, #140]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 8000588:	639a      	str	r2, [r3, #56]	@ 0x38
 800058a:	4a22      	ldr	r2, [pc, #136]	@ (8000614 <HAL_I2C_MspInit+0x170>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <HAL_I2C_MspInit+0x178>)
 8000592:	4a23      	ldr	r2, [pc, #140]	@ (8000620 <HAL_I2C_MspInit+0x17c>)
 8000594:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000596:	4b21      	ldr	r3, [pc, #132]	@ (800061c <HAL_I2C_MspInit+0x178>)
 8000598:	2203      	movs	r2, #3
 800059a:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <HAL_I2C_MspInit+0x178>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ae:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005b4:	4b19      	ldr	r3, [pc, #100]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80005ba:	4b18      	ldr	r3, [pc, #96]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005c0:	4b16      	ldr	r3, [pc, #88]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 80005c6:	4815      	ldr	r0, [pc, #84]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005c8:	f000 fa46 	bl	8000a58 <HAL_DMA_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_I2C_MspInit+0x132>
		Error_Handler();
 80005d2:	f7ff ff3d 	bl	8000450 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a10      	ldr	r2, [pc, #64]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005dc:	4a0f      	ldr	r2, [pc, #60]	@ (800061c <HAL_I2C_MspInit+0x178>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	201f      	movs	r0, #31
 80005e8:	f000 f9ff 	bl	80009ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005ec:	201f      	movs	r0, #31
 80005ee:	f000 fa18 	bl	8000a22 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2020      	movs	r0, #32
 80005f8:	f000 f9f7 	bl	80009ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80005fc:	2020      	movs	r0, #32
 80005fe:	f000 fa10 	bl	8000a22 <HAL_NVIC_EnableIRQ>
}
 8000602:	bf00      	nop
 8000604:	37b0      	adds	r7, #176	@ 0xb0
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	48000400 	.word	0x48000400
 8000614:	20000084 	.word	0x20000084
 8000618:	4002006c 	.word	0x4002006c
 800061c:	200000cc 	.word	0x200000cc
 8000620:	40020080 	.word	0x40020080

08000624 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
   while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <NMI_Handler+0x4>

0800062c <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <HardFault_Handler+0x4>

08000634 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <MemManage_Handler+0x4>

0800063c <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <BusFault_Handler+0x4>

08000644 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <UsageFault_Handler+0x4>

0800064c <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800067a:	f000 f8bb 	bl	80007f4 <HAL_IncTick>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000688:	4802      	ldr	r0, [pc, #8]	@ (8000694 <DMA1_Channel6_IRQHandler+0x10>)
 800068a:	f000 fb3e 	bl	8000d0a <HAL_DMA_IRQHandler>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000084 	.word	0x20000084

08000698 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800069c:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <DMA1_Channel7_IRQHandler+0x10>)
 800069e:	f000 fb34 	bl	8000d0a <HAL_DMA_IRQHandler>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000cc 	.word	0x200000cc

080006ac <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 80006b0:	4802      	ldr	r0, [pc, #8]	@ (80006bc <I2C1_EV_IRQHandler+0x10>)
 80006b2:	f001 f861 	bl	8001778 <HAL_I2C_EV_IRQHandler>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000002c 	.word	0x2000002c

080006c0 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <I2C1_ER_IRQHandler+0x10>)
 80006c6:	f001 f871 	bl	80017ac <HAL_I2C_ER_IRQHandler>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000002c 	.word	0x2000002c

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000730 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006fc:	f7ff ffea 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	@ (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	@ (8000744 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000726:	f004 f875 	bl	8004814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072a:	f7ff fe09 	bl	8000340 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000730:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800073c:	080048bc 	.word	0x080048bc
  ldr r2, =_sbss
 8000740:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000744:	20000118 	.word	0x20000118

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>

0800074a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f93d 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800075a:	200f      	movs	r0, #15
 800075c:	f000 f80e 	bl	800077c <HAL_InitTick>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	e001      	b.n	8000770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800076c:	f7ff fe76 	bl	800045c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000770:	79fb      	ldrb	r3, [r7, #7]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_InitTick+0x6c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d023      	beq.n	80007d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <HAL_InitTick+0x70>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <HAL_InitTick+0x6c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f949 	bl	8000a3e <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d10f      	bne.n	80007d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d809      	bhi.n	80007cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b8:	2200      	movs	r2, #0
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f000 f913 	bl	80009ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007c4:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <HAL_InitTick+0x74>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	e007      	b.n	80007dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	e004      	b.n	80007dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e001      	b.n	80007dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000000c 	.word	0x2000000c
 80007ec:	20000004 	.word	0x20000004
 80007f0:	20000008 	.word	0x20000008

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000114 	.word	0x20000114

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000114 	.word	0x20000114

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4907      	ldr	r1, [pc, #28]	@ (80008d0 <__NVIC_EnableIRQ+0x38>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	@ (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	@ (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	@ 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	@ 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff8e 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	@ (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff29 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff3e 	bl	800087c <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff8e 	bl	8000928 <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5d 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff31 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ffa2 	bl	8000990 <SysTick_Config>
 8000a4c:	4603      	mov	r3, r0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e098      	b.n	8000b9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b4d      	ldr	r3, [pc, #308]	@ (8000ba8 <HAL_DMA_Init+0x150>)
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d80f      	bhi.n	8000a96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8000bac <HAL_DMA_Init+0x154>)
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a4b      	ldr	r2, [pc, #300]	@ (8000bb0 <HAL_DMA_Init+0x158>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	009a      	lsls	r2, r3, #2
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a48      	ldr	r2, [pc, #288]	@ (8000bb4 <HAL_DMA_Init+0x15c>)
 8000a92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a94:	e00e      	b.n	8000ab4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b46      	ldr	r3, [pc, #280]	@ (8000bb8 <HAL_DMA_Init+0x160>)
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <HAL_DMA_Init+0x158>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	091b      	lsrs	r3, r3, #4
 8000aa8:	009a      	lsls	r2, r3, #2
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a42      	ldr	r2, [pc, #264]	@ (8000bbc <HAL_DMA_Init+0x164>)
 8000ab2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000ace:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b0e:	d039      	beq.n	8000b84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a27      	ldr	r2, [pc, #156]	@ (8000bb4 <HAL_DMA_Init+0x15c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d11a      	bne.n	8000b50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b1a:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <HAL_DMA_Init+0x168>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f003 031c 	and.w	r3, r3, #28
 8000b26:	210f      	movs	r1, #15
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4924      	ldr	r1, [pc, #144]	@ (8000bc0 <HAL_DMA_Init+0x168>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b34:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <HAL_DMA_Init+0x168>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6859      	ldr	r1, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b40:	f003 031c 	and.w	r3, r3, #28
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	491d      	ldr	r1, [pc, #116]	@ (8000bc0 <HAL_DMA_Init+0x168>)
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	600b      	str	r3, [r1, #0]
 8000b4e:	e019      	b.n	8000b84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <HAL_DMA_Init+0x16c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b58:	f003 031c 	and.w	r3, r3, #28
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	4917      	ldr	r1, [pc, #92]	@ (8000bc4 <HAL_DMA_Init+0x16c>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <HAL_DMA_Init+0x16c>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6859      	ldr	r1, [r3, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f003 031c 	and.w	r3, r3, #28
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	4911      	ldr	r1, [pc, #68]	@ (8000bc4 <HAL_DMA_Init+0x16c>)
 8000b80:	4313      	orrs	r3, r2
 8000b82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	40020407 	.word	0x40020407
 8000bac:	bffdfff8 	.word	0xbffdfff8
 8000bb0:	cccccccd 	.word	0xcccccccd
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	bffdfbf8 	.word	0xbffdfbf8
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	400200a8 	.word	0x400200a8
 8000bc4:	400204a8 	.word	0x400204a8

08000bc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <HAL_DMA_Start_IT+0x20>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e04b      	b.n	8000c80 <HAL_DMA_Start_IT+0xb8>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d13a      	bne.n	8000c72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2200      	movs	r2, #0
 8000c08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0201 	bic.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f000 f92f 	bl	8000e84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d008      	beq.n	8000c40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 020e 	orr.w	r2, r2, #14
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e00f      	b.n	8000c60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0204 	bic.w	r2, r2, #4
 8000c4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 020a 	orr.w	r2, r2, #10
 8000c5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 0201 	orr.w	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e005      	b.n	8000c7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d005      	beq.n	8000cac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e029      	b.n	8000d00 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 020e 	bic.w	r2, r2, #14
 8000cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd0:	f003 021c 	and.w	r2, r3, #28
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	4798      	blx	r3
    }
  }
  return status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f003 031c 	and.w	r3, r3, #28
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4013      	ands	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d026      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x7a>
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d021      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d107      	bne.n	8000d5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0204 	bic.w	r2, r2, #4
 8000d5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f003 021c 	and.w	r2, r3, #28
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d071      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d82:	e06c      	b.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d88:	f003 031c 	and.w	r3, r3, #28
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02e      	beq.n	8000df6 <HAL_DMA_IRQHandler+0xec>
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d029      	beq.n	8000df6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0320 	and.w	r3, r3, #32
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10b      	bne.n	8000dc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 020a 	bic.w	r2, r2, #10
 8000dbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dcc:	f003 021c 	and.w	r2, r3, #28
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d038      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000df4:	e033      	b.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f003 031c 	and.w	r3, r3, #28
 8000dfe:	2208      	movs	r2, #8
 8000e00:	409a      	lsls	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d02a      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x156>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d025      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 020e 	bic.w	r2, r2, #14
 8000e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	f003 021c 	and.w	r2, r3, #28
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	2101      	movs	r1, #1
 8000e32:	fa01 f202 	lsl.w	r2, r1, r2
 8000e36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
}
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e76:	b2db      	uxtb	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f003 021c 	and.w	r2, r3, #28
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d108      	bne.n	8000ec8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ec6:	e007      	b.n	8000ed8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e17f      	b.n	80011f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8171 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x40>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d118      	bne.n	8000fc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ac 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <HAL_GPIO_Init+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a5e      	ldr	r2, [pc, #376]	@ (8001214 <HAL_GPIO_Init+0x330>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x334>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x242>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x22a>
 800110a:	2306      	movs	r3, #6
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800110e:	2307      	movs	r3, #7
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001138:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_GPIO_Init+0x334>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae78 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	48001400 	.word	0x48001400
 8001230:	48001800 	.word	0x48001800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e08d      	b.n	8001366 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff f920 	bl	80004a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	@ 0x24
 8001268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80012be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d108      	bne.n	80012da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	e007      	b.n	80012ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800130c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69d9      	ldr	r1, [r3, #28]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af02      	add	r7, sp, #8
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	461a      	mov	r2, r3
 800137c:	460b      	mov	r3, r1
 800137e:	817b      	strh	r3, [r7, #10]
 8001380:	4613      	mov	r3, r2
 8001382:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b20      	cmp	r3, #32
 8001392:	f040 80ef 	bne.w	8001574 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80013a4:	d101      	bne.n	80013aa <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0e5      	b.n	8001576 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e0de      	b.n	8001576 <HAL_I2C_Master_Transmit_DMA+0x206>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2221      	movs	r2, #33	@ 0x21
 80013c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2210      	movs	r2, #16
 80013cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	893a      	ldrh	r2, [r7, #8]
 80013e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4a66      	ldr	r2, [pc, #408]	@ (8001580 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80013e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a66      	ldr	r2, [pc, #408]	@ (8001584 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2bff      	cmp	r3, #255	@ 0xff
 80013f6:	d906      	bls.n	8001406 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	22ff      	movs	r2, #255	@ 0xff
 80013fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80013fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	e007      	b.n	8001416 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001414:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01a      	beq.n	8001454 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001438:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001458:	2b00      	cmp	r3, #0
 800145a:	d074      	beq.n	8001546 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001460:	2b00      	cmp	r3, #0
 8001462:	d022      	beq.n	80014aa <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001468:	4a47      	ldr	r2, [pc, #284]	@ (8001588 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800146a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001470:	4a46      	ldr	r2, [pc, #280]	@ (800158c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001480:	2200      	movs	r2, #0
 8001482:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001494:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800149a:	f7ff fb95 	bl	8000bc8 <HAL_DMA_Start_IT>
 800149e:	4603      	mov	r3, r0
 80014a0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d13a      	bne.n	800151e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80014a8:	e013      	b.n	80014d2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e051      	b.n	8001576 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	8979      	ldrh	r1, [r7, #10]
 80014de:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f001 fcf9 	bl	8002edc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001504:	2110      	movs	r1, #16
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f001 fd1a 	bl	8002f40 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e028      	b.n	8001570 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f043 0210 	orr.w	r2, r3, #16
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e017      	b.n	8001576 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800154a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	8979      	ldrh	r1, [r7, #10]
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f001 fcbe 	bl	8002edc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001568:	2101      	movs	r1, #1
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f001 fce8 	bl	8002f40 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e000      	b.n	8001576 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001574:	2302      	movs	r3, #2
  }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	ffff0000 	.word	0xffff0000
 8001584:	08001d53 	.word	0x08001d53
 8001588:	08002d2b 	.word	0x08002d2b
 800158c:	08002e73 	.word	0x08002e73
 8001590:	80002000 	.word	0x80002000
 8001594:	080018f7 	.word	0x080018f7

08001598 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	817b      	strh	r3, [r7, #10]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	f040 80cd 	bne.w	8001754 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015c8:	d101      	bne.n	80015ce <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	e0c3      	b.n	8001756 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_I2C_Master_Receive_DMA+0x44>
 80015d8:	2302      	movs	r3, #2
 80015da:	e0bc      	b.n	8001756 <HAL_I2C_Master_Receive_DMA+0x1be>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2222      	movs	r2, #34	@ 0x22
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2210      	movs	r2, #16
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	893a      	ldrh	r2, [r7, #8]
 8001604:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a55      	ldr	r2, [pc, #340]	@ (8001760 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800160a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a55      	ldr	r2, [pc, #340]	@ (8001764 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	2bff      	cmp	r3, #255	@ 0xff
 800161a:	d906      	bls.n	800162a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e007      	b.n	800163a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162e:	b29a      	uxth	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001638:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800163e:	2b00      	cmp	r3, #0
 8001640:	d070      	beq.n	8001724 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d020      	beq.n	800168c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164e:	4a46      	ldr	r2, [pc, #280]	@ (8001768 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001656:	4a45      	ldr	r2, [pc, #276]	@ (800176c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165e:	2200      	movs	r2, #0
 8001660:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001666:	2200      	movs	r2, #0
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3324      	adds	r3, #36	@ 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800167c:	f7ff faa4 	bl	8000bc8 <HAL_DMA_Start_IT>
 8001680:	4603      	mov	r3, r0
 8001682:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001684:	7cfb      	ldrb	r3, [r7, #19]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d138      	bne.n	80016fc <HAL_I2C_Master_Receive_DMA+0x164>
 800168a:	e013      	b.n	80016b4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2220      	movs	r2, #32
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e050      	b.n	8001756 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	8979      	ldrh	r1, [r7, #10]
 80016bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f001 fc0a 	bl	8002edc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80016e2:	2110      	movs	r1, #16
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f001 fc2b 	bl	8002f40 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e029      	b.n	8001750 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e018      	b.n	8001756 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a13      	ldr	r2, [pc, #76]	@ (8001774 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8001728:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172e:	b2da      	uxtb	r2, r3
 8001730:	8979      	ldrh	r1, [r7, #10]
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f001 fbce 	bl	8002edc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001748:	2102      	movs	r1, #2
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f001 fbf8 	bl	8002f40 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e000      	b.n	8001756 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8001754:	2302      	movs	r3, #2
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	ffff0000 	.word	0xffff0000
 8001764:	08001d53 	.word	0x08001d53
 8001768:	08002dc1 	.word	0x08002dc1
 800176c:	08002e73 	.word	0x08002e73
 8001770:	80002400 	.word	0x80002400
 8001774:	080018f7 	.word	0x080018f7

08001778 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	68f9      	ldr	r1, [r7, #12]
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
  }
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00f      	beq.n	80017ee <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00a      	beq.n	80017ee <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00f      	beq.n	8001818 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	f043 0208 	orr.w	r2, r3, #8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001816:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00f      	beq.n	8001842 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00a      	beq.n	8001842 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001830:	f043 0202 	orr.w	r2, r3, #2
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001840:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 030b 	and.w	r3, r3, #11
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f001 f92d 	bl	8002ab4 <I2C_ITError>
  }
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	70fb      	strb	r3, [r7, #3]
 8001896:	4613      	mov	r3, r2
 8001898:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b088      	sub	sp, #32
 80018fa:	af02      	add	r7, sp, #8
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <I2C_Master_ISR_IT+0x1e>
 8001910:	2302      	movs	r3, #2
 8001912:	e121      	b.n	8001b58 <I2C_Master_ISR_IT+0x262>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00d      	beq.n	800194c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2210      	movs	r2, #16
 8001936:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f043 0204 	orr.w	r2, r3, #4
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f001 f9cc 	bl	8002ce2 <I2C_Flush_TXDR>
 800194a:	e0f2      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d022      	beq.n	800199c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01d      	beq.n	800199c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800199a:	e0ca      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d128      	bne.n	80019f8 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01e      	beq.n	80019f8 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80b6 	beq.w	8001b32 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80019f6:	e09c      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06a      	beq.n	8001ad8 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d065      	beq.n	8001ad8 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d04e      	beq.n	8001ab4 <I2C_Master_ISR_IT+0x1be>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d14a      	bne.n	8001ab4 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a2a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2bff      	cmp	r3, #255	@ 0xff
 8001a34:	d91c      	bls.n	8001a70 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d103      	bne.n	8001a52 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001a50:	e002      	b.n	8001a58 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	22ff      	movs	r2, #255	@ 0xff
 8001a56:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	8a79      	ldrh	r1, [r7, #18]
 8001a60:	2300      	movs	r3, #0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f001 fa37 	bl	8002edc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a6e:	e032      	b.n	8001ad6 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a82:	d00b      	beq.n	8001a9c <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a8e:	8a79      	ldrh	r1, [r7, #18]
 8001a90:	2000      	movs	r0, #0
 8001a92:	9000      	str	r0, [sp, #0]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f001 fa21 	bl	8002edc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9a:	e01c      	b.n	8001ad6 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	8a79      	ldrh	r1, [r7, #18]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f001 fa15 	bl	8002edc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab2:	e010      	b.n	8001ad6 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ac2:	d003      	beq.n	8001acc <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fcdc 	bl	8002482 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aca:	e032      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001acc:	2140      	movs	r1, #64	@ 0x40
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fff0 	bl	8002ab4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ad4:	e02d      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
 8001ad6:	e02c      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d027      	beq.n	8001b32 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d022      	beq.n	8001b32 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d119      	bne.n	8001b2a <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b04:	d015      	beq.n	8001b32 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b0e:	d108      	bne.n	8001b22 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	e007      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fcad 	bl	8002482 <I2C_ITMasterSeqCplt>
 8001b28:	e003      	b.n	8001b32 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b2a:	2140      	movs	r1, #64	@ 0x40
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 ffc1 	bl	8002ab4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001b46:	6979      	ldr	r1, [r7, #20]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fd33 	bl	80025b4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <I2C_Slave_ISR_IT+0x24>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0e2      	b.n	8001d4a <I2C_Slave_ISR_IT+0x1ea>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ba0:	6939      	ldr	r1, [r7, #16]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fdce 	bl	8002744 <I2C_ITSlaveCplt>
 8001ba8:	e0ca      	b.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d04b      	beq.n	8001c4c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d046      	beq.n	8001c4c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d128      	bne.n	8001c1a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b28      	cmp	r3, #40	@ 0x28
 8001bd2:	d108      	bne.n	8001be6 <I2C_Slave_ISR_IT+0x86>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bda:	d104      	bne.n	8001be6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 ff14 	bl	8002a0c <I2C_ITListenCplt>
 8001be4:	e031      	b.n	8001c4a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b29      	cmp	r3, #41	@ 0x29
 8001bf0:	d10e      	bne.n	8001c10 <I2C_Slave_ISR_IT+0xb0>
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bf8:	d00a      	beq.n	8001c10 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2210      	movs	r2, #16
 8001c00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f001 f86d 	bl	8002ce2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fc77 	bl	80024fc <I2C_ITSlaveSeqCplt>
 8001c0e:	e01c      	b.n	8001c4a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2210      	movs	r2, #16
 8001c16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001c18:	e08f      	b.n	8001d3a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f043 0204 	orr.w	r2, r3, #4
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <I2C_Slave_ISR_IT+0xdc>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c3a:	d17e      	bne.n	8001d3a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c40:	4619      	mov	r1, r3
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 ff36 	bl	8002ab4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c48:	e077      	b.n	8001d3a <I2C_Slave_ISR_IT+0x1da>
 8001c4a:	e076      	b.n	8001d3a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d02f      	beq.n	8001cb6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d02a      	beq.n	8001cb6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d018      	beq.n	8001c9c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d14b      	bne.n	8001d3e <I2C_Slave_ISR_IT+0x1de>
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cac:	d047      	beq.n	8001d3e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fc24 	bl	80024fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001cb4:	e043      	b.n	8001d3e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001cca:	6939      	ldr	r1, [r7, #16]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fb54 	bl	800237a <I2C_ITAddrCplt>
 8001cd2:	e035      	b.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d030      	beq.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d02b      	beq.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d018      	beq.n	8001d24 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001d22:	e00d      	b.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d2a:	d002      	beq.n	8001d32 <I2C_Slave_ISR_IT+0x1d2>
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 fbe2 	bl	80024fc <I2C_ITSlaveSeqCplt>
 8001d38:	e002      	b.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001d3e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b088      	sub	sp, #32
 8001d56:	af02      	add	r7, sp, #8
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <I2C_Master_ISR_DMA+0x1a>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0e7      	b.n	8001f3c <I2C_Master_ISR_DMA+0x1ea>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d011      	beq.n	8001dac <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	f043 0204 	orr.w	r2, r3, #4
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d9c:	2120      	movs	r1, #32
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f001 f8ce 	bl	8002f40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 ff9c 	bl	8002ce2 <I2C_Flush_TXDR>
 8001daa:	e0c2      	b.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d07f      	beq.n	8001eb6 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d07a      	beq.n	8001eb6 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d05c      	beq.n	8001e94 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2bff      	cmp	r3, #255	@ 0xff
 8001df0:	d914      	bls.n	8001e1c <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d103      	bne.n	8001e0e <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001e0c:	e002      	b.n	8001e14 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	22ff      	movs	r2, #255	@ 0xff
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e010      	b.n	8001e3e <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e2e:	d003      	beq.n	8001e38 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e002      	b.n	8001e3e <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001e38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e3c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	8a79      	ldrh	r1, [r7, #18]
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f001 f845 	bl	8002edc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b22      	cmp	r3, #34	@ 0x22
 8001e6e:	d108      	bne.n	8001e82 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e7e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e80:	e057      	b.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e92:	e04e      	b.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ea2:	d003      	beq.n	8001eac <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 faec 	bl	8002482 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001eaa:	e042      	b.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001eac:	2140      	movs	r1, #64	@ 0x40
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fe00 	bl	8002ab4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001eb4:	e03d      	b.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d028      	beq.n	8001f12 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d023      	beq.n	8001f12 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d119      	bne.n	8001f08 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ee2:	d025      	beq.n	8001f30 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001eec:	d108      	bne.n	8001f00 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001efc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001efe:	e017      	b.n	8001f30 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fabe 	bl	8002482 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001f06:	e013      	b.n	8001f30 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f08:	2140      	movs	r1, #64	@ 0x40
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fdd2 	bl	8002ab4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001f10:	e00e      	b.n	8001f30 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fb43 	bl	80025b4 <I2C_ITMasterCplt>
 8001f2e:	e000      	b.n	8001f32 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001f30:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001f50:	4b90      	ldr	r3, [pc, #576]	@ (8002194 <I2C_Mem_ISR_DMA+0x250>)
 8001f52:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <I2C_Mem_ISR_DMA+0x1e>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e12f      	b.n	80021c2 <I2C_Mem_ISR_DMA+0x27e>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d011      	beq.n	8001fa2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2210      	movs	r2, #16
 8001f84:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f043 0204 	orr.w	r2, r3, #4
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f92:	2120      	movs	r1, #32
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 ffd3 	bl	8002f40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fea1 	bl	8002ce2 <I2C_Flush_TXDR>
 8001fa0:	e10a      	b.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00e      	beq.n	8001fca <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fc8:	e0f6      	b.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d06d      	beq.n	80020b0 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d068      	beq.n	80020b0 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f001 f831 	bl	8003048 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 ffa9 	bl	8002f40 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d056      	beq.n	80020a6 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2bff      	cmp	r3, #255	@ 0xff
 8002000:	d91e      	bls.n	8002040 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d103      	bne.n	800201e <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800201c:	e002      	b.n	8002024 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	22ff      	movs	r2, #255	@ 0xff
 8002022:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002028:	b299      	uxth	r1, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202e:	b2da      	uxtb	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 ff4f 	bl	8002edc <I2C_TransferConfig>
 800203e:	e011      	b.n	8002064 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	b299      	uxth	r1, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002054:	b2da      	uxtb	r2, r3
 8002056:	2300      	movs	r3, #0
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 ff3c 	bl	8002edc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b22      	cmp	r3, #34	@ 0x22
 8002080:	d108      	bne.n	8002094 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002090:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002092:	e091      	b.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020a2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020a4:	e088      	b.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020a6:	2140      	movs	r1, #64	@ 0x40
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fd03 	bl	8002ab4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80020ae:	e083      	b.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d070      	beq.n	800219c <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d06b      	beq.n	800219c <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020c4:	2101      	movs	r1, #1
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 ffbe 	bl	8003048 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80020cc:	2110      	movs	r1, #16
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 ff36 	bl	8002f40 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b22      	cmp	r3, #34	@ 0x22
 80020de:	d101      	bne.n	80020e4 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <I2C_Mem_ISR_DMA+0x254>)
 80020e2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2bff      	cmp	r3, #255	@ 0xff
 80020ec:	d91e      	bls.n	800212c <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d103      	bne.n	800210a <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002108:	e002      	b.n	8002110 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	22ff      	movs	r2, #255	@ 0xff
 800210e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	b299      	uxth	r1, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211a:	b2da      	uxtb	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fed9 	bl	8002edc <I2C_TransferConfig>
 800212a:	e011      	b.n	8002150 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	b299      	uxth	r1, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	b2da      	uxtb	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fec6 	bl	8002edc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b22      	cmp	r3, #34	@ 0x22
 800216c:	d108      	bne.n	8002180 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800217e:	e01b      	b.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800218e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002190:	e012      	b.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
 8002192:	bf00      	nop
 8002194:	80002000 	.word	0x80002000
 8002198:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f9fe 	bl	80025b4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop

080021cc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <I2C_Slave_ISR_DMA+0x24>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0c0      	b.n	8002372 <I2C_Slave_ISR_DMA+0x1a6>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fa98 	bl	8002744 <I2C_ITSlaveCplt>
 8002214:	e0a8      	b.n	8002368 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8095 	beq.w	800234c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 808f 	beq.w	800234c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800223e:	2b00      	cmp	r3, #0
 8002240:	d07d      	beq.n	800233e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002260:	2301      	movs	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d128      	bne.n	80022de <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b28      	cmp	r3, #40	@ 0x28
 8002296:	d108      	bne.n	80022aa <I2C_Slave_ISR_DMA+0xde>
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800229e:	d104      	bne.n	80022aa <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fbb2 	bl	8002a0c <I2C_ITListenCplt>
 80022a8:	e048      	b.n	800233c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b29      	cmp	r3, #41	@ 0x29
 80022b4:	d10e      	bne.n	80022d4 <I2C_Slave_ISR_DMA+0x108>
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022bc:	d00a      	beq.n	80022d4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2210      	movs	r2, #16
 80022c4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fd0b 	bl	8002ce2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f915 	bl	80024fc <I2C_ITSlaveSeqCplt>
 80022d2:	e033      	b.n	800233c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2210      	movs	r2, #16
 80022da:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80022dc:	e034      	b.n	8002348 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2210      	movs	r2, #16
 80022e4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f043 0204 	orr.w	r2, r3, #4
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <I2C_Slave_ISR_DMA+0x13c>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002306:	d11f      	bne.n	8002348 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b21      	cmp	r3, #33	@ 0x21
 800230c:	d002      	beq.n	8002314 <I2C_Slave_ISR_DMA+0x148>
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b29      	cmp	r3, #41	@ 0x29
 8002312:	d103      	bne.n	800231c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2221      	movs	r2, #33	@ 0x21
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
 800231a:	e008      	b.n	800232e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b22      	cmp	r3, #34	@ 0x22
 8002320:	d002      	beq.n	8002328 <I2C_Slave_ISR_DMA+0x15c>
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b2a      	cmp	r3, #42	@ 0x2a
 8002326:	d102      	bne.n	800232e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2222      	movs	r2, #34	@ 0x22
 800232c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	4619      	mov	r1, r3
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fbbd 	bl	8002ab4 <I2C_ITError>
      if (treatdmanack == 1U)
 800233a:	e005      	b.n	8002348 <I2C_Slave_ISR_DMA+0x17c>
 800233c:	e004      	b.n	8002348 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2210      	movs	r2, #16
 8002344:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002346:	e00f      	b.n	8002368 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002348:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800234a:	e00d      	b.n	8002368 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f809 	bl	800237a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002390:	2b28      	cmp	r3, #40	@ 0x28
 8002392:	d16a      	bne.n	800246a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	0c1b      	lsrs	r3, r3, #16
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80023b2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80023ce:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d138      	bne.n	800244a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80023d8:	897b      	ldrh	r3, [r7, #10]
 80023da:	09db      	lsrs	r3, r3, #7
 80023dc:	b29a      	uxth	r2, r3
 80023de:	89bb      	ldrh	r3, [r7, #12]
 80023e0:	4053      	eors	r3, r2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f003 0306 	and.w	r3, r3, #6
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11c      	bne.n	8002426 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d13b      	bne.n	800247a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2208      	movs	r2, #8
 800240e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002418:	89ba      	ldrh	r2, [r7, #12]
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fa33 	bl	800188a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002424:	e029      	b.n	800247a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800242a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fe0a 	bl	8003048 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800243c:	89ba      	ldrh	r2, [r7, #12]
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fa21 	bl	800188a <HAL_I2C_AddrCallback>
}
 8002448:	e017      	b.n	800247a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800244a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fdfa 	bl	8003048 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800245c:	89ba      	ldrh	r2, [r7, #12]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fa11 	bl	800188a <HAL_I2C_AddrCallback>
}
 8002468:	e007      	b.n	800247a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2208      	movs	r2, #8
 8002470:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b21      	cmp	r3, #33	@ 0x21
 800249c:	d115      	bne.n	80024ca <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2211      	movs	r2, #17
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024b2:	2101      	movs	r1, #1
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fdc7 	bl	8003048 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fd ff10 	bl	80002e8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024c8:	e014      	b.n	80024f4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2212      	movs	r2, #18
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024de:	2102      	movs	r1, #2
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fdb1 	bl	8003048 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fd ff10 	bl	8000314 <HAL_I2C_MasterRxCpltCallback>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e00c      	b.n	800254a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002548:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b29      	cmp	r3, #41	@ 0x29
 8002554:	d112      	bne.n	800257c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2228      	movs	r2, #40	@ 0x28
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2221      	movs	r2, #33	@ 0x21
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002564:	2101      	movs	r1, #1
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fd6e 	bl	8003048 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff f974 	bl	8001862 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800257a:	e017      	b.n	80025ac <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b2a      	cmp	r3, #42	@ 0x2a
 8002586:	d111      	bne.n	80025ac <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2228      	movs	r2, #40	@ 0x28
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2222      	movs	r2, #34	@ 0x22
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002596:	2102      	movs	r1, #2
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fd55 	bl	8003048 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff f965 	bl	8001876 <HAL_I2C_SlaveRxCpltCallback>
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b21      	cmp	r3, #33	@ 0x21
 80025d4:	d107      	bne.n	80025e6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025d6:	2101      	movs	r1, #1
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fd35 	bl	8003048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2211      	movs	r2, #17
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e4:	e00c      	b.n	8002600 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b22      	cmp	r3, #34	@ 0x22
 80025f0:	d106      	bne.n	8002600 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025f2:	2102      	movs	r1, #2
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fd27 	bl	8003048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2212      	movs	r2, #18
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b4c      	ldr	r3, [pc, #304]	@ (800273c <I2C_ITMasterCplt+0x188>)
 800260c:	400b      	ands	r3, r1
 800260e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a49      	ldr	r2, [pc, #292]	@ (8002740 <I2C_ITMasterCplt+0x18c>)
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2210      	movs	r2, #16
 800262c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f043 0204 	orr.w	r2, r3, #4
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b60      	cmp	r3, #96	@ 0x60
 8002644:	d10a      	bne.n	800265c <I2C_ITMasterCplt+0xa8>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	b2db      	uxtb	r3, r3
 8002658:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800265a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fb40 	bl	8002ce2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b60      	cmp	r3, #96	@ 0x60
 8002672:	d002      	beq.n	800267a <I2C_ITMasterCplt+0xc6>
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fa17 	bl	8002ab4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002686:	e054      	b.n	8002732 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b21      	cmp	r3, #33	@ 0x21
 8002692:	d124      	bne.n	80026de <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	d10b      	bne.n	80026c6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff f8fb 	bl	80018ba <HAL_I2C_MemTxCpltCallback>
}
 80026c4:	e035      	b.n	8002732 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fd fe06 	bl	80002e8 <HAL_I2C_MasterTxCpltCallback>
}
 80026dc:	e029      	b.n	8002732 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b22      	cmp	r3, #34	@ 0x22
 80026e8:	d123      	bne.n	8002732 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d10b      	bne.n	800271c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff f8da 	bl	80018ce <HAL_I2C_MemRxCpltCallback>
}
 800271a:	e00a      	b.n	8002732 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fd fdf1 	bl	8000314 <HAL_I2C_MasterRxCpltCallback>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	fe00e800 	.word	0xfe00e800
 8002740:	ffff0000 	.word	0xffff0000

08002744 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002766:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2220      	movs	r2, #32
 800276e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	2b21      	cmp	r3, #33	@ 0x21
 8002774:	d002      	beq.n	800277c <I2C_ITSlaveCplt+0x38>
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	2b29      	cmp	r3, #41	@ 0x29
 800277a:	d108      	bne.n	800278e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800277c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fc61 	bl	8003048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2221      	movs	r2, #33	@ 0x21
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
 800278c:	e019      	b.n	80027c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	2b22      	cmp	r3, #34	@ 0x22
 8002792:	d002      	beq.n	800279a <I2C_ITSlaveCplt+0x56>
 8002794:	7afb      	ldrb	r3, [r7, #11]
 8002796:	2b2a      	cmp	r3, #42	@ 0x2a
 8002798:	d108      	bne.n	80027ac <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800279a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fc52 	bl	8003048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2222      	movs	r2, #34	@ 0x22
 80027a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80027aa:	e00a      	b.n	80027c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	2b28      	cmp	r3, #40	@ 0x28
 80027b0:	d107      	bne.n	80027c2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80027b2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fc46 	bl	8003048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027d0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b89      	ldr	r3, [pc, #548]	@ (8002a04 <I2C_ITSlaveCplt+0x2c0>)
 80027de:	400b      	ands	r3, r1
 80027e0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fa7d 	bl	8002ce2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d013      	beq.n	800281a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002800:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01f      	beq.n	800284a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002818:	e017      	b.n	800284a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d012      	beq.n	800284a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002832:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	b29a      	uxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d049      	beq.n	800294a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d044      	beq.n	800294a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d128      	bne.n	800291c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b28      	cmp	r3, #40	@ 0x28
 80028d4:	d108      	bne.n	80028e8 <I2C_ITSlaveCplt+0x1a4>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028dc:	d104      	bne.n	80028e8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f893 	bl	8002a0c <I2C_ITListenCplt>
 80028e6:	e030      	b.n	800294a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b29      	cmp	r3, #41	@ 0x29
 80028f2:	d10e      	bne.n	8002912 <I2C_ITSlaveCplt+0x1ce>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028fa:	d00a      	beq.n	8002912 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2210      	movs	r2, #16
 8002902:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9ec 	bl	8002ce2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fdf6 	bl	80024fc <I2C_ITSlaveSeqCplt>
 8002910:	e01b      	b.n	800294a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2210      	movs	r2, #16
 8002918:	61da      	str	r2, [r3, #28]
 800291a:	e016      	b.n	800294a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <I2C_ITSlaveCplt+0x1fa>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800293c:	d105      	bne.n	800294a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f8b5 	bl	8002ab4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	2b00      	cmp	r3, #0
 800295e:	d010      	beq.n	8002982 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8a4 	bl	8002ab4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b28      	cmp	r3, #40	@ 0x28
 8002976:	d141      	bne.n	80029fc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002978:	6979      	ldr	r1, [r7, #20]
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f846 	bl	8002a0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002980:	e03c      	b.n	80029fc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800298a:	d014      	beq.n	80029b6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fdb5 	bl	80024fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <I2C_ITSlaveCplt+0x2c4>)
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff79 	bl	80018a6 <HAL_I2C_ListenCpltCallback>
}
 80029b4:	e022      	b.n	80029fc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b22      	cmp	r3, #34	@ 0x22
 80029c0:	d10e      	bne.n	80029e0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe ff4c 	bl	8001876 <HAL_I2C_SlaveRxCpltCallback>
}
 80029de:	e00d      	b.n	80029fc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe ff33 	bl	8001862 <HAL_I2C_SlaveTxCpltCallback>
}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	fe00e800 	.word	0xfe00e800
 8002a08:	ffff0000 	.word	0xffff0000

08002a0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a25      	ldr	r2, [pc, #148]	@ (8002ab0 <I2C_ITListenCplt+0xa4>)
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d022      	beq.n	8002a88 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a80:	f043 0204 	orr.w	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a88:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fadb 	bl	8003048 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2210      	movs	r2, #16
 8002a98:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe feff 	bl	80018a6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	ffff0000 	.word	0xffff0000

08002ab4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8002c88 <I2C_ITError+0x1d4>)
 8002ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b28      	cmp	r3, #40	@ 0x28
 8002aea:	d005      	beq.n	8002af8 <I2C_ITError+0x44>
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b29      	cmp	r3, #41	@ 0x29
 8002af0:	d002      	beq.n	8002af8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002af6:	d10b      	bne.n	8002b10 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002af8:	2103      	movs	r1, #3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 faa4 	bl	8003048 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2228      	movs	r2, #40	@ 0x28
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a60      	ldr	r2, [pc, #384]	@ (8002c8c <I2C_ITError+0x1d8>)
 8002b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b0e:	e030      	b.n	8002b72 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b10:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fa97 	bl	8003048 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8e1 	bl	8002ce2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b60      	cmp	r3, #96	@ 0x60
 8002b2a:	d01f      	beq.n	8002b6c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d114      	bne.n	8002b6c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d109      	bne.n	8002b64 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d039      	beq.n	8002bf4 <I2C_ITError+0x140>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b11      	cmp	r3, #17
 8002b84:	d002      	beq.n	8002b8c <I2C_ITError+0xd8>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b21      	cmp	r3, #33	@ 0x21
 8002b8a:	d133      	bne.n	8002bf4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b9a:	d107      	bne.n	8002bac <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002baa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe f959 	bl	8000e68 <HAL_DMA_GetState>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d017      	beq.n	8002bec <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	4a33      	ldr	r2, [pc, #204]	@ (8002c90 <I2C_ITError+0x1dc>)
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe f859 	bl	8000c88 <HAL_DMA_Abort_IT>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d04d      	beq.n	8002c78 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002be6:	4610      	mov	r0, r2
 8002be8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bea:	e045      	b.n	8002c78 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f851 	bl	8002c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bf2:	e041      	b.n	8002c78 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d039      	beq.n	8002c70 <I2C_ITError+0x1bc>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b12      	cmp	r3, #18
 8002c00:	d002      	beq.n	8002c08 <I2C_ITError+0x154>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b22      	cmp	r3, #34	@ 0x22
 8002c06:	d133      	bne.n	8002c70 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c16:	d107      	bne.n	8002c28 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe f91b 	bl	8000e68 <HAL_DMA_GetState>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d017      	beq.n	8002c68 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <I2C_ITError+0x1dc>)
 8002c3e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f81b 	bl	8000c88 <HAL_DMA_Abort_IT>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d011      	beq.n	8002c7c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c62:	4610      	mov	r0, r2
 8002c64:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c66:	e009      	b.n	8002c7c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f813 	bl	8002c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c6e:	e005      	b.n	8002c7c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f80f 	bl	8002c94 <I2C_TreatErrorCallback>
  }
}
 8002c76:	e002      	b.n	8002c7e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c7c:	bf00      	nop
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	ffff0000 	.word	0xffff0000
 8002c8c:	08001b61 	.word	0x08001b61
 8002c90:	08002ea1 	.word	0x08002ea1

08002c94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b60      	cmp	r3, #96	@ 0x60
 8002ca6:	d10e      	bne.n	8002cc6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fe0f 	bl	80018e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cc4:	e009      	b.n	8002cda <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fd fafd 	bl	80002d4 <HAL_I2C_ErrorCallback>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d103      	bne.n	8002d00 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d007      	beq.n	8002d1e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	619a      	str	r2, [r3, #24]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d46:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d52:	2120      	movs	r1, #32
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f8f3 	bl	8002f40 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002d5a:	e02d      	b.n	8002db8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002d64:	441a      	add	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2bff      	cmp	r3, #255	@ 0xff
 8002d72:	d903      	bls.n	8002d7c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	22ff      	movs	r2, #255	@ 0xff
 8002d78:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d7a:	e004      	b.n	8002d86 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3328      	adds	r3, #40	@ 0x28
 8002d96:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002d9c:	f7fd ff14 	bl	8000bc8 <HAL_DMA_Start_IT>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002da6:	2110      	movs	r1, #16
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fe83 	bl	8002ab4 <I2C_ITError>
}
 8002dae:	e003      	b.n	8002db8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002db0:	2140      	movs	r1, #64	@ 0x40
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f8c4 	bl	8002f40 <I2C_Enable_IRQ>
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ddc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002de8:	2120      	movs	r1, #32
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f8a8 	bl	8002f40 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002df0:	e03b      	b.n	8002e6a <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002dfa:	441a      	add	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2bff      	cmp	r3, #255	@ 0xff
 8002e08:	d911      	bls.n	8002e2e <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d103      	bne.n	8002e26 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e24:	e008      	b.n	8002e38 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	22ff      	movs	r2, #255	@ 0xff
 8002e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e2c:	e004      	b.n	8002e38 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3324      	adds	r3, #36	@ 0x24
 8002e42:	4619      	mov	r1, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e4e:	f7fd febb 	bl	8000bc8 <HAL_DMA_Start_IT>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002e58:	2110      	movs	r1, #16
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff fe2a 	bl	8002ab4 <I2C_ITError>
}
 8002e60:	e003      	b.n	8002e6a <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002e62:	2140      	movs	r1, #64	@ 0x40
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f86b 	bl	8002f40 <I2C_Enable_IRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002e90:	2110      	movs	r1, #16
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff fe0e 	bl	8002ab4 <I2C_ITError>
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	2200      	movs	r2, #0
 8002ebc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eca:	2200      	movs	r2, #0
 8002ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fee0 	bl	8002c94 <I2C_TreatErrorCallback>
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	4613      	mov	r3, r2
 8002eec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ef4:	7a7b      	ldrb	r3, [r7, #9]
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002efc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	0d5b      	lsrs	r3, r3, #21
 8002f16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <I2C_TransferConfig+0x60>)
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	ea02 0103 	and.w	r1, r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	03ff63ff 	.word	0x03ff63ff

08002f40 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f54:	4a39      	ldr	r2, [pc, #228]	@ (800303c <I2C_Enable_IRQ+0xfc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d032      	beq.n	8002fc0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f5e:	4a38      	ldr	r2, [pc, #224]	@ (8003040 <I2C_Enable_IRQ+0x100>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d02d      	beq.n	8002fc0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f68:	4a36      	ldr	r2, [pc, #216]	@ (8003044 <I2C_Enable_IRQ+0x104>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d028      	beq.n	8002fc0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da03      	bge.n	8002f7e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002f8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002fa0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d103      	bne.n	8002fb0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002fae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d133      	bne.n	800301e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fbe:	e02e      	b.n	800301e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da03      	bge.n	8002fd0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002fce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002fe0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fe2:	887b      	ldrh	r3, [r7, #2]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002ff2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d103      	bne.n	8003002 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003000:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	2b20      	cmp	r3, #32
 8003006:	d103      	bne.n	8003010 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800300e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	2b40      	cmp	r3, #64	@ 0x40
 8003014:	d103      	bne.n	800301e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	08001d53 	.word	0x08001d53
 8003040:	080021cd 	.word	0x080021cd
 8003044:	08001f45 	.word	0x08001f45

08003048 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00f      	beq.n	8003082 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003068:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003076:	2b28      	cmp	r3, #40	@ 0x28
 8003078:	d003      	beq.n	8003082 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003080:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00f      	beq.n	80030ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003092:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030a0:	2b28      	cmp	r3, #40	@ 0x28
 80030a2:	d003      	beq.n	80030ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80030aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da03      	bge.n	80030bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d103      	bne.n	80030ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d103      	bne.n	80030d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f043 0320 	orr.w	r3, r3, #32
 80030d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	2b40      	cmp	r3, #64	@ 0x40
 80030dc:	d103      	bne.n	80030e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	d138      	bne.n	800318c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003124:	2302      	movs	r3, #2
 8003126:	e032      	b.n	800318e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	@ 0x24
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003156:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d139      	bne.n	8003224 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e033      	b.n	8003226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2224      	movs	r2, #36	@ 0x24
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <HAL_PWREx_GetVoltageRange+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40007000 	.word	0x40007000

08003250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325e:	d130      	bne.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003260:	4b23      	ldr	r3, [pc, #140]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800326c:	d038      	beq.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800326e:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003276:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003278:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800327e:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2232      	movs	r2, #50	@ 0x32
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	4a1b      	ldr	r2, [pc, #108]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0c9b      	lsrs	r3, r3, #18
 8003290:	3301      	adds	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003294:	e002      	b.n	800329c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3b01      	subs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329c:	4b14      	ldr	r3, [pc, #80]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a8:	d102      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f2      	bne.n	8003296 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032bc:	d110      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ce:	d007      	beq.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d0:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d8:	4a05      	ldr	r2, [pc, #20]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40007000 	.word	0x40007000
 80032f4:	20000004 	.word	0x20000004
 80032f8:	431bde83 	.word	0x431bde83

080032fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e3ca      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330e:	4b97      	ldr	r3, [pc, #604]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003318:	4b94      	ldr	r3, [pc, #592]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80e4 	beq.w	80034f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_RCC_OscConfig+0x4a>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	f040 808b 	bne.w	8003454 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 8087 	bne.w	8003454 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003346:	4b89      	ldr	r3, [pc, #548]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e3a2      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	4b82      	ldr	r3, [pc, #520]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCC_OscConfig+0x7c>
 800336e:	4b7f      	ldr	r3, [pc, #508]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003376:	e005      	b.n	8003384 <HAL_RCC_OscConfig+0x88>
 8003378:	4b7c      	ldr	r3, [pc, #496]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003384:	4293      	cmp	r3, r2
 8003386:	d223      	bcs.n	80033d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd1d 	bl	8003dcc <RCC_SetFlashLatencyFromMSIRange>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e383      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339c:	4b73      	ldr	r3, [pc, #460]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a72      	ldr	r2, [pc, #456]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033a2:	f043 0308 	orr.w	r3, r3, #8
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b70      	ldr	r3, [pc, #448]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	496d      	ldr	r1, [pc, #436]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ba:	4b6c      	ldr	r3, [pc, #432]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	4968      	ldr	r1, [pc, #416]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
 80033ce:	e025      	b.n	800341c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d0:	4b66      	ldr	r3, [pc, #408]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b63      	ldr	r3, [pc, #396]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4960      	ldr	r1, [pc, #384]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ee:	4b5f      	ldr	r3, [pc, #380]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	495b      	ldr	r1, [pc, #364]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fcdd 	bl	8003dcc <RCC_SetFlashLatencyFromMSIRange>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e343      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800341c:	f000 fc4a 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b52      	ldr	r3, [pc, #328]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	4950      	ldr	r1, [pc, #320]	@ (8003570 <HAL_RCC_OscConfig+0x274>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	4a4e      	ldr	r2, [pc, #312]	@ (8003574 <HAL_RCC_OscConfig+0x278>)
 800343a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800343c:	4b4e      	ldr	r3, [pc, #312]	@ (8003578 <HAL_RCC_OscConfig+0x27c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f99b 	bl	800077c <HAL_InitTick>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d052      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	e327      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d032      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800345c:	4b43      	ldr	r3, [pc, #268]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a42      	ldr	r2, [pc, #264]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003468:	f7fd f9d8 	bl	800081c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003470:	f7fd f9d4 	bl	800081c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e310      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003482:	4b3a      	ldr	r3, [pc, #232]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800348e:	4b37      	ldr	r3, [pc, #220]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a36      	ldr	r2, [pc, #216]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b34      	ldr	r3, [pc, #208]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4931      	ldr	r1, [pc, #196]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ac:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	492c      	ldr	r1, [pc, #176]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
 80034c0:	e01a      	b.n	80034f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a29      	ldr	r2, [pc, #164]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ce:	f7fd f9a5 	bl	800081c <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d6:	f7fd f9a1 	bl	800081c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e2dd      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034e8:	4b20      	ldr	r3, [pc, #128]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1da>
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d074      	beq.n	80035ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x21a>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d10e      	bne.n	800352e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d10b      	bne.n	800352e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d064      	beq.n	80035ec <HAL_RCC_OscConfig+0x2f0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d160      	bne.n	80035ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e2ba      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x24a>
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0b      	ldr	r2, [pc, #44]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e026      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800354e:	d115      	bne.n	800357c <HAL_RCC_OscConfig+0x280>
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a05      	ldr	r2, [pc, #20]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a02      	ldr	r2, [pc, #8]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	e014      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	08004874 	.word	0x08004874
 8003574:	20000004 	.word	0x20000004
 8003578:	20000008 	.word	0x20000008
 800357c:	4ba0      	ldr	r3, [pc, #640]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a9f      	ldr	r2, [pc, #636]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b9d      	ldr	r3, [pc, #628]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a9c      	ldr	r2, [pc, #624]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd f93e 	bl	800081c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fd f93a 	bl	800081c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e276      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b92      	ldr	r3, [pc, #584]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2a8>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd f92a 	bl	800081c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd f926 	bl	800081c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e262      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035de:	4b88      	ldr	r3, [pc, #544]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x2d0>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d060      	beq.n	80036bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x310>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d119      	bne.n	800363a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d116      	bne.n	800363a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360c:	4b7c      	ldr	r3, [pc, #496]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x328>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e23f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b76      	ldr	r3, [pc, #472]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	4973      	ldr	r1, [pc, #460]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003638:	e040      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d023      	beq.n	800368a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003642:	4b6f      	ldr	r3, [pc, #444]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6e      	ldr	r2, [pc, #440]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fd f8e5 	bl	800081c <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fd f8e1 	bl	800081c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e21d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003668:	4b65      	ldr	r3, [pc, #404]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b62      	ldr	r3, [pc, #392]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	495f      	ldr	r1, [pc, #380]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	e018      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b5d      	ldr	r3, [pc, #372]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5c      	ldr	r2, [pc, #368]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fd f8c1 	bl	800081c <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369e:	f7fd f8bd 	bl	800081c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1f9      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b0:	4b53      	ldr	r3, [pc, #332]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03c      	beq.n	8003742 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fd f89c 	bl	800081c <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fd f898 	bl	800081c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1d4      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fa:	4b41      	ldr	r3, [pc, #260]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCC_OscConfig+0x3ec>
 8003708:	e01b      	b.n	8003742 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370a:	4b3d      	ldr	r3, [pc, #244]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800370c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003710:	4a3b      	ldr	r2, [pc, #236]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fd f87f 	bl	800081c <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7fd f87b 	bl	800081c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1b7      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003734:	4b32      	ldr	r3, [pc, #200]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ef      	bne.n	8003722 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80a6 	beq.w	800389c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003754:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b27      	ldr	r3, [pc, #156]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	4a26      	ldr	r2, [pc, #152]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	@ 0x58
 800376c:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d118      	bne.n	80037ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b1e      	ldr	r3, [pc, #120]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003794:	f7fd f842 	bl	800081c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fd f83e 	bl	800081c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e17a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4d8>
 80037c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d2:	e029      	b.n	8003828 <HAL_RCC_OscConfig+0x52c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d115      	bne.n	8003808 <HAL_RCC_OscConfig+0x50c>
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	4a07      	ldr	r2, [pc, #28]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	4a03      	ldr	r2, [pc, #12]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x52c>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
 8003808:	4b9c      	ldr	r3, [pc, #624]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	4a9b      	ldr	r2, [pc, #620]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003818:	4b98      	ldr	r3, [pc, #608]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	4a97      	ldr	r2, [pc, #604]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fc fff4 	bl	800081c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fc fff0 	bl	800081c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e12a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ed      	beq.n	8003838 <HAL_RCC_OscConfig+0x53c>
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fc ffdd 	bl	800081c <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fc ffd9 	bl	800081c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e113      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387c:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ed      	bne.n	8003866 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388a:	7ffb      	ldrb	r3, [r7, #31]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b7a      	ldr	r3, [pc, #488]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4a79      	ldr	r2, [pc, #484]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80fe 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	f040 80d0 	bne.w	8003a50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038b0:	4b72      	ldr	r3, [pc, #456]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d130      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	3b01      	subs	r3, #1
 80038d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d127      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d11f      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038f0:	2a07      	cmp	r2, #7
 80038f2:	bf14      	ite	ne
 80038f4:	2201      	movne	r2, #1
 80038f6:	2200      	moveq	r2, #0
 80038f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d113      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d109      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d06e      	beq.n	8003a04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d069      	beq.n	8003a00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800392c:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ad      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003948:	4b4c      	ldr	r3, [pc, #304]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800394e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003954:	f7fc ff62 	bl	800081c <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fc ff5e 	bl	800081c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e09a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396e:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397a:	4b40      	ldr	r3, [pc, #256]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	4b40      	ldr	r3, [pc, #256]	@ (8003a80 <HAL_RCC_OscConfig+0x784>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800398a:	3a01      	subs	r2, #1
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003994:	0212      	lsls	r2, r2, #8
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800399c:	0852      	lsrs	r2, r2, #1
 800399e:	3a01      	subs	r2, #1
 80039a0:	0552      	lsls	r2, r2, #21
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	3a01      	subs	r2, #1
 80039ac:	0652      	lsls	r2, r2, #25
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039b4:	0912      	lsrs	r2, r2, #4
 80039b6:	0452      	lsls	r2, r2, #17
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4930      	ldr	r1, [pc, #192]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039c0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039cc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039d8:	f7fc ff20 	bl	800081c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fc ff1c 	bl	800081c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e058      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fe:	e050      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e04f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a04:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d148      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a19      	ldr	r2, [pc, #100]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1c:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a28:	f7fc fef8 	bl	800081c <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fc fef4 	bl	800081c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e030      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a42:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x734>
 8003a4e:	e028      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d023      	beq.n	8003a9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a08      	ldr	r2, [pc, #32]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fc fedb 	bl	800081c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a68:	e00c      	b.n	8003a84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fc fed7 	bl	800081c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d905      	bls.n	8003a84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e013      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a84:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ec      	bne.n	8003a6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	4905      	ldr	r1, [pc, #20]	@ (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a96:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_RCC_OscConfig+0x7b4>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	feeefffc 	.word	0xfeeefffc

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0e7      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b75      	ldr	r3, [pc, #468]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b72      	ldr	r3, [pc, #456]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4970      	ldr	r1, [pc, #448]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0cf      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b66      	ldr	r3, [pc, #408]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d908      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b63      	ldr	r3, [pc, #396]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4960      	ldr	r1, [pc, #384]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d04c      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0a6      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	4b54      	ldr	r3, [pc, #336]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d115      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e09a      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e08e      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e086      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4943      	ldr	r1, [pc, #268]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fc fe3e 	bl	800081c <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fc fe3a 	bl	800081c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e06e      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d010      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d208      	bcs.n	8003bfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	492b      	ldr	r1, [pc, #172]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d210      	bcs.n	8003c2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c08:	4b25      	ldr	r3, [pc, #148]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 0207 	bic.w	r2, r3, #7
 8003c10:	4923      	ldr	r1, [pc, #140]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c18:	4b21      	ldr	r3, [pc, #132]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e036      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4918      	ldr	r1, [pc, #96]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c54:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4910      	ldr	r1, [pc, #64]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c68:	f000 f824 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	490b      	ldr	r1, [pc, #44]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	4a09      	ldr	r2, [pc, #36]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c88:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fc fd75 	bl	800077c <HAL_InitTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c96:	7afb      	ldrb	r3, [r7, #11]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08004874 	.word	0x08004874
 8003cac:	20000004 	.word	0x20000004
 8003cb0:	20000008 	.word	0x20000008

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	@ 0x24
 8003cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d121      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d11e      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ce8:	4b34      	ldr	r3, [pc, #208]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cf4:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e005      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d04:	4b2d      	ldr	r3, [pc, #180]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d10:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10d      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d2c:	4b25      	ldr	r3, [pc, #148]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e004      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d38:	4b23      	ldr	r3, [pc, #140]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d134      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d003      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0xac>
 8003d58:	e005      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d5c:	617b      	str	r3, [r7, #20]
      break;
 8003d5e:	e005      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d60:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d62:	617b      	str	r3, [r7, #20]
      break;
 8003d64:	e002      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	617b      	str	r3, [r7, #20]
      break;
 8003d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d6c:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	3301      	adds	r3, #1
 8003d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d7a:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	fb03 f202 	mul.w	r2, r3, r2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	0e5b      	lsrs	r3, r3, #25
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dac:	69bb      	ldr	r3, [r7, #24]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	@ 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08004884 	.word	0x08004884
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	007a1200 	.word	0x007a1200

08003dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003de4:	f7ff fa26 	bl	8003234 <HAL_PWREx_GetVoltageRange>
 8003de8:	6178      	str	r0, [r7, #20]
 8003dea:	e014      	b.n	8003e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df8:	4b22      	ldr	r3, [pc, #136]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e04:	f7ff fa16 	bl	8003234 <HAL_PWREx_GetVoltageRange>
 8003e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1c:	d10b      	bne.n	8003e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b80      	cmp	r3, #128	@ 0x80
 8003e22:	d919      	bls.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e28:	d902      	bls.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e013      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e30:	2301      	movs	r3, #1
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	e010      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b80      	cmp	r3, #128	@ 0x80
 8003e3a:	d902      	bls.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	e00a      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b80      	cmp	r3, #128	@ 0x80
 8003e46:	d102      	bne.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e48:	2302      	movs	r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e004      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b70      	cmp	r3, #112	@ 0x70
 8003e52:	d101      	bne.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e54:	2301      	movs	r3, #1
 8003e56:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 0207 	bic.w	r2, r3, #7
 8003e60:	4909      	ldr	r1, [pc, #36]	@ (8003e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e68:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d001      	beq.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40022000 	.word	0x40022000

08003e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e94:	2300      	movs	r3, #0
 8003e96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e98:	2300      	movs	r3, #0
 8003e9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d041      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003eb0:	d02a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003eb6:	d824      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ebe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ec2:	d81e      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ec8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ecc:	d010      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ece:	e018      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed0:	4b86      	ldr	r3, [pc, #536]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a85      	ldr	r2, [pc, #532]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003edc:	e015      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fabb 	bl	8004460 <RCCEx_PLLSAI1_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eee:	e00c      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3320      	adds	r3, #32
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fba6 	bl	8004648 <RCCEx_PLLSAI2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f00:	e003      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	74fb      	strb	r3, [r7, #19]
      break;
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f10:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f1e:	4973      	ldr	r1, [pc, #460]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f26:	e001      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d041      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f40:	d02a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f46:	d824      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f52:	d81e      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f5c:	d010      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f5e:	e018      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f60:	4b62      	ldr	r3, [pc, #392]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a61      	ldr	r2, [pc, #388]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f6c:	e015      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3304      	adds	r3, #4
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fa73 	bl	8004460 <RCCEx_PLLSAI1_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f7e:	e00c      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3320      	adds	r3, #32
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fb5e 	bl	8004648 <RCCEx_PLLSAI2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f90:	e003      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	74fb      	strb	r3, [r7, #19]
      break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fa0:	4b52      	ldr	r3, [pc, #328]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fae:	494f      	ldr	r1, [pc, #316]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fb6:	e001      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a0 	beq.w	800410a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fce:	4b47      	ldr	r3, [pc, #284]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe8:	4a40      	ldr	r2, [pc, #256]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004000:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a3a      	ldr	r2, [pc, #232]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800400c:	f7fc fc06 	bl	800081c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fc fc02 	bl	800081c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d902      	bls.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	74fb      	strb	r3, [r7, #19]
        break;
 8004026:	e005      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004028:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ef      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d15c      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800403a:	4b2c      	ldr	r3, [pc, #176]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01f      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	429a      	cmp	r2, r3
 8004056:	d019      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004058:	4b24      	ldr	r3, [pc, #144]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004062:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004064:	4b21      	ldr	r3, [pc, #132]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	4a20      	ldr	r2, [pc, #128]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004074:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	4a1c      	ldr	r2, [pc, #112]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004084:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fc fbc1 	bl	800081c <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409c:	e00b      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fc fbbd 	bl	800081c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d902      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	74fb      	strb	r3, [r7, #19]
            break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ec      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ca:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040da:	4904      	ldr	r1, [pc, #16]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040e2:	e009      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	74bb      	strb	r3, [r7, #18]
 80040e8:	e006      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f8:	7c7b      	ldrb	r3, [r7, #17]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004102:	4a9d      	ldr	r2, [pc, #628]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004116:	4b98      	ldr	r3, [pc, #608]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f023 0203 	bic.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	4994      	ldr	r1, [pc, #592]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004138:	4b8f      	ldr	r3, [pc, #572]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f023 020c 	bic.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	498c      	ldr	r1, [pc, #560]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800415a:	4b87      	ldr	r3, [pc, #540]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	4983      	ldr	r1, [pc, #524]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800417c:	4b7e      	ldr	r3, [pc, #504]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	497b      	ldr	r1, [pc, #492]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800419e:	4b76      	ldr	r3, [pc, #472]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ac:	4972      	ldr	r1, [pc, #456]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c0:	4b6d      	ldr	r3, [pc, #436]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ce:	496a      	ldr	r1, [pc, #424]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e2:	4b65      	ldr	r3, [pc, #404]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	4961      	ldr	r1, [pc, #388]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004204:	4b5c      	ldr	r3, [pc, #368]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004212:	4959      	ldr	r1, [pc, #356]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004226:	4b54      	ldr	r3, [pc, #336]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004234:	4950      	ldr	r1, [pc, #320]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004248:	4b4b      	ldr	r3, [pc, #300]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004256:	4948      	ldr	r1, [pc, #288]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800426a:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004278:	493f      	ldr	r1, [pc, #252]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d028      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800428c:	4b3a      	ldr	r3, [pc, #232]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800429a:	4937      	ldr	r1, [pc, #220]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042aa:	d106      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b32      	ldr	r3, [pc, #200]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a31      	ldr	r2, [pc, #196]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
 80042b8:	e011      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042c2:	d10c      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f8c8 	bl	8004460 <RCCEx_PLLSAI1_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d028      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042ea:	4b23      	ldr	r3, [pc, #140]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f8:	491f      	ldr	r1, [pc, #124]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004308:	d106      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800430a:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4a1a      	ldr	r2, [pc, #104]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004310:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004314:	60d3      	str	r3, [r2, #12]
 8004316:	e011      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004320:	d10c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f899 	bl	8004460 <RCCEx_PLLSAI1_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004348:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004356:	4908      	ldr	r1, [pc, #32]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004366:	d109      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004368:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a02      	ldr	r2, [pc, #8]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004372:	60d3      	str	r3, [r2, #12]
 8004374:	e014      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f867 	bl	8004460 <RCCEx_PLLSAI1_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02f      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ac:	4b2b      	ldr	r3, [pc, #172]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ba:	4928      	ldr	r1, [pc, #160]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ca:	d10d      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f844 	bl	8004460 <RCCEx_PLLSAI1_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d014      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	74bb      	strb	r3, [r7, #18]
 80043e6:	e011      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3320      	adds	r3, #32
 80043f6:	2102      	movs	r1, #2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f925 	bl	8004648 <RCCEx_PLLSAI2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004418:	4b10      	ldr	r3, [pc, #64]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004426:	490d      	ldr	r1, [pc, #52]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800443a:	4b08      	ldr	r3, [pc, #32]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800444a:	4904      	ldr	r1, [pc, #16]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004452:	7cbb      	ldrb	r3, [r7, #18]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000

08004460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800446e:	4b75      	ldr	r3, [pc, #468]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d018      	beq.n	80044ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800447a:	4b72      	ldr	r3, [pc, #456]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0203 	and.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d10d      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
       ||
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004492:	4b6c      	ldr	r3, [pc, #432]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
       ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d047      	beq.n	8004536 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	e044      	b.n	8004536 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d018      	beq.n	80044e6 <RCCEx_PLLSAI1_Config+0x86>
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d825      	bhi.n	8004504 <RCCEx_PLLSAI1_Config+0xa4>
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d002      	beq.n	80044c2 <RCCEx_PLLSAI1_Config+0x62>
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d009      	beq.n	80044d4 <RCCEx_PLLSAI1_Config+0x74>
 80044c0:	e020      	b.n	8004504 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044c2:	4b60      	ldr	r3, [pc, #384]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11d      	bne.n	800450a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d2:	e01a      	b.n	800450a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d116      	bne.n	800450e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e4:	e013      	b.n	800450e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044e6:	4b57      	ldr	r3, [pc, #348]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044f2:	4b54      	ldr	r3, [pc, #336]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004502:	e006      	b.n	8004512 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      break;
 8004508:	e004      	b.n	8004514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800450a:	bf00      	nop
 800450c:	e002      	b.n	8004514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004512:	bf00      	nop
    }

    if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800451a:	4b4a      	ldr	r3, [pc, #296]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6819      	ldr	r1, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	3b01      	subs	r3, #1
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	430b      	orrs	r3, r1
 8004530:	4944      	ldr	r1, [pc, #272]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d17d      	bne.n	8004638 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800453c:	4b41      	ldr	r3, [pc, #260]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a40      	ldr	r2, [pc, #256]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004542:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fc f968 	bl	800081c <HAL_GetTick>
 800454c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800454e:	e009      	b.n	8004564 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004550:	f7fc f964 	bl	800081c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d902      	bls.n	8004564 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	73fb      	strb	r3, [r7, #15]
        break;
 8004562:	e005      	b.n	8004570 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004564:	4b37      	ldr	r3, [pc, #220]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ef      	bne.n	8004550 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d160      	bne.n	8004638 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d111      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457c:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6892      	ldr	r2, [r2, #8]
 800458c:	0211      	lsls	r1, r2, #8
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	0912      	lsrs	r2, r2, #4
 8004594:	0452      	lsls	r2, r2, #17
 8004596:	430a      	orrs	r2, r1
 8004598:	492a      	ldr	r1, [pc, #168]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	610b      	str	r3, [r1, #16]
 800459e:	e027      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d112      	bne.n	80045cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a6:	4b27      	ldr	r3, [pc, #156]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80045ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6892      	ldr	r2, [r2, #8]
 80045b6:	0211      	lsls	r1, r2, #8
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6912      	ldr	r2, [r2, #16]
 80045bc:	0852      	lsrs	r2, r2, #1
 80045be:	3a01      	subs	r2, #1
 80045c0:	0552      	lsls	r2, r2, #21
 80045c2:	430a      	orrs	r2, r1
 80045c4:	491f      	ldr	r1, [pc, #124]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	610b      	str	r3, [r1, #16]
 80045ca:	e011      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6892      	ldr	r2, [r2, #8]
 80045dc:	0211      	lsls	r1, r2, #8
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6952      	ldr	r2, [r2, #20]
 80045e2:	0852      	lsrs	r2, r2, #1
 80045e4:	3a01      	subs	r2, #1
 80045e6:	0652      	lsls	r2, r2, #25
 80045e8:	430a      	orrs	r2, r1
 80045ea:	4916      	ldr	r1, [pc, #88]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045f0:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a13      	ldr	r2, [pc, #76]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fc f90e 	bl	800081c <HAL_GetTick>
 8004600:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004602:	e009      	b.n	8004618 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004604:	f7fc f90a 	bl	800081c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d902      	bls.n	8004618 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	73fb      	strb	r3, [r7, #15]
          break;
 8004616:	e005      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004618:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ef      	beq.n	8004604 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	4904      	ldr	r1, [pc, #16]	@ (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000

08004648 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004656:	4b6a      	ldr	r3, [pc, #424]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004662:	4b67      	ldr	r3, [pc, #412]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d10d      	bne.n	800468e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
       ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800467a:	4b61      	ldr	r3, [pc, #388]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
       ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d047      	beq.n	800471e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e044      	b.n	800471e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d018      	beq.n	80046ce <RCCEx_PLLSAI2_Config+0x86>
 800469c:	2b03      	cmp	r3, #3
 800469e:	d825      	bhi.n	80046ec <RCCEx_PLLSAI2_Config+0xa4>
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d002      	beq.n	80046aa <RCCEx_PLLSAI2_Config+0x62>
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d009      	beq.n	80046bc <RCCEx_PLLSAI2_Config+0x74>
 80046a8:	e020      	b.n	80046ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046aa:	4b55      	ldr	r3, [pc, #340]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11d      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ba:	e01a      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046bc:	4b50      	ldr	r3, [pc, #320]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d116      	bne.n	80046f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046cc:	e013      	b.n	80046f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046da:	4b49      	ldr	r3, [pc, #292]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046ea:	e006      	b.n	80046fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      break;
 80046f0:	e004      	b.n	80046fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046f2:	bf00      	nop
 80046f4:	e002      	b.n	80046fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004702:	4b3f      	ldr	r3, [pc, #252]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	430b      	orrs	r3, r1
 8004718:	4939      	ldr	r1, [pc, #228]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	4313      	orrs	r3, r2
 800471c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d167      	bne.n	80047f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004724:	4b36      	ldr	r3, [pc, #216]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a35      	ldr	r2, [pc, #212]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800472e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004730:	f7fc f874 	bl	800081c <HAL_GetTick>
 8004734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004736:	e009      	b.n	800474c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004738:	f7fc f870 	bl	800081c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d902      	bls.n	800474c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	73fb      	strb	r3, [r7, #15]
        break;
 800474a:	e005      	b.n	8004758 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800474c:	4b2c      	ldr	r3, [pc, #176]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ef      	bne.n	8004738 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d14a      	bne.n	80047f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d111      	bne.n	8004788 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004764:	4b26      	ldr	r3, [pc, #152]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800476c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6892      	ldr	r2, [r2, #8]
 8004774:	0211      	lsls	r1, r2, #8
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68d2      	ldr	r2, [r2, #12]
 800477a:	0912      	lsrs	r2, r2, #4
 800477c:	0452      	lsls	r2, r2, #17
 800477e:	430a      	orrs	r2, r1
 8004780:	491f      	ldr	r1, [pc, #124]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	4313      	orrs	r3, r2
 8004784:	614b      	str	r3, [r1, #20]
 8004786:	e011      	b.n	80047ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004788:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004790:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	0211      	lsls	r1, r2, #8
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6912      	ldr	r2, [r2, #16]
 800479e:	0852      	lsrs	r2, r2, #1
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0652      	lsls	r2, r2, #25
 80047a4:	430a      	orrs	r2, r1
 80047a6:	4916      	ldr	r1, [pc, #88]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047ac:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a13      	ldr	r2, [pc, #76]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fc f830 	bl	800081c <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047be:	e009      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047c0:	f7fc f82c 	bl	800081c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d902      	bls.n	80047d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	73fb      	strb	r3, [r7, #15]
          break;
 80047d2:	e005      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ef      	beq.n	80047c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047e6:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	4904      	ldr	r1, [pc, #16]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000

08004804 <memset>:
 8004804:	4402      	add	r2, r0
 8004806:	4603      	mov	r3, r0
 8004808:	4293      	cmp	r3, r2
 800480a:	d100      	bne.n	800480e <memset+0xa>
 800480c:	4770      	bx	lr
 800480e:	f803 1b01 	strb.w	r1, [r3], #1
 8004812:	e7f9      	b.n	8004808 <memset+0x4>

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4d0d      	ldr	r5, [pc, #52]	@ (800484c <__libc_init_array+0x38>)
 8004818:	4c0d      	ldr	r4, [pc, #52]	@ (8004850 <__libc_init_array+0x3c>)
 800481a:	1b64      	subs	r4, r4, r5
 800481c:	10a4      	asrs	r4, r4, #2
 800481e:	2600      	movs	r6, #0
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	4d0b      	ldr	r5, [pc, #44]	@ (8004854 <__libc_init_array+0x40>)
 8004826:	4c0c      	ldr	r4, [pc, #48]	@ (8004858 <__libc_init_array+0x44>)
 8004828:	f000 f818 	bl	800485c <_init>
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	2600      	movs	r6, #0
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	f855 3b04 	ldr.w	r3, [r5], #4
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	f855 3b04 	ldr.w	r3, [r5], #4
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	080048b4 	.word	0x080048b4
 8004850:	080048b4 	.word	0x080048b4
 8004854:	080048b4 	.word	0x080048b4
 8004858:	080048b8 	.word	0x080048b8

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
