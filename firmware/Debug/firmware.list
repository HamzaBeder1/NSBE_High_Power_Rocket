
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bdc  08003bdc  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bdc  08003bdc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bdc  08003bdc  00004bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003be0  08003be0  00004be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003be4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08003bf0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003bf0  000051d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dc6  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fe  00000000  00000000  0000ce02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0000e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c2  00000000  00000000  0000ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249c5  00000000  00000000  0000f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a72c  00000000  00000000  00033e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1444  00000000  00000000  0003e59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f9df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000238c  00000000  00000000  0011fa24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00121db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b84 	.word	0x08003b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b84 	.word	0x08003b84

080001c8 <main>:
uint8_t Buffer_Dest[BUFFERSIZE];
uint8_t Buffer_Src[BUFFERSIZE];


int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  Buffer_Src[0] = 0xAA;
 80001cc:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <main+0x4c>)
 80001ce:	22aa      	movs	r2, #170	@ 0xaa
 80001d0:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 80001d2:	f000 f9f8 	bl	80005c6 <HAL_Init>
  SystemClock_Config();
 80001d6:	f000 f823 	bl	8000220 <SystemClock_Config>
  I2C_Init();
 80001da:	f000 f867 	bl	80002ac <I2C_Init>
  DMA_Init();
 80001de:	f000 f895 	bl	800030c <DMA_Init>

  if(HAL_I2C_Master_Transmit_DMA(&hI2C, BMP180ADDR, (uint8_t*)Buffer_Src, sizeof(Buffer_Src)) != HAL_OK)
 80001e2:	2364      	movs	r3, #100	@ 0x64
 80001e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000214 <main+0x4c>)
 80001e6:	21ee      	movs	r1, #238	@ 0xee
 80001e8:	480b      	ldr	r0, [pc, #44]	@ (8000218 <main+0x50>)
 80001ea:	f000 ffff 	bl	80011ec <HAL_I2C_Master_Transmit_DMA>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <main+0x30>
  		  Error_Handler();
 80001f4:	f000 f8b0 	bl	8000358 <Error_Handler>
  if(HAL_I2C_Master_Receive_DMA(&hI2C, BMP180ADDR, Buffer_Dest , 1) != HAL_OK)
 80001f8:	2301      	movs	r3, #1
 80001fa:	4a08      	ldr	r2, [pc, #32]	@ (800021c <main+0x54>)
 80001fc:	21ee      	movs	r1, #238	@ 0xee
 80001fe:	4806      	ldr	r0, [pc, #24]	@ (8000218 <main+0x50>)
 8000200:	f001 f908 	bl	8001414 <HAL_I2C_Master_Receive_DMA>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d002      	beq.n	8000210 <main+0x48>
  		Error_Handler();
 800020a:	f000 f8a5 	bl	8000358 <Error_Handler>
  while (1)
 800020e:	bf00      	nop
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0x48>
 8000214:	20000170 	.word	0x20000170
 8000218:	20000028 	.word	0x20000028
 800021c:	2000010c 	.word	0x2000010c

08000220 <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b096      	sub	sp, #88	@ 0x58
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2244      	movs	r2, #68	@ 0x44
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fc7c 	bl	8003b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000242:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000246:	f002 fe53 	bl	8002ef0 <HAL_PWREx_ControlVoltageScaling>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000250:	f000 f882 	bl	8000358 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000254:	2310      	movs	r3, #16
 8000256:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000260:	2360      	movs	r3, #96	@ 0x60
 8000262:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000264:	2300      	movs	r3, #0
 8000266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4618      	mov	r0, r3
 800026e:	f002 fe95 	bl	8002f9c <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000278:	f000 f86e 	bl	8000358 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000280:	2300      	movs	r3, #0
 8000282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f003 fa5d 	bl	8003754 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002a0:	f000 f85a 	bl	8000358 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3758      	adds	r7, #88	@ 0x58
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <I2C_Init>:


//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 80002b0:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <I2C_Init+0x54>)
 80002b2:	4a14      	ldr	r2, [pc, #80]	@ (8000304 <I2C_Init+0x58>)
 80002b4:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <I2C_Init+0x54>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002bc:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <I2C_Init+0x54>)
 80002be:	2200      	movs	r2, #0
 80002c0:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <I2C_Init+0x54>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <I2C_Init+0x54>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <I2C_Init+0x54>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <I2C_Init+0x54>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <I2C_Init+0x54>)
 80002dc:	2200      	movs	r2, #0
 80002de:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <I2C_Init+0x54>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
	hI2C.Init.Timing = 0x00100D14;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <I2C_Init+0x54>)
 80002e8:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <I2C_Init+0x5c>)
 80002ea:	605a      	str	r2, [r3, #4]

	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <I2C_Init+0x54>)
 80002ee:	f000 fee1 	bl	80010b4 <HAL_I2C_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <I2C_Init+0x50>
	{
		Error_Handler();
 80002f8:	f000 f82e 	bl	8000358 <Error_Handler>
	}
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000028 	.word	0x20000028
 8000304:	40005400 	.word	0x40005400
 8000308:	00100d14 	.word	0x00100d14

0800030c <DMA_Init>:

void DMA_Init(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <DMA_Init+0x48>)
 8000314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000316:	4a0f      	ldr	r2, [pc, #60]	@ (8000354 <DMA_Init+0x48>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6493      	str	r3, [r2, #72]	@ 0x48
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <DMA_Init+0x48>)
 8000320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2010      	movs	r0, #16
 8000330:	f000 fa99 	bl	8000866 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000334:	2010      	movs	r0, #16
 8000336:	f000 fab2 	bl	800089e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	2011      	movs	r0, #17
 8000340:	f000 fa91 	bl	8000866 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000344:	2011      	movs	r0, #17
 8000346:	f000 faaa 	bl	800089e <HAL_NVIC_EnableIRQ>
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <Error_Handler>:



void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
  __disable_irq();
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <Error_Handler+0x8>

08000364 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <HAL_MspInit+0x44>)
 800036c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800036e:	4a0e      	ldr	r2, [pc, #56]	@ (80003a8 <HAL_MspInit+0x44>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6613      	str	r3, [r2, #96]	@ 0x60
 8000376:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <HAL_MspInit+0x44>)
 8000378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <HAL_MspInit+0x44>)
 8000384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000386:	4a08      	ldr	r2, [pc, #32]	@ (80003a8 <HAL_MspInit+0x44>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800038c:	6593      	str	r3, [r2, #88]	@ 0x58
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <HAL_MspInit+0x44>)
 8000390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	@ 0x28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 80003b4:	4b3e      	ldr	r3, [pc, #248]	@ (80004b0 <HAL_I2C_MspInit+0x104>)
 80003b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003b8:	4a3d      	ldr	r2, [pc, #244]	@ (80004b0 <HAL_I2C_MspInit+0x104>)
 80003ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003be:	6593      	str	r3, [r2, #88]	@ 0x58
 80003c0:	4b3b      	ldr	r3, [pc, #236]	@ (80004b0 <HAL_I2C_MspInit+0x104>)
 80003c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80003cc:	23c0      	movs	r3, #192	@ 0xc0
 80003ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003d0:	2312      	movs	r3, #18
 80003d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80003d8:	2302      	movs	r3, #2
 80003da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003dc:	2304      	movs	r3, #4
 80003de:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 80003e0:	4b33      	ldr	r3, [pc, #204]	@ (80004b0 <HAL_I2C_MspInit+0x104>)
 80003e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e4:	4a32      	ldr	r2, [pc, #200]	@ (80004b0 <HAL_I2C_MspInit+0x104>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ec:	4b30      	ldr	r3, [pc, #192]	@ (80004b0 <HAL_I2C_MspInit+0x104>)
 80003ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f0:	f003 0302 	and.w	r3, r3, #2
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	4619      	mov	r1, r3
 80003fe:	482d      	ldr	r0, [pc, #180]	@ (80004b4 <HAL_I2C_MspInit+0x108>)
 8000400:	f000 fcae 	bl	8000d60 <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 8000406:	4a2d      	ldr	r2, [pc, #180]	@ (80004bc <HAL_I2C_MspInit+0x110>)
 8000408:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 800040a:	4b2b      	ldr	r3, [pc, #172]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 800040c:	2203      	movs	r2, #3
 800040e:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000410:	4b29      	ldr	r3, [pc, #164]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 8000412:	2210      	movs	r2, #16
 8000414:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000416:	4b28      	ldr	r3, [pc, #160]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800041c:	4b26      	ldr	r3, [pc, #152]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 800041e:	2280      	movs	r2, #128	@ 0x80
 8000420:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000422:	4b25      	ldr	r3, [pc, #148]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 8000424:	2200      	movs	r2, #0
 8000426:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000428:	4b23      	ldr	r3, [pc, #140]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 8000430:	2200      	movs	r2, #0
 8000432:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000434:	4b20      	ldr	r3, [pc, #128]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 8000436:	2200      	movs	r2, #0
 8000438:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 800043a:	481f      	ldr	r0, [pc, #124]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 800043c:	f000 fa4a 	bl	80008d4 <HAL_DMA_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <HAL_I2C_MspInit+0x9e>
		Error_Handler();
 8000446:	f7ff ff87 	bl	8000358 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a1a      	ldr	r2, [pc, #104]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 800044e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <HAL_I2C_MspInit+0x10c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000456:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 8000458:	4a1a      	ldr	r2, [pc, #104]	@ (80004c4 <HAL_I2C_MspInit+0x118>)
 800045a:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 800045e:	2203      	movs	r2, #3
 8000460:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 8000470:	2280      	movs	r2, #128	@ 0x80
 8000472:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000480:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000486:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 800048c:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 800048e:	f000 fa21 	bl	80008d4 <HAL_DMA_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <HAL_I2C_MspInit+0xf0>
		Error_Handler();
 8000498:	f7ff ff5e 	bl	8000358 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 80004a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004a2:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <HAL_I2C_MspInit+0x114>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80004a8:	bf00      	nop
 80004aa:	3728      	adds	r7, #40	@ 0x28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400
 80004b8:	2000007c 	.word	0x2000007c
 80004bc:	4002006c 	.word	0x4002006c
 80004c0:	200000c4 	.word	0x200000c4
 80004c4:	40020080 	.word	0x40020080

080004c8 <NMI_Handler>:

extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;

void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
   while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <NMI_Handler+0x4>

080004d0 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <MemManage_Handler+0x4>

080004e0 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <UsageFault_Handler+0x4>

080004f0 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <PendSV_Handler>:

void PendSV_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:


void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800051e:	f000 f8a7 	bl	8000670 <HAL_IncTick>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <DMA1_Channel6_IRQHandler+0x10>)
 800052e:	f000 fb2a 	bl	8000b86 <HAL_DMA_IRQHandler>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c

0800053c <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000540:	4802      	ldr	r0, [pc, #8]	@ (800054c <DMA1_Channel7_IRQHandler+0x10>)
 8000542:	f000 fb20 	bl	8000b86 <HAL_DMA_IRQHandler>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000c4 	.word	0x200000c4

08000550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <SystemInit+0x20>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <SystemInit+0x20>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000578:	f7ff ffea 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	@ (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	@ (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a2:	f003 facb 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a6:	f7ff fe0f 	bl	80001c8 <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b8:	08003be4 	.word	0x08003be4
  ldr r2, =_sbss
 80005bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c0:	200001d8 	.word	0x200001d8

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>

080005c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f93d 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 f80e 	bl	80005f8 <HAL_InitTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	e001      	b.n	80005ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e8:	f7ff febc 	bl	8000364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000604:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <HAL_InitTick+0x6c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d023      	beq.n	8000654 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800060c:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <HAL_InitTick+0x70>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f949 	bl	80008ba <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10f      	bne.n	800064e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d809      	bhi.n	8000648 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f913 	bl	8000866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000640:	4a0a      	ldr	r2, [pc, #40]	@ (800066c <HAL_InitTick+0x74>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e007      	b.n	8000658 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e004      	b.n	8000658 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	e001      	b.n	8000658 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	20000000 	.word	0x20000000
 800066c:	20000004 	.word	0x20000004

08000670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_IncTick+0x20>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <HAL_IncTick+0x24>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <HAL_IncTick+0x24>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000008 	.word	0x20000008
 8000694:	200001d4 	.word	0x200001d4

08000698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <HAL_GetTick+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	200001d4 	.word	0x200001d4

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4907      	ldr	r1, [pc, #28]	@ (800074c <__NVIC_EnableIRQ+0x38>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	@ (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	@ (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	@ 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	@ 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	@ (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff29 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff3e 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff8e 	bl	80007a4 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff31 	bl	8000714 <__NVIC_EnableIRQ>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffa2 	bl	800080c <SysTick_Config>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d101      	bne.n	80008e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e098      	b.n	8000a18 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000a24 <HAL_DMA_Init+0x150>)
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d80f      	bhi.n	8000912 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a28 <HAL_DMA_Init+0x154>)
 80008fa:	4413      	add	r3, r2
 80008fc:	4a4b      	ldr	r2, [pc, #300]	@ (8000a2c <HAL_DMA_Init+0x158>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	091b      	lsrs	r3, r3, #4
 8000904:	009a      	lsls	r2, r3, #2
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a48      	ldr	r2, [pc, #288]	@ (8000a30 <HAL_DMA_Init+0x15c>)
 800090e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000910:	e00e      	b.n	8000930 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	4b46      	ldr	r3, [pc, #280]	@ (8000a34 <HAL_DMA_Init+0x160>)
 800091a:	4413      	add	r3, r2
 800091c:	4a43      	ldr	r2, [pc, #268]	@ (8000a2c <HAL_DMA_Init+0x158>)
 800091e:	fba2 2303 	umull	r2, r3, r2, r3
 8000922:	091b      	lsrs	r3, r3, #4
 8000924:	009a      	lsls	r2, r3, #2
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a42      	ldr	r2, [pc, #264]	@ (8000a38 <HAL_DMA_Init+0x164>)
 800092e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2202      	movs	r2, #2
 8000934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800094a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800096c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	4313      	orrs	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800098a:	d039      	beq.n	8000a00 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	4a27      	ldr	r2, [pc, #156]	@ (8000a30 <HAL_DMA_Init+0x15c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d11a      	bne.n	80009cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000996:	4b29      	ldr	r3, [pc, #164]	@ (8000a3c <HAL_DMA_Init+0x168>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f003 031c 	and.w	r3, r3, #28
 80009a2:	210f      	movs	r1, #15
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	4924      	ldr	r1, [pc, #144]	@ (8000a3c <HAL_DMA_Init+0x168>)
 80009ac:	4013      	ands	r3, r2
 80009ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <HAL_DMA_Init+0x168>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6859      	ldr	r1, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009bc:	f003 031c 	and.w	r3, r3, #28
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	491d      	ldr	r1, [pc, #116]	@ (8000a3c <HAL_DMA_Init+0x168>)
 80009c6:	4313      	orrs	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
 80009ca:	e019      	b.n	8000a00 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_DMA_Init+0x16c>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d4:	f003 031c 	and.w	r3, r3, #28
 80009d8:	210f      	movs	r1, #15
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	4917      	ldr	r1, [pc, #92]	@ (8000a40 <HAL_DMA_Init+0x16c>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <HAL_DMA_Init+0x16c>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6859      	ldr	r1, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	f003 031c 	and.w	r3, r3, #28
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	4911      	ldr	r1, [pc, #68]	@ (8000a40 <HAL_DMA_Init+0x16c>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40020407 	.word	0x40020407
 8000a28:	bffdfff8 	.word	0xbffdfff8
 8000a2c:	cccccccd 	.word	0xcccccccd
 8000a30:	40020000 	.word	0x40020000
 8000a34:	bffdfbf8 	.word	0xbffdfbf8
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	400200a8 	.word	0x400200a8
 8000a40:	400204a8 	.word	0x400204a8

08000a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <HAL_DMA_Start_IT+0x20>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e04b      	b.n	8000afc <HAL_DMA_Start_IT+0xb8>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d13a      	bne.n	8000aee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2200      	movs	r2, #0
 8000a84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0201 	bic.w	r2, r2, #1
 8000a94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f000 f92f 	bl	8000d00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 020e 	orr.w	r2, r2, #14
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e00f      	b.n	8000adc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0204 	bic.w	r2, r2, #4
 8000aca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 020a 	orr.w	r2, r2, #10
 8000ada:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e005      	b.n	8000afa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000af6:	2302      	movs	r3, #2
 8000af8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d005      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2204      	movs	r2, #4
 8000b20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e029      	b.n	8000b7c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 020e 	bic.w	r2, r2, #14
 8000b36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0201 	bic.w	r2, r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4c:	f003 021c 	and.w	r2, r3, #28
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	2101      	movs	r1, #1
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
    }
  }
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f003 031c 	and.w	r3, r3, #28
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d026      	beq.n	8000c00 <HAL_DMA_IRQHandler+0x7a>
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d021      	beq.n	8000c00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d107      	bne.n	8000bda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0204 	bic.w	r2, r2, #4
 8000bd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f003 021c 	and.w	r2, r3, #28
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	2104      	movs	r1, #4
 8000be8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d071      	beq.n	8000cda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000bfe:	e06c      	b.n	8000cda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c04:	f003 031c 	and.w	r3, r3, #28
 8000c08:	2202      	movs	r2, #2
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d02e      	beq.n	8000c72 <HAL_DMA_IRQHandler+0xec>
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d029      	beq.n	8000c72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 0320 	and.w	r3, r3, #32
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10b      	bne.n	8000c44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 020a 	bic.w	r2, r2, #10
 8000c3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c48:	f003 021c 	and.w	r2, r3, #28
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	2102      	movs	r1, #2
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d038      	beq.n	8000cda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000c70:	e033      	b.n	8000cda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f003 031c 	and.w	r3, r3, #28
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d02a      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x156>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d025      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 020e 	bic.w	r2, r2, #14
 8000c9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca4:	f003 021c 	and.w	r2, r3, #28
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
}
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cf2:	b2db      	uxtb	r3, r3
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f003 021c 	and.w	r2, r3, #28
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b10      	cmp	r3, #16
 8000d30:	d108      	bne.n	8000d44 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d42:	e007      	b.n	8000d54 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	60da      	str	r2, [r3, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6e:	e17f      	b.n	8001070 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8171 	beq.w	800106a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d005      	beq.n	8000da0 <HAL_GPIO_Init+0x40>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d130      	bne.n	8000e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	f003 0201 	and.w	r2, r3, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d118      	bne.n	8000e40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e14:	2201      	movs	r2, #1
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d017      	beq.n	8000e7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d123      	bne.n	8000ed0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0203 	and.w	r2, r3, #3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80ac 	beq.w	800106a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b5f      	ldr	r3, [pc, #380]	@ (8001090 <HAL_GPIO_Init+0x330>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	4a5e      	ldr	r2, [pc, #376]	@ (8001090 <HAL_GPIO_Init+0x330>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001090 <HAL_GPIO_Init+0x330>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x242>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	@ (8001098 <HAL_GPIO_Init+0x338>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x23e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4e      	ldr	r2, [pc, #312]	@ (800109c <HAL_GPIO_Init+0x33c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x23a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4d      	ldr	r2, [pc, #308]	@ (80010a0 <HAL_GPIO_Init+0x340>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x236>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4c      	ldr	r2, [pc, #304]	@ (80010a4 <HAL_GPIO_Init+0x344>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x232>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4b      	ldr	r2, [pc, #300]	@ (80010a8 <HAL_GPIO_Init+0x348>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x22e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4a      	ldr	r2, [pc, #296]	@ (80010ac <HAL_GPIO_Init+0x34c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x22a>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x244>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb4:	4937      	ldr	r1, [pc, #220]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe6:	4a32      	ldr	r2, [pc, #200]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001010:	4a27      	ldr	r2, [pc, #156]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103a:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <HAL_GPIO_Init+0x350>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa22 f303 	lsr.w	r3, r2, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	f47f ae78 	bne.w	8000d70 <HAL_GPIO_Init+0x10>
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48001000 	.word	0x48001000
 80010a8:	48001400 	.word	0x48001400
 80010ac:	48001800 	.word	0x48001800
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e08d      	b.n	80011e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f966 	bl	80003ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2224      	movs	r2, #36	@ 0x24
 80010e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001104:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001114:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d107      	bne.n	800112e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	e006      	b.n	800113c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800113a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d108      	bne.n	8001156 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	e007      	b.n	8001166 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69d9      	ldr	r1, [r3, #28]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1a      	ldr	r2, [r3, #32]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	461a      	mov	r2, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	817b      	strh	r3, [r7, #10]
 80011fc:	4613      	mov	r3, r2
 80011fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b20      	cmp	r3, #32
 800120e:	f040 80ef 	bne.w	80013f0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800121c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001220:	d101      	bne.n	8001226 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8001222:	2302      	movs	r3, #2
 8001224:	e0e5      	b.n	80013f2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_I2C_Master_Transmit_DMA+0x48>
 8001230:	2302      	movs	r3, #2
 8001232:	e0de      	b.n	80013f2 <HAL_I2C_Master_Transmit_DMA+0x206>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2221      	movs	r2, #33	@ 0x21
 8001240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2210      	movs	r2, #16
 8001248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	893a      	ldrh	r2, [r7, #8]
 800125c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4a66      	ldr	r2, [pc, #408]	@ (80013fc <HAL_I2C_Master_Transmit_DMA+0x210>)
 8001262:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a66      	ldr	r2, [pc, #408]	@ (8001400 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800126e:	b29b      	uxth	r3, r3
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d906      	bls.n	8001282 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	22ff      	movs	r2, #255	@ 0xff
 8001278:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800127a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e007      	b.n	8001292 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800128c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001290:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001296:	2b00      	cmp	r3, #0
 8001298:	d01a      	beq.n	80012d0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3b01      	subs	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d074      	beq.n	80013c2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d022      	beq.n	8001326 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e4:	4a47      	ldr	r2, [pc, #284]	@ (8001404 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80012e6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ec:	4a46      	ldr	r2, [pc, #280]	@ (8001408 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80012ee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fc:	2200      	movs	r2, #0
 80012fe:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001310:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001316:	f7ff fb95 	bl	8000a44 <HAL_DMA_Start_IT>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d13a      	bne.n	800139a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8001324:	e013      	b.n	800134e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2220      	movs	r2, #32
 800132a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e051      	b.n	80013f2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001352:	b2db      	uxtb	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	8979      	ldrh	r1, [r7, #10]
 800135a:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f001 fca3 	bl	8002cac <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001380:	2110      	movs	r1, #16
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f001 fcc4 	bl	8002d10 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e028      	b.n	80013ec <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f043 0210 	orr.w	r2, r3, #16
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e017      	b.n	80013f2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80013c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	8979      	ldrh	r1, [r7, #10]
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f001 fc68 	bl	8002cac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80013e4:	2101      	movs	r1, #1
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f001 fc92 	bl	8002d10 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e000      	b.n	80013f2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80013f0:	2302      	movs	r3, #2
  }
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	ffff0000 	.word	0xffff0000
 8001400:	08001b21 	.word	0x08001b21
 8001404:	08002afb 	.word	0x08002afb
 8001408:	08002c43 	.word	0x08002c43
 800140c:	80002000 	.word	0x80002000
 8001410:	080016c5 	.word	0x080016c5

08001414 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af02      	add	r7, sp, #8
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b20      	cmp	r3, #32
 8001432:	f040 80cd 	bne.w	80015d0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001444:	d101      	bne.n	800144a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8001446:	2302      	movs	r3, #2
 8001448:	e0c3      	b.n	80015d2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_I2C_Master_Receive_DMA+0x44>
 8001454:	2302      	movs	r3, #2
 8001456:	e0bc      	b.n	80015d2 <HAL_I2C_Master_Receive_DMA+0x1be>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2222      	movs	r2, #34	@ 0x22
 8001464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2210      	movs	r2, #16
 800146c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	893a      	ldrh	r2, [r7, #8]
 8001480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4a55      	ldr	r2, [pc, #340]	@ (80015dc <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a55      	ldr	r2, [pc, #340]	@ (80015e0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001492:	b29b      	uxth	r3, r3
 8001494:	2bff      	cmp	r3, #255	@ 0xff
 8001496:	d906      	bls.n	80014a6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2201      	movs	r2, #1
 800149c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800149e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e007      	b.n	80014b6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80014b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d070      	beq.n	80015a0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d020      	beq.n	8001508 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ca:	4a46      	ldr	r2, [pc, #280]	@ (80015e4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80014cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d2:	4a45      	ldr	r2, [pc, #276]	@ (80015e8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e2:	2200      	movs	r2, #0
 80014e4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3324      	adds	r3, #36	@ 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80014f8:	f7ff faa4 	bl	8000a44 <HAL_DMA_Start_IT>
 80014fc:	4603      	mov	r3, r0
 80014fe:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001500:	7cfb      	ldrb	r3, [r7, #19]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d138      	bne.n	8001578 <HAL_I2C_Master_Receive_DMA+0x164>
 8001506:	e013      	b.n	8001530 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e050      	b.n	80015d2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001534:	b2da      	uxtb	r2, r3
 8001536:	8979      	ldrh	r1, [r7, #10]
 8001538:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f001 fbb4 	bl	8002cac <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800155e:	2110      	movs	r1, #16
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f001 fbd5 	bl	8002d10 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e029      	b.n	80015cc <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158c:	f043 0210 	orr.w	r2, r3, #16
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e018      	b.n	80015d2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80015a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	8979      	ldrh	r1, [r7, #10]
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f001 fb78 	bl	8002cac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80015c4:	2102      	movs	r1, #2
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f001 fba2 	bl	8002d10 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e000      	b.n	80015d2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	ffff0000 	.word	0xffff0000
 80015e0:	08001b21 	.word	0x08001b21
 80015e4:	08002b91 	.word	0x08002b91
 80015e8:	08002c43 	.word	0x08002c43
 80015ec:	80002400 	.word	0x80002400
 80015f0:	080016c5 	.word	0x080016c5

080015f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
 8001650:	4613      	mov	r3, r2
 8001652:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <I2C_Master_ISR_IT+0x1e>
 80016de:	2302      	movs	r3, #2
 80016e0:	e121      	b.n	8001926 <I2C_Master_ISR_IT+0x262>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d012      	beq.n	800171a <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00d      	beq.n	800171a <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2210      	movs	r2, #16
 8001704:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f043 0204 	orr.w	r2, r3, #4
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f001 f9cd 	bl	8002ab2 <I2C_Flush_TXDR>
 8001718:	e0f2      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d022      	beq.n	800176a <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01d      	beq.n	800176a <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001768:	e0ca      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001770:	2b00      	cmp	r3, #0
 8001772:	d128      	bne.n	80017c6 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01e      	beq.n	80017c6 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178c:	b29b      	uxth	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80b6 	beq.w	8001900 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80017c4:	e09c      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d06a      	beq.n	80018a6 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d065      	beq.n	80018a6 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d04e      	beq.n	8001882 <I2C_Master_ISR_IT+0x1be>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d14a      	bne.n	8001882 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	2bff      	cmp	r3, #255	@ 0xff
 8001802:	d91c      	bls.n	800183e <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d103      	bne.n	8001820 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800181e:	e002      	b.n	8001826 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	22ff      	movs	r2, #255	@ 0xff
 8001824:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182a:	b2da      	uxtb	r2, r3
 800182c:	8a79      	ldrh	r1, [r7, #18]
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f001 fa38 	bl	8002cac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183c:	e032      	b.n	80018a4 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001850:	d00b      	beq.n	800186a <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001856:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800185c:	8a79      	ldrh	r1, [r7, #18]
 800185e:	2000      	movs	r0, #0
 8001860:	9000      	str	r0, [sp, #0]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f001 fa22 	bl	8002cac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001868:	e01c      	b.n	80018a4 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186e:	b2da      	uxtb	r2, r3
 8001870:	8a79      	ldrh	r1, [r7, #18]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f001 fa16 	bl	8002cac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001880:	e010      	b.n	80018a4 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001890:	d003      	beq.n	800189a <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fcdd 	bl	8002252 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001898:	e032      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800189a:	2140      	movs	r1, #64	@ 0x40
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 fff1 	bl	8002884 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018a2:	e02d      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
 80018a4:	e02c      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d027      	beq.n	8001900 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d022      	beq.n	8001900 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d119      	bne.n	80018f8 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80018d2:	d015      	beq.n	8001900 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018dc:	d108      	bne.n	80018f0 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e007      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 fcae 	bl	8002252 <I2C_ITMasterSeqCplt>
 80018f6:	e003      	b.n	8001900 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018f8:	2140      	movs	r1, #64	@ 0x40
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 ffc2 	bl	8002884 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fd34 	bl	8002384 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <I2C_Slave_ISR_IT+0x24>
 800194e:	2302      	movs	r3, #2
 8001950:	e0e2      	b.n	8001b18 <I2C_Slave_ISR_IT+0x1ea>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800196e:	6939      	ldr	r1, [r7, #16]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fdcf 	bl	8002514 <I2C_ITSlaveCplt>
 8001976:	e0ca      	b.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d04b      	beq.n	8001a1a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001988:	2b00      	cmp	r3, #0
 800198a:	d046      	beq.n	8001a1a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d128      	bne.n	80019e8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b28      	cmp	r3, #40	@ 0x28
 80019a0:	d108      	bne.n	80019b4 <I2C_Slave_ISR_IT+0x86>
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019a8:	d104      	bne.n	80019b4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80019aa:	6939      	ldr	r1, [r7, #16]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 ff15 	bl	80027dc <I2C_ITListenCplt>
 80019b2:	e031      	b.n	8001a18 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b29      	cmp	r3, #41	@ 0x29
 80019be:	d10e      	bne.n	80019de <I2C_Slave_ISR_IT+0xb0>
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019c6:	d00a      	beq.n	80019de <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2210      	movs	r2, #16
 80019ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f001 f86e 	bl	8002ab2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fc78 	bl	80022cc <I2C_ITSlaveSeqCplt>
 80019dc:	e01c      	b.n	8001a18 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2210      	movs	r2, #16
 80019e4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80019e6:	e08f      	b.n	8001b08 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2210      	movs	r2, #16
 80019ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f4:	f043 0204 	orr.w	r2, r3, #4
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <I2C_Slave_ISR_IT+0xdc>
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a08:	d17e      	bne.n	8001b08 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4619      	mov	r1, r3
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 ff37 	bl	8002884 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a16:	e077      	b.n	8001b08 <I2C_Slave_ISR_IT+0x1da>
 8001a18:	e076      	b.n	8001b08 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d02f      	beq.n	8001a84 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02a      	beq.n	8001a84 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d018      	beq.n	8001a6a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d14b      	bne.n	8001b0c <I2C_Slave_ISR_IT+0x1de>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a7a:	d047      	beq.n	8001b0c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fc25 	bl	80022cc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001a82:	e043      	b.n	8001b0c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001a98:	6939      	ldr	r1, [r7, #16]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fb55 	bl	800214a <I2C_ITAddrCplt>
 8001aa0:	e035      	b.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d030      	beq.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d02b      	beq.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d018      	beq.n	8001af2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001af0:	e00d      	b.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af8:	d002      	beq.n	8001b00 <I2C_Slave_ISR_IT+0x1d2>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fbe3 	bl	80022cc <I2C_ITSlaveSeqCplt>
 8001b06:	e002      	b.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001b08:	bf00      	nop
 8001b0a:	e000      	b.n	8001b0e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001b0c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <I2C_Master_ISR_DMA+0x1a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0e7      	b.n	8001d0a <I2C_Master_ISR_DMA+0x1ea>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d016      	beq.n	8001b7a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d011      	beq.n	8001b7a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f043 0204 	orr.w	r2, r3, #4
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f001 f8cf 	bl	8002d10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 ff9d 	bl	8002ab2 <I2C_Flush_TXDR>
 8001b78:	e0c2      	b.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d07f      	beq.n	8001c84 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d07a      	beq.n	8001c84 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b9c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d05c      	beq.n	8001c62 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2bff      	cmp	r3, #255	@ 0xff
 8001bbe:	d914      	bls.n	8001bea <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d103      	bne.n	8001bdc <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001bda:	e002      	b.n	8001be2 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	22ff      	movs	r2, #255	@ 0xff
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001be2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e010      	b.n	8001c0c <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bfc:	d003      	beq.n	8001c06 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e002      	b.n	8001c0c <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	8a79      	ldrh	r1, [r7, #18]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f001 f846 	bl	8002cac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b22      	cmp	r3, #34	@ 0x22
 8001c3c:	d108      	bne.n	8001c50 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c4e:	e057      	b.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c5e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c60:	e04e      	b.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c70:	d003      	beq.n	8001c7a <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 faed 	bl	8002252 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001c78:	e042      	b.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001c7a:	2140      	movs	r1, #64	@ 0x40
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fe01 	bl	8002884 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001c82:	e03d      	b.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d028      	beq.n	8001ce0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cb0:	d025      	beq.n	8001cfe <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cba:	d108      	bne.n	8001cce <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001ccc:	e017      	b.n	8001cfe <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fabf 	bl	8002252 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001cd4:	e013      	b.n	8001cfe <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001cd6:	2140      	movs	r1, #64	@ 0x40
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 fdd3 	bl	8002884 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001cde:	e00e      	b.n	8001cfe <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fb44 	bl	8002384 <I2C_ITMasterCplt>
 8001cfc:	e000      	b.n	8001d00 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001cfe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001d20:	4b90      	ldr	r3, [pc, #576]	@ (8001f64 <I2C_Mem_ISR_DMA+0x250>)
 8001d22:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <I2C_Mem_ISR_DMA+0x1e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e12f      	b.n	8001f92 <I2C_Mem_ISR_DMA+0x27e>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d016      	beq.n	8001d72 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d011      	beq.n	8001d72 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2210      	movs	r2, #16
 8001d54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f043 0204 	orr.w	r2, r3, #4
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d62:	2120      	movs	r1, #32
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 ffd3 	bl	8002d10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fea1 	bl	8002ab2 <I2C_Flush_TXDR>
 8001d70:	e10a      	b.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00e      	beq.n	8001d9a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f04f 32ff 	mov.w	r2, #4294967295
 8001d96:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d98:	e0f6      	b.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d06d      	beq.n	8001e80 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d068      	beq.n	8001e80 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dae:	2101      	movs	r1, #1
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f001 f831 	bl	8002e18 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001db6:	2110      	movs	r1, #16
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 ffa9 	bl	8002d10 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d056      	beq.n	8001e76 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2bff      	cmp	r3, #255	@ 0xff
 8001dd0:	d91e      	bls.n	8001e10 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d103      	bne.n	8001dee <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001dec:	e002      	b.n	8001df4 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	22ff      	movs	r2, #255	@ 0xff
 8001df2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 ff4f 	bl	8002cac <I2C_TransferConfig>
 8001e0e:	e011      	b.n	8001e34 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	b299      	uxth	r1, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	2300      	movs	r3, #0
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 ff3c 	bl	8002cac <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b22      	cmp	r3, #34	@ 0x22
 8001e50:	d108      	bne.n	8001e64 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e62:	e091      	b.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e74:	e088      	b.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e76:	2140      	movs	r1, #64	@ 0x40
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fd03 	bl	8002884 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001e7e:	e083      	b.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d070      	beq.n	8001f6c <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d06b      	beq.n	8001f6c <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e94:	2101      	movs	r1, #1
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 ffbe 	bl	8002e18 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 ff36 	bl	8002d10 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b22      	cmp	r3, #34	@ 0x22
 8001eae:	d101      	bne.n	8001eb4 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <I2C_Mem_ISR_DMA+0x254>)
 8001eb2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2bff      	cmp	r3, #255	@ 0xff
 8001ebc:	d91e      	bls.n	8001efc <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d103      	bne.n	8001eda <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001ed8:	e002      	b.n	8001ee0 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	22ff      	movs	r2, #255	@ 0xff
 8001ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fed9 	bl	8002cac <I2C_TransferConfig>
 8001efa:	e011      	b.n	8001f20 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	b299      	uxth	r1, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fec6 	bl	8002cac <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b22      	cmp	r3, #34	@ 0x22
 8001f3c:	d108      	bne.n	8001f50 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f4c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f4e:	e01b      	b.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f5e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f60:	e012      	b.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
 8001f62:	bf00      	nop
 8001f64:	80002000 	.word	0x80002000
 8001f68:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f9fe 	bl	8002384 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop

08001f9c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <I2C_Slave_ISR_DMA+0x24>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e0c0      	b.n	8002142 <I2C_Slave_ISR_DMA+0x1a6>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fa98 	bl	8002514 <I2C_ITSlaveCplt>
 8001fe4:	e0a8      	b.n	8002138 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8095 	beq.w	800211c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 808f 	beq.w	800211c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d104      	bne.n	8002012 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800200e:	2b00      	cmp	r3, #0
 8002010:	d07d      	beq.n	800210e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002030:	2301      	movs	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00c      	beq.n	8002056 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d128      	bne.n	80020ae <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b28      	cmp	r3, #40	@ 0x28
 8002066:	d108      	bne.n	800207a <I2C_Slave_ISR_DMA+0xde>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800206e:	d104      	bne.n	800207a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fbb2 	bl	80027dc <I2C_ITListenCplt>
 8002078:	e048      	b.n	800210c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b29      	cmp	r3, #41	@ 0x29
 8002084:	d10e      	bne.n	80020a4 <I2C_Slave_ISR_DMA+0x108>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800208c:	d00a      	beq.n	80020a4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2210      	movs	r2, #16
 8002094:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fd0b 	bl	8002ab2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f915 	bl	80022cc <I2C_ITSlaveSeqCplt>
 80020a2:	e033      	b.n	800210c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2210      	movs	r2, #16
 80020aa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80020ac:	e034      	b.n	8002118 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2210      	movs	r2, #16
 80020b4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f043 0204 	orr.w	r2, r3, #4
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <I2C_Slave_ISR_DMA+0x13c>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d6:	d11f      	bne.n	8002118 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b21      	cmp	r3, #33	@ 0x21
 80020dc:	d002      	beq.n	80020e4 <I2C_Slave_ISR_DMA+0x148>
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b29      	cmp	r3, #41	@ 0x29
 80020e2:	d103      	bne.n	80020ec <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2221      	movs	r2, #33	@ 0x21
 80020e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ea:	e008      	b.n	80020fe <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b22      	cmp	r3, #34	@ 0x22
 80020f0:	d002      	beq.n	80020f8 <I2C_Slave_ISR_DMA+0x15c>
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80020f6:	d102      	bne.n	80020fe <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2222      	movs	r2, #34	@ 0x22
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	4619      	mov	r1, r3
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fbbd 	bl	8002884 <I2C_ITError>
      if (treatdmanack == 1U)
 800210a:	e005      	b.n	8002118 <I2C_Slave_ISR_DMA+0x17c>
 800210c:	e004      	b.n	8002118 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2210      	movs	r2, #16
 8002114:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002116:	e00f      	b.n	8002138 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002118:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800211a:	e00d      	b.n	8002138 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f809 	bl	800214a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002160:	2b28      	cmp	r3, #40	@ 0x28
 8002162:	d16a      	bne.n	800223a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	b29b      	uxth	r3, r3
 800217e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002182:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	b29b      	uxth	r3, r3
 800218c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002190:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800219e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d138      	bne.n	800221a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	09db      	lsrs	r3, r3, #7
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	89bb      	ldrh	r3, [r7, #12]
 80021b0:	4053      	eors	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f003 0306 	and.w	r3, r3, #6
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11c      	bne.n	80021f6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80021bc:	897b      	ldrh	r3, [r7, #10]
 80021be:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d13b      	bne.n	800224a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2208      	movs	r2, #8
 80021de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021e8:	89ba      	ldrh	r2, [r7, #12]
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fa28 	bl	8001644 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80021f4:	e029      	b.n	800224a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80021fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fe0a 	bl	8002e18 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800220c:	89ba      	ldrh	r2, [r7, #12]
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fa16 	bl	8001644 <HAL_I2C_AddrCallback>
}
 8002218:	e017      	b.n	800224a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800221a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fdfa 	bl	8002e18 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800222c:	89ba      	ldrh	r2, [r7, #12]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fa06 	bl	8001644 <HAL_I2C_AddrCallback>
}
 8002238:	e007      	b.n	800224a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2208      	movs	r2, #8
 8002240:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b21      	cmp	r3, #33	@ 0x21
 800226c:	d115      	bne.n	800229a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2211      	movs	r2, #17
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002282:	2101      	movs	r1, #1
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fdc7 	bl	8002e18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff f9ae 	bl	80015f4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002298:	e014      	b.n	80022c4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2212      	movs	r2, #18
 80022a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022ae:	2102      	movs	r1, #2
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fdb1 	bl	8002e18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff f9a2 	bl	8001608 <HAL_I2C_MasterRxCpltCallback>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e00c      	b.n	800231a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002318:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b29      	cmp	r3, #41	@ 0x29
 8002324:	d112      	bne.n	800234c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2228      	movs	r2, #40	@ 0x28
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2221      	movs	r2, #33	@ 0x21
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002334:	2101      	movs	r1, #1
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fd6e 	bl	8002e18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff f969 	bl	800161c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800234a:	e017      	b.n	800237c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b2a      	cmp	r3, #42	@ 0x2a
 8002356:	d111      	bne.n	800237c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2228      	movs	r2, #40	@ 0x28
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2222      	movs	r2, #34	@ 0x22
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002366:	2102      	movs	r1, #2
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fd55 	bl	8002e18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff f95a 	bl	8001630 <HAL_I2C_SlaveRxCpltCallback>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2220      	movs	r2, #32
 8002398:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b21      	cmp	r3, #33	@ 0x21
 80023a4:	d107      	bne.n	80023b6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023a6:	2101      	movs	r1, #1
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fd35 	bl	8002e18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2211      	movs	r2, #17
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023b4:	e00c      	b.n	80023d0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b22      	cmp	r3, #34	@ 0x22
 80023c0:	d106      	bne.n	80023d0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023c2:	2102      	movs	r1, #2
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fd27 	bl	8002e18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2212      	movs	r2, #18
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b4c      	ldr	r3, [pc, #304]	@ (800250c <I2C_ITMasterCplt+0x188>)
 80023dc:	400b      	ands	r3, r1
 80023de:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a49      	ldr	r2, [pc, #292]	@ (8002510 <I2C_ITMasterCplt+0x18c>)
 80023ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2210      	movs	r2, #16
 80023fc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f043 0204 	orr.w	r2, r3, #4
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b60      	cmp	r3, #96	@ 0x60
 8002414:	d10a      	bne.n	800242c <I2C_ITMasterCplt+0xa8>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	b2db      	uxtb	r3, r3
 8002428:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800242a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fb40 	bl	8002ab2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b60      	cmp	r3, #96	@ 0x60
 8002442:	d002      	beq.n	800244a <I2C_ITMasterCplt+0xc6>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fa17 	bl	8002884 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002456:	e054      	b.n	8002502 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b21      	cmp	r3, #33	@ 0x21
 8002462:	d124      	bne.n	80024ae <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b40      	cmp	r3, #64	@ 0x40
 800247c:	d10b      	bne.n	8002496 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff f8f0 	bl	8001674 <HAL_I2C_MemTxCpltCallback>
}
 8002494:	e035      	b.n	8002502 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff f8a4 	bl	80015f4 <HAL_I2C_MasterTxCpltCallback>
}
 80024ac:	e029      	b.n	8002502 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b22      	cmp	r3, #34	@ 0x22
 80024b8:	d123      	bne.n	8002502 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b40      	cmp	r3, #64	@ 0x40
 80024d2:	d10b      	bne.n	80024ec <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff f8cf 	bl	8001688 <HAL_I2C_MemRxCpltCallback>
}
 80024ea:	e00a      	b.n	8002502 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff f883 	bl	8001608 <HAL_I2C_MasterRxCpltCallback>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	fe00e800 	.word	0xfe00e800
 8002510:	ffff0000 	.word	0xffff0000

08002514 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002536:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2220      	movs	r2, #32
 800253e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	2b21      	cmp	r3, #33	@ 0x21
 8002544:	d002      	beq.n	800254c <I2C_ITSlaveCplt+0x38>
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	2b29      	cmp	r3, #41	@ 0x29
 800254a:	d108      	bne.n	800255e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800254c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fc61 	bl	8002e18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2221      	movs	r2, #33	@ 0x21
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
 800255c:	e019      	b.n	8002592 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	2b22      	cmp	r3, #34	@ 0x22
 8002562:	d002      	beq.n	800256a <I2C_ITSlaveCplt+0x56>
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	2b2a      	cmp	r3, #42	@ 0x2a
 8002568:	d108      	bne.n	800257c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800256a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fc52 	bl	8002e18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2222      	movs	r2, #34	@ 0x22
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
 800257a:	e00a      	b.n	8002592 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	2b28      	cmp	r3, #40	@ 0x28
 8002580:	d107      	bne.n	8002592 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002582:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fc46 	bl	8002e18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025a0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <I2C_ITSlaveCplt+0x2c0>)
 80025ae:	400b      	ands	r3, r1
 80025b0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa7d 	bl	8002ab2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d013      	beq.n	80025ea <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01f      	beq.n	800261a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025e8:	e017      	b.n	800261a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002602:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0304 	bic.w	r3, r3, #4
 800262a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d049      	beq.n	800271a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800268c:	2b00      	cmp	r3, #0
 800268e:	d044      	beq.n	800271a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d128      	bne.n	80026ec <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b28      	cmp	r3, #40	@ 0x28
 80026a4:	d108      	bne.n	80026b8 <I2C_ITSlaveCplt+0x1a4>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026ac:	d104      	bne.n	80026b8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80026ae:	6979      	ldr	r1, [r7, #20]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f893 	bl	80027dc <I2C_ITListenCplt>
 80026b6:	e030      	b.n	800271a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b29      	cmp	r3, #41	@ 0x29
 80026c2:	d10e      	bne.n	80026e2 <I2C_ITSlaveCplt+0x1ce>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ca:	d00a      	beq.n	80026e2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2210      	movs	r2, #16
 80026d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f9ec 	bl	8002ab2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fdf6 	bl	80022cc <I2C_ITSlaveSeqCplt>
 80026e0:	e01b      	b.n	800271a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2210      	movs	r2, #16
 80026e8:	61da      	str	r2, [r3, #28]
 80026ea:	e016      	b.n	800271a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2210      	movs	r2, #16
 80026f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f8:	f043 0204 	orr.w	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <I2C_ITSlaveCplt+0x1fa>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800270c:	d105      	bne.n	800271a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	4619      	mov	r1, r3
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f8b5 	bl	8002884 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	2b00      	cmp	r3, #0
 800272e:	d010      	beq.n	8002752 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8a4 	bl	8002884 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b28      	cmp	r3, #40	@ 0x28
 8002746:	d141      	bne.n	80027cc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f846 	bl	80027dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002750:	e03c      	b.n	80027cc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800275a:	d014      	beq.n	8002786 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fdb5 	bl	80022cc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <I2C_ITSlaveCplt+0x2c4>)
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe ff6e 	bl	8001660 <HAL_I2C_ListenCpltCallback>
}
 8002784:	e022      	b.n	80027cc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b22      	cmp	r3, #34	@ 0x22
 8002790:	d10e      	bne.n	80027b0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7fe ff41 	bl	8001630 <HAL_I2C_SlaveRxCpltCallback>
}
 80027ae:	e00d      	b.n	80027cc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe ff28 	bl	800161c <HAL_I2C_SlaveTxCpltCallback>
}
 80027cc:	bf00      	nop
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	fe00e800 	.word	0xfe00e800
 80027d8:	ffff0000 	.word	0xffff0000

080027dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a25      	ldr	r2, [pc, #148]	@ (8002880 <I2C_ITListenCplt+0xa4>)
 80027ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d022      	beq.n	8002858 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	2b00      	cmp	r3, #0
 8002830:	d012      	beq.n	8002858 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002858:	f248 0103 	movw	r1, #32771	@ 0x8003
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fadb 	bl	8002e18 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2210      	movs	r2, #16
 8002868:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe fef4 	bl	8001660 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	ffff0000 	.word	0xffff0000

08002884 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002894:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a6d      	ldr	r2, [pc, #436]	@ (8002a58 <I2C_ITError+0x1d4>)
 80028a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b28      	cmp	r3, #40	@ 0x28
 80028ba:	d005      	beq.n	80028c8 <I2C_ITError+0x44>
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b29      	cmp	r3, #41	@ 0x29
 80028c0:	d002      	beq.n	80028c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80028c6:	d10b      	bne.n	80028e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028c8:	2103      	movs	r1, #3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 faa4 	bl	8002e18 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2228      	movs	r2, #40	@ 0x28
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a60      	ldr	r2, [pc, #384]	@ (8002a5c <I2C_ITError+0x1d8>)
 80028dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028de:	e030      	b.n	8002942 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fa97 	bl	8002e18 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8e1 	bl	8002ab2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b60      	cmp	r3, #96	@ 0x60
 80028fa:	d01f      	beq.n	800293c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b20      	cmp	r3, #32
 8002910:	d114      	bne.n	800293c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d109      	bne.n	8002934 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	f043 0204 	orr.w	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2220      	movs	r2, #32
 800293a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d039      	beq.n	80029c4 <I2C_ITError+0x140>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b11      	cmp	r3, #17
 8002954:	d002      	beq.n	800295c <I2C_ITError+0xd8>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b21      	cmp	r3, #33	@ 0x21
 800295a:	d133      	bne.n	80029c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800296a:	d107      	bne.n	800297c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800297a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe f9af 	bl	8000ce4 <HAL_DMA_GetState>
 8002986:	4603      	mov	r3, r0
 8002988:	2b01      	cmp	r3, #1
 800298a:	d017      	beq.n	80029bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002990:	4a33      	ldr	r2, [pc, #204]	@ (8002a60 <I2C_ITError+0x1dc>)
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe f8af 	bl	8000b04 <HAL_DMA_Abort_IT>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d04d      	beq.n	8002a48 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029b6:	4610      	mov	r0, r2
 80029b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029ba:	e045      	b.n	8002a48 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f851 	bl	8002a64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029c2:	e041      	b.n	8002a48 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d039      	beq.n	8002a40 <I2C_ITError+0x1bc>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b12      	cmp	r3, #18
 80029d0:	d002      	beq.n	80029d8 <I2C_ITError+0x154>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b22      	cmp	r3, #34	@ 0x22
 80029d6:	d133      	bne.n	8002a40 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e6:	d107      	bne.n	80029f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe f971 	bl	8000ce4 <HAL_DMA_GetState>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d017      	beq.n	8002a38 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	4a14      	ldr	r2, [pc, #80]	@ (8002a60 <I2C_ITError+0x1dc>)
 8002a0e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f871 	bl	8000b04 <HAL_DMA_Abort_IT>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d011      	beq.n	8002a4c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a32:	4610      	mov	r0, r2
 8002a34:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a36:	e009      	b.n	8002a4c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f813 	bl	8002a64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a3e:	e005      	b.n	8002a4c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f80f 	bl	8002a64 <I2C_TreatErrorCallback>
  }
}
 8002a46:	e002      	b.n	8002a4e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a48:	bf00      	nop
 8002a4a:	e000      	b.n	8002a4e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a4c:	bf00      	nop
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	ffff0000 	.word	0xffff0000
 8002a5c:	0800192f 	.word	0x0800192f
 8002a60:	08002c71 	.word	0x08002c71

08002a64 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b60      	cmp	r3, #96	@ 0x60
 8002a76:	d10e      	bne.n	8002a96 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fe0e 	bl	80016b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a94:	e009      	b.n	8002aaa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7fe fdf9 	bl	800169c <HAL_I2C_ErrorCallback>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d103      	bne.n	8002ad0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2200      	movs	r2, #0
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d007      	beq.n	8002aee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	619a      	str	r2, [r3, #24]
  }
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b16:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b22:	2120      	movs	r1, #32
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f8f3 	bl	8002d10 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002b2a:	e02d      	b.n	8002b88 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002b34:	441a      	add	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2bff      	cmp	r3, #255	@ 0xff
 8002b42:	d903      	bls.n	8002b4c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	22ff      	movs	r2, #255	@ 0xff
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b4a:	e004      	b.n	8002b56 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3328      	adds	r3, #40	@ 0x28
 8002b66:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002b6c:	f7fd ff6a 	bl	8000a44 <HAL_DMA_Start_IT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002b76:	2110      	movs	r1, #16
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7ff fe83 	bl	8002884 <I2C_ITError>
}
 8002b7e:	e003      	b.n	8002b88 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002b80:	2140      	movs	r1, #64	@ 0x40
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f8c4 	bl	8002d10 <I2C_Enable_IRQ>
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bac:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002bb8:	2120      	movs	r1, #32
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8a8 	bl	8002d10 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002bc0:	e03b      	b.n	8002c3a <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002bca:	441a      	add	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2bff      	cmp	r3, #255	@ 0xff
 8002bd8:	d911      	bls.n	8002bfe <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d103      	bne.n	8002bf6 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bf4:	e008      	b.n	8002c08 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22ff      	movs	r2, #255	@ 0xff
 8002bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bfc:	e004      	b.n	8002c08 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3324      	adds	r3, #36	@ 0x24
 8002c12:	4619      	mov	r1, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002c1e:	f7fd ff11 	bl	8000a44 <HAL_DMA_Start_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002c28:	2110      	movs	r1, #16
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fe2a 	bl	8002884 <I2C_ITError>
}
 8002c30:	e003      	b.n	8002c3a <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002c32:	2140      	movs	r1, #64	@ 0x40
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f86b 	bl	8002d10 <I2C_Enable_IRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002c60:	2110      	movs	r1, #16
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff fe0e 	bl	8002884 <I2C_ITError>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff fee0 	bl	8002a64 <I2C_TreatErrorCallback>
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cc4:	7a7b      	ldrb	r3, [r7, #9]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ccc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <I2C_TransferConfig+0x60>)
 8002cec:	430b      	orrs	r3, r1
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	ea02 0103 	and.w	r1, r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	03ff63ff 	.word	0x03ff63ff

08002d10 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d24:	4a39      	ldr	r2, [pc, #228]	@ (8002e0c <I2C_Enable_IRQ+0xfc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d032      	beq.n	8002d90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d2e:	4a38      	ldr	r2, [pc, #224]	@ (8002e10 <I2C_Enable_IRQ+0x100>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d02d      	beq.n	8002d90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d38:	4a36      	ldr	r2, [pc, #216]	@ (8002e14 <I2C_Enable_IRQ+0x104>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d028      	beq.n	8002d90 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da03      	bge.n	8002d4e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002d4c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002d5e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002d70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d103      	bne.n	8002d80 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002d7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d80:	887b      	ldrh	r3, [r7, #2]
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d133      	bne.n	8002dee <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f043 0320 	orr.w	r3, r3, #32
 8002d8c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d8e:	e02e      	b.n	8002dee <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da03      	bge.n	8002da0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002d9e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002db0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002dc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d103      	bne.n	8002dd2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002dd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d103      	bne.n	8002de0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002dde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	2b40      	cmp	r3, #64	@ 0x40
 8002de4:	d103      	bne.n	8002dee <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	08001b21 	.word	0x08001b21
 8002e10:	08001f9d 	.word	0x08001f9d
 8002e14:	08001d15 	.word	0x08001d15

08002e18 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00f      	beq.n	8002e52 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002e38:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e46:	2b28      	cmp	r3, #40	@ 0x28
 8002e48:	d003      	beq.n	8002e52 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002e50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00f      	beq.n	8002e7c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002e62:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e70:	2b28      	cmp	r3, #40	@ 0x28
 8002e72:	d003      	beq.n	8002e7c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002e7a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da03      	bge.n	8002e8c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d103      	bne.n	8002e9a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002e98:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d103      	bne.n	8002ea8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f043 0320 	orr.w	r3, r3, #32
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	2b40      	cmp	r3, #64	@ 0x40
 8002eac:	d103      	bne.n	8002eb6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ed8:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <HAL_PWREx_GetVoltageRange+0x18>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40007000 	.word	0x40007000

08002ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efe:	d130      	bne.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0c:	d038      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0e:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f16:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2232      	movs	r2, #50	@ 0x32
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f34:	e002      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f48:	d102      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f2      	bne.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5c:	d110      	bne.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00f      	b.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d007      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f70:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f78:	4a05      	ldr	r2, [pc, #20]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000
 8002f94:	20000000 	.word	0x20000000
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e3ca      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b97      	ldr	r3, [pc, #604]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b94      	ldr	r3, [pc, #592]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80e4 	beq.w	8003198 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4a>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f040 808b 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 8087 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fe6:	4b89      	ldr	r3, [pc, #548]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e3a2      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	4b82      	ldr	r3, [pc, #520]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCC_OscConfig+0x7c>
 800300e:	4b7f      	ldr	r3, [pc, #508]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003016:	e005      	b.n	8003024 <HAL_RCC_OscConfig+0x88>
 8003018:	4b7c      	ldr	r3, [pc, #496]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	4293      	cmp	r3, r2
 8003026:	d223      	bcs.n	8003070 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd1d 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e383      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b73      	ldr	r3, [pc, #460]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a72      	ldr	r2, [pc, #456]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b70      	ldr	r3, [pc, #448]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	496d      	ldr	r1, [pc, #436]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4968      	ldr	r1, [pc, #416]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	e025      	b.n	80030bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003070:	4b66      	ldr	r3, [pc, #408]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a65      	ldr	r2, [pc, #404]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b63      	ldr	r3, [pc, #396]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4960      	ldr	r1, [pc, #384]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308e:	4b5f      	ldr	r3, [pc, #380]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	495b      	ldr	r1, [pc, #364]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fcdd 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e343      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030bc:	f000 fc4a 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b52      	ldr	r3, [pc, #328]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	4950      	ldr	r1, [pc, #320]	@ (8003210 <HAL_RCC_OscConfig+0x274>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003214 <HAL_RCC_OscConfig+0x278>)
 80030da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCC_OscConfig+0x27c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fa89 	bl	80005f8 <HAL_InitTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d052      	beq.n	8003196 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	e327      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d032      	beq.n	8003162 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030fc:	4b43      	ldr	r3, [pc, #268]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a42      	ldr	r2, [pc, #264]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003108:	f7fd fac6 	bl	8000698 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003110:	f7fd fac2 	bl	8000698 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e310      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003122:	4b3a      	ldr	r3, [pc, #232]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	4b37      	ldr	r3, [pc, #220]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a36      	ldr	r2, [pc, #216]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4931      	ldr	r1, [pc, #196]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314c:	4b2f      	ldr	r3, [pc, #188]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	492c      	ldr	r1, [pc, #176]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	e01a      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003162:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a29      	ldr	r2, [pc, #164]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800316e:	f7fd fa93 	bl	8000698 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003176:	f7fd fa8f 	bl	8000698 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e2dd      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003188:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x1da>
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003196:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d074      	beq.n	800328e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x21a>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d10e      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d10b      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b6:	4b15      	ldr	r3, [pc, #84]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d064      	beq.n	800328c <HAL_RCC_OscConfig+0x2f0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d160      	bne.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e2ba      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x24a>
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e026      	b.n	8003234 <HAL_RCC_OscConfig+0x298>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ee:	d115      	bne.n	800321c <HAL_RCC_OscConfig+0x280>
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a05      	ldr	r2, [pc, #20]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a02      	ldr	r2, [pc, #8]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e014      	b.n	8003234 <HAL_RCC_OscConfig+0x298>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	08003b9c 	.word	0x08003b9c
 8003214:	20000000 	.word	0x20000000
 8003218:	20000004 	.word	0x20000004
 800321c:	4ba0      	ldr	r3, [pc, #640]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a9f      	ldr	r2, [pc, #636]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b9d      	ldr	r3, [pc, #628]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a9c      	ldr	r2, [pc, #624]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fd fa2c 	bl	8000698 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fd fa28 	bl	8000698 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e276      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003256:	4b92      	ldr	r3, [pc, #584]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x2a8>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd fa18 	bl	8000698 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fd fa14 	bl	8000698 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e262      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327e:	4b88      	ldr	r3, [pc, #544]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x2d0>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d060      	beq.n	800335c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d005      	beq.n	80032ac <HAL_RCC_OscConfig+0x310>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d119      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d116      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ac:	4b7c      	ldr	r3, [pc, #496]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x328>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e23f      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b76      	ldr	r3, [pc, #472]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	4973      	ldr	r1, [pc, #460]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d8:	e040      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d023      	beq.n	800332a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e2:	4b6f      	ldr	r3, [pc, #444]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fd f9d3 	bl	8000698 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fd f9cf 	bl	8000698 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e21d      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003308:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	495f      	ldr	r1, [pc, #380]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
 8003328:	e018      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b5d      	ldr	r3, [pc, #372]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fd f9af 	bl	8000698 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7fd f9ab 	bl	8000698 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1f9      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003350:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d03c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01c      	beq.n	80033aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003370:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003376:	4a4a      	ldr	r2, [pc, #296]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fd f98a 	bl	8000698 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7fd f986 	bl	8000698 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1d4      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339a:	4b41      	ldr	r3, [pc, #260]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ef      	beq.n	8003388 <HAL_RCC_OscConfig+0x3ec>
 80033a8:	e01b      	b.n	80033e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b3d      	ldr	r3, [pc, #244]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b0:	4a3b      	ldr	r2, [pc, #236]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fd f96d 	bl	8000698 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fd f969 	bl	8000698 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1b7      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ef      	bne.n	80033c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a6 	beq.w	800353c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	@ 0x58
 800340c:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d118      	bne.n	800345a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003428:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003434:	f7fd f930 	bl	8000698 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fd f92c 	bl	8000698 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e17a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d108      	bne.n	8003474 <HAL_RCC_OscConfig+0x4d8>
 8003462:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	4a0d      	ldr	r2, [pc, #52]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003472:	e029      	b.n	80034c8 <HAL_RCC_OscConfig+0x52c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_OscConfig+0x50c>
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	4a07      	ldr	r2, [pc, #28]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	4a03      	ldr	r2, [pc, #12]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x52c>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
 80034a8:	4b9c      	ldr	r3, [pc, #624]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a9b      	ldr	r2, [pc, #620]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b8:	4b98      	ldr	r3, [pc, #608]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	4a97      	ldr	r2, [pc, #604]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd f8e2 	bl	8000698 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd f8de 	bl	8000698 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e12a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	4b8b      	ldr	r3, [pc, #556]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ed      	beq.n	80034d8 <HAL_RCC_OscConfig+0x53c>
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fd f8cb 	bl	8000698 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fd f8c7 	bl	8000698 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e113      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800351c:	4b7f      	ldr	r3, [pc, #508]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ed      	bne.n	8003506 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352a:	7ffb      	ldrb	r3, [r7, #31]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b7a      	ldr	r3, [pc, #488]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	4a79      	ldr	r2, [pc, #484]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80fe 	beq.w	8003742 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	2b02      	cmp	r3, #2
 800354c:	f040 80d0 	bne.w	80036f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003550:	4b72      	ldr	r3, [pc, #456]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	429a      	cmp	r2, r3
 8003562:	d130      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	3b01      	subs	r3, #1
 8003570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d127      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11f      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003590:	2a07      	cmp	r2, #7
 8003592:	bf14      	ite	ne
 8003594:	2201      	movne	r2, #1
 8003596:	2200      	moveq	r2, #0
 8003598:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d06e      	beq.n	80036a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d069      	beq.n	80036a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035d8:	4b50      	ldr	r3, [pc, #320]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0ad      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035e8:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f4:	f7fd f850 	bl	8000698 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd f84c 	bl	8000698 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e09a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361a:	4b40      	ldr	r3, [pc, #256]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_RCC_OscConfig+0x784>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800362a:	3a01      	subs	r2, #1
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003634:	0212      	lsls	r2, r2, #8
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0552      	lsls	r2, r2, #21
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003648:	0852      	lsrs	r2, r2, #1
 800364a:	3a01      	subs	r2, #1
 800364c:	0652      	lsls	r2, r2, #25
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003654:	0912      	lsrs	r2, r2, #4
 8003656:	0452      	lsls	r2, r2, #17
 8003658:	430a      	orrs	r2, r1
 800365a:	4930      	ldr	r1, [pc, #192]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003660:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2d      	ldr	r2, [pc, #180]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a2a      	ldr	r2, [pc, #168]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003678:	f7fd f80e 	bl	8000698 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd f80a 	bl	8000698 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e058      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	4b22      	ldr	r3, [pc, #136]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369e:	e050      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e04f      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d148      	bne.n	8003742 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036bc:	4b17      	ldr	r3, [pc, #92]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c8:	f7fc ffe6 	bl	8000698 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fc ffe2 	bl	8000698 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e030      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x734>
 80036ee:	e028      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d023      	beq.n	800373e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a08      	ldr	r2, [pc, #32]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fc ffc9 	bl	8000698 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	e00c      	b.n	8003724 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fc ffc5 	bl	8000698 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d905      	bls.n	8003724 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e013      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
 800371c:	40021000 	.word	0x40021000
 8003720:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ec      	bne.n	800370a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4905      	ldr	r1, [pc, #20]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003736:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_RCC_OscConfig+0x7b4>)
 8003738:	4013      	ands	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
 800373c:	e001      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	feeefffc 	.word	0xfeeefffc

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0e7      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d910      	bls.n	8003798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b72      	ldr	r3, [pc, #456]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4970      	ldr	r1, [pc, #448]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b6e      	ldr	r3, [pc, #440]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0cf      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d908      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4960      	ldr	r1, [pc, #384]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04c      	beq.n	800386c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d121      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0a6      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	4b54      	ldr	r3, [pc, #336]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d115      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e09a      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380a:	4b4e      	ldr	r3, [pc, #312]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e08e      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e086      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b46      	ldr	r3, [pc, #280]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4943      	ldr	r1, [pc, #268]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fc ff2c 	bl	8000698 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fc ff28 	bl	8000698 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e06e      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b3a      	ldr	r3, [pc, #232]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003884:	429a      	cmp	r2, r3
 8003886:	d208      	bcs.n	800389a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b2e      	ldr	r3, [pc, #184]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	492b      	ldr	r1, [pc, #172]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389a:	4b29      	ldr	r3, [pc, #164]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d210      	bcs.n	80038ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a8:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 0207 	bic.w	r2, r3, #7
 80038b0:	4923      	ldr	r1, [pc, #140]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b8:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e036      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4918      	ldr	r1, [pc, #96]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4910      	ldr	r1, [pc, #64]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003908:	f000 f824 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	490b      	ldr	r1, [pc, #44]	@ (8003948 <HAL_RCC_ClockConfig+0x1f4>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	4a09      	ldr	r2, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1fc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fe63 	bl	80005f8 <HAL_InitTick>
 8003932:	4603      	mov	r3, r0
 8003934:	72fb      	strb	r3, [r7, #11]

  return status;
 8003936:	7afb      	ldrb	r3, [r7, #11]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40022000 	.word	0x40022000
 8003944:	40021000 	.word	0x40021000
 8003948:	08003b9c 	.word	0x08003b9c
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	@ 0x24
 8003958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003962:	4b3e      	ldr	r3, [pc, #248]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800396c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x34>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d121      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d11e      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003988:	4b34      	ldr	r3, [pc, #208]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003994:	4b31      	ldr	r3, [pc, #196]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d102      	bne.n	80039d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039cc:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e004      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039d8:	4b23      	ldr	r3, [pc, #140]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80039da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d134      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0xa6>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d003      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xac>
 80039f8:	e005      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80039fc:	617b      	str	r3, [r7, #20]
      break;
 80039fe:	e005      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a02:	617b      	str	r3, [r7, #20]
      break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	617b      	str	r3, [r7, #20]
      break;
 8003a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	3301      	adds	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	fb03 f202 	mul.w	r2, r3, r2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	0e5b      	lsrs	r3, r3, #25
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	@ 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	08003bac 	.word	0x08003bac
 8003a64:	00f42400 	.word	0x00f42400
 8003a68:	007a1200 	.word	0x007a1200

08003a6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a78:	4b2a      	ldr	r3, [pc, #168]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a84:	f7ff fa26 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003a88:	6178      	str	r0, [r7, #20]
 8003a8a:	e014      	b.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b25      	ldr	r3, [pc, #148]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a90:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a98:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa4:	f7ff fa16 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003aa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	4a1d      	ldr	r2, [pc, #116]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003abc:	d10b      	bne.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b80      	cmp	r3, #128	@ 0x80
 8003ac2:	d919      	bls.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ac8:	d902      	bls.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aca:	2302      	movs	r3, #2
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	e013      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e010      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b80      	cmp	r3, #128	@ 0x80
 8003ada:	d902      	bls.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003adc:	2303      	movs	r3, #3
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e00a      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	@ 0x80
 8003ae6:	d102      	bne.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ae8:	2302      	movs	r3, #2
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e004      	b.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b70      	cmp	r3, #112	@ 0x70
 8003af2:	d101      	bne.n	8003af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af4:	2301      	movs	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 0207 	bic.w	r2, r3, #7
 8003b00:	4909      	ldr	r1, [pc, #36]	@ (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b08:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d001      	beq.n	8003b1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40022000 	.word	0x40022000

08003b2c <memset>:
 8003b2c:	4402      	add	r2, r0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d100      	bne.n	8003b36 <memset+0xa>
 8003b34:	4770      	bx	lr
 8003b36:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3a:	e7f9      	b.n	8003b30 <memset+0x4>

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b74 <__libc_init_array+0x38>)
 8003b40:	4c0d      	ldr	r4, [pc, #52]	@ (8003b78 <__libc_init_array+0x3c>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	2600      	movs	r6, #0
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b7c <__libc_init_array+0x40>)
 8003b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b80 <__libc_init_array+0x44>)
 8003b50:	f000 f818 	bl	8003b84 <_init>
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2600      	movs	r6, #0
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08003bdc 	.word	0x08003bdc
 8003b78:	08003bdc 	.word	0x08003bdc
 8003b7c:	08003bdc 	.word	0x08003bdc
 8003b80:	08003be0 	.word	0x08003be0

08003b84 <_init>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr

08003b90 <_fini>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr
