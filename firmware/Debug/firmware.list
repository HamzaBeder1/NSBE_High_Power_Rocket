
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800512c  0800512c  0000612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800516c  0800516c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  0800516c  0800516c  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800516c  0800516c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800516c  0800516c  0000616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005170  08005170  00006170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005174  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08005180  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08005180  00007138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abc7  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  00011c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00013c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000812  00000000  00000000  000146d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253a2  00000000  00000000  00014eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd79  00000000  00000000  0003a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1df8  00000000  00000000  00048005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  00129e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0012c90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005114 	.word	0x08005114

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005114 	.word	0x08005114

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <get_bmp_calibration_data>:
int32_t bmpUP;
int32_t bmpB5;
int32_t bmpT;
int32_t bmpP;

void get_bmp_calibration_data(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	readRegister(BMP180_ADDR, AC1_H, calibration_data, 22);
 80007e8:	2316      	movs	r3, #22
 80007ea:	4a03      	ldr	r2, [pc, #12]	@ (80007f8 <get_bmp_calibration_data+0x14>)
 80007ec:	21aa      	movs	r1, #170	@ 0xaa
 80007ee:	2077      	movs	r0, #119	@ 0x77
 80007f0:	f000 f8d6 	bl	80009a0 <readRegister>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000028 	.word	0x20000028

080007fc <get_bmp_ut>:

void get_bmp_ut(){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	writeRegister(BMP180_ADDR, BMP180_CTRL_MEAS, 0x2E);
 8000802:	222e      	movs	r2, #46	@ 0x2e
 8000804:	21f4      	movs	r1, #244	@ 0xf4
 8000806:	2077      	movs	r0, #119	@ 0x77
 8000808:	f000 f8a0 	bl	800094c <writeRegister>
	HAL_Delay(5);
 800080c:	2005      	movs	r0, #5
 800080e:	f000 fc49 	bl	80010a4 <HAL_Delay>
	uint8_t data[2];
	readRegister(BMP180_ADDR, BMP180_OUT_MSB, data, 2);
 8000812:	463a      	mov	r2, r7
 8000814:	2302      	movs	r3, #2
 8000816:	21f6      	movs	r1, #246	@ 0xf6
 8000818:	2077      	movs	r0, #119	@ 0x77
 800081a:	f000 f8c1 	bl	80009a0 <readRegister>
	bmpUT = (data[0] << 8) | data[1];
 800081e:	783b      	ldrb	r3, [r7, #0]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	787a      	ldrb	r2, [r7, #1]
 8000824:	4313      	orrs	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <get_bmp_ut+0x40>)
 8000828:	6013      	str	r3, [r2, #0]
	int x = 21;
 800082a:	2315      	movs	r3, #21
 800082c:	607b      	str	r3, [r7, #4]
	x+=1;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000040 	.word	0x20000040

08000840 <get_bmp_t>:
	uint8_t data[3];
	readRegister(BMP180_ADDR, BMP180_OUT_MSB, data, 3);
	bmpUP = ((data[0] << 16) | (data[1] << 8) | (data[2])) >> (8-OSS_BMP180);
}

void get_bmp_t(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
	get_bmp_calibration_data();
 8000846:	f7ff ffcd 	bl	80007e4 <get_bmp_calibration_data>
	get_bmp_ut();
 800084a:	f7ff ffd7 	bl	80007fc <get_bmp_ut>
	uint16_t AC6 = (calibration_data[10] << 8) | calibration_data[11];
 800084e:	4b3a      	ldr	r3, [pc, #232]	@ (8000938 <get_bmp_t+0xf8>)
 8000850:	7a9b      	ldrb	r3, [r3, #10]
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b21a      	sxth	r2, r3
 8000856:	4b38      	ldr	r3, [pc, #224]	@ (8000938 <get_bmp_t+0xf8>)
 8000858:	7adb      	ldrb	r3, [r3, #11]
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21b      	sxth	r3, r3
 8000860:	82fb      	strh	r3, [r7, #22]
	uint16_t AC5 = (calibration_data[8] << 8) | calibration_data[9];
 8000862:	4b35      	ldr	r3, [pc, #212]	@ (8000938 <get_bmp_t+0xf8>)
 8000864:	7a1b      	ldrb	r3, [r3, #8]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b21a      	sxth	r2, r3
 800086a:	4b33      	ldr	r3, [pc, #204]	@ (8000938 <get_bmp_t+0xf8>)
 800086c:	7a5b      	ldrb	r3, [r3, #9]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21b      	sxth	r3, r3
 8000874:	82bb      	strh	r3, [r7, #20]
	int16_t MC = (calibration_data[18] << 8) | calibration_data[19];
 8000876:	4b30      	ldr	r3, [pc, #192]	@ (8000938 <get_bmp_t+0xf8>)
 8000878:	7c9b      	ldrb	r3, [r3, #18]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <get_bmp_t+0xf8>)
 8000880:	7cdb      	ldrb	r3, [r3, #19]
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	827b      	strh	r3, [r7, #18]
	int16_t MD = (calibration_data[20] << 8) | calibration_data[21];
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <get_bmp_t+0xf8>)
 800088a:	7d1b      	ldrb	r3, [r3, #20]
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b21a      	sxth	r2, r3
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <get_bmp_t+0xf8>)
 8000892:	7d5b      	ldrb	r3, [r3, #21]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	823b      	strh	r3, [r7, #16]
	int32_t X1 = ((bmpUT - (int32_t)AC6)*(int32_t)AC5) >> 15;
 800089a:	4b28      	ldr	r3, [pc, #160]	@ (800093c <get_bmp_t+0xfc>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	8aba      	ldrh	r2, [r7, #20]
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	13db      	asrs	r3, r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
	int32_t X2 = ((int32_t)MC<<11)/(X1+(int32_t)MD);
 80008ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008b0:	02da      	lsls	r2, r3, #11
 80008b2:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	440b      	add	r3, r1
 80008ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80008be:	60bb      	str	r3, [r7, #8]
	int32_t B5 = X1 + X2;
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	4413      	add	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
	bmpT = (B5+8) >> 4;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3308      	adds	r3, #8
 80008cc:	111b      	asrs	r3, r3, #4
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <get_bmp_t+0x100>)
 80008d0:	6013      	str	r3, [r2, #0]
	bmpT /= 10;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <get_bmp_t+0x100>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <get_bmp_t+0x104>)
 80008d8:	fb82 1203 	smull	r1, r2, r2, r3
 80008dc:	1092      	asrs	r2, r2, #2
 80008de:	17db      	asrs	r3, r3, #31
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <get_bmp_t+0x100>)
 80008e4:	6013      	str	r3, [r2, #0]
	bmpT = (9.0/5.0)*(bmpT)+32;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <get_bmp_t+0x100>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fee8 	bl	80006c0 <__aeabi_i2d>
 80008f0:	a30f      	add	r3, pc, #60	@ (adr r3, 8000930 <get_bmp_t+0xf0>)
 80008f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f6:	f7ff fc67 	bl	80001c8 <__aeabi_dmul>
 80008fa:	4602      	mov	r2, r0
 80008fc:	460b      	mov	r3, r1
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 0200 	mov.w	r2, #0
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <get_bmp_t+0x108>)
 8000908:	f7ff fd8e 	bl	8000428 <__adddf3>
 800090c:	4602      	mov	r2, r0
 800090e:	460b      	mov	r3, r1
 8000910:	4610      	mov	r0, r2
 8000912:	4619      	mov	r1, r3
 8000914:	f7ff ff3e 	bl	8000794 <__aeabi_d2iz>
 8000918:	4603      	mov	r3, r0
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <get_bmp_t+0x100>)
 800091c:	6013      	str	r3, [r2, #0]
	int x = 21;
 800091e:	2315      	movs	r3, #21
 8000920:	603b      	str	r3, [r7, #0]
	x+=1;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	603b      	str	r3, [r7, #0]
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	cccccccd 	.word	0xcccccccd
 8000934:	3ffccccc 	.word	0x3ffccccc
 8000938:	20000028 	.word	0x20000028
 800093c:	20000040 	.word	0x20000040
 8000940:	20000044 	.word	0x20000044
 8000944:	66666667 	.word	0x66666667
 8000948:	40400000 	.word	0x40400000

0800094c <writeRegister>:

bool sensorReady = 0;
bool transmitterReady = 0;
I2C_HandleTypeDef hI2C;

void writeRegister(uint8_t addr, uint8_t regAddr, uint8_t value){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	460b      	mov	r3, r1
 8000958:	71bb      	strb	r3, [r7, #6]
 800095a:	4613      	mov	r3, r2
 800095c:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {regAddr, value};
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	733b      	strb	r3, [r7, #12]
 8000962:	797b      	ldrb	r3, [r7, #5]
 8000964:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 2);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	b29b      	uxth	r3, r3
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	b299      	uxth	r1, r3
 800096e:	f107 020c 	add.w	r2, r7, #12
 8000972:	2302      	movs	r3, #2
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <writeRegister+0x4c>)
 8000976:	f001 f957 	bl	8001c28 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 800097a:	bf00      	nop
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <writeRegister+0x50>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1f8      	bne.n	800097c <writeRegister+0x30>
	sensorReady = 0;
 800098a:	4b04      	ldr	r3, [pc, #16]	@ (800099c <writeRegister+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000004c 	.word	0x2000004c
 800099c:	20000048 	.word	0x20000048

080009a0 <readRegister>:

void readRegister(uint8_t addr, uint8_t regAddr, uint8_t *result, uint16_t size){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	603a      	str	r2, [r7, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	460b      	mov	r3, r1
 80009b0:	71bb      	strb	r3, [r7, #6]
 80009b2:	4613      	mov	r3, r2
 80009b4:	80bb      	strh	r3, [r7, #4]
	uint8_t data[1] = {regAddr};
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 1);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	b299      	uxth	r1, r3
 80009c2:	f107 020c 	add.w	r2, r7, #12
 80009c6:	2301      	movs	r3, #1
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <readRegister+0x7c>)
 80009ca:	f001 f92d 	bl	8001c28 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 80009ce:	bf00      	nop
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <readRegister+0x80>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	f083 0301 	eor.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f8      	bne.n	80009d0 <readRegister+0x30>
	sensorReady = 0;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <readRegister+0x80>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_DMA(&hI2C, (addr << 1) | (0x01), result, size);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	b299      	uxth	r1, r3
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <readRegister+0x7c>)
 80009f8:	f001 fa2a 	bl	8001e50 <HAL_I2C_Master_Receive_DMA>
	while(!transmitterReady);
 80009fc:	bf00      	nop
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <readRegister+0x84>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f083 0301 	eor.w	r3, r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f8      	bne.n	80009fe <readRegister+0x5e>
	transmitterReady = 0;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <readRegister+0x84>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000004c 	.word	0x2000004c
 8000a20:	20000048 	.word	0x20000048
 8000a24:	20000049 	.word	0x20000049

08000a28 <I2C_Init>:

//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <I2C_Init+0x78>)
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <I2C_Init+0x7c>)
 8000a30:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <I2C_Init+0x78>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <I2C_Init+0x78>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <I2C_Init+0x78>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <I2C_Init+0x78>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <I2C_Init+0x78>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <I2C_Init+0x78>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <I2C_Init+0x78>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <I2C_Init+0x78>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <I2C_Init+0x78>)
 8000a64:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <I2C_Init+0x80>)
 8000a66:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <I2C_Init+0x78>)
 8000a6a:	f001 f841 	bl	8001af0 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <I2C_Init+0x50>
	{
		Error_Handler();
 8000a74:	f000 f8d4 	bl	8000c20 <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <I2C_Init+0x78>)
 8000a7c:	f002 ff9e 	bl	80039bc <HAL_I2CEx_ConfigAnalogFilter>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <I2C_Init+0x62>
	{
		Error_Handler();
 8000a86:	f000 f8cb 	bl	8000c20 <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <I2C_Init+0x78>)
 8000a8e:	f002 ffe0 	bl	8003a52 <HAL_I2CEx_ConfigDigitalFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <I2C_Init+0x74>
    {
    	Error_Handler();
 8000a98:	f000 f8c2 	bl	8000c20 <Error_Handler>
    }
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000004c 	.word	0x2000004c
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	00100d14 	.word	0x00100d14

08000aac <HAL_I2C_ErrorCallback>:

#define BUFFERSIZE 100
#define DS3231ADDR = 0b1101000


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2CHandle){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d102      	bne.n	8000ad8 <HAL_I2C_MasterTxCpltCallback+0x18>
		sensorReady = 1;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	20000048 	.word	0x20000048

08000aec <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2CHandle){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d102      	bne.n	8000b04 <HAL_I2C_MasterRxCpltCallback+0x18>
		transmitterReady = 1;
 8000afe:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
	}
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40005400 	.word	0x40005400
 8000b14:	20000049 	.word	0x20000049

08000b18 <main>:


int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b1e:	f000 fa4c 	bl	8000fba <HAL_Init>
  SystemClock_Config();
 8000b22:	f000 f810 	bl	8000b46 <SystemClock_Config>
  DMA_Init();
 8000b26:	f000 f855 	bl	8000bd4 <DMA_Init>
  I2C_Init();
 8000b2a:	f7ff ff7d 	bl	8000a28 <I2C_Init>

  uint8_t result[1];
  initMPU6050(0);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f87c 	bl	8000c2c <initMPU6050>
  while (1)
  {
	  //getAccelMPU6050();
	  get_bmp_t();
 8000b34:	f7ff fe84 	bl	8000840 <get_bmp_t>
	  int x = 21;
 8000b38:	2315      	movs	r3, #21
 8000b3a:	607b      	str	r3, [r7, #4]
	  x+=1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
  {
 8000b42:	bf00      	nop
 8000b44:	e7f6      	b.n	8000b34 <main+0x1c>

08000b46 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b096      	sub	sp, #88	@ 0x58
 8000b4a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2244      	movs	r2, #68	@ 0x44
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fab1 	bl	80050bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b68:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b6c:	f002 ffcc 	bl	8003b08 <HAL_PWREx_ControlVoltageScaling>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b76:	f000 f853 	bl	8000c20 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b86:	2360      	movs	r3, #96	@ 0x60
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 f80e 	bl	8003bb4 <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b9e:	f000 f83f 	bl	8000c20 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fbd6 	bl	800436c <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bc6:	f000 f82b 	bl	8000c20 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3758      	adds	r7, #88	@ 0x58
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <DMA_Init>:


//PB6 = SCL1, PB7 = SDA1


void DMA_Init(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <DMA_Init+0x48>)
 8000bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <DMA_Init+0x48>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <DMA_Init+0x48>)
 8000be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2010      	movs	r0, #16
 8000bf8:	f000 fb53 	bl	80012a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bfc:	2010      	movs	r0, #16
 8000bfe:	f000 fb6c 	bl	80012da <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2011      	movs	r0, #17
 8000c08:	f000 fb4b 	bl	80012a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f000 fb64 	bl	80012da <HAL_NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <Error_Handler>:
}



void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <initMPU6050>:
float accelX;
float accelY;
float accelZ;


void initMPU6050(unsigned char AFS_SEL){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	switch(AFS_SEL){
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d818      	bhi.n	8000c6e <initMPU6050+0x42>
 8000c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c44 <initMPU6050+0x18>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000c5d 	.word	0x08000c5d
 8000c4c:	08000c63 	.word	0x08000c63
 8000c50:	08000c69 	.word	0x08000c69
	case RANGE_2G:
		step = 0.00059877;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <initMPU6050+0x8c>)
 8000c56:	4a19      	ldr	r2, [pc, #100]	@ (8000cbc <initMPU6050+0x90>)
 8000c58:	601a      	str	r2, [r3, #0]
		break;
 8000c5a:	e009      	b.n	8000c70 <initMPU6050+0x44>
	case RANGE_4G:
		step = 0.00119;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <initMPU6050+0x8c>)
 8000c5e:	4a18      	ldr	r2, [pc, #96]	@ (8000cc0 <initMPU6050+0x94>)
 8000c60:	601a      	str	r2, [r3, #0]
	case RANGE_8G:
		step = 0.002395;
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <initMPU6050+0x8c>)
 8000c64:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <initMPU6050+0x98>)
 8000c66:	601a      	str	r2, [r3, #0]
	case RANGE_16G:
		step = 0.00479;
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <initMPU6050+0x8c>)
 8000c6a:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <initMPU6050+0x9c>)
 8000c6c:	601a      	str	r2, [r3, #0]
	default:
		break;
 8000c6e:	bf00      	nop
	}
	writeRegister(MPU6050ADDR, PWR_MGMT_1, 0x00);
 8000c70:	2200      	movs	r2, #0
 8000c72:	216b      	movs	r1, #107	@ 0x6b
 8000c74:	2069      	movs	r0, #105	@ 0x69
 8000c76:	f7ff fe69 	bl	800094c <writeRegister>
	uint8_t temp[1];
	readRegister(MPU6050ADDR, ACCEL_CONFIG, temp, 1);
 8000c7a:	f107 020c 	add.w	r2, r7, #12
 8000c7e:	2301      	movs	r3, #1
 8000c80:	211c      	movs	r1, #28
 8000c82:	2069      	movs	r0, #105	@ 0x69
 8000c84:	f7ff fe8c 	bl	80009a0 <readRegister>
	temp[1] &= 0b11100111;
 8000c88:	7b7b      	ldrb	r3, [r7, #13]
 8000c8a:	f023 0318 	bic.w	r3, r3, #24
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	737b      	strb	r3, [r7, #13]
	temp[1] |= (AFS_SEL << 3);
 8000c92:	7b7b      	ldrb	r3, [r7, #13]
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	737b      	strb	r3, [r7, #13]
	writeRegister(MPU6050ADDR, ACCEL_CONFIG, temp[1]);
 8000ca4:	7b7b      	ldrb	r3, [r7, #13]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	211c      	movs	r1, #28
 8000caa:	2069      	movs	r0, #105	@ 0x69
 8000cac:	f7ff fe4e 	bl	800094c <writeRegister>
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000130 	.word	0x20000130
 8000cbc:	3a1cf6c6 	.word	0x3a1cf6c6
 8000cc0:	3a9bf9c6 	.word	0x3a9bf9c6
 8000cc4:	3b1cf56f 	.word	0x3b1cf56f
 8000cc8:	3b9cf56f 	.word	0x3b9cf56f

08000ccc <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_MspInit+0x44>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0ac      	sub	sp, #176	@ 0xb0
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000d1c:	4b57      	ldr	r3, [pc, #348]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d20:	4a56      	ldr	r2, [pc, #344]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d28:	4b54      	ldr	r3, [pc, #336]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b51      	ldr	r3, [pc, #324]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a50      	ldr	r2, [pc, #320]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d40:	4b4e      	ldr	r3, [pc, #312]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d50:	2288      	movs	r2, #136	@ 0x88
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 f9b1 	bl	80050bc <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d5a:	2340      	movs	r3, #64	@ 0x40
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fcec 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 8000d72:	f7ff ff55 	bl	8000c20 <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000d76:	23c0      	movs	r3, #192	@ 0xc0
 8000d78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d86:	2304      	movs	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 8000d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b39      	ldr	r3, [pc, #228]	@ (8000e7c <HAL_I2C_MspInit+0x168>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4835      	ldr	r0, [pc, #212]	@ (8000e80 <HAL_I2C_MspInit+0x16c>)
 8000daa:	f000 fcf7 	bl	800179c <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000dae:	4b35      	ldr	r3, [pc, #212]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000db0:	4a35      	ldr	r2, [pc, #212]	@ (8000e88 <HAL_I2C_MspInit+0x174>)
 8000db2:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000db4:	4b33      	ldr	r3, [pc, #204]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dba:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dde:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 8000de4:	4827      	ldr	r0, [pc, #156]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000de6:	f000 fa93 	bl	8001310 <HAL_DMA_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000df0:	f7ff ff16 	bl	8000c20 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000df8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dfa:	4a22      	ldr	r2, [pc, #136]	@ (8000e84 <HAL_I2C_MspInit+0x170>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e02:	4a23      	ldr	r2, [pc, #140]	@ (8000e90 <HAL_I2C_MspInit+0x17c>)
 8000e04:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e08:	2203      	movs	r2, #3
 8000e0a:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e1a:	2280      	movs	r2, #128	@ 0x80
 8000e1c:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 8000e36:	4815      	ldr	r0, [pc, #84]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e38:	f000 fa6a 	bl	8001310 <HAL_DMA_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_I2C_MspInit+0x132>
		Error_Handler();
 8000e42:	f7ff feed 	bl	8000c20 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e8c <HAL_I2C_MspInit+0x178>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	201f      	movs	r0, #31
 8000e58:	f000 fa23 	bl	80012a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e5c:	201f      	movs	r0, #31
 8000e5e:	f000 fa3c 	bl	80012da <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2020      	movs	r0, #32
 8000e68:	f000 fa1b 	bl	80012a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e6c:	2020      	movs	r0, #32
 8000e6e:	f000 fa34 	bl	80012da <HAL_NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	37b0      	adds	r7, #176	@ 0xb0
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48000400 	.word	0x48000400
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	4002006c 	.word	0x4002006c
 8000e8c:	200000e8 	.word	0x200000e8
 8000e90:	40020080 	.word	0x40020080

08000e94 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000eea:	f000 f8bb 	bl	8001064 <HAL_IncTick>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel6_IRQHandler+0x10>)
 8000efa:	f000 fb62 	bl	80015c2 <HAL_DMA_IRQHandler>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000a0 	.word	0x200000a0

08000f08 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <DMA1_Channel7_IRQHandler+0x10>)
 8000f0e:	f000 fb58 	bl	80015c2 <HAL_DMA_IRQHandler>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000e8 	.word	0x200000e8

08000f1c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <I2C1_EV_IRQHandler+0x10>)
 8000f22:	f001 f885 	bl	8002030 <HAL_I2C_EV_IRQHandler>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000004c 	.word	0x2000004c

08000f30 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <I2C1_ER_IRQHandler+0x10>)
 8000f36:	f001 f895 	bl	8002064 <HAL_I2C_ER_IRQHandler>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000004c 	.word	0x2000004c

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f004 f899 	bl	80050cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f9a:	f7ff fdbd 	bl	8000b18 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fac:	08005174 	.word	0x08005174
  ldr r2, =_sbss
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb4:	20000138 	.word	0x20000138

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>

08000fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f961 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f80e 	bl	8000fec <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e001      	b.n	8000fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fdc:	f7ff fe76 	bl	8000ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d023      	beq.n	8001048 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001000:	4b16      	ldr	r3, [pc, #88]	@ (800105c <HAL_InitTick+0x70>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_InitTick+0x6c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f96d 	bl	80012f6 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10f      	bne.n	8001042 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d809      	bhi.n	800103c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f937 	bl	80012a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_InitTick+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e007      	b.n	800104c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000134 	.word	0x20000134

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000134 	.word	0x20000134

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e098      	b.n	8001454 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b4d      	ldr	r3, [pc, #308]	@ (8001460 <HAL_DMA_Init+0x150>)
 800132a:	429a      	cmp	r2, r3
 800132c:	d80f      	bhi.n	800134e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b4b      	ldr	r3, [pc, #300]	@ (8001464 <HAL_DMA_Init+0x154>)
 8001336:	4413      	add	r3, r2
 8001338:	4a4b      	ldr	r2, [pc, #300]	@ (8001468 <HAL_DMA_Init+0x158>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	009a      	lsls	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a48      	ldr	r2, [pc, #288]	@ (800146c <HAL_DMA_Init+0x15c>)
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
 800134c:	e00e      	b.n	800136c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <HAL_DMA_Init+0x160>)
 8001356:	4413      	add	r3, r2
 8001358:	4a43      	ldr	r2, [pc, #268]	@ (8001468 <HAL_DMA_Init+0x158>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	009a      	lsls	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a42      	ldr	r2, [pc, #264]	@ (8001474 <HAL_DMA_Init+0x164>)
 800136a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013c6:	d039      	beq.n	800143c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	4a27      	ldr	r2, [pc, #156]	@ (800146c <HAL_DMA_Init+0x15c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11a      	bne.n	8001408 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013d2:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <HAL_DMA_Init+0x168>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f003 031c 	and.w	r3, r3, #28
 80013de:	210f      	movs	r1, #15
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4924      	ldr	r1, [pc, #144]	@ (8001478 <HAL_DMA_Init+0x168>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <HAL_DMA_Init+0x168>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f8:	f003 031c 	and.w	r3, r3, #28
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	491d      	ldr	r1, [pc, #116]	@ (8001478 <HAL_DMA_Init+0x168>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
 8001406:	e019      	b.n	800143c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <HAL_DMA_Init+0x16c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	f003 031c 	and.w	r3, r3, #28
 8001414:	210f      	movs	r1, #15
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	4917      	ldr	r1, [pc, #92]	@ (800147c <HAL_DMA_Init+0x16c>)
 800141e:	4013      	ands	r3, r2
 8001420:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_DMA_Init+0x16c>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f003 031c 	and.w	r3, r3, #28
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	4911      	ldr	r1, [pc, #68]	@ (800147c <HAL_DMA_Init+0x16c>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40020407 	.word	0x40020407
 8001464:	bffdfff8 	.word	0xbffdfff8
 8001468:	cccccccd 	.word	0xcccccccd
 800146c:	40020000 	.word	0x40020000
 8001470:	bffdfbf8 	.word	0xbffdfbf8
 8001474:	40020400 	.word	0x40020400
 8001478:	400200a8 	.word	0x400200a8
 800147c:	400204a8 	.word	0x400204a8

08001480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_DMA_Start_IT+0x20>
 800149c:	2302      	movs	r3, #2
 800149e:	e04b      	b.n	8001538 <HAL_DMA_Start_IT+0xb8>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d13a      	bne.n	800152a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f92f 	bl	800173c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 020e 	orr.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e00f      	b.n	8001518 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0204 	bic.w	r2, r2, #4
 8001506:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 020a 	orr.w	r2, r2, #10
 8001516:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e005      	b.n	8001536 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001532:	2302      	movs	r3, #2
 8001534:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d005      	beq.n	8001564 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e029      	b.n	80015b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020e 	bic.w	r2, r2, #14
 8001572:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001588:	f003 021c 	and.w	r2, r3, #28
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
    }
  }
  return status;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f003 031c 	and.w	r3, r3, #28
 80015e2:	2204      	movs	r2, #4
 80015e4:	409a      	lsls	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d026      	beq.n	800163c <HAL_DMA_IRQHandler+0x7a>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d021      	beq.n	800163c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0204 	bic.w	r2, r2, #4
 8001614:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f003 021c 	and.w	r2, r3, #28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	2104      	movs	r1, #4
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	2b00      	cmp	r3, #0
 8001630:	d071      	beq.n	8001716 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800163a:	e06c      	b.n	8001716 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	f003 031c 	and.w	r3, r3, #28
 8001644:	2202      	movs	r2, #2
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d02e      	beq.n	80016ae <HAL_DMA_IRQHandler+0xec>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d029      	beq.n	80016ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 020a 	bic.w	r2, r2, #10
 8001676:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001684:	f003 021c 	and.w	r2, r3, #28
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	2102      	movs	r1, #2
 800168e:	fa01 f202 	lsl.w	r2, r1, r2
 8001692:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d038      	beq.n	8001716 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016ac:	e033      	b.n	8001716 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	f003 031c 	and.w	r3, r3, #28
 80016b6:	2208      	movs	r2, #8
 80016b8:	409a      	lsls	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d02a      	beq.n	8001718 <HAL_DMA_IRQHandler+0x156>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d025      	beq.n	8001718 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 020e 	bic.w	r2, r2, #14
 80016da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e0:	f003 021c 	and.w	r2, r3, #28
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170a:	2b00      	cmp	r3, #0
 800170c:	d004      	beq.n	8001718 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001716:	bf00      	nop
 8001718:	bf00      	nop
}
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f003 021c 	and.w	r2, r3, #28
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d108      	bne.n	8001780 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800177e:	e007      	b.n	8001790 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	60da      	str	r2, [r3, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e17f      	b.n	8001aac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8171 	beq.w	8001aa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d005      	beq.n	80017dc <HAL_GPIO_Init+0x40>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d130      	bne.n	800183e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001812:	2201      	movs	r2, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f003 0201 	and.w	r2, r3, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b03      	cmp	r3, #3
 8001848:	d118      	bne.n	800187c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001850:	2201      	movs	r2, #1
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	f003 0201 	and.w	r2, r3, #1
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b03      	cmp	r3, #3
 8001886:	d017      	beq.n	80018b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	6939      	ldr	r1, [r7, #16]
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80ac 	beq.w	8001aa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	4b5f      	ldr	r3, [pc, #380]	@ (8001acc <HAL_GPIO_Init+0x330>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001952:	4a5e      	ldr	r2, [pc, #376]	@ (8001acc <HAL_GPIO_Init+0x330>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6613      	str	r3, [r2, #96]	@ 0x60
 800195a:	4b5c      	ldr	r3, [pc, #368]	@ (8001acc <HAL_GPIO_Init+0x330>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001966:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001990:	d025      	beq.n	80019de <HAL_GPIO_Init+0x242>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad4 <HAL_GPIO_Init+0x338>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01f      	beq.n	80019da <HAL_GPIO_Init+0x23e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad8 <HAL_GPIO_Init+0x33c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x23a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4d      	ldr	r2, [pc, #308]	@ (8001adc <HAL_GPIO_Init+0x340>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x236>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae0 <HAL_GPIO_Init+0x344>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x232>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae4 <HAL_GPIO_Init+0x348>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x22e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae8 <HAL_GPIO_Init+0x34c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x22a>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00c      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e00a      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x244>
 80019de:	2300      	movs	r3, #0
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f0:	4937      	ldr	r1, [pc, #220]	@ (8001ad0 <HAL_GPIO_Init+0x334>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019fe:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a22:	4a32      	ldr	r2, [pc, #200]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a28:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a4c:	4a27      	ldr	r2, [pc, #156]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a76:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aa0:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <HAL_GPIO_Init+0x350>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f47f ae78 	bne.w	80017ac <HAL_GPIO_Init+0x10>
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	48001400 	.word	0x48001400
 8001ae8:	48001800 	.word	0x48001800
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e08d      	b.n	8001c1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff f8fc 	bl	8000d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	@ 0x24
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e006      	b.n	8001b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d108      	bne.n	8001b92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	e007      	b.n	8001ba2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69d9      	ldr	r1, [r3, #28]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1a      	ldr	r2, [r3, #32]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	461a      	mov	r2, r3
 8001c34:	460b      	mov	r3, r1
 8001c36:	817b      	strh	r3, [r7, #10]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	f040 80ef 	bne.w	8001e2c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c5c:	d101      	bne.n	8001c62 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e0e5      	b.n	8001e2e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_I2C_Master_Transmit_DMA+0x48>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e0de      	b.n	8001e2e <HAL_I2C_Master_Transmit_DMA+0x206>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2221      	movs	r2, #33	@ 0x21
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2210      	movs	r2, #16
 8001c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	893a      	ldrh	r2, [r7, #8]
 8001c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4a66      	ldr	r2, [pc, #408]	@ (8001e38 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8001c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4a66      	ldr	r2, [pc, #408]	@ (8001e3c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2bff      	cmp	r3, #255	@ 0xff
 8001cae:	d906      	bls.n	8001cbe <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	22ff      	movs	r2, #255	@ 0xff
 8001cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001cb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e007      	b.n	8001cce <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ccc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01a      	beq.n	8001d0c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d074      	beq.n	8001dfe <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d022      	beq.n	8001d62 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d20:	4a47      	ldr	r2, [pc, #284]	@ (8001e40 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8001d22:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d28:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8001d2a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d38:	2200      	movs	r2, #0
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001d4c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001d52:	f7ff fb95 	bl	8001480 <HAL_DMA_Start_IT>
 8001d56:	4603      	mov	r3, r0
 8001d58:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d13a      	bne.n	8001dd6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8001d60:	e013      	b.n	8001d8a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e051      	b.n	8001e2e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	8979      	ldrh	r1, [r7, #10]
 8001d96:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f001 fcf9 	bl	8003794 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f001 fd1a 	bl	80037f8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e028      	b.n	8001e28 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e017      	b.n	8001e2e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <HAL_I2C_Master_Transmit_DMA+0x224>)
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f001 fcbe 	bl	8003794 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e20:	2101      	movs	r1, #1
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f001 fce8 	bl	80037f8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	ffff0000 	.word	0xffff0000
 8001e3c:	0800260b 	.word	0x0800260b
 8001e40:	080035e3 	.word	0x080035e3
 8001e44:	0800372b 	.word	0x0800372b
 8001e48:	80002000 	.word	0x80002000
 8001e4c:	080021af 	.word	0x080021af

08001e50 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	817b      	strh	r3, [r7, #10]
 8001e60:	4613      	mov	r3, r2
 8001e62:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	f040 80cd 	bne.w	800200c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	e0c3      	b.n	800200e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2C_Master_Receive_DMA+0x44>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e0bc      	b.n	800200e <HAL_I2C_Master_Receive_DMA+0x1be>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2222      	movs	r2, #34	@ 0x22
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	893a      	ldrh	r2, [r7, #8]
 8001ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a55      	ldr	r2, [pc, #340]	@ (8002018 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8001ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a55      	ldr	r2, [pc, #340]	@ (800201c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8001ec8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2bff      	cmp	r3, #255	@ 0xff
 8001ed2:	d906      	bls.n	8001ee2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001eda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e007      	b.n	8001ef2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001eec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d070      	beq.n	8001fdc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d020      	beq.n	8001f44 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f06:	4a46      	ldr	r2, [pc, #280]	@ (8002020 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8001f08:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	4a45      	ldr	r2, [pc, #276]	@ (8002024 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8001f10:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f16:	2200      	movs	r2, #0
 8001f18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1e:	2200      	movs	r2, #0
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3324      	adds	r3, #36	@ 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001f34:	f7ff faa4 	bl	8001480 <HAL_DMA_Start_IT>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d138      	bne.n	8001fb4 <HAL_I2C_Master_Receive_DMA+0x164>
 8001f42:	e013      	b.n	8001f6c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e050      	b.n	800200e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	8979      	ldrh	r1, [r7, #10]
 8001f74:	4b2c      	ldr	r3, [pc, #176]	@ (8002028 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f001 fc0a 	bl	8003794 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f001 fc2b 	bl	80037f8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e029      	b.n	8002008 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e018      	b.n	800200e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a13      	ldr	r2, [pc, #76]	@ (800202c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8001fe0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	8979      	ldrh	r1, [r7, #10]
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f001 fbce 	bl	8003794 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002000:	2102      	movs	r1, #2
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f001 fbf8 	bl	80037f8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	ffff0000 	.word	0xffff0000
 800201c:	0800260b 	.word	0x0800260b
 8002020:	08003679 	.word	0x08003679
 8002024:	0800372b 	.word	0x0800372b
 8002028:	80002400 	.word	0x80002400
 800202c:	080021af 	.word	0x080021af

08002030 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	68f9      	ldr	r1, [r7, #12]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
  }
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00f      	beq.n	80020a6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00f      	beq.n	80020d0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	f043 0208 	orr.w	r2, r3, #8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00f      	beq.n	80020fa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f043 0202 	orr.w	r2, r3, #2
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 030b 	and.w	r3, r3, #11
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f001 f92d 	bl	800336c <I2C_ITError>
  }
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
 800214e:	4613      	mov	r3, r2
 8002150:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b088      	sub	sp, #32
 80021b2:	af02      	add	r7, sp, #8
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <I2C_Master_ISR_IT+0x1e>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e121      	b.n	8002410 <I2C_Master_ISR_IT+0x262>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00d      	beq.n	8002204 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2210      	movs	r2, #16
 80021ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f001 f9cc 	bl	800359a <I2C_Flush_TXDR>
 8002202:	e0f2      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d022      	beq.n	8002254 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01d      	beq.n	8002254 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002252:	e0ca      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d128      	bne.n	80022b0 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01e      	beq.n	80022b0 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80b6 	beq.w	80023ea <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80022ae:	e09c      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06a      	beq.n	8002390 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d065      	beq.n	8002390 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d04e      	beq.n	800236c <I2C_Master_ISR_IT+0x1be>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d14a      	bne.n	800236c <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2bff      	cmp	r3, #255	@ 0xff
 80022ec:	d91c      	bls.n	8002328 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d103      	bne.n	800230a <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002308:	e002      	b.n	8002310 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	22ff      	movs	r2, #255	@ 0xff
 800230e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002314:	b2da      	uxtb	r2, r3
 8002316:	8a79      	ldrh	r1, [r7, #18]
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f001 fa37 	bl	8003794 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002326:	e032      	b.n	800238e <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002336:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800233a:	d00b      	beq.n	8002354 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002340:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002346:	8a79      	ldrh	r1, [r7, #18]
 8002348:	2000      	movs	r0, #0
 800234a:	9000      	str	r0, [sp, #0]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f001 fa21 	bl	8003794 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002352:	e01c      	b.n	800238e <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8a79      	ldrh	r1, [r7, #18]
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f001 fa15 	bl	8003794 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236a:	e010      	b.n	800238e <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002376:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800237a:	d003      	beq.n	8002384 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fcdc 	bl	8002d3a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002382:	e032      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002384:	2140      	movs	r1, #64	@ 0x40
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fff0 	bl	800336c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800238c:	e02d      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
 800238e:	e02c      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d027      	beq.n	80023ea <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d022      	beq.n	80023ea <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d119      	bne.n	80023e2 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023bc:	d015      	beq.n	80023ea <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023c6:	d108      	bne.n	80023da <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	e007      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fcad 	bl	8002d3a <I2C_ITMasterSeqCplt>
 80023e0:	e003      	b.n	80023ea <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023e2:	2140      	movs	r1, #64	@ 0x40
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 ffc1 	bl	800336c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80023fe:	6979      	ldr	r1, [r7, #20]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fd33 	bl	8002e6c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <I2C_Slave_ISR_IT+0x24>
 8002438:	2302      	movs	r3, #2
 800243a:	e0e2      	b.n	8002602 <I2C_Slave_ISR_IT+0x1ea>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002458:	6939      	ldr	r1, [r7, #16]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fdce 	bl	8002ffc <I2C_ITSlaveCplt>
 8002460:	e0ca      	b.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d04b      	beq.n	8002504 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002472:	2b00      	cmp	r3, #0
 8002474:	d046      	beq.n	8002504 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d128      	bne.n	80024d2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b28      	cmp	r3, #40	@ 0x28
 800248a:	d108      	bne.n	800249e <I2C_Slave_ISR_IT+0x86>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002492:	d104      	bne.n	800249e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 ff14 	bl	80032c4 <I2C_ITListenCplt>
 800249c:	e031      	b.n	8002502 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b29      	cmp	r3, #41	@ 0x29
 80024a8:	d10e      	bne.n	80024c8 <I2C_Slave_ISR_IT+0xb0>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024b0:	d00a      	beq.n	80024c8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2210      	movs	r2, #16
 80024b8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f001 f86d 	bl	800359a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fc77 	bl	8002db4 <I2C_ITSlaveSeqCplt>
 80024c6:	e01c      	b.n	8002502 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80024d0:	e08f      	b.n	80025f2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2210      	movs	r2, #16
 80024d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f043 0204 	orr.w	r2, r3, #4
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <I2C_Slave_ISR_IT+0xdc>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f2:	d17e      	bne.n	80025f2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f8:	4619      	mov	r1, r3
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 ff36 	bl	800336c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002500:	e077      	b.n	80025f2 <I2C_Slave_ISR_IT+0x1da>
 8002502:	e076      	b.n	80025f2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02f      	beq.n	800256e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002514:	2b00      	cmp	r3, #0
 8002516:	d02a      	beq.n	800256e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d018      	beq.n	8002554 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d14b      	bne.n	80025f6 <I2C_Slave_ISR_IT+0x1de>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002564:	d047      	beq.n	80025f6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fc24 	bl	8002db4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800256c:	e043      	b.n	80025f6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002582:	6939      	ldr	r1, [r7, #16]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fb54 	bl	8002c32 <I2C_ITAddrCplt>
 800258a:	e035      	b.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d030      	beq.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800259c:	2b00      	cmp	r3, #0
 800259e:	d02b      	beq.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d018      	beq.n	80025dc <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80025da:	e00d      	b.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e2:	d002      	beq.n	80025ea <I2C_Slave_ISR_IT+0x1d2>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fbe2 	bl	8002db4 <I2C_ITSlaveSeqCplt>
 80025f0:	e002      	b.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80025f6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b088      	sub	sp, #32
 800260e:	af02      	add	r7, sp, #8
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <I2C_Master_ISR_DMA+0x1a>
 8002620:	2302      	movs	r3, #2
 8002622:	e0e7      	b.n	80027f4 <I2C_Master_ISR_DMA+0x1ea>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800263c:	2b00      	cmp	r3, #0
 800263e:	d011      	beq.n	8002664 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002654:	2120      	movs	r1, #32
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f001 f8ce 	bl	80037f8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 ff9c 	bl	800359a <I2C_Flush_TXDR>
 8002662:	e0c2      	b.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d07f      	beq.n	800276e <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002674:	2b00      	cmp	r3, #0
 8002676:	d07a      	beq.n	800276e <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002686:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d05c      	beq.n	800274c <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2bff      	cmp	r3, #255	@ 0xff
 80026a8:	d914      	bls.n	80026d4 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d103      	bne.n	80026c6 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026c4:	e002      	b.n	80026cc <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	22ff      	movs	r2, #255	@ 0xff
 80026ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80026cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e010      	b.n	80026f6 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026e6:	d003      	beq.n	80026f0 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e002      	b.n	80026f6 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80026f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026f4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	8a79      	ldrh	r1, [r7, #18]
 80026fe:	2300      	movs	r3, #0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f001 f845 	bl	8003794 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b22      	cmp	r3, #34	@ 0x22
 8002726:	d108      	bne.n	800273a <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002736:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002738:	e057      	b.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002748:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800274a:	e04e      	b.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800275a:	d003      	beq.n	8002764 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 faec 	bl	8002d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002762:	e042      	b.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002764:	2140      	movs	r1, #64	@ 0x40
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fe00 	bl	800336c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800276c:	e03d      	b.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d028      	beq.n	80027ca <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800277e:	2b00      	cmp	r3, #0
 8002780:	d023      	beq.n	80027ca <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d119      	bne.n	80027c0 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800279a:	d025      	beq.n	80027e8 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027a4:	d108      	bne.n	80027b8 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027b4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80027b6:	e017      	b.n	80027e8 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fabe 	bl	8002d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80027be:	e013      	b.n	80027e8 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80027c0:	2140      	movs	r1, #64	@ 0x40
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fdd2 	bl	800336c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027c8:	e00e      	b.n	80027e8 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fb43 	bl	8002e6c <I2C_ITMasterCplt>
 80027e6:	e000      	b.n	80027ea <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80027e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002808:	4b90      	ldr	r3, [pc, #576]	@ (8002a4c <I2C_Mem_ISR_DMA+0x250>)
 800280a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <I2C_Mem_ISR_DMA+0x1e>
 8002816:	2302      	movs	r3, #2
 8002818:	e12f      	b.n	8002a7a <I2C_Mem_ISR_DMA+0x27e>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d016      	beq.n	800285a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002832:	2b00      	cmp	r3, #0
 8002834:	d011      	beq.n	800285a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2210      	movs	r2, #16
 800283c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f043 0204 	orr.w	r2, r3, #4
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800284a:	2120      	movs	r1, #32
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 ffd3 	bl	80037f8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fea1 	bl	800359a <I2C_Flush_TXDR>
 8002858:	e10a      	b.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002876:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f04f 32ff 	mov.w	r2, #4294967295
 800287e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002880:	e0f6      	b.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d06d      	beq.n	8002968 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002892:	2b00      	cmp	r3, #0
 8002894:	d068      	beq.n	8002968 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002896:	2101      	movs	r1, #1
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f001 f831 	bl	8003900 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800289e:	2110      	movs	r1, #16
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 ffa9 	bl	80037f8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d056      	beq.n	800295e <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2bff      	cmp	r3, #255	@ 0xff
 80028b8:	d91e      	bls.n	80028f8 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d103      	bne.n	80028d6 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028d4:	e002      	b.n	80028dc <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	22ff      	movs	r2, #255	@ 0xff
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e0:	b299      	uxth	r1, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 ff4f 	bl	8003794 <I2C_TransferConfig>
 80028f6:	e011      	b.n	800291c <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	b299      	uxth	r1, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	b2da      	uxtb	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 ff3c 	bl	8003794 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b22      	cmp	r3, #34	@ 0x22
 8002938:	d108      	bne.n	800294c <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002948:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800294a:	e091      	b.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800295a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800295c:	e088      	b.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800295e:	2140      	movs	r1, #64	@ 0x40
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fd03 	bl	800336c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002966:	e083      	b.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d070      	beq.n	8002a54 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002978:	2b00      	cmp	r3, #0
 800297a:	d06b      	beq.n	8002a54 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800297c:	2101      	movs	r1, #1
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 ffbe 	bl	8003900 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002984:	2110      	movs	r1, #16
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 ff36 	bl	80037f8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b22      	cmp	r3, #34	@ 0x22
 8002996:	d101      	bne.n	800299c <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002998:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <I2C_Mem_ISR_DMA+0x254>)
 800299a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2bff      	cmp	r3, #255	@ 0xff
 80029a4:	d91e      	bls.n	80029e4 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d103      	bne.n	80029c2 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029c0:	e002      	b.n	80029c8 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	22ff      	movs	r2, #255	@ 0xff
 80029c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	b299      	uxth	r1, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fed9 	bl	8003794 <I2C_TransferConfig>
 80029e2:	e011      	b.n	8002a08 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	b299      	uxth	r1, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fec6 	bl	8003794 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b22      	cmp	r3, #34	@ 0x22
 8002a24:	d108      	bne.n	8002a38 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a34:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a36:	e01b      	b.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a46:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a48:	e012      	b.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
 8002a4a:	bf00      	nop
 8002a4c:	80002000 	.word	0x80002000
 8002a50:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f9fe 	bl	8002e6c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop

08002a84 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <I2C_Slave_ISR_DMA+0x24>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0c0      	b.n	8002c2a <I2C_Slave_ISR_DMA+0x1a6>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fa98 	bl	8002ffc <I2C_ITSlaveCplt>
 8002acc:	e0a8      	b.n	8002c20 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8095 	beq.w	8002c04 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808f 	beq.w	8002c04 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07d      	beq.n	8002bf6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d128      	bne.n	8002b96 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b28      	cmp	r3, #40	@ 0x28
 8002b4e:	d108      	bne.n	8002b62 <I2C_Slave_ISR_DMA+0xde>
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b56:	d104      	bne.n	8002b62 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fbb2 	bl	80032c4 <I2C_ITListenCplt>
 8002b60:	e048      	b.n	8002bf4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b29      	cmp	r3, #41	@ 0x29
 8002b6c:	d10e      	bne.n	8002b8c <I2C_Slave_ISR_DMA+0x108>
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b74:	d00a      	beq.n	8002b8c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fd0b 	bl	800359a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f915 	bl	8002db4 <I2C_ITSlaveSeqCplt>
 8002b8a:	e033      	b.n	8002bf4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002b94:	e034      	b.n	8002c00 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <I2C_Slave_ISR_DMA+0x13c>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bbe:	d11f      	bne.n	8002c00 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b21      	cmp	r3, #33	@ 0x21
 8002bc4:	d002      	beq.n	8002bcc <I2C_Slave_ISR_DMA+0x148>
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	2b29      	cmp	r3, #41	@ 0x29
 8002bca:	d103      	bne.n	8002bd4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2221      	movs	r2, #33	@ 0x21
 8002bd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd2:	e008      	b.n	8002be6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b22      	cmp	r3, #34	@ 0x22
 8002bd8:	d002      	beq.n	8002be0 <I2C_Slave_ISR_DMA+0x15c>
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bde:	d102      	bne.n	8002be6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2222      	movs	r2, #34	@ 0x22
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4619      	mov	r1, r3
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fbbd 	bl	800336c <I2C_ITError>
      if (treatdmanack == 1U)
 8002bf2:	e005      	b.n	8002c00 <I2C_Slave_ISR_DMA+0x17c>
 8002bf4:	e004      	b.n	8002c00 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bfe:	e00f      	b.n	8002c20 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002c00:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c02:	e00d      	b.n	8002c20 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f809 	bl	8002c32 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c48:	2b28      	cmp	r3, #40	@ 0x28
 8002c4a:	d16a      	bne.n	8002d22 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c6a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c86:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d138      	bne.n	8002d02 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c90:	897b      	ldrh	r3, [r7, #10]
 8002c92:	09db      	lsrs	r3, r3, #7
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	89bb      	ldrh	r3, [r7, #12]
 8002c98:	4053      	eors	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f003 0306 	and.w	r3, r3, #6
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11c      	bne.n	8002cde <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ca4:	897b      	ldrh	r3, [r7, #10]
 8002ca6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d13b      	bne.n	8002d32 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cd0:	89ba      	ldrh	r2, [r7, #12]
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fa33 	bl	8002142 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002cdc:	e029      	b.n	8002d32 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002cde:	893b      	ldrh	r3, [r7, #8]
 8002ce0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fe0a 	bl	8003900 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cf4:	89ba      	ldrh	r2, [r7, #12]
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fa21 	bl	8002142 <HAL_I2C_AddrCallback>
}
 8002d00:	e017      	b.n	8002d32 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fdfa 	bl	8003900 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d14:	89ba      	ldrh	r2, [r7, #12]
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fa11 	bl	8002142 <HAL_I2C_AddrCallback>
}
 8002d20:	e007      	b.n	8002d32 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2208      	movs	r2, #8
 8002d28:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b21      	cmp	r3, #33	@ 0x21
 8002d54:	d115      	bne.n	8002d82 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2211      	movs	r2, #17
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fdc7 	bl	8003900 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fea0 	bl	8000ac0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d80:	e014      	b.n	8002dac <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2212      	movs	r2, #18
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d96:	2102      	movs	r1, #2
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fdb1 	bl	8003900 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd fea0 	bl	8000aec <HAL_I2C_MasterRxCpltCallback>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e00c      	b.n	8002e02 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b29      	cmp	r3, #41	@ 0x29
 8002e0c:	d112      	bne.n	8002e34 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2228      	movs	r2, #40	@ 0x28
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2221      	movs	r2, #33	@ 0x21
 8002e1a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fd6e 	bl	8003900 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff f974 	bl	800211a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e32:	e017      	b.n	8002e64 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e3e:	d111      	bne.n	8002e64 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2228      	movs	r2, #40	@ 0x28
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2222      	movs	r2, #34	@ 0x22
 8002e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e4e:	2102      	movs	r1, #2
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fd55 	bl	8003900 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff f965 	bl	800212e <HAL_I2C_SlaveRxCpltCallback>
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b21      	cmp	r3, #33	@ 0x21
 8002e8c:	d107      	bne.n	8002e9e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fd35 	bl	8003900 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2211      	movs	r2, #17
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e9c:	e00c      	b.n	8002eb8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b22      	cmp	r3, #34	@ 0x22
 8002ea8:	d106      	bne.n	8002eb8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eaa:	2102      	movs	r1, #2
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fd27 	bl	8003900 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2212      	movs	r2, #18
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <I2C_ITMasterCplt+0x188>)
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a49      	ldr	r2, [pc, #292]	@ (8002ff8 <I2C_ITMasterCplt+0x18c>)
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b60      	cmp	r3, #96	@ 0x60
 8002efc:	d10a      	bne.n	8002f14 <I2C_ITMasterCplt+0xa8>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f12:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fb40 	bl	800359a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b60      	cmp	r3, #96	@ 0x60
 8002f2a:	d002      	beq.n	8002f32 <I2C_ITMasterCplt+0xc6>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fa17 	bl	800336c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f3e:	e054      	b.n	8002fea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b21      	cmp	r3, #33	@ 0x21
 8002f4a:	d124      	bne.n	8002f96 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b40      	cmp	r3, #64	@ 0x40
 8002f64:	d10b      	bne.n	8002f7e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff f8fb 	bl	8002172 <HAL_I2C_MemTxCpltCallback>
}
 8002f7c:	e035      	b.n	8002fea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fd96 	bl	8000ac0 <HAL_I2C_MasterTxCpltCallback>
}
 8002f94:	e029      	b.n	8002fea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b22      	cmp	r3, #34	@ 0x22
 8002fa0:	d123      	bne.n	8002fea <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b40      	cmp	r3, #64	@ 0x40
 8002fba:	d10b      	bne.n	8002fd4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff f8da 	bl	8002186 <HAL_I2C_MemRxCpltCallback>
}
 8002fd2:	e00a      	b.n	8002fea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fd fd81 	bl	8000aec <HAL_I2C_MasterRxCpltCallback>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	fe00e800 	.word	0xfe00e800
 8002ff8:	ffff0000 	.word	0xffff0000

08002ffc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	2b21      	cmp	r3, #33	@ 0x21
 800302c:	d002      	beq.n	8003034 <I2C_ITSlaveCplt+0x38>
 800302e:	7afb      	ldrb	r3, [r7, #11]
 8003030:	2b29      	cmp	r3, #41	@ 0x29
 8003032:	d108      	bne.n	8003046 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003034:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fc61 	bl	8003900 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2221      	movs	r2, #33	@ 0x21
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
 8003044:	e019      	b.n	800307a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	2b22      	cmp	r3, #34	@ 0x22
 800304a:	d002      	beq.n	8003052 <I2C_ITSlaveCplt+0x56>
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003050:	d108      	bne.n	8003064 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003052:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fc52 	bl	8003900 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2222      	movs	r2, #34	@ 0x22
 8003060:	631a      	str	r2, [r3, #48]	@ 0x30
 8003062:	e00a      	b.n	800307a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	2b28      	cmp	r3, #40	@ 0x28
 8003068:	d107      	bne.n	800307a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800306a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fc46 	bl	8003900 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003088:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b89      	ldr	r3, [pc, #548]	@ (80032bc <I2C_ITSlaveCplt+0x2c0>)
 8003096:	400b      	ands	r3, r1
 8003098:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa7d 	bl	800359a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d013      	beq.n	80030d2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01f      	beq.n	8003102 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030d0:	e017      	b.n	8003102 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d006      	beq.n	8003102 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0304 	bic.w	r3, r3, #4
 8003112:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d049      	beq.n	8003202 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003174:	2b00      	cmp	r3, #0
 8003176:	d044      	beq.n	8003202 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d128      	bne.n	80031d4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b28      	cmp	r3, #40	@ 0x28
 800318c:	d108      	bne.n	80031a0 <I2C_ITSlaveCplt+0x1a4>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003194:	d104      	bne.n	80031a0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003196:	6979      	ldr	r1, [r7, #20]
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f893 	bl	80032c4 <I2C_ITListenCplt>
 800319e:	e030      	b.n	8003202 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b29      	cmp	r3, #41	@ 0x29
 80031aa:	d10e      	bne.n	80031ca <I2C_ITSlaveCplt+0x1ce>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031b2:	d00a      	beq.n	80031ca <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2210      	movs	r2, #16
 80031ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f9ec 	bl	800359a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fdf6 	bl	8002db4 <I2C_ITSlaveSeqCplt>
 80031c8:	e01b      	b.n	8003202 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2210      	movs	r2, #16
 80031d0:	61da      	str	r2, [r3, #28]
 80031d2:	e016      	b.n	8003202 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <I2C_ITSlaveCplt+0x1fa>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f4:	d105      	bne.n	8003202 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8b5 	bl	800336c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8a4 	bl	800336c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b28      	cmp	r3, #40	@ 0x28
 800322e:	d141      	bne.n	80032b4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f846 	bl	80032c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003238:	e03c      	b.n	80032b4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003242:	d014      	beq.n	800326e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fdb5 	bl	8002db4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <I2C_ITSlaveCplt+0x2c4>)
 800324e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe ff79 	bl	800215e <HAL_I2C_ListenCpltCallback>
}
 800326c:	e022      	b.n	80032b4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b22      	cmp	r3, #34	@ 0x22
 8003278:	d10e      	bne.n	8003298 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fe ff4c 	bl	800212e <HAL_I2C_SlaveRxCpltCallback>
}
 8003296:	e00d      	b.n	80032b4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe ff33 	bl	800211a <HAL_I2C_SlaveTxCpltCallback>
}
 80032b4:	bf00      	nop
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	fe00e800 	.word	0xfe00e800
 80032c0:	ffff0000 	.word	0xffff0000

080032c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a25      	ldr	r2, [pc, #148]	@ (8003368 <I2C_ITListenCplt+0xa4>)
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d022      	beq.n	8003340 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003340:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fadb 	bl	8003900 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2210      	movs	r2, #16
 8003350:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe feff 	bl	800215e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	ffff0000 	.word	0xffff0000

0800336c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800337c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a6d      	ldr	r2, [pc, #436]	@ (8003540 <I2C_ITError+0x1d4>)
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b28      	cmp	r3, #40	@ 0x28
 80033a2:	d005      	beq.n	80033b0 <I2C_ITError+0x44>
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b29      	cmp	r3, #41	@ 0x29
 80033a8:	d002      	beq.n	80033b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ae:	d10b      	bne.n	80033c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033b0:	2103      	movs	r1, #3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 faa4 	bl	8003900 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2228      	movs	r2, #40	@ 0x28
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a60      	ldr	r2, [pc, #384]	@ (8003544 <I2C_ITError+0x1d8>)
 80033c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c6:	e030      	b.n	800342a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033c8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fa97 	bl	8003900 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8e1 	bl	800359a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b60      	cmp	r3, #96	@ 0x60
 80033e2:	d01f      	beq.n	8003424 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d114      	bne.n	8003424 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b10      	cmp	r3, #16
 8003406:	d109      	bne.n	800341c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2210      	movs	r2, #16
 800340e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2220      	movs	r2, #32
 8003422:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	2b00      	cmp	r3, #0
 8003436:	d039      	beq.n	80034ac <I2C_ITError+0x140>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b11      	cmp	r3, #17
 800343c:	d002      	beq.n	8003444 <I2C_ITError+0xd8>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b21      	cmp	r3, #33	@ 0x21
 8003442:	d133      	bne.n	80034ac <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003452:	d107      	bne.n	8003464 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003462:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe f959 	bl	8001720 <HAL_DMA_GetState>
 800346e:	4603      	mov	r3, r0
 8003470:	2b01      	cmp	r3, #1
 8003472:	d017      	beq.n	80034a4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	4a33      	ldr	r2, [pc, #204]	@ (8003548 <I2C_ITError+0x1dc>)
 800347a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe f859 	bl	8001540 <HAL_DMA_Abort_IT>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d04d      	beq.n	8003530 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800349e:	4610      	mov	r0, r2
 80034a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034a2:	e045      	b.n	8003530 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f851 	bl	800354c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034aa:	e041      	b.n	8003530 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d039      	beq.n	8003528 <I2C_ITError+0x1bc>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b12      	cmp	r3, #18
 80034b8:	d002      	beq.n	80034c0 <I2C_ITError+0x154>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b22      	cmp	r3, #34	@ 0x22
 80034be:	d133      	bne.n	8003528 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ce:	d107      	bne.n	80034e0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe f91b 	bl	8001720 <HAL_DMA_GetState>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d017      	beq.n	8003520 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <I2C_ITError+0x1dc>)
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe f81b 	bl	8001540 <HAL_DMA_Abort_IT>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d011      	beq.n	8003534 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800351a:	4610      	mov	r0, r2
 800351c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800351e:	e009      	b.n	8003534 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f813 	bl	800354c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003526:	e005      	b.n	8003534 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f80f 	bl	800354c <I2C_TreatErrorCallback>
  }
}
 800352e:	e002      	b.n	8003536 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003534:	bf00      	nop
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	ffff0000 	.word	0xffff0000
 8003544:	08002419 	.word	0x08002419
 8003548:	08003759 	.word	0x08003759

0800354c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b60      	cmp	r3, #96	@ 0x60
 800355e:	d10e      	bne.n	800357e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fe fe0f 	bl	800219a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800357c:	e009      	b.n	8003592 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd fa8d 	bl	8000aac <HAL_I2C_ErrorCallback>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d103      	bne.n	80035b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2200      	movs	r2, #0
 80035b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d007      	beq.n	80035d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	619a      	str	r2, [r3, #24]
  }
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035fe:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800360a:	2120      	movs	r1, #32
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f8f3 	bl	80037f8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003612:	e02d      	b.n	8003670 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2bff      	cmp	r3, #255	@ 0xff
 800362a:	d903      	bls.n	8003634 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	22ff      	movs	r2, #255	@ 0xff
 8003630:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003632:	e004      	b.n	800363e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	4619      	mov	r1, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3328      	adds	r3, #40	@ 0x28
 800364e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003654:	f7fd ff14 	bl	8001480 <HAL_DMA_Start_IT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800365e:	2110      	movs	r1, #16
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff fe83 	bl	800336c <I2C_ITError>
}
 8003666:	e003      	b.n	8003670 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003668:	2140      	movs	r1, #64	@ 0x40
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f8c4 	bl	80037f8 <I2C_Enable_IRQ>
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003694:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80036a0:	2120      	movs	r1, #32
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8a8 	bl	80037f8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80036a8:	e03b      	b.n	8003722 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2bff      	cmp	r3, #255	@ 0xff
 80036c0:	d911      	bls.n	80036e6 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d103      	bne.n	80036de <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80036dc:	e008      	b.n	80036f0 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22ff      	movs	r2, #255	@ 0xff
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80036e4:	e004      	b.n	80036f0 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3324      	adds	r3, #36	@ 0x24
 80036fa:	4619      	mov	r1, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8003706:	f7fd febb 	bl	8001480 <HAL_DMA_Start_IT>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d004      	beq.n	800371a <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003710:	2110      	movs	r1, #16
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fe2a 	bl	800336c <I2C_ITError>
}
 8003718:	e003      	b.n	8003722 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800371a:	2140      	movs	r1, #64	@ 0x40
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f86b 	bl	80037f8 <I2C_Enable_IRQ>
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003746:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003748:	2110      	movs	r1, #16
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff fe0e 	bl	800336c <I2C_ITError>
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	2200      	movs	r2, #0
 8003774:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	2200      	movs	r2, #0
 8003784:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fee0 	bl	800354c <I2C_TreatErrorCallback>
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	4613      	mov	r3, r2
 80037a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ac:	7a7b      	ldrb	r3, [r7, #9]
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	4313      	orrs	r3, r2
 80037be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	0d5b      	lsrs	r3, r3, #21
 80037ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <I2C_TransferConfig+0x60>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	43db      	mvns	r3, r3
 80037d8:	ea02 0103 	and.w	r1, r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	03ff63ff 	.word	0x03ff63ff

080037f8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380c:	4a39      	ldr	r2, [pc, #228]	@ (80038f4 <I2C_Enable_IRQ+0xfc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d032      	beq.n	8003878 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003816:	4a38      	ldr	r2, [pc, #224]	@ (80038f8 <I2C_Enable_IRQ+0x100>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d02d      	beq.n	8003878 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003820:	4a36      	ldr	r2, [pc, #216]	@ (80038fc <I2C_Enable_IRQ+0x104>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d028      	beq.n	8003878 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003826:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800382a:	2b00      	cmp	r3, #0
 800382c:	da03      	bge.n	8003836 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003834:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003846:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003858:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	2b10      	cmp	r3, #16
 800385e:	d103      	bne.n	8003868 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003866:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	2b20      	cmp	r3, #32
 800386c:	d133      	bne.n	80038d6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f043 0320 	orr.w	r3, r3, #32
 8003874:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003876:	e02e      	b.n	80038d6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800387c:	2b00      	cmp	r3, #0
 800387e:	da03      	bge.n	8003888 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003886:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003888:	887b      	ldrh	r3, [r7, #2]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003898:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80038aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d103      	bne.n	80038ba <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80038b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d103      	bne.n	80038c8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80038c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038c8:	887b      	ldrh	r3, [r7, #2]
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d103      	bne.n	80038d6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	0800260b 	.word	0x0800260b
 80038f8:	08002a85 	.word	0x08002a85
 80038fc:	080027fd 	.word	0x080027fd

08003900 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003910:	887b      	ldrh	r3, [r7, #2]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00f      	beq.n	800393a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003920:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800392e:	2b28      	cmp	r3, #40	@ 0x28
 8003930:	d003      	beq.n	800393a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003938:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00f      	beq.n	8003964 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800394a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003958:	2b28      	cmp	r3, #40	@ 0x28
 800395a:	d003      	beq.n	8003964 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003962:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003964:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003968:	2b00      	cmp	r3, #0
 800396a:	da03      	bge.n	8003974 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003972:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	2b10      	cmp	r3, #16
 8003978:	d103      	bne.n	8003982 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003980:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	2b20      	cmp	r3, #32
 8003986:	d103      	bne.n	8003990 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f043 0320 	orr.w	r3, r3, #32
 800398e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	2b40      	cmp	r3, #64	@ 0x40
 8003994:	d103      	bne.n	800399e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800399c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43da      	mvns	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	400a      	ands	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d138      	bne.n	8003a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039dc:	2302      	movs	r3, #2
 80039de:	e032      	b.n	8003a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	@ 0x24
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d139      	bne.n	8003adc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e033      	b.n	8003ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2224      	movs	r2, #36	@ 0x24
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003aa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003af0:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40007000 	.word	0x40007000

08003b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b16:	d130      	bne.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b18:	4b23      	ldr	r3, [pc, #140]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b24:	d038      	beq.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b26:	4b20      	ldr	r3, [pc, #128]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b36:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2232      	movs	r2, #50	@ 0x32
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0c9b      	lsrs	r3, r3, #18
 8003b48:	3301      	adds	r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b4c:	e002      	b.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b54:	4b14      	ldr	r3, [pc, #80]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b60:	d102      	bne.n	8003b68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f2      	bne.n	8003b4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b68:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b74:	d110      	bne.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e00f      	b.n	8003b9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b86:	d007      	beq.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b88:	4b07      	ldr	r3, [pc, #28]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b90:	4a05      	ldr	r2, [pc, #20]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	431bde83 	.word	0x431bde83

08003bb4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e3ca      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc6:	4b97      	ldr	r3, [pc, #604]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd0:	4b94      	ldr	r3, [pc, #592]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80e4 	beq.w	8003db0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4a>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	f040 808b 	bne.w	8003d0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 8087 	bne.w	8003d0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfe:	4b89      	ldr	r3, [pc, #548]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x62>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e3a2      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	4b82      	ldr	r3, [pc, #520]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_RCC_OscConfig+0x7c>
 8003c26:	4b7f      	ldr	r3, [pc, #508]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c2e:	e005      	b.n	8003c3c <HAL_RCC_OscConfig+0x88>
 8003c30:	4b7c      	ldr	r3, [pc, #496]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d223      	bcs.n	8003c88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fd1d 	bl	8004684 <RCC_SetFlashLatencyFromMSIRange>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e383      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c54:	4b73      	ldr	r3, [pc, #460]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a72      	ldr	r2, [pc, #456]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	f043 0308 	orr.w	r3, r3, #8
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b70      	ldr	r3, [pc, #448]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	496d      	ldr	r1, [pc, #436]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c72:	4b6c      	ldr	r3, [pc, #432]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	4968      	ldr	r1, [pc, #416]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
 8003c86:	e025      	b.n	8003cd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c88:	4b66      	ldr	r3, [pc, #408]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a65      	ldr	r2, [pc, #404]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	f043 0308 	orr.w	r3, r3, #8
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b63      	ldr	r3, [pc, #396]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	4960      	ldr	r1, [pc, #384]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	495b      	ldr	r1, [pc, #364]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fcdd 	bl	8004684 <RCC_SetFlashLatencyFromMSIRange>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e343      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cd4:	f000 fc4a 	bl	800456c <HAL_RCC_GetSysClockFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b52      	ldr	r3, [pc, #328]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	4950      	ldr	r1, [pc, #320]	@ (8003e28 <HAL_RCC_OscConfig+0x274>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8003e2c <HAL_RCC_OscConfig+0x278>)
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e30 <HAL_RCC_OscConfig+0x27c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd f977 	bl	8000fec <HAL_InitTick>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d052      	beq.n	8003dae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	e327      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d032      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d14:	4b43      	ldr	r3, [pc, #268]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a42      	ldr	r2, [pc, #264]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d20:	f7fd f9b4 	bl	800108c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d28:	f7fd f9b0 	bl	800108c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e310      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d46:	4b37      	ldr	r3, [pc, #220]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a36      	ldr	r2, [pc, #216]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4931      	ldr	r1, [pc, #196]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d64:	4b2f      	ldr	r3, [pc, #188]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	492c      	ldr	r1, [pc, #176]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	e01a      	b.n	8003db0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a29      	ldr	r2, [pc, #164]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d86:	f7fd f981 	bl	800108c <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d8e:	f7fd f97d 	bl	800108c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e2dd      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003da0:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x1da>
 8003dac:	e000      	b.n	8003db0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d074      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x21a>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d10e      	bne.n	8003de6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d064      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x2f0>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d160      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e2ba      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x24a>
 8003df0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0b      	ldr	r2, [pc, #44]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e026      	b.n	8003e4c <HAL_RCC_OscConfig+0x298>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e06:	d115      	bne.n	8003e34 <HAL_RCC_OscConfig+0x280>
 8003e08:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a05      	ldr	r2, [pc, #20]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a02      	ldr	r2, [pc, #8]	@ (8003e24 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e014      	b.n	8003e4c <HAL_RCC_OscConfig+0x298>
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	0800512c 	.word	0x0800512c
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	20000004 	.word	0x20000004
 8003e34:	4ba0      	ldr	r3, [pc, #640]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a9f      	ldr	r2, [pc, #636]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b9d      	ldr	r3, [pc, #628]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a9c      	ldr	r2, [pc, #624]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fd f91a 	bl	800108c <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd f916 	bl	800108c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	@ 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e276      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e6e:	4b92      	ldr	r3, [pc, #584]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x2a8>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fd f906 	bl	800108c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd f902 	bl	800108c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e262      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e96:	4b88      	ldr	r3, [pc, #544]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2d0>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d060      	beq.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x310>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d119      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d116      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec4:	4b7c      	ldr	r3, [pc, #496]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_OscConfig+0x328>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e23f      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003edc:	4b76      	ldr	r3, [pc, #472]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	061b      	lsls	r3, r3, #24
 8003eea:	4973      	ldr	r1, [pc, #460]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef0:	e040      	b.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d023      	beq.n	8003f42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efa:	4b6f      	ldr	r3, [pc, #444]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6e      	ldr	r2, [pc, #440]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd f8c1 	bl	800108c <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0e:	f7fd f8bd 	bl	800108c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e21d      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f20:	4b65      	ldr	r3, [pc, #404]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2c:	4b62      	ldr	r3, [pc, #392]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	495f      	ldr	r1, [pc, #380]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
 8003f40:	e018      	b.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f42:	4b5d      	ldr	r3, [pc, #372]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a5c      	ldr	r2, [pc, #368]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fd f89d 	bl	800108c <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f56:	f7fd f899 	bl	800108c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e1f9      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f68:	4b53      	ldr	r3, [pc, #332]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03c      	beq.n	8003ffa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f88:	4b4b      	ldr	r3, [pc, #300]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fd f878 	bl	800108c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fd f874 	bl	800108c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e1d4      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb2:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ef      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x3ec>
 8003fc0:	e01b      	b.n	8003ffa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd f85b 	bl	800108c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fd f857 	bl	800108c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1b7      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fec:	4b32      	ldr	r3, [pc, #200]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1ef      	bne.n	8003fda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a6 	beq.w	8004154 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800400c:	4b2a      	ldr	r3, [pc, #168]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10d      	bne.n	8004034 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b27      	ldr	r3, [pc, #156]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	4a26      	ldr	r2, [pc, #152]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004022:	6593      	str	r3, [r2, #88]	@ 0x58
 8004024:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004030:	2301      	movs	r3, #1
 8004032:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004034:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <HAL_RCC_OscConfig+0x508>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d118      	bne.n	8004072 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004040:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <HAL_RCC_OscConfig+0x508>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1d      	ldr	r2, [pc, #116]	@ (80040bc <HAL_RCC_OscConfig+0x508>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404c:	f7fd f81e 	bl	800108c <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fd f81a 	bl	800108c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e17a      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004066:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <HAL_RCC_OscConfig+0x508>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <HAL_RCC_OscConfig+0x4d8>
 800407a:	4b0f      	ldr	r3, [pc, #60]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004080:	4a0d      	ldr	r2, [pc, #52]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800408a:	e029      	b.n	80040e0 <HAL_RCC_OscConfig+0x52c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d115      	bne.n	80040c0 <HAL_RCC_OscConfig+0x50c>
 8004094:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	4a07      	ldr	r2, [pc, #28]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040a4:	4b04      	ldr	r3, [pc, #16]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040aa:	4a03      	ldr	r2, [pc, #12]	@ (80040b8 <HAL_RCC_OscConfig+0x504>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040b4:	e014      	b.n	80040e0 <HAL_RCC_OscConfig+0x52c>
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	4b9c      	ldr	r3, [pc, #624]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	4a9b      	ldr	r2, [pc, #620]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040d0:	4b98      	ldr	r3, [pc, #608]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	4a97      	ldr	r2, [pc, #604]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d016      	beq.n	8004116 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fc ffd0 	bl	800108c <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fc ffcc 	bl	800108c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e12a      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	4b8b      	ldr	r3, [pc, #556]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ed      	beq.n	80040f0 <HAL_RCC_OscConfig+0x53c>
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fc ffb9 	bl	800108c <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fc ffb5 	bl	800108c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e113      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004134:	4b7f      	ldr	r3, [pc, #508]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ed      	bne.n	800411e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004142:	7ffb      	ldrb	r3, [r7, #31]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b7a      	ldr	r3, [pc, #488]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	4a79      	ldr	r2, [pc, #484]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80fe 	beq.w	800435a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	2b02      	cmp	r3, #2
 8004164:	f040 80d0 	bne.w	8004308 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004168:	4b72      	ldr	r3, [pc, #456]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	429a      	cmp	r2, r3
 800417a:	d130      	bne.n	80041de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	3b01      	subs	r3, #1
 8004188:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d127      	bne.n	80041de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004198:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d11f      	bne.n	80041de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041a8:	2a07      	cmp	r2, #7
 80041aa:	bf14      	ite	ne
 80041ac:	2201      	movne	r2, #1
 80041ae:	2200      	moveq	r2, #0
 80041b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	3b01      	subs	r3, #1
 80041c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d109      	bne.n	80041de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d06e      	beq.n	80042bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d069      	beq.n	80042b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041e4:	4b53      	ldr	r3, [pc, #332]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041f0:	4b50      	ldr	r3, [pc, #320]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0ad      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004200:	4b4c      	ldr	r3, [pc, #304]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a4b      	ldr	r2, [pc, #300]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800420c:	f7fc ff3e 	bl	800108c <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004214:	f7fc ff3a 	bl	800108c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e09a      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004226:	4b43      	ldr	r3, [pc, #268]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004232:	4b40      	ldr	r3, [pc, #256]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	4b40      	ldr	r3, [pc, #256]	@ (8004338 <HAL_RCC_OscConfig+0x784>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004242:	3a01      	subs	r2, #1
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	4311      	orrs	r1, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800424c:	0212      	lsls	r2, r2, #8
 800424e:	4311      	orrs	r1, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004254:	0852      	lsrs	r2, r2, #1
 8004256:	3a01      	subs	r2, #1
 8004258:	0552      	lsls	r2, r2, #21
 800425a:	4311      	orrs	r1, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004260:	0852      	lsrs	r2, r2, #1
 8004262:	3a01      	subs	r2, #1
 8004264:	0652      	lsls	r2, r2, #25
 8004266:	4311      	orrs	r1, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800426c:	0912      	lsrs	r2, r2, #4
 800426e:	0452      	lsls	r2, r2, #17
 8004270:	430a      	orrs	r2, r1
 8004272:	4930      	ldr	r1, [pc, #192]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004278:	4b2e      	ldr	r3, [pc, #184]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2d      	ldr	r2, [pc, #180]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004282:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004284:	4b2b      	ldr	r3, [pc, #172]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a2a      	ldr	r2, [pc, #168]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 800428a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800428e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004290:	f7fc fefc 	bl	800108c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fc fef8 	bl	800108c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e058      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042aa:	4b22      	ldr	r3, [pc, #136]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b6:	e050      	b.n	800435a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e04f      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d148      	bne.n	800435a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a19      	ldr	r2, [pc, #100]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d4:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a16      	ldr	r2, [pc, #88]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80042da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042e0:	f7fc fed4 	bl	800108c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fc fed0 	bl	800108c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e030      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x734>
 8004306:	e028      	b.n	800435a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d023      	beq.n	8004356 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a08      	ldr	r2, [pc, #32]	@ (8004334 <HAL_RCC_OscConfig+0x780>)
 8004314:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fc feb7 	bl	800108c <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004320:	e00c      	b.n	800433c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004322:	f7fc feb3 	bl	800108c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d905      	bls.n	800433c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e013      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
 8004334:	40021000 	.word	0x40021000
 8004338:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_OscConfig+0x7b0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ec      	bne.n	8004322 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCC_OscConfig+0x7b0>)
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	4905      	ldr	r1, [pc, #20]	@ (8004364 <HAL_RCC_OscConfig+0x7b0>)
 800434e:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <HAL_RCC_OscConfig+0x7b4>)
 8004350:	4013      	ands	r3, r2
 8004352:	60cb      	str	r3, [r1, #12]
 8004354:	e001      	b.n	800435a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	feeefffc 	.word	0xfeeefffc

0800436c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0e7      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004380:	4b75      	ldr	r3, [pc, #468]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d910      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b72      	ldr	r3, [pc, #456]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 0207 	bic.w	r2, r3, #7
 8004396:	4970      	ldr	r1, [pc, #448]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b6e      	ldr	r3, [pc, #440]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0cf      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	4b66      	ldr	r3, [pc, #408]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d908      	bls.n	80043de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043cc:	4b63      	ldr	r3, [pc, #396]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4960      	ldr	r1, [pc, #384]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04c      	beq.n	8004484 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f2:	4b5a      	ldr	r3, [pc, #360]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d121      	bne.n	8004442 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e0a6      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440a:	4b54      	ldr	r3, [pc, #336]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e09a      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004422:	4b4e      	ldr	r3, [pc, #312]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e08e      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004432:	4b4a      	ldr	r3, [pc, #296]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e086      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b46      	ldr	r3, [pc, #280]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4943      	ldr	r1, [pc, #268]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fc fe1a 	bl	800108c <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fc fe16 	bl	800108c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e06e      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b3a      	ldr	r3, [pc, #232]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	4b31      	ldr	r3, [pc, #196]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800449c:	429a      	cmp	r2, r3
 800449e:	d208      	bcs.n	80044b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a0:	4b2e      	ldr	r3, [pc, #184]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	492b      	ldr	r1, [pc, #172]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b2:	4b29      	ldr	r3, [pc, #164]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d210      	bcs.n	80044e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c0:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 0207 	bic.w	r2, r3, #7
 80044c8:	4923      	ldr	r1, [pc, #140]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d0:	4b21      	ldr	r3, [pc, #132]	@ (8004558 <HAL_RCC_ClockConfig+0x1ec>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e036      	b.n	8004550 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ee:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4918      	ldr	r1, [pc, #96]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800450c:	4b13      	ldr	r3, [pc, #76]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4910      	ldr	r1, [pc, #64]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004520:	f000 f824 	bl	800456c <HAL_RCC_GetSysClockFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	490b      	ldr	r1, [pc, #44]	@ (8004560 <HAL_RCC_ClockConfig+0x1f4>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
 800453c:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800453e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004540:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RCC_ClockConfig+0x1fc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fc fd51 	bl	8000fec <HAL_InitTick>
 800454a:	4603      	mov	r3, r0
 800454c:	72fb      	strb	r3, [r7, #11]

  return status;
 800454e:	7afb      	ldrb	r3, [r7, #11]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40022000 	.word	0x40022000
 800455c:	40021000 	.word	0x40021000
 8004560:	0800512c 	.word	0x0800512c
 8004564:	20000000 	.word	0x20000000
 8004568:	20000004 	.word	0x20000004

0800456c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	@ 0x24
 8004570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457a:	4b3e      	ldr	r3, [pc, #248]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004584:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d121      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d11e      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045a0:	4b34      	ldr	r3, [pc, #208]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045ac:	4b31      	ldr	r3, [pc, #196]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b2:	0a1b      	lsrs	r3, r3, #8
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e005      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d102      	bne.n	80045ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045e4:	4b25      	ldr	r3, [pc, #148]	@ (800467c <HAL_RCC_GetSysClockFreq+0x110>)
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	e004      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045f0:	4b23      	ldr	r3, [pc, #140]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x114>)
 80045f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d134      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d003      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0xa6>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d003      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0xac>
 8004610:	e005      	b.n	800461e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004612:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <HAL_RCC_GetSysClockFreq+0x110>)
 8004614:	617b      	str	r3, [r7, #20]
      break;
 8004616:	e005      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004618:	4b19      	ldr	r3, [pc, #100]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x114>)
 800461a:	617b      	str	r3, [r7, #20]
      break;
 800461c:	e002      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	617b      	str	r3, [r7, #20]
      break;
 8004622:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004624:	4b13      	ldr	r3, [pc, #76]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	3301      	adds	r3, #1
 8004630:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	fb03 f202 	mul.w	r2, r3, r2
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800464a:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x108>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	0e5b      	lsrs	r3, r3, #25
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	3301      	adds	r3, #1
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004664:	69bb      	ldr	r3, [r7, #24]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	@ 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	0800513c 	.word	0x0800513c
 800467c:	00f42400 	.word	0x00f42400
 8004680:	007a1200 	.word	0x007a1200

08004684 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004690:	4b2a      	ldr	r3, [pc, #168]	@ (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800469c:	f7ff fa26 	bl	8003aec <HAL_PWREx_GetVoltageRange>
 80046a0:	6178      	str	r0, [r7, #20]
 80046a2:	e014      	b.n	80046ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046a4:	4b25      	ldr	r3, [pc, #148]	@ (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a8:	4a24      	ldr	r2, [pc, #144]	@ (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80046b0:	4b22      	ldr	r3, [pc, #136]	@ (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046bc:	f7ff fa16 	bl	8003aec <HAL_PWREx_GetVoltageRange>
 80046c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c6:	4a1d      	ldr	r2, [pc, #116]	@ (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d4:	d10b      	bne.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b80      	cmp	r3, #128	@ 0x80
 80046da:	d919      	bls.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2ba0      	cmp	r3, #160	@ 0xa0
 80046e0:	d902      	bls.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046e2:	2302      	movs	r3, #2
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	e013      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046e8:	2301      	movs	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e010      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b80      	cmp	r3, #128	@ 0x80
 80046f2:	d902      	bls.n	80046fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046f4:	2303      	movs	r3, #3
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	e00a      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b80      	cmp	r3, #128	@ 0x80
 80046fe:	d102      	bne.n	8004706 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004700:	2302      	movs	r3, #2
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	e004      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b70      	cmp	r3, #112	@ 0x70
 800470a:	d101      	bne.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800470c:	2301      	movs	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004710:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 0207 	bic.w	r2, r3, #7
 8004718:	4909      	ldr	r1, [pc, #36]	@ (8004740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004720:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	40022000 	.word	0x40022000

08004744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800474c:	2300      	movs	r3, #0
 800474e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004750:	2300      	movs	r3, #0
 8004752:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475c:	2b00      	cmp	r3, #0
 800475e:	d041      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004764:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004768:	d02a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800476a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800476e:	d824      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004770:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004776:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800477a:	d81e      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004784:	d010      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004786:	e018      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004788:	4b86      	ldr	r3, [pc, #536]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a85      	ldr	r2, [pc, #532]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004792:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004794:	e015      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fabb 	bl	8004d18 <RCCEx_PLLSAI1_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a6:	e00c      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3320      	adds	r3, #32
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fba6 	bl	8004f00 <RCCEx_PLLSAI2_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047b8:	e003      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	74fb      	strb	r3, [r7, #19]
      break;
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047c8:	4b76      	ldr	r3, [pc, #472]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d6:	4973      	ldr	r1, [pc, #460]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80047de:	e001      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d041      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047f8:	d02a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047fe:	d824      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004804:	d008      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800480a:	d81e      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004814:	d010      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004816:	e018      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004818:	4b62      	ldr	r3, [pc, #392]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a61      	ldr	r2, [pc, #388]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004822:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004824:	e015      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fa73 	bl	8004d18 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004836:	e00c      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3320      	adds	r3, #32
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb5e 	bl	8004f00 <RCCEx_PLLSAI2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004848:	e003      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	74fb      	strb	r3, [r7, #19]
      break;
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004858:	4b52      	ldr	r3, [pc, #328]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004866:	494f      	ldr	r1, [pc, #316]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a0 	beq.w	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004886:	4b47      	ldr	r3, [pc, #284]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b41      	ldr	r3, [pc, #260]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	4a40      	ldr	r2, [pc, #256]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a8:	4b3e      	ldr	r3, [pc, #248]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b4:	2301      	movs	r3, #1
 80048b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b8:	4b3b      	ldr	r3, [pc, #236]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3a      	ldr	r2, [pc, #232]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c4:	f7fc fbe2 	bl	800108c <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048ca:	e009      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048cc:	f7fc fbde 	bl	800108c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	74fb      	strb	r3, [r7, #19]
        break;
 80048de:	e005      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e0:	4b31      	ldr	r3, [pc, #196]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d15c      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f2:	4b2c      	ldr	r3, [pc, #176]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01f      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d019      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004910:	4b24      	ldr	r3, [pc, #144]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800491c:	4b21      	ldr	r3, [pc, #132]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	4a20      	ldr	r2, [pc, #128]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800492c:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004932:	4a1c      	ldr	r2, [pc, #112]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800493c:	4a19      	ldr	r2, [pc, #100]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fc fb9d 	bl	800108c <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004954:	e00b      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fc fb99 	bl	800108c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d902      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	74fb      	strb	r3, [r7, #19]
            break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496e:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ec      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004982:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004992:	4904      	ldr	r1, [pc, #16]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800499a:	e009      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b0:	7c7b      	ldrb	r3, [r7, #17]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	4a9d      	ldr	r2, [pc, #628]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ce:	4b98      	ldr	r3, [pc, #608]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 0203 	bic.w	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	4994      	ldr	r1, [pc, #592]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f023 020c 	bic.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	498c      	ldr	r1, [pc, #560]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a12:	4b87      	ldr	r3, [pc, #540]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	4983      	ldr	r1, [pc, #524]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a34:	4b7e      	ldr	r3, [pc, #504]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	497b      	ldr	r1, [pc, #492]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a56:	4b76      	ldr	r3, [pc, #472]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a64:	4972      	ldr	r1, [pc, #456]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a78:	4b6d      	ldr	r3, [pc, #436]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	496a      	ldr	r1, [pc, #424]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9a:	4b65      	ldr	r3, [pc, #404]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa8:	4961      	ldr	r1, [pc, #388]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004abc:	4b5c      	ldr	r3, [pc, #368]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aca:	4959      	ldr	r1, [pc, #356]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ade:	4b54      	ldr	r3, [pc, #336]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aec:	4950      	ldr	r1, [pc, #320]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b00:	4b4b      	ldr	r3, [pc, #300]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	4948      	ldr	r1, [pc, #288]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b22:	4b43      	ldr	r3, [pc, #268]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b30:	493f      	ldr	r1, [pc, #252]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d028      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b44:	4b3a      	ldr	r3, [pc, #232]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b52:	4937      	ldr	r1, [pc, #220]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b62:	d106      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b64:	4b32      	ldr	r3, [pc, #200]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a31      	ldr	r2, [pc, #196]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e011      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b7a:	d10c      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f8c8 	bl	8004d18 <RCCEx_PLLSAI1_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d028      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ba2:	4b23      	ldr	r3, [pc, #140]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	491f      	ldr	r1, [pc, #124]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bcc:	60d3      	str	r3, [r2, #12]
 8004bce:	e011      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f899 	bl	8004d18 <RCCEx_PLLSAI1_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0e:	4908      	ldr	r1, [pc, #32]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1e:	d109      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c20:	4b03      	ldr	r3, [pc, #12]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a02      	ldr	r2, [pc, #8]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c2a:	60d3      	str	r3, [r2, #12]
 8004c2c:	e014      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f867 	bl	8004d18 <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02f      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c64:	4b2b      	ldr	r3, [pc, #172]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c72:	4928      	ldr	r1, [pc, #160]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c82:	d10d      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f844 	bl	8004d18 <RCCEx_PLLSAI1_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d014      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	74bb      	strb	r3, [r7, #18]
 8004c9e:	e011      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3320      	adds	r3, #32
 8004cae:	2102      	movs	r1, #2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f925 	bl	8004f00 <RCCEx_PLLSAI2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd0:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cde:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cf2:	4b08      	ldr	r3, [pc, #32]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d02:	4904      	ldr	r1, [pc, #16]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000

08004d18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d26:	4b75      	ldr	r3, [pc, #468]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d018      	beq.n	8004d64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d32:	4b72      	ldr	r3, [pc, #456]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0203 	and.w	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d10d      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
       ||
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
       ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d047      	beq.n	8004dee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
 8004d62:	e044      	b.n	8004dee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d018      	beq.n	8004d9e <RCCEx_PLLSAI1_Config+0x86>
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d825      	bhi.n	8004dbc <RCCEx_PLLSAI1_Config+0xa4>
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d002      	beq.n	8004d7a <RCCEx_PLLSAI1_Config+0x62>
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d009      	beq.n	8004d8c <RCCEx_PLLSAI1_Config+0x74>
 8004d78:	e020      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d7a:	4b60      	ldr	r3, [pc, #384]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11d      	bne.n	8004dc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d8a:	e01a      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d116      	bne.n	8004dc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9c:	e013      	b.n	8004dc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d9e:	4b57      	ldr	r3, [pc, #348]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10f      	bne.n	8004dca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004daa:	4b54      	ldr	r3, [pc, #336]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dba:	e006      	b.n	8004dca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc0:	e004      	b.n	8004dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6819      	ldr	r1, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	430b      	orrs	r3, r1
 8004de8:	4944      	ldr	r1, [pc, #272]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d17d      	bne.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004df4:	4b41      	ldr	r3, [pc, #260]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a40      	ldr	r2, [pc, #256]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e00:	f7fc f944 	bl	800108c <HAL_GetTick>
 8004e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e06:	e009      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e08:	f7fc f940 	bl	800108c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d902      	bls.n	8004e1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	73fb      	strb	r3, [r7, #15]
        break;
 8004e1a:	e005      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e1c:	4b37      	ldr	r3, [pc, #220]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ef      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d160      	bne.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d111      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e34:	4b31      	ldr	r3, [pc, #196]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6892      	ldr	r2, [r2, #8]
 8004e44:	0211      	lsls	r1, r2, #8
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	0912      	lsrs	r2, r2, #4
 8004e4c:	0452      	lsls	r2, r2, #17
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	492a      	ldr	r1, [pc, #168]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]
 8004e56:	e027      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d112      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e5e:	4b27      	ldr	r3, [pc, #156]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6892      	ldr	r2, [r2, #8]
 8004e6e:	0211      	lsls	r1, r2, #8
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6912      	ldr	r2, [r2, #16]
 8004e74:	0852      	lsrs	r2, r2, #1
 8004e76:	3a01      	subs	r2, #1
 8004e78:	0552      	lsls	r2, r2, #21
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	491f      	ldr	r1, [pc, #124]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	610b      	str	r3, [r1, #16]
 8004e82:	e011      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6892      	ldr	r2, [r2, #8]
 8004e94:	0211      	lsls	r1, r2, #8
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6952      	ldr	r2, [r2, #20]
 8004e9a:	0852      	lsrs	r2, r2, #1
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	0652      	lsls	r2, r2, #25
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	4916      	ldr	r1, [pc, #88]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ea8:	4b14      	ldr	r3, [pc, #80]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a13      	ldr	r2, [pc, #76]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fc f8ea 	bl	800108c <HAL_GetTick>
 8004eb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eba:	e009      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ebc:	f7fc f8e6 	bl	800108c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d902      	bls.n	8004ed0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ece:	e005      	b.n	8004edc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ef      	beq.n	8004ebc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	4904      	ldr	r1, [pc, #16]	@ (8004efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000

08004f00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d018      	beq.n	8004f4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f1a:	4b67      	ldr	r3, [pc, #412]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0203 	and.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d10d      	bne.n	8004f46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f32:	4b61      	ldr	r3, [pc, #388]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
       ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d047      	beq.n	8004fd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
 8004f4a:	e044      	b.n	8004fd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d018      	beq.n	8004f86 <RCCEx_PLLSAI2_Config+0x86>
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d825      	bhi.n	8004fa4 <RCCEx_PLLSAI2_Config+0xa4>
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d002      	beq.n	8004f62 <RCCEx_PLLSAI2_Config+0x62>
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d009      	beq.n	8004f74 <RCCEx_PLLSAI2_Config+0x74>
 8004f60:	e020      	b.n	8004fa4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f62:	4b55      	ldr	r3, [pc, #340]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11d      	bne.n	8004faa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f72:	e01a      	b.n	8004faa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f74:	4b50      	ldr	r3, [pc, #320]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d116      	bne.n	8004fae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f84:	e013      	b.n	8004fae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f86:	4b4c      	ldr	r3, [pc, #304]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10f      	bne.n	8004fb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f92:	4b49      	ldr	r3, [pc, #292]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fa2:	e006      	b.n	8004fb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa8:	e004      	b.n	8004fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fba:	4b3f      	ldr	r3, [pc, #252]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	4939      	ldr	r1, [pc, #228]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d167      	bne.n	80050ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fdc:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a35      	ldr	r2, [pc, #212]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe8:	f7fc f850 	bl	800108c <HAL_GetTick>
 8004fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fee:	e009      	b.n	8005004 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ff0:	f7fc f84c 	bl	800108c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d902      	bls.n	8005004 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	73fb      	strb	r3, [r7, #15]
        break;
 8005002:	e005      	b.n	8005010 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005004:	4b2c      	ldr	r3, [pc, #176]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ef      	bne.n	8004ff0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d14a      	bne.n	80050ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d111      	bne.n	8005040 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800501c:	4b26      	ldr	r3, [pc, #152]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6892      	ldr	r2, [r2, #8]
 800502c:	0211      	lsls	r1, r2, #8
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68d2      	ldr	r2, [r2, #12]
 8005032:	0912      	lsrs	r2, r2, #4
 8005034:	0452      	lsls	r2, r2, #17
 8005036:	430a      	orrs	r2, r1
 8005038:	491f      	ldr	r1, [pc, #124]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	614b      	str	r3, [r1, #20]
 800503e:	e011      	b.n	8005064 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005040:	4b1d      	ldr	r3, [pc, #116]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005048:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6892      	ldr	r2, [r2, #8]
 8005050:	0211      	lsls	r1, r2, #8
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6912      	ldr	r2, [r2, #16]
 8005056:	0852      	lsrs	r2, r2, #1
 8005058:	3a01      	subs	r2, #1
 800505a:	0652      	lsls	r2, r2, #25
 800505c:	430a      	orrs	r2, r1
 800505e:	4916      	ldr	r1, [pc, #88]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005060:	4313      	orrs	r3, r2
 8005062:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005064:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a13      	ldr	r2, [pc, #76]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800506e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fc f80c 	bl	800108c <HAL_GetTick>
 8005074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005076:	e009      	b.n	800508c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005078:	f7fc f808 	bl	800108c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d902      	bls.n	800508c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	73fb      	strb	r3, [r7, #15]
          break;
 800508a:	e005      	b.n	8005098 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ef      	beq.n	8005078 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	4904      	ldr	r1, [pc, #16]	@ (80050b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000

080050bc <memset>:
 80050bc:	4402      	add	r2, r0
 80050be:	4603      	mov	r3, r0
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d100      	bne.n	80050c6 <memset+0xa>
 80050c4:	4770      	bx	lr
 80050c6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ca:	e7f9      	b.n	80050c0 <memset+0x4>

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005104 <__libc_init_array+0x38>)
 80050d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005108 <__libc_init_array+0x3c>)
 80050d2:	1b64      	subs	r4, r4, r5
 80050d4:	10a4      	asrs	r4, r4, #2
 80050d6:	2600      	movs	r6, #0
 80050d8:	42a6      	cmp	r6, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	4d0b      	ldr	r5, [pc, #44]	@ (800510c <__libc_init_array+0x40>)
 80050de:	4c0c      	ldr	r4, [pc, #48]	@ (8005110 <__libc_init_array+0x44>)
 80050e0:	f000 f818 	bl	8005114 <_init>
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	2600      	movs	r6, #0
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f4:	4798      	blx	r3
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fe:	4798      	blx	r3
 8005100:	3601      	adds	r6, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	0800516c 	.word	0x0800516c
 8005108:	0800516c 	.word	0x0800516c
 800510c:	0800516c 	.word	0x0800516c
 8005110:	08005170 	.word	0x08005170

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
