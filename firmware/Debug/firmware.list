
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f20  08004f20  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f20  08004f20  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f20  08004f20  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f24  08004f24  00005f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08004f34  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004f34  00006144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b002  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002184  00000000  00000000  0001103e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  000131c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000846  00000000  00000000  00013cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002558e  00000000  00000000  00014506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e74e  00000000  00000000  00039a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e8c  00000000  00000000  000481e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a06e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002abc  00000000  00000000  0012a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0012cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ec0 	.word	0x08004ec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ec0 	.word	0x08004ec0

080001c8 <get_bmp_calibration_data>:
int32_t bmpUP;
int32_t bmpB5;
int32_t bmpT;
int32_t bmpP;

void get_bmp_calibration_data(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	readRegister(BMP180_ADDR, AC1_H, calibration_data, 22);
 80001cc:	2316      	movs	r3, #22
 80001ce:	4a03      	ldr	r2, [pc, #12]	@ (80001dc <get_bmp_calibration_data+0x14>)
 80001d0:	21aa      	movs	r1, #170	@ 0xaa
 80001d2:	2077      	movs	r0, #119	@ 0x77
 80001d4:	f000 fa80 	bl	80006d8 <readRegister>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000028 	.word	0x20000028

080001e0 <get_bmp_ut>:

void get_bmp_ut(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
	writeRegister(BMP180_ADDR, BMP180_CTRL_MEAS, 0x2E);
 80001e6:	222e      	movs	r2, #46	@ 0x2e
 80001e8:	21f4      	movs	r1, #244	@ 0xf4
 80001ea:	2077      	movs	r0, #119	@ 0x77
 80001ec:	f000 fa4a 	bl	8000684 <writeRegister>
	HAL_Delay(5);
 80001f0:	2005      	movs	r0, #5
 80001f2:	f000 fe2d 	bl	8000e50 <HAL_Delay>
	uint8_t data[2];
	readRegister(BMP180_ADDR, BMP180_OUT_MSB, data, 2);
 80001f6:	1d3a      	adds	r2, r7, #4
 80001f8:	2302      	movs	r3, #2
 80001fa:	21f6      	movs	r1, #246	@ 0xf6
 80001fc:	2077      	movs	r0, #119	@ 0x77
 80001fe:	f000 fa6b 	bl	80006d8 <readRegister>
	bmpUT = (data[0] << 8) | data[1];
 8000202:	793b      	ldrb	r3, [r7, #4]
 8000204:	021b      	lsls	r3, r3, #8
 8000206:	797a      	ldrb	r2, [r7, #5]
 8000208:	4313      	orrs	r3, r2
 800020a:	4a03      	ldr	r2, [pc, #12]	@ (8000218 <get_bmp_ut+0x38>)
 800020c:	6013      	str	r3, [r2, #0]
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000040 	.word	0x20000040

0800021c <get_bmp_up>:

void get_bmp_up(){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
	writeRegister(BMP180_ADDR, BMP180_CTRL_MEAS, 0x34);
 8000222:	2234      	movs	r2, #52	@ 0x34
 8000224:	21f4      	movs	r1, #244	@ 0xf4
 8000226:	2077      	movs	r0, #119	@ 0x77
 8000228:	f000 fa2c 	bl	8000684 <writeRegister>
	uint8_t data[3];
	readRegister(BMP180_ADDR, BMP180_OUT_MSB, data, 3);
 800022c:	1d3a      	adds	r2, r7, #4
 800022e:	2303      	movs	r3, #3
 8000230:	21f6      	movs	r1, #246	@ 0xf6
 8000232:	2077      	movs	r0, #119	@ 0x77
 8000234:	f000 fa50 	bl	80006d8 <readRegister>
	bmpUP = (((int32_t)(data[0]) << 16) | ((int32_t)(data[1]) << 8) | (int32_t)(data[2])) >> (8-OSS_BMP180);
 8000238:	793b      	ldrb	r3, [r7, #4]
 800023a:	041a      	lsls	r2, r3, #16
 800023c:	797b      	ldrb	r3, [r7, #5]
 800023e:	021b      	lsls	r3, r3, #8
 8000240:	4313      	orrs	r3, r2
 8000242:	79ba      	ldrb	r2, [r7, #6]
 8000244:	4313      	orrs	r3, r2
 8000246:	121b      	asrs	r3, r3, #8
 8000248:	4a02      	ldr	r2, [pc, #8]	@ (8000254 <get_bmp_up+0x38>)
 800024a:	6013      	str	r3, [r2, #0]
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000044 	.word	0x20000044

08000258 <get_bmp_p>:
	bmpT = (B5+8) >> 4;
	bmpT /= 10;
	bmpT = (9.0/5.0)*(bmpT)+32;
}

void get_bmp_p(){
 8000258:	b580      	push	{r7, lr}
 800025a:	b08e      	sub	sp, #56	@ 0x38
 800025c:	af00      	add	r7, sp, #0
	get_bmp_calibration_data();
 800025e:	f7ff ffb3 	bl	80001c8 <get_bmp_calibration_data>
	get_bmp_ut();
 8000262:	f7ff ffbd 	bl	80001e0 <get_bmp_ut>
	get_bmp_up();
 8000266:	f7ff ffd9 	bl	800021c <get_bmp_up>
	int16_t AC1 = (calibration_data[0] << 8) | calibration_data[1];
 800026a:	4b7c      	ldr	r3, [pc, #496]	@ (800045c <get_bmp_p+0x204>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	021b      	lsls	r3, r3, #8
 8000270:	b21a      	sxth	r2, r3
 8000272:	4b7a      	ldr	r3, [pc, #488]	@ (800045c <get_bmp_p+0x204>)
 8000274:	785b      	ldrb	r3, [r3, #1]
 8000276:	b21b      	sxth	r3, r3
 8000278:	4313      	orrs	r3, r2
 800027a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t AC2  = (calibration_data[2] << 8) | calibration_data[3];
 800027c:	4b77      	ldr	r3, [pc, #476]	@ (800045c <get_bmp_p+0x204>)
 800027e:	789b      	ldrb	r3, [r3, #2]
 8000280:	021b      	lsls	r3, r3, #8
 8000282:	b21a      	sxth	r2, r3
 8000284:	4b75      	ldr	r3, [pc, #468]	@ (800045c <get_bmp_p+0x204>)
 8000286:	78db      	ldrb	r3, [r3, #3]
 8000288:	b21b      	sxth	r3, r3
 800028a:	4313      	orrs	r3, r2
 800028c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t AC3 = (calibration_data[4] << 8) | calibration_data[5];
 800028e:	4b73      	ldr	r3, [pc, #460]	@ (800045c <get_bmp_p+0x204>)
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	021b      	lsls	r3, r3, #8
 8000294:	b21a      	sxth	r2, r3
 8000296:	4b71      	ldr	r3, [pc, #452]	@ (800045c <get_bmp_p+0x204>)
 8000298:	795b      	ldrb	r3, [r3, #5]
 800029a:	b21b      	sxth	r3, r3
 800029c:	4313      	orrs	r3, r2
 800029e:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t AC4 = (calibration_data[6] << 8) | calibration_data[7];
 80002a0:	4b6e      	ldr	r3, [pc, #440]	@ (800045c <get_bmp_p+0x204>)
 80002a2:	799b      	ldrb	r3, [r3, #6]
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	b21a      	sxth	r2, r3
 80002a8:	4b6c      	ldr	r3, [pc, #432]	@ (800045c <get_bmp_p+0x204>)
 80002aa:	79db      	ldrb	r3, [r3, #7]
 80002ac:	b21b      	sxth	r3, r3
 80002ae:	4313      	orrs	r3, r2
 80002b0:	b21b      	sxth	r3, r3
 80002b2:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint16_t AC6 = (calibration_data[10] << 8) | calibration_data[11];
 80002b4:	4b69      	ldr	r3, [pc, #420]	@ (800045c <get_bmp_p+0x204>)
 80002b6:	7a9b      	ldrb	r3, [r3, #10]
 80002b8:	021b      	lsls	r3, r3, #8
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	4b67      	ldr	r3, [pc, #412]	@ (800045c <get_bmp_p+0x204>)
 80002be:	7adb      	ldrb	r3, [r3, #11]
 80002c0:	b21b      	sxth	r3, r3
 80002c2:	4313      	orrs	r3, r2
 80002c4:	b21b      	sxth	r3, r3
 80002c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t AC5 = (calibration_data[8] << 8) | calibration_data[9];
 80002c8:	4b64      	ldr	r3, [pc, #400]	@ (800045c <get_bmp_p+0x204>)
 80002ca:	7a1b      	ldrb	r3, [r3, #8]
 80002cc:	021b      	lsls	r3, r3, #8
 80002ce:	b21a      	sxth	r2, r3
 80002d0:	4b62      	ldr	r3, [pc, #392]	@ (800045c <get_bmp_p+0x204>)
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	b21b      	sxth	r3, r3
 80002d6:	4313      	orrs	r3, r2
 80002d8:	b21b      	sxth	r3, r3
 80002da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int16_t B1 = (calibration_data[12] << 8) | calibration_data[13];
 80002dc:	4b5f      	ldr	r3, [pc, #380]	@ (800045c <get_bmp_p+0x204>)
 80002de:	7b1b      	ldrb	r3, [r3, #12]
 80002e0:	021b      	lsls	r3, r3, #8
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	4b5d      	ldr	r3, [pc, #372]	@ (800045c <get_bmp_p+0x204>)
 80002e6:	7b5b      	ldrb	r3, [r3, #13]
 80002e8:	b21b      	sxth	r3, r3
 80002ea:	4313      	orrs	r3, r2
 80002ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t B2 = (calibration_data[14] << 8) | calibration_data[15];
 80002ee:	4b5b      	ldr	r3, [pc, #364]	@ (800045c <get_bmp_p+0x204>)
 80002f0:	7b9b      	ldrb	r3, [r3, #14]
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	4b59      	ldr	r3, [pc, #356]	@ (800045c <get_bmp_p+0x204>)
 80002f8:	7bdb      	ldrb	r3, [r3, #15]
 80002fa:	b21b      	sxth	r3, r3
 80002fc:	4313      	orrs	r3, r2
 80002fe:	853b      	strh	r3, [r7, #40]	@ 0x28
	int16_t MC = (calibration_data[18] << 8) | calibration_data[19];
 8000300:	4b56      	ldr	r3, [pc, #344]	@ (800045c <get_bmp_p+0x204>)
 8000302:	7c9b      	ldrb	r3, [r3, #18]
 8000304:	021b      	lsls	r3, r3, #8
 8000306:	b21a      	sxth	r2, r3
 8000308:	4b54      	ldr	r3, [pc, #336]	@ (800045c <get_bmp_p+0x204>)
 800030a:	7cdb      	ldrb	r3, [r3, #19]
 800030c:	b21b      	sxth	r3, r3
 800030e:	4313      	orrs	r3, r2
 8000310:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t MD = (calibration_data[20] << 8) | calibration_data[21];
 8000312:	4b52      	ldr	r3, [pc, #328]	@ (800045c <get_bmp_p+0x204>)
 8000314:	7d1b      	ldrb	r3, [r3, #20]
 8000316:	021b      	lsls	r3, r3, #8
 8000318:	b21a      	sxth	r2, r3
 800031a:	4b50      	ldr	r3, [pc, #320]	@ (800045c <get_bmp_p+0x204>)
 800031c:	7d5b      	ldrb	r3, [r3, #21]
 800031e:	b21b      	sxth	r3, r3
 8000320:	4313      	orrs	r3, r2
 8000322:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int32_t X1 = ((bmpUT - (int32_t)AC6)*(int32_t)AC5) >> 15;
 8000324:	4b4e      	ldr	r3, [pc, #312]	@ (8000460 <get_bmp_p+0x208>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800032a:	1ad3      	subs	r3, r2, r3
 800032c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800032e:	fb02 f303 	mul.w	r3, r2, r3
 8000332:	13db      	asrs	r3, r3, #15
 8000334:	623b      	str	r3, [r7, #32]
	int32_t X2 = ((int32_t)MC<<11)/(X1+(int32_t)MD);
 8000336:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800033a:	02da      	lsls	r2, r3, #11
 800033c:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	440b      	add	r3, r1
 8000344:	fb92 f3f3 	sdiv	r3, r2, r3
 8000348:	61fb      	str	r3, [r7, #28]
	int32_t B5 = X1 + X2;
 800034a:	6a3a      	ldr	r2, [r7, #32]
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	4413      	add	r3, r2
 8000350:	61bb      	str	r3, [r7, #24]

	int32_t B6 = B5 - 4000;
 8000352:	69bb      	ldr	r3, [r7, #24]
 8000354:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000358:	617b      	str	r3, [r7, #20]
	X1 = ((int32_t)B2*((B6*B6) >> 12))>>11;
 800035a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	fb03 f303 	mul.w	r3, r3, r3
 8000364:	131b      	asrs	r3, r3, #12
 8000366:	fb02 f303 	mul.w	r3, r2, r3
 800036a:	12db      	asrs	r3, r3, #11
 800036c:	623b      	str	r3, [r7, #32]
	X2 = ((int32_t)AC2*B6)>>11;
 800036e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000372:	697a      	ldr	r2, [r7, #20]
 8000374:	fb02 f303 	mul.w	r3, r2, r3
 8000378:	12db      	asrs	r3, r3, #11
 800037a:	61fb      	str	r3, [r7, #28]
	int32_t X3 = X1+X2;
 800037c:	6a3a      	ldr	r2, [r7, #32]
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	4413      	add	r3, r2
 8000382:	613b      	str	r3, [r7, #16]
	int32_t B3 = ((((int32_t)AC1*4+X3)<<OSS_BMP180)+2) >> 2;
 8000384:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000388:	009a      	lsls	r2, r3, #2
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	4413      	add	r3, r2
 800038e:	3302      	adds	r3, #2
 8000390:	109b      	asrs	r3, r3, #2
 8000392:	60fb      	str	r3, [r7, #12]
	X1 = ((int32_t)AC3*B6)>>13;
 8000394:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	fb02 f303 	mul.w	r3, r2, r3
 800039e:	135b      	asrs	r3, r3, #13
 80003a0:	623b      	str	r3, [r7, #32]
	X2 = ((int32_t)B1 * ((B6*B6)>>12))>>16;
 80003a2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	fb03 f303 	mul.w	r3, r3, r3
 80003ac:	131b      	asrs	r3, r3, #12
 80003ae:	fb02 f303 	mul.w	r3, r2, r3
 80003b2:	141b      	asrs	r3, r3, #16
 80003b4:	61fb      	str	r3, [r7, #28]
	X3 = ((X1+X2)+2)>>2;
 80003b6:	6a3a      	ldr	r2, [r7, #32]
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	4413      	add	r3, r2
 80003bc:	3302      	adds	r3, #2
 80003be:	109b      	asrs	r3, r3, #2
 80003c0:	613b      	str	r3, [r7, #16]
	uint32_t B4 = ((uint32_t)AC4*(X3+32768L))>>15;
 80003c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80003c4:	693a      	ldr	r2, [r7, #16]
 80003c6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80003ca:	fb02 f303 	mul.w	r3, r2, r3
 80003ce:	0bdb      	lsrs	r3, r3, #15
 80003d0:	60bb      	str	r3, [r7, #8]
	uint32_t B7 = (bmpUP - B3)*(50000UL >>OSS_BMP180);
 80003d2:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <get_bmp_p+0x20c>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	f24c 3350 	movw	r3, #50000	@ 0xc350
 80003e0:	fb02 f303 	mul.w	r3, r2, r3
 80003e4:	607b      	str	r3, [r7, #4]

	if(B7 < 0x80000000){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db08      	blt.n	80003fe <get_bmp_p+0x1a6>
	    bmpP = (B7/B4)*2;
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000468 <get_bmp_p+0x210>)
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	e007      	b.n	800040e <get_bmp_p+0x1b6>
	  }
	  else{
	    bmpP = (B7/B4)<<1;
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	fbb2 f3f3 	udiv	r3, r2, r3
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	461a      	mov	r2, r3
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <get_bmp_p+0x210>)
 800040c:	601a      	str	r2, [r3, #0]
	  }

	X1 = (bmpP>>8)*(bmpP>>8);
 800040e:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <get_bmp_p+0x210>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	121b      	asrs	r3, r3, #8
 8000414:	4a14      	ldr	r2, [pc, #80]	@ (8000468 <get_bmp_p+0x210>)
 8000416:	6812      	ldr	r2, [r2, #0]
 8000418:	1212      	asrs	r2, r2, #8
 800041a:	fb02 f303 	mul.w	r3, r2, r3
 800041e:	623b      	str	r3, [r7, #32]
	X1 = (X1*3038L) >> 16;
 8000420:	6a3b      	ldr	r3, [r7, #32]
 8000422:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000426:	fb02 f303 	mul.w	r3, r2, r3
 800042a:	141b      	asrs	r3, r3, #16
 800042c:	623b      	str	r3, [r7, #32]
	X2 = (-7357L*bmpP) >> 16;
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <get_bmp_p+0x210>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <get_bmp_p+0x214>)
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	141b      	asrs	r3, r3, #16
 800043a:	61fb      	str	r3, [r7, #28]
	bmpP = bmpP + ((X1+X2+3791L)>>4);
 800043c:	6a3a      	ldr	r2, [r7, #32]
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	4413      	add	r3, r2
 8000442:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000446:	111a      	asrs	r2, r3, #4
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <get_bmp_p+0x210>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4413      	add	r3, r2
 800044e:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <get_bmp_p+0x210>)
 8000450:	6013      	str	r3, [r2, #0]
}
 8000452:	bf00      	nop
 8000454:	3738      	adds	r7, #56	@ 0x38
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000028 	.word	0x20000028
 8000460:	20000040 	.word	0x20000040
 8000464:	20000044 	.word	0x20000044
 8000468:	20000048 	.word	0x20000048
 800046c:	ffffe343 	.word	0xffffe343

08000470 <initDS3231>:
uint8_t date;
uint8_t month;
uint16_t year;
bool AMorPM;

void initDS3231(uint16_t y, uint8_t * arr, bool PMnAM, int h){
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	4603      	mov	r3, r0
 800047c:	81fb      	strh	r3, [r7, #14]
 800047e:	4613      	mov	r3, r2
 8000480:	737b      	strb	r3, [r7, #13]
	uint8_t data[7];
	data[6] = dec2bcd(y%100);
 8000482:	89fb      	ldrh	r3, [r7, #14]
 8000484:	4a29      	ldr	r2, [pc, #164]	@ (800052c <initDS3231+0xbc>)
 8000486:	fba2 1203 	umull	r1, r2, r2, r3
 800048a:	0952      	lsrs	r2, r2, #5
 800048c:	2164      	movs	r1, #100	@ 0x64
 800048e:	fb01 f202 	mul.w	r2, r1, r2
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	b29b      	uxth	r3, r3
 8000496:	b2db      	uxtb	r3, r3
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f8d1 	bl	8000640 <dec2bcd>
 800049e:	4603      	mov	r3, r0
 80004a0:	76bb      	strb	r3, [r7, #26]
	for(int i = 0; i < 6; i++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	61fb      	str	r3, [r7, #28]
 80004a6:	e011      	b.n	80004cc <initDS3231+0x5c>
		data[i] = dec2bcd(arr[i]);
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	68ba      	ldr	r2, [r7, #8]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f8c5 	bl	8000640 <dec2bcd>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4619      	mov	r1, r3
 80004ba:	f107 0214 	add.w	r2, r7, #20
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	4413      	add	r3, r2
 80004c2:	460a      	mov	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	3301      	adds	r3, #1
 80004ca:	61fb      	str	r3, [r7, #28]
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	2b05      	cmp	r3, #5
 80004d0:	ddea      	ble.n	80004a8 <initDS3231+0x38>
	if(PMnAM)
 80004d2:	7b7b      	ldrb	r3, [r7, #13]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d005      	beq.n	80004e4 <initDS3231+0x74>
		data[2] |= 0b00100000;
 80004d8:	7dbb      	ldrb	r3, [r7, #22]
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	75bb      	strb	r3, [r7, #22]
 80004e2:	e004      	b.n	80004ee <initDS3231+0x7e>
	else
		data[2] &= 0b11011111;
 80004e4:	7dbb      	ldrb	r3, [r7, #22]
 80004e6:	f023 0320 	bic.w	r3, r3, #32
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	75bb      	strb	r3, [r7, #22]
	switch(h){
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b0c      	cmp	r3, #12
 80004f2:	d003      	beq.n	80004fc <initDS3231+0x8c>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b18      	cmp	r3, #24
 80004f8:	d006      	beq.n	8000508 <initDS3231+0x98>
			data[2] |= 0b01000000;
			break;
		case 24:
			data[2] &= 0b10111111;
		default:
			break;
 80004fa:	e00a      	b.n	8000512 <initDS3231+0xa2>
			data[2] |= 0b01000000;
 80004fc:	7dbb      	ldrb	r3, [r7, #22]
 80004fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000502:	b2db      	uxtb	r3, r3
 8000504:	75bb      	strb	r3, [r7, #22]
			break;
 8000506:	e005      	b.n	8000514 <initDS3231+0xa4>
			data[2] &= 0b10111111;
 8000508:	7dbb      	ldrb	r3, [r7, #22]
 800050a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800050e:	b2db      	uxtb	r3, r3
 8000510:	75bb      	strb	r3, [r7, #22]
			break;
 8000512:	bf00      	nop
	}
	writeRegisters(DS3231_ADDR, 0x00, data, 7);
 8000514:	f107 0214 	add.w	r2, r7, #20
 8000518:	2307      	movs	r3, #7
 800051a:	2100      	movs	r1, #0
 800051c:	2068      	movs	r0, #104	@ 0x68
 800051e:	f000 f91f 	bl	8000760 <writeRegisters>
	//readRegister(DS3231_ADDR, 0x00, ds3231_data, 7);
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	51eb851f 	.word	0x51eb851f

08000530 <getDateAndTime>:

void getDateAndTime(){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	uint8_t data[7];
	readRegister(DS3231_ADDR, 0x00, data, 7);
 8000536:	463a      	mov	r2, r7
 8000538:	2307      	movs	r3, #7
 800053a:	2100      	movs	r1, #0
 800053c:	2068      	movs	r0, #104	@ 0x68
 800053e:	f000 f8cb 	bl	80006d8 <readRegister>
	second = bcd2dec(data[0]);
 8000542:	783b      	ldrb	r3, [r7, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f861 	bl	800060c <bcd2dec>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <getDateAndTime+0xbc>)
 8000550:	701a      	strb	r2, [r3, #0]
	minute = bcd2dec(data[1]);
 8000552:	787b      	ldrb	r3, [r7, #1]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f859 	bl	800060c <bcd2dec>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <getDateAndTime+0xc0>)
 8000560:	701a      	strb	r2, [r3, #0]
	hour = bcd2dec(data[2]&0b00011111);
 8000562:	78bb      	ldrb	r3, [r7, #2]
 8000564:	f003 031f 	and.w	r3, r3, #31
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f84e 	bl	800060c <bcd2dec>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <getDateAndTime+0xc4>)
 8000576:	701a      	strb	r2, [r3, #0]
	AMorPM = (hour >> 3)&1;
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <getDateAndTime+0xc4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	08db      	lsrs	r3, r3, #3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <getDateAndTime+0xc8>)
 8000590:	701a      	strb	r2, [r3, #0]
	hour &= 0b00011111;
 8000592:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <getDateAndTime+0xc4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	f003 031f 	and.w	r3, r3, #31
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <getDateAndTime+0xc4>)
 800059e:	701a      	strb	r2, [r3, #0]
	day = bcd2dec(data[3]);
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f832 	bl	800060c <bcd2dec>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <getDateAndTime+0xcc>)
 80005ae:	701a      	strb	r2, [r3, #0]
	date = bcd2dec(data[4]);
 80005b0:	793b      	ldrb	r3, [r7, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f82a 	bl	800060c <bcd2dec>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <getDateAndTime+0xd0>)
 80005be:	701a      	strb	r2, [r3, #0]
	month = bcd2dec(data[5]);
 80005c0:	797b      	ldrb	r3, [r7, #5]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f822 	bl	800060c <bcd2dec>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <getDateAndTime+0xd4>)
 80005ce:	701a      	strb	r2, [r3, #0]
	year = 2000+bcd2dec(data[6]);
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f81a 	bl	800060c <bcd2dec>
 80005d8:	4603      	mov	r3, r0
 80005da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <getDateAndTime+0xd8>)
 80005e2:	801a      	strh	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000004c 	.word	0x2000004c
 80005f0:	2000004d 	.word	0x2000004d
 80005f4:	2000004e 	.word	0x2000004e
 80005f8:	20000054 	.word	0x20000054
 80005fc:	2000004f 	.word	0x2000004f
 8000600:	20000050 	.word	0x20000050
 8000604:	20000051 	.word	0x20000051
 8000608:	20000052 	.word	0x20000052

0800060c <bcd2dec>:





uint8_t bcd2dec(uint8_t bcd){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  return bcd/16*10 + bcd%16;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	4413      	add	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4413      	add	r3, r2
 8000630:	b2db      	uxtb	r3, r3
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <dec2bcd>:

uint8_t dec2bcd(uint8_t dec){
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  return dec/10*16 + dec%10;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4a0c      	ldr	r2, [pc, #48]	@ (8000680 <dec2bcd+0x40>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <dec2bcd+0x40>)
 800065e:	fba3 1302 	umull	r1, r3, r3, r2
 8000662:	08d9      	lsrs	r1, r3, #3
 8000664:	460b      	mov	r3, r1
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4403      	add	r3, r0
 8000672:	b2db      	uxtb	r3, r3
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	cccccccd 	.word	0xcccccccd

08000684 <writeRegister>:

bool sensorReady = 0;
bool transmitterReady = 0;
I2C_HandleTypeDef hI2C;

void writeRegister(uint8_t addr, uint8_t regAddr, uint8_t value){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	460b      	mov	r3, r1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	4613      	mov	r3, r2
 8000694:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {regAddr, value};
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	733b      	strb	r3, [r7, #12]
 800069a:	797b      	ldrb	r3, [r7, #5]
 800069c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 2);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	b299      	uxth	r1, r3
 80006a6:	f107 020c 	add.w	r2, r7, #12
 80006aa:	2302      	movs	r3, #2
 80006ac:	4808      	ldr	r0, [pc, #32]	@ (80006d0 <writeRegister+0x4c>)
 80006ae:	f001 f991 	bl	80019d4 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 80006b2:	bf00      	nop
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <writeRegister+0x50>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1f8      	bne.n	80006b4 <writeRegister+0x30>
	sensorReady = 0;
 80006c2:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <writeRegister+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000058 	.word	0x20000058
 80006d4:	20000055 	.word	0x20000055

080006d8 <readRegister>:

void readRegister(uint8_t addr, uint8_t regAddr, uint8_t *result, uint16_t size){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	460b      	mov	r3, r1
 80006e8:	71bb      	strb	r3, [r7, #6]
 80006ea:	4613      	mov	r3, r2
 80006ec:	80bb      	strh	r3, [r7, #4]
	uint8_t data[1] = {regAddr};
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 1);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b299      	uxth	r1, r3
 80006fa:	f107 020c 	add.w	r2, r7, #12
 80006fe:	2301      	movs	r3, #1
 8000700:	4814      	ldr	r0, [pc, #80]	@ (8000754 <readRegister+0x7c>)
 8000702:	f001 f967 	bl	80019d4 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 8000706:	bf00      	nop
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <readRegister+0x80>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f8      	bne.n	8000708 <readRegister+0x30>
	sensorReady = 0;
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <readRegister+0x80>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_DMA(&hI2C, (addr << 1) | (0x01), result, size);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	b21b      	sxth	r3, r3
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	b21b      	sxth	r3, r3
 8000728:	b299      	uxth	r1, r3
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	4809      	ldr	r0, [pc, #36]	@ (8000754 <readRegister+0x7c>)
 8000730:	f001 fa64 	bl	8001bfc <HAL_I2C_Master_Receive_DMA>
	while(!transmitterReady);
 8000734:	bf00      	nop
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <readRegister+0x84>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f083 0301 	eor.w	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f8      	bne.n	8000736 <readRegister+0x5e>
	transmitterReady = 0;
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <readRegister+0x84>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000058 	.word	0x20000058
 8000758:	20000055 	.word	0x20000055
 800075c:	20000056 	.word	0x20000056

08000760 <writeRegisters>:

void writeRegisters(uint8_t addr, uint8_t regAddr, uint8_t *value, uint16_t size){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	603a      	str	r2, [r7, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	460b      	mov	r3, r1
 8000770:	71bb      	strb	r3, [r7, #6]
 8000772:	4613      	mov	r3, r2
 8000774:	80bb      	strh	r3, [r7, #4]
	for(int i = 0; i < size; i++){
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e00f      	b.n	800079c <writeRegisters+0x3c>
		writeRegister(addr, regAddr+i, value[i]);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	4413      	add	r3, r2
 8000784:	b2d9      	uxtb	r1, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff77 	bl	8000684 <writeRegister>
	for(int i = 0; i < size; i++){
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	88bb      	ldrh	r3, [r7, #4]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dbeb      	blt.n	800077c <writeRegisters+0x1c>
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <I2C_Init>:

//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <I2C_Init+0x78>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <I2C_Init+0x7c>)
 80007b8:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <I2C_Init+0x78>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <I2C_Init+0x78>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <I2C_Init+0x78>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <I2C_Init+0x78>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <I2C_Init+0x78>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <I2C_Init+0x78>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <I2C_Init+0x78>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <I2C_Init+0x78>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <I2C_Init+0x78>)
 80007ec:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <I2C_Init+0x80>)
 80007ee:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <I2C_Init+0x78>)
 80007f2:	f001 f853 	bl	800189c <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <I2C_Init+0x50>
	{
		Error_Handler();
 80007fc:	f000 f8e6 	bl	80009cc <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4809      	ldr	r0, [pc, #36]	@ (8000828 <I2C_Init+0x78>)
 8000804:	f002 ffb0 	bl	8003768 <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <I2C_Init+0x62>
	{
		Error_Handler();
 800080e:	f000 f8dd 	bl	80009cc <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <I2C_Init+0x78>)
 8000816:	f002 fff2 	bl	80037fe <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <I2C_Init+0x74>
    {
    	Error_Handler();
 8000820:	f000 f8d4 	bl	80009cc <Error_Handler>
    }
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000058 	.word	0x20000058
 800082c:	40005400 	.word	0x40005400
 8000830:	00100d14 	.word	0x00100d14

08000834 <HAL_I2C_ErrorCallback>:

#define BUFFERSIZE 100
#define DS3231ADDR = 0b1101000


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2CHandle){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a05      	ldr	r2, [pc, #20]	@ (800086c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d102      	bne.n	8000860 <HAL_I2C_MasterTxCpltCallback+0x18>
		sensorReady = 1;
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
	}
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40005400 	.word	0x40005400
 8000870:	20000055 	.word	0x20000055

08000874 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2CHandle){
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d102      	bne.n	800088c <HAL_I2C_MasterRxCpltCallback+0x18>
		transmitterReady = 1;
 8000886:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
	}
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40005400 	.word	0x40005400
 800089c:	20000056 	.word	0x20000056

080008a0 <main>:


int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
  HAL_Init();
 80008a6:	f000 fa5e 	bl	8000d66 <HAL_Init>
  SystemClock_Config();
 80008aa:	f000 f823 	bl	80008f4 <SystemClock_Config>
  DMA_Init();
 80008ae:	f000 f867 	bl	8000980 <DMA_Init>
  I2C_Init();
 80008b2:	f7ff ff7d 	bl	80007b0 <I2C_Init>

  uint8_t result[1];
  initMPU6050(0);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 f88e 	bl	80009d8 <initMPU6050>
  uint8_t arr[6] = {30, 14, 4, 3, 24, 12};
 80008bc:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <main+0x50>)
 80008be:	463b      	mov	r3, r7
 80008c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c4:	6018      	str	r0, [r3, #0]
 80008c6:	3304      	adds	r3, #4
 80008c8:	8019      	strh	r1, [r3, #0]
  while (1)
  {
	  initDS3231(2024, arr, 1, 12);
 80008ca:	4639      	mov	r1, r7
 80008cc:	230c      	movs	r3, #12
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 80008d4:	f7ff fdcc 	bl	8000470 <initDS3231>
	    getDateAndTime();
 80008d8:	f7ff fe2a 	bl	8000530 <getDateAndTime>
	  //getAccelMPU6050();
	  get_bmp_p();
 80008dc:	f7ff fcbc 	bl	8000258 <get_bmp_p>
	  int x = 21;
 80008e0:	2315      	movs	r3, #21
 80008e2:	60fb      	str	r3, [r7, #12]
	  x+=1;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
  {
 80008ea:	bf00      	nop
 80008ec:	e7ed      	b.n	80008ca <main+0x2a>
 80008ee:	bf00      	nop
 80008f0:	08004ed8 	.word	0x08004ed8

080008f4 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b096      	sub	sp, #88	@ 0x58
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2244      	movs	r2, #68	@ 0x44
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f004 fab0 	bl	8004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000916:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800091a:	f002 ffcb 	bl	80038b4 <HAL_PWREx_ControlVoltageScaling>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000924:	f000 f852 	bl	80009cc <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000928:	2310      	movs	r3, #16
 800092a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000934:	2360      	movs	r3, #96	@ 0x60
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f80d 	bl	8003960 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800094c:	f000 f83e 	bl	80009cc <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 fbd5 	bl	8004118 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000974:	f000 f82a 	bl	80009cc <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3758      	adds	r7, #88	@ 0x58
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA_Init>:


//PB6 = SCL1, PB7 = SDA1


void DMA_Init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <DMA_Init+0x48>)
 8000988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <DMA_Init+0x48>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6493      	str	r3, [r2, #72]	@ 0x48
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <DMA_Init+0x48>)
 8000994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2010      	movs	r0, #16
 80009a4:	f000 fb53 	bl	800104e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009a8:	2010      	movs	r0, #16
 80009aa:	f000 fb6c 	bl	8001086 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2011      	movs	r0, #17
 80009b4:	f000 fb4b 	bl	800104e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009b8:	2011      	movs	r0, #17
 80009ba:	f000 fb64 	bl	8001086 <HAL_NVIC_EnableIRQ>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <Error_Handler>:
}



void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  __disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <initMPU6050>:
float accelX;
float accelY;
float accelZ;


void initMPU6050(unsigned char AFS_SEL){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	switch(AFS_SEL){
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d818      	bhi.n	8000a1a <initMPU6050+0x42>
 80009e8:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <initMPU6050+0x18>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a01 	.word	0x08000a01
 80009f4:	08000a09 	.word	0x08000a09
 80009f8:	08000a0f 	.word	0x08000a0f
 80009fc:	08000a15 	.word	0x08000a15
	case RANGE_2G:
		step = 0.00059877;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <initMPU6050+0x8c>)
 8000a02:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <initMPU6050+0x90>)
 8000a04:	601a      	str	r2, [r3, #0]
		break;
 8000a06:	e009      	b.n	8000a1c <initMPU6050+0x44>
	case RANGE_4G:
		step = 0.00119;
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <initMPU6050+0x8c>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <initMPU6050+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
	case RANGE_8G:
		step = 0.002395;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <initMPU6050+0x8c>)
 8000a10:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <initMPU6050+0x98>)
 8000a12:	601a      	str	r2, [r3, #0]
	case RANGE_16G:
		step = 0.00479;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <initMPU6050+0x8c>)
 8000a16:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <initMPU6050+0x9c>)
 8000a18:	601a      	str	r2, [r3, #0]
	default:
		break;
 8000a1a:	bf00      	nop
	}
	writeRegister(MPU6050ADDR, PWR_MGMT_1, 0x00);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	216b      	movs	r1, #107	@ 0x6b
 8000a20:	2069      	movs	r0, #105	@ 0x69
 8000a22:	f7ff fe2f 	bl	8000684 <writeRegister>
	uint8_t temp[1];
	readRegister(MPU6050ADDR, ACCEL_CONFIG, temp, 1);
 8000a26:	f107 020c 	add.w	r2, r7, #12
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	211c      	movs	r1, #28
 8000a2e:	2069      	movs	r0, #105	@ 0x69
 8000a30:	f7ff fe52 	bl	80006d8 <readRegister>
	temp[1] &= 0b11100111;
 8000a34:	7b7b      	ldrb	r3, [r7, #13]
 8000a36:	f023 0318 	bic.w	r3, r3, #24
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	737b      	strb	r3, [r7, #13]
	temp[1] |= (AFS_SEL << 3);
 8000a3e:	7b7b      	ldrb	r3, [r7, #13]
 8000a40:	b25a      	sxtb	r2, r3
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	737b      	strb	r3, [r7, #13]
	writeRegister(MPU6050ADDR, ACCEL_CONFIG, temp[1]);
 8000a50:	7b7b      	ldrb	r3, [r7, #13]
 8000a52:	461a      	mov	r2, r3
 8000a54:	211c      	movs	r1, #28
 8000a56:	2069      	movs	r0, #105	@ 0x69
 8000a58:	f7ff fe14 	bl	8000684 <writeRegister>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000013c 	.word	0x2000013c
 8000a68:	3a1cf6c6 	.word	0x3a1cf6c6
 8000a6c:	3a9bf9c6 	.word	0x3a9bf9c6
 8000a70:	3b1cf56f 	.word	0x3b1cf56f
 8000a74:	3b9cf56f 	.word	0x3b9cf56f

08000a78 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000ac8:	4b57      	ldr	r3, [pc, #348]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000acc:	4a56      	ldr	r2, [pc, #344]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad4:	4b54      	ldr	r3, [pc, #336]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b51      	ldr	r3, [pc, #324]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	4a50      	ldr	r2, [pc, #320]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aec:	4b4e      	ldr	r3, [pc, #312]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afc:	2288      	movs	r2, #136	@ 0x88
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f9b1 	bl	8004e68 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b06:	2340      	movs	r3, #64	@ 0x40
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fcec 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 8000b1e:	f7ff ff55 	bl	80009cc <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000b22:	23c0      	movs	r3, #192	@ 0xc0
 8000b24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b26:	2312      	movs	r3, #18
 8000b28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b32:	2304      	movs	r3, #4
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 8000b36:	4b3c      	ldr	r3, [pc, #240]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b39      	ldr	r3, [pc, #228]	@ (8000c28 <HAL_I2C_MspInit+0x168>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4835      	ldr	r0, [pc, #212]	@ (8000c2c <HAL_I2C_MspInit+0x16c>)
 8000b56:	f000 fcf7 	bl	8001548 <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000b5a:	4b35      	ldr	r3, [pc, #212]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b5c:	4a35      	ldr	r2, [pc, #212]	@ (8000c34 <HAL_I2C_MspInit+0x174>)
 8000b5e:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000b60:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b62:	2203      	movs	r2, #3
 8000b64:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b66:	4b32      	ldr	r3, [pc, #200]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b68:	2210      	movs	r2, #16
 8000b6a:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000b84:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8a:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 8000b90:	4827      	ldr	r0, [pc, #156]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000b92:	f000 fa93 	bl	80010bc <HAL_DMA_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000b9c:	f7ff ff16 	bl	80009cc <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000ba4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ba6:	4a22      	ldr	r2, [pc, #136]	@ (8000c30 <HAL_I2C_MspInit+0x170>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	@ (8000c3c <HAL_I2C_MspInit+0x17c>)
 8000bb0:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bc6:	2280      	movs	r2, #128	@ 0x80
 8000bc8:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bca:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 8000be2:	4815      	ldr	r0, [pc, #84]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000be4:	f000 fa6a 	bl	80010bc <HAL_DMA_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_I2C_MspInit+0x132>
		Error_Handler();
 8000bee:	f7ff feed 	bl	80009cc <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_I2C_MspInit+0x178>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	201f      	movs	r0, #31
 8000c04:	f000 fa23 	bl	800104e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c08:	201f      	movs	r0, #31
 8000c0a:	f000 fa3c 	bl	8001086 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2020      	movs	r0, #32
 8000c14:	f000 fa1b 	bl	800104e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c18:	2020      	movs	r0, #32
 8000c1a:	f000 fa34 	bl	8001086 <HAL_NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	37b0      	adds	r7, #176	@ 0xb0
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	4002006c 	.word	0x4002006c
 8000c38:	200000f4 	.word	0x200000f4
 8000c3c:	40020080 	.word	0x40020080

08000c40 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000c96:	f000 f8bb 	bl	8000e10 <HAL_IncTick>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ca6:	f000 fb62 	bl	800136e <HAL_DMA_IRQHandler>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000ac 	.word	0x200000ac

08000cb4 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <DMA1_Channel7_IRQHandler+0x10>)
 8000cba:	f000 fb58 	bl	800136e <HAL_DMA_IRQHandler>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000f4 	.word	0x200000f4

08000cc8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <I2C1_EV_IRQHandler+0x10>)
 8000cce:	f001 f885 	bl	8001ddc <HAL_I2C_EV_IRQHandler>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000058 	.word	0x20000058

08000cdc <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <I2C1_ER_IRQHandler+0x10>)
 8000ce2:	f001 f895 	bl	8001e10 <HAL_I2C_ER_IRQHandler>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000058 	.word	0x20000058

08000cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d18:	f7ff ffea 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	@ (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	@ (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d42:	f004 f899 	bl	8004e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d46:	f7ff fdab 	bl	80008a0 <main>

08000d4a <LoopForever>:

LoopForever:
    b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d58:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000d5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d60:	20000144 	.word	0x20000144

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>

08000d66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f961 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f80e 	bl	8000d98 <HAL_InitTick>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	e001      	b.n	8000d8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d88:	f7ff fe76 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_InitTick+0x6c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d023      	beq.n	8000df4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_InitTick+0x70>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_InitTick+0x6c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f96d 	bl	80010a2 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10f      	bne.n	8000dee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d809      	bhi.n	8000de8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f937 	bl	800104e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_InitTick+0x74>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e007      	b.n	8000df8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e004      	b.n	8000df8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e001      	b.n	8000df8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000140 	.word	0x20000140

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000140 	.word	0x20000140

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	@ (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	@ (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	@ 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff8e 	bl	8000f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff29 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff3e 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff8e 	bl	8000f8c <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5d 	bl	8000f38 <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff31 	bl	8000efc <__NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e098      	b.n	8001200 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b4d      	ldr	r3, [pc, #308]	@ (800120c <HAL_DMA_Init+0x150>)
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d80f      	bhi.n	80010fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001210 <HAL_DMA_Init+0x154>)
 80010e2:	4413      	add	r3, r2
 80010e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001214 <HAL_DMA_Init+0x158>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	009a      	lsls	r2, r3, #2
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a48      	ldr	r2, [pc, #288]	@ (8001218 <HAL_DMA_Init+0x15c>)
 80010f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80010f8:	e00e      	b.n	8001118 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b46      	ldr	r3, [pc, #280]	@ (800121c <HAL_DMA_Init+0x160>)
 8001102:	4413      	add	r3, r2
 8001104:	4a43      	ldr	r2, [pc, #268]	@ (8001214 <HAL_DMA_Init+0x158>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	009a      	lsls	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a42      	ldr	r2, [pc, #264]	@ (8001220 <HAL_DMA_Init+0x164>)
 8001116:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800112e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001132:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800113c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001172:	d039      	beq.n	80011e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <HAL_DMA_Init+0x15c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11a      	bne.n	80011b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <HAL_DMA_Init+0x168>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f003 031c 	and.w	r3, r3, #28
 800118a:	210f      	movs	r1, #15
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	4924      	ldr	r1, [pc, #144]	@ (8001224 <HAL_DMA_Init+0x168>)
 8001194:	4013      	ands	r3, r2
 8001196:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <HAL_DMA_Init+0x168>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	f003 031c 	and.w	r3, r3, #28
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	491d      	ldr	r1, [pc, #116]	@ (8001224 <HAL_DMA_Init+0x168>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
 80011b2:	e019      	b.n	80011e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <HAL_DMA_Init+0x16c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011bc:	f003 031c 	and.w	r3, r3, #28
 80011c0:	210f      	movs	r1, #15
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	4917      	ldr	r1, [pc, #92]	@ (8001228 <HAL_DMA_Init+0x16c>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <HAL_DMA_Init+0x16c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f003 031c 	and.w	r3, r3, #28
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	4911      	ldr	r1, [pc, #68]	@ (8001228 <HAL_DMA_Init+0x16c>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40020407 	.word	0x40020407
 8001210:	bffdfff8 	.word	0xbffdfff8
 8001214:	cccccccd 	.word	0xcccccccd
 8001218:	40020000 	.word	0x40020000
 800121c:	bffdfbf8 	.word	0xbffdfbf8
 8001220:	40020400 	.word	0x40020400
 8001224:	400200a8 	.word	0x400200a8
 8001228:	400204a8 	.word	0x400204a8

0800122c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_DMA_Start_IT+0x20>
 8001248:	2302      	movs	r3, #2
 800124a:	e04b      	b.n	80012e4 <HAL_DMA_Start_IT+0xb8>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d13a      	bne.n	80012d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2202      	movs	r2, #2
 8001264:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f92f 	bl	80014e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 020e 	orr.w	r2, r2, #14
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00f      	b.n	80012c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0204 	bic.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 020a 	orr.w	r2, r2, #10
 80012c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e005      	b.n	80012e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012de:	2302      	movs	r3, #2
 80012e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d005      	beq.n	8001310 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2204      	movs	r2, #4
 8001308:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e029      	b.n	8001364 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 020e 	bic.w	r2, r2, #14
 800131e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001334:	f003 021c 	and.w	r2, r3, #28
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f202 	lsl.w	r2, r1, r2
 8001342:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
    }
  }
  return status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f003 031c 	and.w	r3, r3, #28
 800138e:	2204      	movs	r2, #4
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d026      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x7a>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d021      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d107      	bne.n	80013c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0204 	bic.w	r2, r2, #4
 80013c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f003 021c 	and.w	r2, r3, #28
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	2104      	movs	r1, #4
 80013d0:	fa01 f202 	lsl.w	r2, r1, r2
 80013d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d071      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013e6:	e06c      	b.n	80014c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ec:	f003 031c 	and.w	r3, r3, #28
 80013f0:	2202      	movs	r2, #2
 80013f2:	409a      	lsls	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d02e      	beq.n	800145a <HAL_DMA_IRQHandler+0xec>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d029      	beq.n	800145a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10b      	bne.n	800142c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 020a 	bic.w	r2, r2, #10
 8001422:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	f003 021c 	and.w	r2, r3, #28
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	2102      	movs	r1, #2
 800143a:	fa01 f202 	lsl.w	r2, r1, r2
 800143e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d038      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001458:	e033      	b.n	80014c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	f003 031c 	and.w	r3, r3, #28
 8001462:	2208      	movs	r2, #8
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d02a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x156>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d025      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 020e 	bic.w	r2, r2, #14
 8001486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148c:	f003 021c 	and.w	r2, r3, #28
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
}
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014da:	b2db      	uxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f003 021c 	and.w	r2, r3, #28
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f202 	lsl.w	r2, r1, r2
 8001508:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d108      	bne.n	800152c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800152a:	e007      	b.n	800153c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e17f      	b.n	8001858 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8171 	beq.w	8001852 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <HAL_GPIO_Init+0x40>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d130      	bne.n	80015ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015be:	2201      	movs	r2, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	f003 0201 	and.w	r2, r3, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d118      	bne.n	8001628 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	6939      	ldr	r1, [r7, #16]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80ac 	beq.w	8001852 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001878 <HAL_GPIO_Init+0x330>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001878 <HAL_GPIO_Init+0x330>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6613      	str	r3, [r2, #96]	@ 0x60
 8001706:	4b5c      	ldr	r3, [pc, #368]	@ (8001878 <HAL_GPIO_Init+0x330>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001712:	4a5a      	ldr	r2, [pc, #360]	@ (800187c <HAL_GPIO_Init+0x334>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800173c:	d025      	beq.n	800178a <HAL_GPIO_Init+0x242>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4f      	ldr	r2, [pc, #316]	@ (8001880 <HAL_GPIO_Init+0x338>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01f      	beq.n	8001786 <HAL_GPIO_Init+0x23e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4e      	ldr	r2, [pc, #312]	@ (8001884 <HAL_GPIO_Init+0x33c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x23a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4d      	ldr	r2, [pc, #308]	@ (8001888 <HAL_GPIO_Init+0x340>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x236>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4c      	ldr	r2, [pc, #304]	@ (800188c <HAL_GPIO_Init+0x344>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x232>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4b      	ldr	r2, [pc, #300]	@ (8001890 <HAL_GPIO_Init+0x348>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x22e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4a      	ldr	r2, [pc, #296]	@ (8001894 <HAL_GPIO_Init+0x34c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x22a>
 800176e:	2306      	movs	r3, #6
 8001770:	e00c      	b.n	800178c <HAL_GPIO_Init+0x244>
 8001772:	2307      	movs	r3, #7
 8001774:	e00a      	b.n	800178c <HAL_GPIO_Init+0x244>
 8001776:	2305      	movs	r3, #5
 8001778:	e008      	b.n	800178c <HAL_GPIO_Init+0x244>
 800177a:	2304      	movs	r3, #4
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x244>
 800177e:	2303      	movs	r3, #3
 8001780:	e004      	b.n	800178c <HAL_GPIO_Init+0x244>
 8001782:	2302      	movs	r3, #2
 8001784:	e002      	b.n	800178c <HAL_GPIO_Init+0x244>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_GPIO_Init+0x244>
 800178a:	2300      	movs	r3, #0
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	f002 0203 	and.w	r2, r2, #3
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	4093      	lsls	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800179c:	4937      	ldr	r1, [pc, #220]	@ (800187c <HAL_GPIO_Init+0x334>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <HAL_GPIO_Init+0x350>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ce:	4a32      	ldr	r2, [pc, #200]	@ (8001898 <HAL_GPIO_Init+0x350>)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_GPIO_Init+0x350>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017f8:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <HAL_GPIO_Init+0x350>)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <HAL_GPIO_Init+0x350>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001822:	4a1d      	ldr	r2, [pc, #116]	@ (8001898 <HAL_GPIO_Init+0x350>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_GPIO_Init+0x350>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_GPIO_Init+0x350>)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f ae78 	bne.w	8001558 <HAL_GPIO_Init+0x10>
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000
 8001880:	48000400 	.word	0x48000400
 8001884:	48000800 	.word	0x48000800
 8001888:	48000c00 	.word	0x48000c00
 800188c:	48001000 	.word	0x48001000
 8001890:	48001400 	.word	0x48001400
 8001894:	48001800 	.word	0x48001800
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e08d      	b.n	80019ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff f8fc 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	@ 0x24
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e006      	b.n	8001924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d108      	bne.n	800193e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	e007      	b.n	800194e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800194c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800195c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001960:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001970:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69d9      	ldr	r1, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1a      	ldr	r2, [r3, #32]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2220      	movs	r2, #32
 80019b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	817b      	strh	r3, [r7, #10]
 80019e4:	4613      	mov	r3, r2
 80019e6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	f040 80ef 	bne.w	8001bd8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e0e5      	b.n	8001bda <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_I2C_Master_Transmit_DMA+0x48>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e0de      	b.n	8001bda <HAL_I2C_Master_Transmit_DMA+0x206>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2221      	movs	r2, #33	@ 0x21
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2210      	movs	r2, #16
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	893a      	ldrh	r2, [r7, #8]
 8001a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4a66      	ldr	r2, [pc, #408]	@ (8001be4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a66      	ldr	r2, [pc, #408]	@ (8001be8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8001a50:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2bff      	cmp	r3, #255	@ 0xff
 8001a5a:	d906      	bls.n	8001a6a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	22ff      	movs	r2, #255	@ 0xff
 8001a60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e007      	b.n	8001a7a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a78:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01a      	beq.n	8001ab8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d074      	beq.n	8001baa <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d022      	beq.n	8001b0e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001acc:	4a47      	ldr	r2, [pc, #284]	@ (8001bec <HAL_I2C_Master_Transmit_DMA+0x218>)
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad4:	4a46      	ldr	r2, [pc, #280]	@ (8001bf0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8001ad6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001af8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001afe:	f7ff fb95 	bl	800122c <HAL_DMA_Start_IT>
 8001b02:	4603      	mov	r3, r0
 8001b04:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d13a      	bne.n	8001b82 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8001b0c:	e013      	b.n	8001b36 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e051      	b.n	8001bda <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	8979      	ldrh	r1, [r7, #10]
 8001b42:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f001 fcf9 	bl	8003540 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001b68:	2110      	movs	r1, #16
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 fd1a 	bl	80035a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e028      	b.n	8001bd4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f043 0210 	orr.w	r2, r3, #16
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e017      	b.n	8001bda <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8001bae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	8979      	ldrh	r1, [r7, #10]
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f001 fcbe 	bl	8003540 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bcc:	2101      	movs	r1, #1
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f001 fce8 	bl	80035a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	ffff0000 	.word	0xffff0000
 8001be8:	080023b7 	.word	0x080023b7
 8001bec:	0800338f 	.word	0x0800338f
 8001bf0:	080034d7 	.word	0x080034d7
 8001bf4:	80002000 	.word	0x80002000
 8001bf8:	08001f5b 	.word	0x08001f5b

08001bfc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	817b      	strh	r3, [r7, #10]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	f040 80cd 	bne.w	8001db8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c2c:	d101      	bne.n	8001c32 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e0c3      	b.n	8001dba <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_I2C_Master_Receive_DMA+0x44>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e0bc      	b.n	8001dba <HAL_I2C_Master_Receive_DMA+0x1be>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2222      	movs	r2, #34	@ 0x22
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2210      	movs	r2, #16
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	893a      	ldrh	r2, [r7, #8]
 8001c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	@ (8001dc4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a55      	ldr	r2, [pc, #340]	@ (8001dc8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2bff      	cmp	r3, #255	@ 0xff
 8001c7e:	d906      	bls.n	8001c8e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e007      	b.n	8001c9e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c9c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d070      	beq.n	8001d88 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d020      	beq.n	8001cf0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb2:	4a46      	ldr	r2, [pc, #280]	@ (8001dcc <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8001cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cba:	4a45      	ldr	r2, [pc, #276]	@ (8001dd0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8001cbc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cca:	2200      	movs	r2, #0
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3324      	adds	r3, #36	@ 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001ce0:	f7ff faa4 	bl	800122c <HAL_DMA_Start_IT>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001ce8:	7cfb      	ldrb	r3, [r7, #19]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d138      	bne.n	8001d60 <HAL_I2C_Master_Receive_DMA+0x164>
 8001cee:	e013      	b.n	8001d18 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e050      	b.n	8001dba <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f001 fc0a 	bl	8003540 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001d46:	2110      	movs	r1, #16
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f001 fc2b 	bl	80035a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e029      	b.n	8001db4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e018      	b.n	8001dba <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	8979      	ldrh	r1, [r7, #10]
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f001 fbce 	bl	8003540 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001dac:	2102      	movs	r1, #2
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f001 fbf8 	bl	80035a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	ffff0000 	.word	0xffff0000
 8001dc8:	080023b7 	.word	0x080023b7
 8001dcc:	08003425 	.word	0x08003425
 8001dd0:	080034d7 	.word	0x080034d7
 8001dd4:	80002400 	.word	0x80002400
 8001dd8:	08001f5b 	.word	0x08001f5b

08001ddc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00f      	beq.n	8001e52 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e50:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00f      	beq.n	8001e7c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f043 0208 	orr.w	r2, r3, #8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e7a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00f      	beq.n	8001ea6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e94:	f043 0202 	orr.w	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 030b 	and.w	r3, r3, #11
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f001 f92d 	bl	8003118 <I2C_ITError>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
 8001efa:	4613      	mov	r3, r2
 8001efc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b088      	sub	sp, #32
 8001f5e:	af02      	add	r7, sp, #8
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <I2C_Master_ISR_IT+0x1e>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e121      	b.n	80021bc <I2C_Master_ISR_IT+0x262>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2210      	movs	r2, #16
 8001f9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f001 f9cc 	bl	8003346 <I2C_Flush_TXDR>
 8001fae:	e0f2      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d022      	beq.n	8002000 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01d      	beq.n	8002000 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f023 0304 	bic.w	r3, r3, #4
 8001fca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ffe:	e0ca      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d128      	bne.n	800205c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002010:	2b00      	cmp	r3, #0
 8002012:	d023      	beq.n	800205c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01e      	beq.n	800205c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80b6 	beq.w	8002196 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800205a:	e09c      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d06a      	beq.n	800213c <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800206c:	2b00      	cmp	r3, #0
 800206e:	d065      	beq.n	800213c <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d04e      	beq.n	8002118 <I2C_Master_ISR_IT+0x1be>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207e:	2b00      	cmp	r3, #0
 8002080:	d14a      	bne.n	8002118 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2bff      	cmp	r3, #255	@ 0xff
 8002098:	d91c      	bls.n	80020d4 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d103      	bne.n	80020b6 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80020b4:	e002      	b.n	80020bc <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	22ff      	movs	r2, #255	@ 0xff
 80020ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	8a79      	ldrh	r1, [r7, #18]
 80020c4:	2300      	movs	r3, #0
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f001 fa37 	bl	8003540 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020d2:	e032      	b.n	800213a <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020e6:	d00b      	beq.n	8002100 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ec:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80020f2:	8a79      	ldrh	r1, [r7, #18]
 80020f4:	2000      	movs	r0, #0
 80020f6:	9000      	str	r0, [sp, #0]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f001 fa21 	bl	8003540 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fe:	e01c      	b.n	800213a <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002104:	b2da      	uxtb	r2, r3
 8002106:	8a79      	ldrh	r1, [r7, #18]
 8002108:	2300      	movs	r3, #0
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f001 fa15 	bl	8003540 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002116:	e010      	b.n	800213a <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002126:	d003      	beq.n	8002130 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fcdc 	bl	8002ae6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800212e:	e032      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fff0 	bl	8003118 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002138:	e02d      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
 800213a:	e02c      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d027      	beq.n	8002196 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800214c:	2b00      	cmp	r3, #0
 800214e:	d022      	beq.n	8002196 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d119      	bne.n	800218e <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002168:	d015      	beq.n	8002196 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002172:	d108      	bne.n	8002186 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	e007      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fcad 	bl	8002ae6 <I2C_ITMasterSeqCplt>
 800218c:	e003      	b.n	8002196 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800218e:	2140      	movs	r1, #64	@ 0x40
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 ffc1 	bl	8003118 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80021aa:	6979      	ldr	r1, [r7, #20]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fd33 	bl	8002c18 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <I2C_Slave_ISR_IT+0x24>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e0e2      	b.n	80023ae <I2C_Slave_ISR_IT+0x1ea>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002204:	6939      	ldr	r1, [r7, #16]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fdce 	bl	8002da8 <I2C_ITSlaveCplt>
 800220c:	e0ca      	b.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	d04b      	beq.n	80022b0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800221e:	2b00      	cmp	r3, #0
 8002220:	d046      	beq.n	80022b0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d128      	bne.n	800227e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b28      	cmp	r3, #40	@ 0x28
 8002236:	d108      	bne.n	800224a <I2C_Slave_ISR_IT+0x86>
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800223e:	d104      	bne.n	800224a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 ff14 	bl	8003070 <I2C_ITListenCplt>
 8002248:	e031      	b.n	80022ae <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b29      	cmp	r3, #41	@ 0x29
 8002254:	d10e      	bne.n	8002274 <I2C_Slave_ISR_IT+0xb0>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800225c:	d00a      	beq.n	8002274 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2210      	movs	r2, #16
 8002264:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f001 f86d 	bl	8003346 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fc77 	bl	8002b60 <I2C_ITSlaveSeqCplt>
 8002272:	e01c      	b.n	80022ae <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2210      	movs	r2, #16
 800227a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800227c:	e08f      	b.n	800239e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2210      	movs	r2, #16
 8002284:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f043 0204 	orr.w	r2, r3, #4
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <I2C_Slave_ISR_IT+0xdc>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800229e:	d17e      	bne.n	800239e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	4619      	mov	r1, r3
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 ff36 	bl	8003118 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022ac:	e077      	b.n	800239e <I2C_Slave_ISR_IT+0x1da>
 80022ae:	e076      	b.n	800239e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d02f      	beq.n	800231a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02a      	beq.n	800231a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d018      	beq.n	8002300 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d14b      	bne.n	80023a2 <I2C_Slave_ISR_IT+0x1de>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002310:	d047      	beq.n	80023a2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fc24 	bl	8002b60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002318:	e043      	b.n	80023a2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800232e:	6939      	ldr	r1, [r7, #16]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fb54 	bl	80029de <I2C_ITAddrCplt>
 8002336:	e035      	b.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d030      	beq.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02b      	beq.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d018      	beq.n	8002388 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002386:	e00d      	b.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800238e:	d002      	beq.n	8002396 <I2C_Slave_ISR_IT+0x1d2>
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fbe2 	bl	8002b60 <I2C_ITSlaveSeqCplt>
 800239c:	e002      	b.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800239e:	bf00      	nop
 80023a0:	e000      	b.n	80023a4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80023a2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b088      	sub	sp, #32
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <I2C_Master_ISR_DMA+0x1a>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e0e7      	b.n	80025a0 <I2C_Master_ISR_DMA+0x1ea>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d011      	beq.n	8002410 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002400:	2120      	movs	r1, #32
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f001 f8ce 	bl	80035a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 ff9c 	bl	8003346 <I2C_Flush_TXDR>
 800240e:	e0c2      	b.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d07f      	beq.n	800251a <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002420:	2b00      	cmp	r3, #0
 8002422:	d07a      	beq.n	800251a <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002432:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d05c      	beq.n	80024f8 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2bff      	cmp	r3, #255	@ 0xff
 8002454:	d914      	bls.n	8002480 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d103      	bne.n	8002472 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002470:	e002      	b.n	8002478 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	22ff      	movs	r2, #255	@ 0xff
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8002478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e010      	b.n	80024a2 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002492:	d003      	beq.n	800249c <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e002      	b.n	80024a2 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800249c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024a0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	8a79      	ldrh	r1, [r7, #18]
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f001 f845 	bl	8003540 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b22      	cmp	r3, #34	@ 0x22
 80024d2:	d108      	bne.n	80024e6 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80024e4:	e057      	b.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80024f6:	e04e      	b.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002506:	d003      	beq.n	8002510 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 faec 	bl	8002ae6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800250e:	e042      	b.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fe00 	bl	8003118 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002518:	e03d      	b.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d028      	beq.n	8002576 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800252a:	2b00      	cmp	r3, #0
 800252c:	d023      	beq.n	8002576 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d119      	bne.n	800256c <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002546:	d025      	beq.n	8002594 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002550:	d108      	bne.n	8002564 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002560:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002562:	e017      	b.n	8002594 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fabe 	bl	8002ae6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800256a:	e013      	b.n	8002594 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800256c:	2140      	movs	r1, #64	@ 0x40
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fdd2 	bl	8003118 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002574:	e00e      	b.n	8002594 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fb43 	bl	8002c18 <I2C_ITMasterCplt>
 8002592:	e000      	b.n	8002596 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8002594:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80025b4:	4b90      	ldr	r3, [pc, #576]	@ (80027f8 <I2C_Mem_ISR_DMA+0x250>)
 80025b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <I2C_Mem_ISR_DMA+0x1e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e12f      	b.n	8002826 <I2C_Mem_ISR_DMA+0x27e>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d016      	beq.n	8002606 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2210      	movs	r2, #16
 80025e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80025f6:	2120      	movs	r1, #32
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 ffd3 	bl	80035a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fea1 	bl	8003346 <I2C_Flush_TXDR>
 8002604:	e10a      	b.n	800281c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00e      	beq.n	800262e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
 800262a:	651a      	str	r2, [r3, #80]	@ 0x50
 800262c:	e0f6      	b.n	800281c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002634:	2b00      	cmp	r3, #0
 8002636:	d06d      	beq.n	8002714 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800263e:	2b00      	cmp	r3, #0
 8002640:	d068      	beq.n	8002714 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002642:	2101      	movs	r1, #1
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f001 f831 	bl	80036ac <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800264a:	2110      	movs	r1, #16
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 ffa9 	bl	80035a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d056      	beq.n	800270a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2bff      	cmp	r3, #255	@ 0xff
 8002664:	d91e      	bls.n	80026a4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d103      	bne.n	8002682 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002680:	e002      	b.n	8002688 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22ff      	movs	r2, #255	@ 0xff
 8002686:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268c:	b299      	uxth	r1, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	2300      	movs	r3, #0
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 ff4f 	bl	8003540 <I2C_TransferConfig>
 80026a2:	e011      	b.n	80026c8 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	b299      	uxth	r1, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 ff3c 	bl	8003540 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b22      	cmp	r3, #34	@ 0x22
 80026e4:	d108      	bne.n	80026f8 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80026f6:	e091      	b.n	800281c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002706:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002708:	e088      	b.n	800281c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800270a:	2140      	movs	r1, #64	@ 0x40
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fd03 	bl	8003118 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002712:	e083      	b.n	800281c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d070      	beq.n	8002800 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d06b      	beq.n	8002800 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002728:	2101      	movs	r1, #1
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 ffbe 	bl	80036ac <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002730:	2110      	movs	r1, #16
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 ff36 	bl	80035a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b22      	cmp	r3, #34	@ 0x22
 8002742:	d101      	bne.n	8002748 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002744:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <I2C_Mem_ISR_DMA+0x254>)
 8002746:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2bff      	cmp	r3, #255	@ 0xff
 8002750:	d91e      	bls.n	8002790 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d103      	bne.n	800276e <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800276c:	e002      	b.n	8002774 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	22ff      	movs	r2, #255	@ 0xff
 8002772:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002778:	b299      	uxth	r1, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	b2da      	uxtb	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fed9 	bl	8003540 <I2C_TransferConfig>
 800278e:	e011      	b.n	80027b4 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	b299      	uxth	r1, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fec6 	bl	8003540 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b22      	cmp	r3, #34	@ 0x22
 80027d0:	d108      	bne.n	80027e4 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027e0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027e2:	e01b      	b.n	800281c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027f2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027f4:	e012      	b.n	800281c <I2C_Mem_ISR_DMA+0x274>
 80027f6:	bf00      	nop
 80027f8:	80002000 	.word	0x80002000
 80027fc:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f9fe 	bl	8002c18 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop

08002830 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <I2C_Slave_ISR_DMA+0x24>
 8002850:	2302      	movs	r3, #2
 8002852:	e0c0      	b.n	80029d6 <I2C_Slave_ISR_DMA+0x1a6>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fa98 	bl	8002da8 <I2C_ITSlaveCplt>
 8002878:	e0a8      	b.n	80029cc <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8095 	beq.w	80029b0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 808f 	beq.w	80029b0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d07d      	beq.n	80029a2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00c      	beq.n	80028c8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d128      	bne.n	8002942 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b28      	cmp	r3, #40	@ 0x28
 80028fa:	d108      	bne.n	800290e <I2C_Slave_ISR_DMA+0xde>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002902:	d104      	bne.n	800290e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fbb2 	bl	8003070 <I2C_ITListenCplt>
 800290c:	e048      	b.n	80029a0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b29      	cmp	r3, #41	@ 0x29
 8002918:	d10e      	bne.n	8002938 <I2C_Slave_ISR_DMA+0x108>
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002920:	d00a      	beq.n	8002938 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fd0b 	bl	8003346 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f915 	bl	8002b60 <I2C_ITSlaveSeqCplt>
 8002936:	e033      	b.n	80029a0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2210      	movs	r2, #16
 800293e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002940:	e034      	b.n	80029ac <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2210      	movs	r2, #16
 8002948:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <I2C_Slave_ISR_DMA+0x13c>
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296a:	d11f      	bne.n	80029ac <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b21      	cmp	r3, #33	@ 0x21
 8002970:	d002      	beq.n	8002978 <I2C_Slave_ISR_DMA+0x148>
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b29      	cmp	r3, #41	@ 0x29
 8002976:	d103      	bne.n	8002980 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2221      	movs	r2, #33	@ 0x21
 800297c:	631a      	str	r2, [r3, #48]	@ 0x30
 800297e:	e008      	b.n	8002992 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b22      	cmp	r3, #34	@ 0x22
 8002984:	d002      	beq.n	800298c <I2C_Slave_ISR_DMA+0x15c>
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b2a      	cmp	r3, #42	@ 0x2a
 800298a:	d102      	bne.n	8002992 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2222      	movs	r2, #34	@ 0x22
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4619      	mov	r1, r3
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fbbd 	bl	8003118 <I2C_ITError>
      if (treatdmanack == 1U)
 800299e:	e005      	b.n	80029ac <I2C_Slave_ISR_DMA+0x17c>
 80029a0:	e004      	b.n	80029ac <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2210      	movs	r2, #16
 80029a8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029aa:	e00f      	b.n	80029cc <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80029ac:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029ae:	e00d      	b.n	80029cc <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f809 	bl	80029de <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80029f4:	2b28      	cmp	r3, #40	@ 0x28
 80029f6:	d16a      	bne.n	8002ace <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	0c1b      	lsrs	r3, r3, #16
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002a16:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a24:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002a32:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d138      	bne.n	8002aae <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a3c:	897b      	ldrh	r3, [r7, #10]
 8002a3e:	09db      	lsrs	r3, r3, #7
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	89bb      	ldrh	r3, [r7, #12]
 8002a44:	4053      	eors	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f003 0306 	and.w	r3, r3, #6
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11c      	bne.n	8002a8a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002a50:	897b      	ldrh	r3, [r7, #10]
 8002a52:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d13b      	bne.n	8002ade <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2208      	movs	r2, #8
 8002a72:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a7c:	89ba      	ldrh	r2, [r7, #12]
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fa33 	bl	8001eee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a88:	e029      	b.n	8002ade <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fe0a 	bl	80036ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002aa0:	89ba      	ldrh	r2, [r7, #12]
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fa21 	bl	8001eee <HAL_I2C_AddrCallback>
}
 8002aac:	e017      	b.n	8002ade <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fdfa 	bl	80036ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ac0:	89ba      	ldrh	r2, [r7, #12]
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fa11 	bl	8001eee <HAL_I2C_AddrCallback>
}
 8002acc:	e007      	b.n	8002ade <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b21      	cmp	r3, #33	@ 0x21
 8002b00:	d115      	bne.n	8002b2e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2211      	movs	r2, #17
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b16:	2101      	movs	r1, #1
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fdc7 	bl	80036ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fe8e 	bl	8000848 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b2c:	e014      	b.n	8002b58 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2212      	movs	r2, #18
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b42:	2102      	movs	r1, #2
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fdb1 	bl	80036ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd fe8e 	bl	8000874 <HAL_I2C_MasterRxCpltCallback>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e00c      	b.n	8002bae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b29      	cmp	r3, #41	@ 0x29
 8002bb8:	d112      	bne.n	8002be0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2228      	movs	r2, #40	@ 0x28
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2221      	movs	r2, #33	@ 0x21
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bc8:	2101      	movs	r1, #1
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fd6e 	bl	80036ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff f974 	bl	8001ec6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bde:	e017      	b.n	8002c10 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bea:	d111      	bne.n	8002c10 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2228      	movs	r2, #40	@ 0x28
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2222      	movs	r2, #34	@ 0x22
 8002bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fd55 	bl	80036ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff f965 	bl	8001eda <HAL_I2C_SlaveRxCpltCallback>
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b21      	cmp	r3, #33	@ 0x21
 8002c38:	d107      	bne.n	8002c4a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fd35 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2211      	movs	r2, #17
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c48:	e00c      	b.n	8002c64 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b22      	cmp	r3, #34	@ 0x22
 8002c54:	d106      	bne.n	8002c64 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c56:	2102      	movs	r1, #2
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fd27 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2212      	movs	r2, #18
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002da0 <I2C_ITMasterCplt+0x188>)
 8002c70:	400b      	ands	r3, r1
 8002c72:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a49      	ldr	r2, [pc, #292]	@ (8002da4 <I2C_ITMasterCplt+0x18c>)
 8002c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f043 0204 	orr.w	r2, r3, #4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b60      	cmp	r3, #96	@ 0x60
 8002ca8:	d10a      	bne.n	8002cc0 <I2C_ITMasterCplt+0xa8>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fb40 	bl	8003346 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b60      	cmp	r3, #96	@ 0x60
 8002cd6:	d002      	beq.n	8002cde <I2C_ITMasterCplt+0xc6>
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fa17 	bl	8003118 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cea:	e054      	b.n	8002d96 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b21      	cmp	r3, #33	@ 0x21
 8002cf6:	d124      	bne.n	8002d42 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d10b      	bne.n	8002d2a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff f8fb 	bl	8001f1e <HAL_I2C_MemTxCpltCallback>
}
 8002d28:	e035      	b.n	8002d96 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fd84 	bl	8000848 <HAL_I2C_MasterTxCpltCallback>
}
 8002d40:	e029      	b.n	8002d96 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b22      	cmp	r3, #34	@ 0x22
 8002d4c:	d123      	bne.n	8002d96 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b40      	cmp	r3, #64	@ 0x40
 8002d66:	d10b      	bne.n	8002d80 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff f8da 	bl	8001f32 <HAL_I2C_MemRxCpltCallback>
}
 8002d7e:	e00a      	b.n	8002d96 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd fd6f 	bl	8000874 <HAL_I2C_MasterRxCpltCallback>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	fe00e800 	.word	0xfe00e800
 8002da4:	ffff0000 	.word	0xffff0000

08002da8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dca:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
 8002dd6:	2b21      	cmp	r3, #33	@ 0x21
 8002dd8:	d002      	beq.n	8002de0 <I2C_ITSlaveCplt+0x38>
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	2b29      	cmp	r3, #41	@ 0x29
 8002dde:	d108      	bne.n	8002df2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002de0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fc61 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2221      	movs	r2, #33	@ 0x21
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002df0:	e019      	b.n	8002e26 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	2b22      	cmp	r3, #34	@ 0x22
 8002df6:	d002      	beq.n	8002dfe <I2C_ITSlaveCplt+0x56>
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dfc:	d108      	bne.n	8002e10 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002dfe:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fc52 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2222      	movs	r2, #34	@ 0x22
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e0e:	e00a      	b.n	8002e26 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002e10:	7afb      	ldrb	r3, [r7, #11]
 8002e12:	2b28      	cmp	r3, #40	@ 0x28
 8002e14:	d107      	bne.n	8002e26 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002e16:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fc46 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e34:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b89      	ldr	r3, [pc, #548]	@ (8003068 <I2C_ITSlaveCplt+0x2c0>)
 8002e42:	400b      	ands	r3, r1
 8002e44:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa7d 	bl	8003346 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d013      	beq.n	8002e7e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e64:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01f      	beq.n	8002eae <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e7c:	e017      	b.n	8002eae <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d012      	beq.n	8002eae <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d020      	beq.n	8002efa <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d049      	beq.n	8002fae <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d044      	beq.n	8002fae <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d128      	bne.n	8002f80 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b28      	cmp	r3, #40	@ 0x28
 8002f38:	d108      	bne.n	8002f4c <I2C_ITSlaveCplt+0x1a4>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f40:	d104      	bne.n	8002f4c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f893 	bl	8003070 <I2C_ITListenCplt>
 8002f4a:	e030      	b.n	8002fae <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b29      	cmp	r3, #41	@ 0x29
 8002f56:	d10e      	bne.n	8002f76 <I2C_ITSlaveCplt+0x1ce>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f5e:	d00a      	beq.n	8002f76 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9ec 	bl	8003346 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fdf6 	bl	8002b60 <I2C_ITSlaveSeqCplt>
 8002f74:	e01b      	b.n	8002fae <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	61da      	str	r2, [r3, #28]
 8002f7e:	e016      	b.n	8002fae <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2210      	movs	r2, #16
 8002f86:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <I2C_ITSlaveCplt+0x1fa>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa0:	d105      	bne.n	8002fae <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8b5 	bl	8003118 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8a4 	bl	8003118 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b28      	cmp	r3, #40	@ 0x28
 8002fda:	d141      	bne.n	8003060 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002fdc:	6979      	ldr	r1, [r7, #20]
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f846 	bl	8003070 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fe4:	e03c      	b.n	8003060 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fee:	d014      	beq.n	800301a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fdb5 	bl	8002b60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <I2C_ITSlaveCplt+0x2c4>)
 8002ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe ff79 	bl	8001f0a <HAL_I2C_ListenCpltCallback>
}
 8003018:	e022      	b.n	8003060 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b22      	cmp	r3, #34	@ 0x22
 8003024:	d10e      	bne.n	8003044 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fe ff4c 	bl	8001eda <HAL_I2C_SlaveRxCpltCallback>
}
 8003042:	e00d      	b.n	8003060 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe ff33 	bl	8001ec6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003060:	bf00      	nop
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fe00e800 	.word	0xfe00e800
 800306c:	ffff0000 	.word	0xffff0000

08003070 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a25      	ldr	r2, [pc, #148]	@ (8003114 <I2C_ITListenCplt+0xa4>)
 800307e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d022      	beq.n	80030ec <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fadb 	bl	80036ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe feff 	bl	8001f0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	ffff0000 	.word	0xffff0000

08003118 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003128:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a6d      	ldr	r2, [pc, #436]	@ (80032ec <I2C_ITError+0x1d4>)
 8003136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b28      	cmp	r3, #40	@ 0x28
 800314e:	d005      	beq.n	800315c <I2C_ITError+0x44>
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b29      	cmp	r3, #41	@ 0x29
 8003154:	d002      	beq.n	800315c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b2a      	cmp	r3, #42	@ 0x2a
 800315a:	d10b      	bne.n	8003174 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800315c:	2103      	movs	r1, #3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 faa4 	bl	80036ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2228      	movs	r2, #40	@ 0x28
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a60      	ldr	r2, [pc, #384]	@ (80032f0 <I2C_ITError+0x1d8>)
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34
 8003172:	e030      	b.n	80031d6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003174:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa97 	bl	80036ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8e1 	bl	8003346 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b60      	cmp	r3, #96	@ 0x60
 800318e:	d01f      	beq.n	80031d0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d114      	bne.n	80031d0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d109      	bne.n	80031c8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2210      	movs	r2, #16
 80031ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2220      	movs	r2, #32
 80031ce:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d039      	beq.n	8003258 <I2C_ITError+0x140>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b11      	cmp	r3, #17
 80031e8:	d002      	beq.n	80031f0 <I2C_ITError+0xd8>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b21      	cmp	r3, #33	@ 0x21
 80031ee:	d133      	bne.n	8003258 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031fe:	d107      	bne.n	8003210 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800320e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe f959 	bl	80014cc <HAL_DMA_GetState>
 800321a:	4603      	mov	r3, r0
 800321c:	2b01      	cmp	r3, #1
 800321e:	d017      	beq.n	8003250 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	4a33      	ldr	r2, [pc, #204]	@ (80032f4 <I2C_ITError+0x1dc>)
 8003226:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe f859 	bl	80012ec <HAL_DMA_Abort_IT>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d04d      	beq.n	80032dc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800324a:	4610      	mov	r0, r2
 800324c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800324e:	e045      	b.n	80032dc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f851 	bl	80032f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003256:	e041      	b.n	80032dc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d039      	beq.n	80032d4 <I2C_ITError+0x1bc>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b12      	cmp	r3, #18
 8003264:	d002      	beq.n	800326c <I2C_ITError+0x154>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b22      	cmp	r3, #34	@ 0x22
 800326a:	d133      	bne.n	80032d4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800327a:	d107      	bne.n	800328c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800328a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe f91b 	bl	80014cc <HAL_DMA_GetState>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d017      	beq.n	80032cc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a0:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <I2C_ITError+0x1dc>)
 80032a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe f81b 	bl	80012ec <HAL_DMA_Abort_IT>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d011      	beq.n	80032e0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032c6:	4610      	mov	r0, r2
 80032c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032ca:	e009      	b.n	80032e0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f813 	bl	80032f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032d2:	e005      	b.n	80032e0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f80f 	bl	80032f8 <I2C_TreatErrorCallback>
  }
}
 80032da:	e002      	b.n	80032e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032e0:	bf00      	nop
}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	ffff0000 	.word	0xffff0000
 80032f0:	080021c5 	.word	0x080021c5
 80032f4:	08003505 	.word	0x08003505

080032f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b60      	cmp	r3, #96	@ 0x60
 800330a:	d10e      	bne.n	800332a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe fe0f 	bl	8001f46 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003328:	e009      	b.n	800333e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7fd fa7b 	bl	8000834 <HAL_I2C_ErrorCallback>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d103      	bne.n	8003364 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2200      	movs	r2, #0
 8003362:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d007      	beq.n	8003382 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	619a      	str	r2, [r3, #24]
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033aa:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80033b6:	2120      	movs	r1, #32
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f8f3 	bl	80035a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80033be:	e02d      	b.n	800341c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80033c8:	441a      	add	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2bff      	cmp	r3, #255	@ 0xff
 80033d6:	d903      	bls.n	80033e0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	22ff      	movs	r2, #255	@ 0xff
 80033dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80033de:	e004      	b.n	80033ea <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	4619      	mov	r1, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3328      	adds	r3, #40	@ 0x28
 80033fa:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003400:	f7fd ff14 	bl	800122c <HAL_DMA_Start_IT>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800340a:	2110      	movs	r1, #16
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff fe83 	bl	8003118 <I2C_ITError>
}
 8003412:	e003      	b.n	800341c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003414:	2140      	movs	r1, #64	@ 0x40
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8c4 	bl	80035a4 <I2C_Enable_IRQ>
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003440:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800344c:	2120      	movs	r1, #32
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f8a8 	bl	80035a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003454:	e03b      	b.n	80034ce <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800345e:	441a      	add	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2bff      	cmp	r3, #255	@ 0xff
 800346c:	d911      	bls.n	8003492 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d103      	bne.n	800348a <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003488:	e008      	b.n	800349c <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	@ 0xff
 800348e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003490:	e004      	b.n	800349c <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3324      	adds	r3, #36	@ 0x24
 80034a6:	4619      	mov	r1, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80034b2:	f7fd febb 	bl	800122c <HAL_DMA_Start_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80034bc:	2110      	movs	r1, #16
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fe2a 	bl	8003118 <I2C_ITError>
}
 80034c4:	e003      	b.n	80034ce <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80034c6:	2140      	movs	r1, #64	@ 0x40
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f86b 	bl	80035a4 <I2C_Enable_IRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034f2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80034f4:	2110      	movs	r1, #16
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fe0e 	bl	8003118 <I2C_ITError>
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351e:	2200      	movs	r2, #0
 8003520:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352e:	2200      	movs	r2, #0
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fee0 	bl	80032f8 <I2C_TreatErrorCallback>
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	4613      	mov	r3, r2
 8003550:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003558:	7a7b      	ldrb	r3, [r7, #9]
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003560:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	4313      	orrs	r3, r2
 800356a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800356e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	0d5b      	lsrs	r3, r3, #21
 800357a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800357e:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <I2C_TransferConfig+0x60>)
 8003580:	430b      	orrs	r3, r1
 8003582:	43db      	mvns	r3, r3
 8003584:	ea02 0103 	and.w	r1, r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	03ff63ff 	.word	0x03ff63ff

080035a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b8:	4a39      	ldr	r2, [pc, #228]	@ (80036a0 <I2C_Enable_IRQ+0xfc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d032      	beq.n	8003624 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80035c2:	4a38      	ldr	r2, [pc, #224]	@ (80036a4 <I2C_Enable_IRQ+0x100>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d02d      	beq.n	8003624 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80035cc:	4a36      	ldr	r2, [pc, #216]	@ (80036a8 <I2C_Enable_IRQ+0x104>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d028      	beq.n	8003624 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da03      	bge.n	80035e2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80035e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80035f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003604:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	2b10      	cmp	r3, #16
 800360a:	d103      	bne.n	8003614 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003612:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	2b20      	cmp	r3, #32
 8003618:	d133      	bne.n	8003682 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f043 0320 	orr.w	r3, r3, #32
 8003620:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003622:	e02e      	b.n	8003682 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003624:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da03      	bge.n	8003634 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003632:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003644:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003646:	887b      	ldrh	r3, [r7, #2]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003656:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d103      	bne.n	8003666 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003664:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	2b20      	cmp	r3, #32
 800366a:	d103      	bne.n	8003674 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003672:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	2b40      	cmp	r3, #64	@ 0x40
 8003678:	d103      	bne.n	8003682 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003680:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6819      	ldr	r1, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	430a      	orrs	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	080023b7 	.word	0x080023b7
 80036a4:	08002831 	.word	0x08002831
 80036a8:	080025a9 	.word	0x080025a9

080036ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00f      	beq.n	80036e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80036cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036da:	2b28      	cmp	r3, #40	@ 0x28
 80036dc:	d003      	beq.n	80036e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80036e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00f      	beq.n	8003710 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80036f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003704:	2b28      	cmp	r3, #40	@ 0x28
 8003706:	d003      	beq.n	8003710 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800370e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da03      	bge.n	8003720 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800371e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	2b10      	cmp	r3, #16
 8003724:	d103      	bne.n	800372e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800372c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	2b20      	cmp	r3, #32
 8003732:	d103      	bne.n	800373c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	2b40      	cmp	r3, #64	@ 0x40
 8003740:	d103      	bne.n	800374a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003748:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43da      	mvns	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	400a      	ands	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	d138      	bne.n	80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003788:	2302      	movs	r3, #2
 800378a:	e032      	b.n	80037f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	@ 0x24
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b20      	cmp	r3, #32
 8003812:	d139      	bne.n	8003888 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800381e:	2302      	movs	r3, #2
 8003820:	e033      	b.n	800388a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2224      	movs	r2, #36	@ 0x24
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003850:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800389c:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40007000 	.word	0x40007000

080038b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c2:	d130      	bne.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c4:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d0:	d038      	beq.n	8003944 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038da:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2232      	movs	r2, #50	@ 0x32
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0c9b      	lsrs	r3, r3, #18
 80038f4:	3301      	adds	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f8:	e002      	b.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003900:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390c:	d102      	bne.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x60>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f2      	bne.n	80038fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003914:	4b0f      	ldr	r3, [pc, #60]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003920:	d110      	bne.n	8003944 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e00f      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003926:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003932:	d007      	beq.n	8003944 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800393c:	4a05      	ldr	r2, [pc, #20]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003942:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40007000 	.word	0x40007000
 8003958:	20000000 	.word	0x20000000
 800395c:	431bde83 	.word	0x431bde83

08003960 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e3ca      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	4b97      	ldr	r3, [pc, #604]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397c:	4b94      	ldr	r3, [pc, #592]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80e4 	beq.w	8003b5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_RCC_OscConfig+0x4a>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	f040 808b 	bne.w	8003ab8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f040 8087 	bne.w	8003ab8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039aa:	4b89      	ldr	r3, [pc, #548]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_RCC_OscConfig+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e3a2      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	4b82      	ldr	r3, [pc, #520]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_RCC_OscConfig+0x7c>
 80039d2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039da:	e005      	b.n	80039e8 <HAL_RCC_OscConfig+0x88>
 80039dc:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d223      	bcs.n	8003a34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd1d 	bl	8004430 <RCC_SetFlashLatencyFromMSIRange>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e383      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a00:	4b73      	ldr	r3, [pc, #460]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a72      	ldr	r2, [pc, #456]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a06:	f043 0308 	orr.w	r3, r3, #8
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b70      	ldr	r3, [pc, #448]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	496d      	ldr	r1, [pc, #436]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1e:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	4968      	ldr	r1, [pc, #416]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
 8003a32:	e025      	b.n	8003a80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a34:	4b66      	ldr	r3, [pc, #408]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a65      	ldr	r2, [pc, #404]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	f043 0308 	orr.w	r3, r3, #8
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b63      	ldr	r3, [pc, #396]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4960      	ldr	r1, [pc, #384]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a52:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	495b      	ldr	r1, [pc, #364]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fcdd 	bl	8004430 <RCC_SetFlashLatencyFromMSIRange>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e343      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a80:	f000 fc4a 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b52      	ldr	r3, [pc, #328]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	4950      	ldr	r1, [pc, #320]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8003bd8 <HAL_RCC_OscConfig+0x278>)
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8003bdc <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fd f977 	bl	8000d98 <HAL_InitTick>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d052      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	e327      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d032      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ac0:	4b43      	ldr	r3, [pc, #268]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a42      	ldr	r2, [pc, #264]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003acc:	f7fd f9b4 	bl	8000e38 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad4:	f7fd f9b0 	bl	8000e38 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e310      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af2:	4b37      	ldr	r3, [pc, #220]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a36      	ldr	r2, [pc, #216]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b34      	ldr	r3, [pc, #208]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4931      	ldr	r1, [pc, #196]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b10:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	492c      	ldr	r1, [pc, #176]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
 8003b24:	e01a      	b.n	8003b5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b26:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b32:	f7fd f981 	bl	8000e38 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b3a:	f7fd f97d 	bl	8000e38 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e2dd      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b4c:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x1da>
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d074      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x21a>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d10e      	bne.n	8003b92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d10b      	bne.n	8003b92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7a:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d064      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2f0>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d160      	bne.n	8003c50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e2ba      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x24a>
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e026      	b.n	8003bf8 <HAL_RCC_OscConfig+0x298>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bb2:	d115      	bne.n	8003be0 <HAL_RCC_OscConfig+0x280>
 8003bb4:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a05      	ldr	r2, [pc, #20]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a02      	ldr	r2, [pc, #8]	@ (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e014      	b.n	8003bf8 <HAL_RCC_OscConfig+0x298>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08004ee0 	.word	0x08004ee0
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	20000004 	.word	0x20000004
 8003be0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a9f      	ldr	r2, [pc, #636]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b9d      	ldr	r3, [pc, #628]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd f91a 	bl	8000e38 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fd f916 	bl	8000e38 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	@ 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e276      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1a:	4b92      	ldr	r3, [pc, #584]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2a8>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd f906 	bl	8000e38 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fd f902 	bl	8000e38 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	@ 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e262      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c42:	4b88      	ldr	r3, [pc, #544]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2d0>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d060      	beq.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_OscConfig+0x310>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d119      	bne.n	8003c9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d116      	bne.n	8003c9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c70:	4b7c      	ldr	r3, [pc, #496]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x328>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e23f      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b76      	ldr	r3, [pc, #472]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	4973      	ldr	r1, [pc, #460]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c9c:	e040      	b.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d023      	beq.n	8003cee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6e      	ldr	r2, [pc, #440]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd f8c1 	bl	8000e38 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fd f8bd 	bl	8000e38 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e21d      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ccc:	4b65      	ldr	r3, [pc, #404]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b62      	ldr	r3, [pc, #392]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	495f      	ldr	r1, [pc, #380]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
 8003cec:	e018      	b.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b5d      	ldr	r3, [pc, #372]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd f89d 	bl	8000e38 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fd f899 	bl	8000e38 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1f9      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d14:	4b53      	ldr	r3, [pc, #332]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d03c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d34:	4b4b      	ldr	r3, [pc, #300]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fd f878 	bl	8000e38 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fd f874 	bl	8000e38 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1d4      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d5e:	4b41      	ldr	r3, [pc, #260]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ef      	beq.n	8003d4c <HAL_RCC_OscConfig+0x3ec>
 8003d6c:	e01b      	b.n	8003da6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d74:	4a3b      	ldr	r2, [pc, #236]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fd f85b 	bl	8000e38 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fd f857 	bl	8000e38 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1b7      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d98:	4b32      	ldr	r3, [pc, #200]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ef      	bne.n	8003d86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80a6 	beq.w	8003f00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003db8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b27      	ldr	r3, [pc, #156]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	4a26      	ldr	r2, [pc, #152]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd0:	4b24      	ldr	r3, [pc, #144]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d118      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dec:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df8:	f7fd f81e 	bl	8000e38 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fd f81a 	bl	8000e38 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e17a      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e12:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d108      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4d8>
 8003e26:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e36:	e029      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d115      	bne.n	8003e6c <HAL_RCC_OscConfig+0x50c>
 8003e40:	4b08      	ldr	r3, [pc, #32]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	4a07      	ldr	r2, [pc, #28]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e48:	f043 0304 	orr.w	r3, r3, #4
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e50:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	4a03      	ldr	r2, [pc, #12]	@ (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e60:	e014      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	4b9c      	ldr	r3, [pc, #624]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e72:	4a9b      	ldr	r2, [pc, #620]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e7c:	4b98      	ldr	r3, [pc, #608]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	4a97      	ldr	r2, [pc, #604]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d016      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fc ffd0 	bl	8000e38 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fc ffcc 	bl	8000e38 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e12a      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	4b8b      	ldr	r3, [pc, #556]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ed      	beq.n	8003e9c <HAL_RCC_OscConfig+0x53c>
 8003ec0:	e015      	b.n	8003eee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fc ffb9 	bl	8000e38 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fc ffb5 	bl	8000e38 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e113      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee0:	4b7f      	ldr	r3, [pc, #508]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ed      	bne.n	8003eca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	4b7a      	ldr	r3, [pc, #488]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef8:	4a79      	ldr	r2, [pc, #484]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80fe 	beq.w	8004106 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	f040 80d0 	bne.w	80040b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f14:	4b72      	ldr	r3, [pc, #456]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0203 	and.w	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d130      	bne.n	8003f8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	3b01      	subs	r3, #1
 8003f34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d127      	bne.n	8003f8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11f      	bne.n	8003f8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f54:	2a07      	cmp	r2, #7
 8003f56:	bf14      	ite	ne
 8003f58:	2201      	movne	r2, #1
 8003f5a:	2200      	moveq	r2, #0
 8003f5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d113      	bne.n	8003f8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d06e      	beq.n	8004068 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d069      	beq.n	8004064 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f90:	4b53      	ldr	r3, [pc, #332]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f9c:	4b50      	ldr	r3, [pc, #320]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0ad      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fac:	4b4c      	ldr	r3, [pc, #304]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fb8:	f7fc ff3e 	bl	8000e38 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fc ff3a 	bl	8000e38 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e09a      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd2:	4b43      	ldr	r3, [pc, #268]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fde:	4b40      	ldr	r3, [pc, #256]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	4b40      	ldr	r3, [pc, #256]	@ (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	0112      	lsls	r2, r2, #4
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ff8:	0212      	lsls	r2, r2, #8
 8003ffa:	4311      	orrs	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004000:	0852      	lsrs	r2, r2, #1
 8004002:	3a01      	subs	r2, #1
 8004004:	0552      	lsls	r2, r2, #21
 8004006:	4311      	orrs	r1, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800400c:	0852      	lsrs	r2, r2, #1
 800400e:	3a01      	subs	r2, #1
 8004010:	0652      	lsls	r2, r2, #25
 8004012:	4311      	orrs	r1, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004018:	0912      	lsrs	r2, r2, #4
 800401a:	0452      	lsls	r2, r2, #17
 800401c:	430a      	orrs	r2, r1
 800401e:	4930      	ldr	r1, [pc, #192]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004020:	4313      	orrs	r3, r2
 8004022:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004024:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2d      	ldr	r2, [pc, #180]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004030:	4b2b      	ldr	r3, [pc, #172]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800403c:	f7fc fefc 	bl	8000e38 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fc fef8 	bl	8000e38 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e058      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004056:	4b22      	ldr	r3, [pc, #136]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004062:	e050      	b.n	8004106 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e04f      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004068:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d148      	bne.n	8004106 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a19      	ldr	r2, [pc, #100]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004080:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a16      	ldr	r2, [pc, #88]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800408c:	f7fc fed4 	bl	8000e38 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fc fed0 	bl	8000e38 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e030      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a6:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x734>
 80040b2:	e028      	b.n	8004106 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d023      	beq.n	8004102 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <HAL_RCC_OscConfig+0x780>)
 80040c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fc feb7 	bl	8000e38 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040cc:	e00c      	b.n	80040e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fc feb3 	bl	8000e38 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d905      	bls.n	80040e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e013      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
 80040e0:	40021000 	.word	0x40021000
 80040e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e8:	4b09      	ldr	r3, [pc, #36]	@ (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ec      	bne.n	80040ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040f4:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	4905      	ldr	r1, [pc, #20]	@ (8004110 <HAL_RCC_OscConfig+0x7b0>)
 80040fa:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_RCC_OscConfig+0x7b4>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	60cb      	str	r3, [r1, #12]
 8004100:	e001      	b.n	8004106 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000
 8004114:	feeefffc 	.word	0xfeeefffc

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0e7      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b75      	ldr	r3, [pc, #468]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b72      	ldr	r3, [pc, #456]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4970      	ldr	r1, [pc, #448]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b6e      	ldr	r3, [pc, #440]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0cf      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	4b66      	ldr	r3, [pc, #408]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004174:	429a      	cmp	r2, r3
 8004176:	d908      	bls.n	800418a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b63      	ldr	r3, [pc, #396]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4960      	ldr	r1, [pc, #384]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04c      	beq.n	8004230 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419e:	4b5a      	ldr	r3, [pc, #360]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d121      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0a6      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b6:	4b54      	ldr	r3, [pc, #336]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d115      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e09a      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e08e      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e086      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ee:	4b46      	ldr	r3, [pc, #280]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4943      	ldr	r1, [pc, #268]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fc fe1a 	bl	8000e38 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	e00a      	b.n	800421e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004208:	f7fc fe16 	bl	8000e38 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e06e      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	4b3a      	ldr	r3, [pc, #232]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 020c 	and.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	429a      	cmp	r2, r3
 800422e:	d1eb      	bne.n	8004208 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004248:	429a      	cmp	r2, r3
 800424a:	d208      	bcs.n	800425e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424c:	4b2e      	ldr	r3, [pc, #184]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	492b      	ldr	r1, [pc, #172]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425e:	4b29      	ldr	r3, [pc, #164]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d210      	bcs.n	800428e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426c:	4b25      	ldr	r3, [pc, #148]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 0207 	bic.w	r2, r3, #7
 8004274:	4923      	ldr	r1, [pc, #140]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427c:	4b21      	ldr	r3, [pc, #132]	@ (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d001      	beq.n	800428e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e036      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800429a:	4b1b      	ldr	r3, [pc, #108]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4918      	ldr	r1, [pc, #96]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d009      	beq.n	80042cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4910      	ldr	r1, [pc, #64]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042cc:	f000 f824 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	490b      	ldr	r1, [pc, #44]	@ (800430c <HAL_RCC_ClockConfig+0x1f4>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <HAL_RCC_ClockConfig+0x1f8>)
 80042ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042ec:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <HAL_RCC_ClockConfig+0x1fc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc fd51 	bl	8000d98 <HAL_InitTick>
 80042f6:	4603      	mov	r3, r0
 80042f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042fa:	7afb      	ldrb	r3, [r7, #11]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40022000 	.word	0x40022000
 8004308:	40021000 	.word	0x40021000
 800430c:	08004ee0 	.word	0x08004ee0
 8004310:	20000000 	.word	0x20000000
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	@ 0x24
 800431c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4b3e      	ldr	r3, [pc, #248]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004330:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x34>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d121      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d11e      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800434c:	4b34      	ldr	r3, [pc, #208]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004358:	4b31      	ldr	r3, [pc, #196]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e005      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004368:	4b2d      	ldr	r3, [pc, #180]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004374:	4a2b      	ldr	r2, [pc, #172]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d102      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004390:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e004      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800439c:	4b23      	ldr	r3, [pc, #140]	@ (800442c <HAL_RCC_GetSysClockFreq+0x114>)
 800439e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d134      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0xa6>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d003      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0xac>
 80043bc:	e005      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043be:	4b1a      	ldr	r3, [pc, #104]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c0:	617b      	str	r3, [r7, #20]
      break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043c4:	4b19      	ldr	r3, [pc, #100]	@ (800442c <HAL_RCC_GetSysClockFreq+0x114>)
 80043c6:	617b      	str	r3, [r7, #20]
      break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	617b      	str	r3, [r7, #20]
      break;
 80043ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d0:	4b13      	ldr	r3, [pc, #76]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	3301      	adds	r3, #1
 80043dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	fb03 f202 	mul.w	r2, r3, r2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	0e5b      	lsrs	r3, r3, #25
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	3301      	adds	r3, #1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004410:	69bb      	ldr	r3, [r7, #24]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3724      	adds	r7, #36	@ 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	08004ef0 	.word	0x08004ef0
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200

08004430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800443c:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004448:	f7ff fa26 	bl	8003898 <HAL_PWREx_GetVoltageRange>
 800444c:	6178      	str	r0, [r7, #20]
 800444e:	e014      	b.n	800447a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004450:	4b25      	ldr	r3, [pc, #148]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	4a24      	ldr	r2, [pc, #144]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445a:	6593      	str	r3, [r2, #88]	@ 0x58
 800445c:	4b22      	ldr	r3, [pc, #136]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004468:	f7ff fa16 	bl	8003898 <HAL_PWREx_GetVoltageRange>
 800446c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800446e:	4b1e      	ldr	r3, [pc, #120]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	4a1d      	ldr	r2, [pc, #116]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004480:	d10b      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b80      	cmp	r3, #128	@ 0x80
 8004486:	d919      	bls.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2ba0      	cmp	r3, #160	@ 0xa0
 800448c:	d902      	bls.n	8004494 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800448e:	2302      	movs	r3, #2
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e013      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004494:	2301      	movs	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e010      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b80      	cmp	r3, #128	@ 0x80
 800449e:	d902      	bls.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044a0:	2303      	movs	r3, #3
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	e00a      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b80      	cmp	r3, #128	@ 0x80
 80044aa:	d102      	bne.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ac:	2302      	movs	r3, #2
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e004      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b70      	cmp	r3, #112	@ 0x70
 80044b6:	d101      	bne.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b8:	2301      	movs	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 0207 	bic.w	r2, r3, #7
 80044c4:	4909      	ldr	r1, [pc, #36]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044cc:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d001      	beq.n	80044de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40022000 	.word	0x40022000

080044f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f8:	2300      	movs	r3, #0
 80044fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004508:	2b00      	cmp	r3, #0
 800450a:	d041      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004510:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004514:	d02a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004516:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800451a:	d824      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800451c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004520:	d008      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004522:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004526:	d81e      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800452c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004530:	d010      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004532:	e018      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004534:	4b86      	ldr	r3, [pc, #536]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4a85      	ldr	r2, [pc, #532]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004540:	e015      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fabb 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004552:	e00c      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3320      	adds	r3, #32
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fba6 	bl	8004cac <RCCEx_PLLSAI2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004564:	e003      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	74fb      	strb	r3, [r7, #19]
      break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800456c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004574:	4b76      	ldr	r3, [pc, #472]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004582:	4973      	ldr	r1, [pc, #460]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800458a:	e001      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d041      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045a4:	d02a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045aa:	d824      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045b0:	d008      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045b6:	d81e      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045c0:	d010      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045c2:	e018      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c4:	4b62      	ldr	r3, [pc, #392]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a61      	ldr	r2, [pc, #388]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045d0:	e015      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fa73 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045e2:	e00c      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3320      	adds	r3, #32
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb5e 	bl	8004cac <RCCEx_PLLSAI2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f4:	e003      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	74fb      	strb	r3, [r7, #19]
      break;
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004604:	4b52      	ldr	r3, [pc, #328]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004612:	494f      	ldr	r1, [pc, #316]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800461a:	e001      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a0 	beq.w	800476e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004632:	4b47      	ldr	r3, [pc, #284]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00d      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004648:	4b41      	ldr	r3, [pc, #260]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464c:	4a40      	ldr	r2, [pc, #256]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004652:	6593      	str	r3, [r2, #88]	@ 0x58
 8004654:	4b3e      	ldr	r3, [pc, #248]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004660:	2301      	movs	r3, #1
 8004662:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3a      	ldr	r2, [pc, #232]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800466e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004670:	f7fc fbe2 	bl	8000e38 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004676:	e009      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004678:	f7fc fbde 	bl	8000e38 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d902      	bls.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	74fb      	strb	r3, [r7, #19]
        break;
 800468a:	e005      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800468c:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ef      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d15c      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800469e:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d019      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046bc:	4b24      	ldr	r3, [pc, #144]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046c8:	4b21      	ldr	r3, [pc, #132]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	4a20      	ldr	r2, [pc, #128]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fc fb9d 	bl	8000e38 <HAL_GetTick>
 80046fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004700:	e00b      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fc fb99 	bl	8000e38 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d902      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	74fb      	strb	r3, [r7, #19]
            break;
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ec      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472e:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473e:	4904      	ldr	r1, [pc, #16]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004746:	e009      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
 800474c:	e006      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800475c:	7c7b      	ldrb	r3, [r7, #17]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b9e      	ldr	r3, [pc, #632]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	4a9d      	ldr	r2, [pc, #628]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800477a:	4b98      	ldr	r3, [pc, #608]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004780:	f023 0203 	bic.w	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	4994      	ldr	r1, [pc, #592]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800479c:	4b8f      	ldr	r3, [pc, #572]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f023 020c 	bic.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047aa:	498c      	ldr	r1, [pc, #560]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047be:	4b87      	ldr	r3, [pc, #540]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	4983      	ldr	r1, [pc, #524]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047e0:	4b7e      	ldr	r3, [pc, #504]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	497b      	ldr	r1, [pc, #492]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004802:	4b76      	ldr	r3, [pc, #472]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	4972      	ldr	r1, [pc, #456]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004824:	4b6d      	ldr	r3, [pc, #436]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004832:	496a      	ldr	r1, [pc, #424]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004846:	4b65      	ldr	r3, [pc, #404]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004854:	4961      	ldr	r1, [pc, #388]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004868:	4b5c      	ldr	r3, [pc, #368]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	4959      	ldr	r1, [pc, #356]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488a:	4b54      	ldr	r3, [pc, #336]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004898:	4950      	ldr	r1, [pc, #320]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ac:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	4948      	ldr	r1, [pc, #288]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ce:	4b43      	ldr	r3, [pc, #268]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	493f      	ldr	r1, [pc, #252]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d028      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f0:	4b3a      	ldr	r3, [pc, #232]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fe:	4937      	ldr	r1, [pc, #220]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800490e:	d106      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004910:	4b32      	ldr	r3, [pc, #200]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a31      	ldr	r2, [pc, #196]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800491a:	60d3      	str	r3, [r2, #12]
 800491c:	e011      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004922:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004926:	d10c      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	2101      	movs	r1, #1
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f8c8 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d028      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800494e:	4b23      	ldr	r3, [pc, #140]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004954:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495c:	491f      	ldr	r1, [pc, #124]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800496c:	d106      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800496e:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	4a1a      	ldr	r2, [pc, #104]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004978:	60d3      	str	r3, [r2, #12]
 800497a:	e011      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004980:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f899 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ba:	4908      	ldr	r1, [pc, #32]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ca:	d109      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a02      	ldr	r2, [pc, #8]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d6:	60d3      	str	r3, [r2, #12]
 80049d8:	e014      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2101      	movs	r1, #1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f867 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02f      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a1e:	4928      	ldr	r1, [pc, #160]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a2e:	d10d      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2102      	movs	r1, #2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f844 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d014      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	74bb      	strb	r3, [r7, #18]
 8004a4a:	e011      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3320      	adds	r3, #32
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f925 	bl	8004cac <RCCEx_PLLSAI2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a8a:	490d      	ldr	r1, [pc, #52]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a9e:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aae:	4904      	ldr	r1, [pc, #16]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ab6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad2:	4b75      	ldr	r3, [pc, #468]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ade:	4b72      	ldr	r3, [pc, #456]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0203 	and.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d10d      	bne.n	8004b0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
       ||
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004af6:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
       ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d047      	beq.n	8004b9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e044      	b.n	8004b9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d018      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0x86>
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d825      	bhi.n	8004b68 <RCCEx_PLLSAI1_Config+0xa4>
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d002      	beq.n	8004b26 <RCCEx_PLLSAI1_Config+0x62>
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d009      	beq.n	8004b38 <RCCEx_PLLSAI1_Config+0x74>
 8004b24:	e020      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b26:	4b60      	ldr	r3, [pc, #384]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b36:	e01a      	b.n	8004b6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b38:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d116      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b48:	e013      	b.n	8004b72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b4a:	4b57      	ldr	r3, [pc, #348]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b56:	4b54      	ldr	r3, [pc, #336]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b66:	e006      	b.n	8004b76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e004      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10d      	bne.n	8004b9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	430b      	orrs	r3, r1
 8004b94:	4944      	ldr	r1, [pc, #272]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d17d      	bne.n	8004c9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ba0:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a40      	ldr	r2, [pc, #256]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bac:	f7fc f944 	bl	8000e38 <HAL_GetTick>
 8004bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb2:	e009      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bb4:	f7fc f940 	bl	8000e38 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bc6:	e005      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bc8:	4b37      	ldr	r3, [pc, #220]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ef      	bne.n	8004bb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d160      	bne.n	8004c9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d111      	bne.n	8004c04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be0:	4b31      	ldr	r3, [pc, #196]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6892      	ldr	r2, [r2, #8]
 8004bf0:	0211      	lsls	r1, r2, #8
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68d2      	ldr	r2, [r2, #12]
 8004bf6:	0912      	lsrs	r2, r2, #4
 8004bf8:	0452      	lsls	r2, r2, #17
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	492a      	ldr	r1, [pc, #168]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]
 8004c02:	e027      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d112      	bne.n	8004c30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6892      	ldr	r2, [r2, #8]
 8004c1a:	0211      	lsls	r1, r2, #8
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6912      	ldr	r2, [r2, #16]
 8004c20:	0852      	lsrs	r2, r2, #1
 8004c22:	3a01      	subs	r2, #1
 8004c24:	0552      	lsls	r2, r2, #21
 8004c26:	430a      	orrs	r2, r1
 8004c28:	491f      	ldr	r1, [pc, #124]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	610b      	str	r3, [r1, #16]
 8004c2e:	e011      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	0211      	lsls	r1, r2, #8
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6952      	ldr	r2, [r2, #20]
 8004c46:	0852      	lsrs	r2, r2, #1
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	0652      	lsls	r2, r2, #25
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	4916      	ldr	r1, [pc, #88]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a13      	ldr	r2, [pc, #76]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fc f8ea 	bl	8000e38 <HAL_GetTick>
 8004c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c66:	e009      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c68:	f7fc f8e6 	bl	8000e38 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d902      	bls.n	8004c7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	73fb      	strb	r3, [r7, #15]
          break;
 8004c7a:	e005      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ef      	beq.n	8004c68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	4904      	ldr	r1, [pc, #16]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000

08004cac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cba:	4b6a      	ldr	r3, [pc, #424]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cc6:	4b67      	ldr	r3, [pc, #412]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0203 	and.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10d      	bne.n	8004cf2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cde:	4b61      	ldr	r3, [pc, #388]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
       ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d047      	beq.n	8004d82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	e044      	b.n	8004d82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d018      	beq.n	8004d32 <RCCEx_PLLSAI2_Config+0x86>
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d825      	bhi.n	8004d50 <RCCEx_PLLSAI2_Config+0xa4>
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d002      	beq.n	8004d0e <RCCEx_PLLSAI2_Config+0x62>
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d009      	beq.n	8004d20 <RCCEx_PLLSAI2_Config+0x74>
 8004d0c:	e020      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d0e:	4b55      	ldr	r3, [pc, #340]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d11d      	bne.n	8004d56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d1e:	e01a      	b.n	8004d56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d20:	4b50      	ldr	r3, [pc, #320]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d116      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e013      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d32:	4b4c      	ldr	r3, [pc, #304]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d3e:	4b49      	ldr	r3, [pc, #292]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d4e:	e006      	b.n	8004d5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
      break;
 8004d54:	e004      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d66:	4b3f      	ldr	r3, [pc, #252]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	4939      	ldr	r1, [pc, #228]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d167      	bne.n	8004e58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d88:	4b36      	ldr	r3, [pc, #216]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fc f850 	bl	8000e38 <HAL_GetTick>
 8004d98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d9a:	e009      	b.n	8004db0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d9c:	f7fc f84c 	bl	8000e38 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d902      	bls.n	8004db0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	73fb      	strb	r3, [r7, #15]
        break;
 8004dae:	e005      	b.n	8004dbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004db0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ef      	bne.n	8004d9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d14a      	bne.n	8004e58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d111      	bne.n	8004dec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dc8:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6892      	ldr	r2, [r2, #8]
 8004dd8:	0211      	lsls	r1, r2, #8
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	0912      	lsrs	r2, r2, #4
 8004de0:	0452      	lsls	r2, r2, #17
 8004de2:	430a      	orrs	r2, r1
 8004de4:	491f      	ldr	r1, [pc, #124]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	614b      	str	r3, [r1, #20]
 8004dea:	e011      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dec:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004df4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6892      	ldr	r2, [r2, #8]
 8004dfc:	0211      	lsls	r1, r2, #8
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6912      	ldr	r2, [r2, #16]
 8004e02:	0852      	lsrs	r2, r2, #1
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0652      	lsls	r2, r2, #25
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	4916      	ldr	r1, [pc, #88]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e10:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a13      	ldr	r2, [pc, #76]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fc f80c 	bl	8000e38 <HAL_GetTick>
 8004e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e22:	e009      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e24:	f7fc f808 	bl	8000e38 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d902      	bls.n	8004e38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	73fb      	strb	r3, [r7, #15]
          break;
 8004e36:	e005      	b.n	8004e44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ef      	beq.n	8004e24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <__libc_init_array>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004eb0 <__libc_init_array+0x38>)
 8004e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004eb4 <__libc_init_array+0x3c>)
 8004e7e:	1b64      	subs	r4, r4, r5
 8004e80:	10a4      	asrs	r4, r4, #2
 8004e82:	2600      	movs	r6, #0
 8004e84:	42a6      	cmp	r6, r4
 8004e86:	d109      	bne.n	8004e9c <__libc_init_array+0x24>
 8004e88:	4d0b      	ldr	r5, [pc, #44]	@ (8004eb8 <__libc_init_array+0x40>)
 8004e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004ebc <__libc_init_array+0x44>)
 8004e8c:	f000 f818 	bl	8004ec0 <_init>
 8004e90:	1b64      	subs	r4, r4, r5
 8004e92:	10a4      	asrs	r4, r4, #2
 8004e94:	2600      	movs	r6, #0
 8004e96:	42a6      	cmp	r6, r4
 8004e98:	d105      	bne.n	8004ea6 <__libc_init_array+0x2e>
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea0:	4798      	blx	r3
 8004ea2:	3601      	adds	r6, #1
 8004ea4:	e7ee      	b.n	8004e84 <__libc_init_array+0xc>
 8004ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eaa:	4798      	blx	r3
 8004eac:	3601      	adds	r6, #1
 8004eae:	e7f2      	b.n	8004e96 <__libc_init_array+0x1e>
 8004eb0:	08004f20 	.word	0x08004f20
 8004eb4:	08004f20 	.word	0x08004f20
 8004eb8:	08004f20 	.word	0x08004f20
 8004ebc:	08004f24 	.word	0x08004f24

08004ec0 <_init>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr

08004ecc <_fini>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr
