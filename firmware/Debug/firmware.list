
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004870  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a38  08004a38  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a38  08004a38  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a38  08004a38  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a38  08004a38  00005a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a3c  08004a3c  00005a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08004a4c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004a4c  00006124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8ea  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1e  00000000  00000000  00010926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00012848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ec  00000000  00000000  000132c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c25  00000000  00000000  00013aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d563  00000000  00000000  000156d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d3e  00000000  00000000  00022c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002934  00000000  00000000  001049b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001072ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049e0 	.word	0x080049e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080049e0 	.word	0x080049e0

080001c8 <writeRegister>:

bool sensorReady = 0;
bool transmitterReady = 0;
I2C_HandleTypeDef hI2C;

void writeRegister(uint8_t addr, uint8_t regAddr, uint8_t value){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	460b      	mov	r3, r1
 80001d4:	71bb      	strb	r3, [r7, #6]
 80001d6:	4613      	mov	r3, r2
 80001d8:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {regAddr, value};
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	733b      	strb	r3, [r7, #12]
 80001de:	797b      	ldrb	r3, [r7, #5]
 80001e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 2);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	b29b      	uxth	r3, r3
 80001e6:	005b      	lsls	r3, r3, #1
 80001e8:	b299      	uxth	r1, r3
 80001ea:	f107 020c 	add.w	r2, r7, #12
 80001ee:	2302      	movs	r3, #2
 80001f0:	4808      	ldr	r0, [pc, #32]	@ (8000214 <writeRegister+0x4c>)
 80001f2:	f001 f97f 	bl	80014f4 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 80001f6:	bf00      	nop
 80001f8:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <writeRegister+0x50>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	f083 0301 	eor.w	r3, r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f8      	bne.n	80001f8 <writeRegister+0x30>
	sensorReady = 0;
 8000206:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <writeRegister+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000002c 	.word	0x2000002c
 8000218:	20000028 	.word	0x20000028

0800021c <readRegister>:

void readRegister(uint8_t addr, uint8_t regAddr, uint8_t *result, uint16_t size){
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	603a      	str	r2, [r7, #0]
 8000224:	461a      	mov	r2, r3
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
 800022a:	460b      	mov	r3, r1
 800022c:	71bb      	strb	r3, [r7, #6]
 800022e:	4613      	mov	r3, r2
 8000230:	80bb      	strh	r3, [r7, #4]
	uint8_t data[1] = {regAddr};
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 1);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	b29b      	uxth	r3, r3
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	b299      	uxth	r1, r3
 800023e:	f107 020c 	add.w	r2, r7, #12
 8000242:	2301      	movs	r3, #1
 8000244:	4814      	ldr	r0, [pc, #80]	@ (8000298 <readRegister+0x7c>)
 8000246:	f001 f955 	bl	80014f4 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 800024a:	bf00      	nop
 800024c:	4b13      	ldr	r3, [pc, #76]	@ (800029c <readRegister+0x80>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	f083 0301 	eor.w	r3, r3, #1
 8000254:	b2db      	uxtb	r3, r3
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f8      	bne.n	800024c <readRegister+0x30>
	sensorReady = 0;
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <readRegister+0x80>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive_DMA(&hI2C, (addr << 1) | (0x01), result, size);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	b21b      	sxth	r3, r3
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	b21b      	sxth	r3, r3
 800026c:	b299      	uxth	r1, r3
 800026e:	88bb      	ldrh	r3, [r7, #4]
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	4809      	ldr	r0, [pc, #36]	@ (8000298 <readRegister+0x7c>)
 8000274:	f001 fa52 	bl	800171c <HAL_I2C_Master_Receive_DMA>
	while(!transmitterReady);
 8000278:	bf00      	nop
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <readRegister+0x84>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	f083 0301 	eor.w	r3, r3, #1
 8000282:	b2db      	uxtb	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f8      	bne.n	800027a <readRegister+0x5e>
	transmitterReady = 0;
 8000288:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <readRegister+0x84>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000002c 	.word	0x2000002c
 800029c:	20000028 	.word	0x20000028
 80002a0:	20000029 	.word	0x20000029

080002a4 <I2C_Init>:

//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 80002a8:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <I2C_Init+0x78>)
 80002aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000320 <I2C_Init+0x7c>)
 80002ac:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 80002ae:	4b1b      	ldr	r3, [pc, #108]	@ (800031c <I2C_Init+0x78>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002b4:	4b19      	ldr	r3, [pc, #100]	@ (800031c <I2C_Init+0x78>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ba:	4b18      	ldr	r3, [pc, #96]	@ (800031c <I2C_Init+0x78>)
 80002bc:	2201      	movs	r2, #1
 80002be:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c0:	4b16      	ldr	r3, [pc, #88]	@ (800031c <I2C_Init+0x78>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 80002c6:	4b15      	ldr	r3, [pc, #84]	@ (800031c <I2C_Init+0x78>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002cc:	4b13      	ldr	r3, [pc, #76]	@ (800031c <I2C_Init+0x78>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d2:	4b12      	ldr	r3, [pc, #72]	@ (800031c <I2C_Init+0x78>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <I2C_Init+0x78>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <I2C_Init+0x78>)
 80002e0:	4a10      	ldr	r2, [pc, #64]	@ (8000324 <I2C_Init+0x80>)
 80002e2:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 80002e4:	480d      	ldr	r0, [pc, #52]	@ (800031c <I2C_Init+0x78>)
 80002e6:	f001 f869 	bl	80013bc <HAL_I2C_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <I2C_Init+0x50>
	{
		Error_Handler();
 80002f0:	f000 f8d4 	bl	800049c <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002f4:	2100      	movs	r1, #0
 80002f6:	4809      	ldr	r0, [pc, #36]	@ (800031c <I2C_Init+0x78>)
 80002f8:	f002 ffc6 	bl	8003288 <HAL_I2CEx_ConfigAnalogFilter>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <I2C_Init+0x62>
	{
		Error_Handler();
 8000302:	f000 f8cb 	bl	800049c <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 8000306:	2100      	movs	r1, #0
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <I2C_Init+0x78>)
 800030a:	f003 f808 	bl	800331e <HAL_I2CEx_ConfigDigitalFilter>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <I2C_Init+0x74>
    {
    	Error_Handler();
 8000314:	f000 f8c2 	bl	800049c <Error_Handler>
    }
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000002c 	.word	0x2000002c
 8000320:	40005400 	.word	0x40005400
 8000324:	00100d14 	.word	0x00100d14

08000328 <HAL_I2C_ErrorCallback>:

#define BUFFERSIZE 100
#define DS3231ADDR = 0b1101000


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2CHandle){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d102      	bne.n	8000354 <HAL_I2C_MasterTxCpltCallback+0x18>
		sensorReady = 1;
 800034e:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
	}
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40005400 	.word	0x40005400
 8000364:	20000028 	.word	0x20000028

08000368 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2CHandle){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a05      	ldr	r2, [pc, #20]	@ (800038c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d102      	bne.n	8000380 <HAL_I2C_MasterRxCpltCallback+0x18>
		transmitterReady = 1;
 800037a:	4b05      	ldr	r3, [pc, #20]	@ (8000390 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
	}
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40005400 	.word	0x40005400
 8000390:	20000029 	.word	0x20000029

08000394 <main>:


int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
  HAL_Init();
 800039a:	f000 fa98 	bl	80008ce <HAL_Init>
  SystemClock_Config();
 800039e:	f000 f810 	bl	80003c2 <SystemClock_Config>
  DMA_Init();
 80003a2:	f000 f855 	bl	8000450 <DMA_Init>
  I2C_Init();
 80003a6:	f7ff ff7d 	bl	80002a4 <I2C_Init>

  uint8_t result[1];
  initMPU6050(0);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 f87c 	bl	80004a8 <initMPU6050>
  while (1)
  {
	  getAccelMPU6050();
 80003b0:	f000 f8ca 	bl	8000548 <getAccelMPU6050>
	  int x = 21;
 80003b4:	2315      	movs	r3, #21
 80003b6:	607b      	str	r3, [r7, #4]
	  x+=1;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
  {
 80003be:	bf00      	nop
 80003c0:	e7f6      	b.n	80003b0 <main+0x1c>

080003c2 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b096      	sub	sp, #88	@ 0x58
 80003c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	2244      	movs	r2, #68	@ 0x44
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f004 fad9 	bl	8004988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d6:	463b      	mov	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003e8:	f002 fff4 	bl	80033d4 <HAL_PWREx_ControlVoltageScaling>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f2:	f000 f853 	bl	800049c <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003f6:	2310      	movs	r3, #16
 80003f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003fa:	2301      	movs	r3, #1
 80003fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000402:	2360      	movs	r3, #96	@ 0x60
 8000404:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000406:	2300      	movs	r3, #0
 8000408:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	4618      	mov	r0, r3
 8000410:	f003 f836 	bl	8003480 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800041a:	f000 f83f 	bl	800049c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	230f      	movs	r3, #15
 8000420:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000432:	463b      	mov	r3, r7
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fbfe 	bl	8003c38 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000442:	f000 f82b 	bl	800049c <Error_Handler>
  }
}
 8000446:	bf00      	nop
 8000448:	3758      	adds	r7, #88	@ 0x58
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <DMA_Init>:


//PB6 = SCL1, PB7 = SDA1


void DMA_Init(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000456:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <DMA_Init+0x48>)
 8000458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800045a:	4a0f      	ldr	r2, [pc, #60]	@ (8000498 <DMA_Init+0x48>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6493      	str	r3, [r2, #72]	@ 0x48
 8000462:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <DMA_Init+0x48>)
 8000464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 800046e:	2200      	movs	r2, #0
 8000470:	2100      	movs	r1, #0
 8000472:	2010      	movs	r0, #16
 8000474:	f000 fb7b 	bl	8000b6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000478:	2010      	movs	r0, #16
 800047a:	f000 fb94 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	2011      	movs	r0, #17
 8000484:	f000 fb73 	bl	8000b6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000488:	2011      	movs	r0, #17
 800048a:	f000 fb8c 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <Error_Handler>:
}



void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  __disable_irq();
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <Error_Handler+0x8>

080004a8 <initMPU6050>:
float accelX;
float accelY;
float accelZ;


void initMPU6050(unsigned char AFS_SEL){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	switch(AFS_SEL){
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d818      	bhi.n	80004ea <initMPU6050+0x42>
 80004b8:	a201      	add	r2, pc, #4	@ (adr r2, 80004c0 <initMPU6050+0x18>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004d1 	.word	0x080004d1
 80004c4:	080004d9 	.word	0x080004d9
 80004c8:	080004df 	.word	0x080004df
 80004cc:	080004e5 	.word	0x080004e5
	case RANGE_2G:
		step = 0.00059877;
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <initMPU6050+0x8c>)
 80004d2:	4a19      	ldr	r2, [pc, #100]	@ (8000538 <initMPU6050+0x90>)
 80004d4:	601a      	str	r2, [r3, #0]
		break;
 80004d6:	e009      	b.n	80004ec <initMPU6050+0x44>
	case RANGE_4G:
		step = 0.00119;
 80004d8:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <initMPU6050+0x8c>)
 80004da:	4a18      	ldr	r2, [pc, #96]	@ (800053c <initMPU6050+0x94>)
 80004dc:	601a      	str	r2, [r3, #0]
	case RANGE_8G:
		step = 0.002395;
 80004de:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <initMPU6050+0x8c>)
 80004e0:	4a17      	ldr	r2, [pc, #92]	@ (8000540 <initMPU6050+0x98>)
 80004e2:	601a      	str	r2, [r3, #0]
	case RANGE_16G:
		step = 0.00479;
 80004e4:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <initMPU6050+0x8c>)
 80004e6:	4a17      	ldr	r2, [pc, #92]	@ (8000544 <initMPU6050+0x9c>)
 80004e8:	601a      	str	r2, [r3, #0]
	default:
		break;
 80004ea:	bf00      	nop
	}
	writeRegister(MPU6050ADDR, PWR_MGMT_1, 0x00);
 80004ec:	2200      	movs	r2, #0
 80004ee:	216b      	movs	r1, #107	@ 0x6b
 80004f0:	2069      	movs	r0, #105	@ 0x69
 80004f2:	f7ff fe69 	bl	80001c8 <writeRegister>
	uint8_t temp[1];
	readRegister(MPU6050ADDR, ACCEL_CONFIG, temp, 1);
 80004f6:	f107 020c 	add.w	r2, r7, #12
 80004fa:	2301      	movs	r3, #1
 80004fc:	211c      	movs	r1, #28
 80004fe:	2069      	movs	r0, #105	@ 0x69
 8000500:	f7ff fe8c 	bl	800021c <readRegister>
	temp[1] &= 0b11100111;
 8000504:	7b7b      	ldrb	r3, [r7, #13]
 8000506:	f023 0318 	bic.w	r3, r3, #24
 800050a:	b2db      	uxtb	r3, r3
 800050c:	737b      	strb	r3, [r7, #13]
	temp[1] |= (AFS_SEL << 3);
 800050e:	7b7b      	ldrb	r3, [r7, #13]
 8000510:	b25a      	sxtb	r2, r3
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25b      	sxtb	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	737b      	strb	r3, [r7, #13]
	writeRegister(MPU6050ADDR, ACCEL_CONFIG, temp[1]);
 8000520:	7b7b      	ldrb	r3, [r7, #13]
 8000522:	461a      	mov	r2, r3
 8000524:	211c      	movs	r1, #28
 8000526:	2069      	movs	r0, #105	@ 0x69
 8000528:	f7ff fe4e 	bl	80001c8 <writeRegister>
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000110 	.word	0x20000110
 8000538:	3a1cf6c6 	.word	0x3a1cf6c6
 800053c:	3a9bf9c6 	.word	0x3a9bf9c6
 8000540:	3b1cf56f 	.word	0x3b1cf56f
 8000544:	3b9cf56f 	.word	0x3b9cf56f

08000548 <getAccelMPU6050>:

void getAccelMPU6050(){
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
	uint8_t accelReg[6];
	readRegister(MPU6050ADDR,ACCEL_XOUT_H, accelReg, 6);
 800054e:	1d3a      	adds	r2, r7, #4
 8000550:	2306      	movs	r3, #6
 8000552:	213b      	movs	r1, #59	@ 0x3b
 8000554:	2069      	movs	r0, #105	@ 0x69
 8000556:	f7ff fe61 	bl	800021c <readRegister>

	    int16_t X = (accelReg[0] << 8) | (accelReg[1]);
 800055a:	793b      	ldrb	r3, [r7, #4]
 800055c:	021b      	lsls	r3, r3, #8
 800055e:	b21a      	sxth	r2, r3
 8000560:	797b      	ldrb	r3, [r7, #5]
 8000562:	b21b      	sxth	r3, r3
 8000564:	4313      	orrs	r3, r2
 8000566:	81fb      	strh	r3, [r7, #14]
	    int16_t Y = (accelReg[2] << 8) | (accelReg[3]);
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	b21a      	sxth	r2, r3
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	b21b      	sxth	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	81bb      	strh	r3, [r7, #12]
	    int16_t Z = (accelReg[4] << 8) | (accelReg[5]);
 8000576:	7a3b      	ldrb	r3, [r7, #8]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21a      	sxth	r2, r3
 800057c:	7a7b      	ldrb	r3, [r7, #9]
 800057e:	b21b      	sxth	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	817b      	strh	r3, [r7, #10]

	    accelX = (accelX)*step;
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <getAccelMPU6050+0x88>)
 8000586:	ed93 7a00 	vldr	s14, [r3]
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <getAccelMPU6050+0x8c>)
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <getAccelMPU6050+0x88>)
 8000596:	edc3 7a00 	vstr	s15, [r3]
	    accelY = (accelY)*step;
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <getAccelMPU6050+0x90>)
 800059c:	ed93 7a00 	vldr	s14, [r3]
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <getAccelMPU6050+0x8c>)
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <getAccelMPU6050+0x90>)
 80005ac:	edc3 7a00 	vstr	s15, [r3]
	    accelZ = (accelZ)*step;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <getAccelMPU6050+0x94>)
 80005b2:	ed93 7a00 	vldr	s14, [r3]
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <getAccelMPU6050+0x8c>)
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <getAccelMPU6050+0x94>)
 80005c2:	edc3 7a00 	vstr	s15, [r3]
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000114 	.word	0x20000114
 80005d4:	20000110 	.word	0x20000110
 80005d8:	20000118 	.word	0x20000118
 80005dc:	2000011c 	.word	0x2000011c

080005e0 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x44>)
 80005f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000608:	6593      	str	r3, [r2, #88]	@ 0x58
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_MspInit+0x44>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800060e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8000628:	b580      	push	{r7, lr}
 800062a:	b0ac      	sub	sp, #176	@ 0xb0
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000630:	4b57      	ldr	r3, [pc, #348]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 8000632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000634:	4a56      	ldr	r2, [pc, #344]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 8000636:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800063a:	6593      	str	r3, [r2, #88]	@ 0x58
 800063c:	4b54      	ldr	r3, [pc, #336]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 800063e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b51      	ldr	r3, [pc, #324]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a50      	ldr	r2, [pc, #320]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b4e      	ldr	r3, [pc, #312]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000664:	2288      	movs	r2, #136	@ 0x88
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f004 f98d 	bl	8004988 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800066e:	2340      	movs	r3, #64	@ 0x40
 8000670:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000672:	2300      	movs	r3, #0
 8000674:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fcc8 	bl	8004010 <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 8000686:	f7ff ff09 	bl	800049c <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068e:	2312      	movs	r3, #18
 8000690:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000692:	2301      	movs	r3, #1
 8000694:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000696:	2302      	movs	r3, #2
 8000698:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800069a:	2304      	movs	r3, #4
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 800069e:	4b3c      	ldr	r3, [pc, #240]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b39      	ldr	r3, [pc, #228]	@ (8000790 <HAL_I2C_MspInit+0x168>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4835      	ldr	r0, [pc, #212]	@ (8000794 <HAL_I2C_MspInit+0x16c>)
 80006be:	f000 fcd3 	bl	8001068 <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 80006c2:	4b35      	ldr	r3, [pc, #212]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006c4:	4a35      	ldr	r2, [pc, #212]	@ (800079c <HAL_I2C_MspInit+0x174>)
 80006c6:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80006c8:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006ce:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006d0:	2210      	movs	r2, #16
 80006d2:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 80006f8:	4827      	ldr	r0, [pc, #156]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 80006fa:	f000 fa6f 	bl	8000bdc <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000704:	f7ff feca 	bl	800049c <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a23      	ldr	r2, [pc, #140]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 800070c:	639a      	str	r2, [r3, #56]	@ 0x38
 800070e:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <HAL_I2C_MspInit+0x170>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 8000716:	4a23      	ldr	r2, [pc, #140]	@ (80007a4 <HAL_I2C_MspInit+0x17c>)
 8000718:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 800071c:	2203      	movs	r2, #3
 800071e:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 800074a:	4815      	ldr	r0, [pc, #84]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 800074c:	f000 fa46 	bl	8000bdc <HAL_DMA_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_I2C_MspInit+0x132>
		Error_Handler();
 8000756:	f7ff fea1 	bl	800049c <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a10      	ldr	r2, [pc, #64]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000760:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <HAL_I2C_MspInit+0x178>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	201f      	movs	r0, #31
 800076c:	f000 f9ff 	bl	8000b6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000770:	201f      	movs	r0, #31
 8000772:	f000 fa18 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2020      	movs	r0, #32
 800077c:	f000 f9f7 	bl	8000b6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000780:	2020      	movs	r0, #32
 8000782:	f000 fa10 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
}
 8000786:	bf00      	nop
 8000788:	37b0      	adds	r7, #176	@ 0xb0
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	48000400 	.word	0x48000400
 8000798:	20000080 	.word	0x20000080
 800079c:	4002006c 	.word	0x4002006c
 80007a0:	200000c8 	.word	0x200000c8
 80007a4:	40020080 	.word	0x40020080

080007a8 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <SysTick_Handler>:


void SysTick_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80007fe:	f000 f8bb 	bl	8000978 <HAL_IncTick>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800080c:	4802      	ldr	r0, [pc, #8]	@ (8000818 <DMA1_Channel6_IRQHandler+0x10>)
 800080e:	f000 fb3e 	bl	8000e8e <HAL_DMA_IRQHandler>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000080 	.word	0x20000080

0800081c <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000820:	4802      	ldr	r0, [pc, #8]	@ (800082c <DMA1_Channel7_IRQHandler+0x10>)
 8000822:	f000 fb34 	bl	8000e8e <HAL_DMA_IRQHandler>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000c8 	.word	0x200000c8

08000830 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <I2C1_EV_IRQHandler+0x10>)
 8000836:	f001 f861 	bl	80018fc <HAL_I2C_EV_IRQHandler>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000002c 	.word	0x2000002c

08000844 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <I2C1_ER_IRQHandler+0x10>)
 800084a:	f001 f871 	bl	8001930 <HAL_I2C_ER_IRQHandler>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000002c 	.word	0x2000002c

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	@ (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	@ (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f004 f875 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ae:	f7ff fd71 	bl	8000394 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c0:	08004a40 	.word	0x08004a40
  ldr r2, =_sbss
 80008c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c8:	20000124 	.word	0x20000124

080008cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_2_IRQHandler>

080008ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f93d 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f80e 	bl	8000900 <HAL_InitTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	e001      	b.n	80008f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f0:	f7ff fe76 	bl	80005e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <HAL_InitTick+0x6c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d023      	beq.n	800095c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <HAL_InitTick+0x70>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <HAL_InitTick+0x6c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f949 	bl	8000bc2 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10f      	bne.n	8000956 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d809      	bhi.n	8000950 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f913 	bl	8000b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000948:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <HAL_InitTick+0x74>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e007      	b.n	8000960 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e004      	b.n	8000960 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e001      	b.n	8000960 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	20000000 	.word	0x20000000
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000120 	.word	0x20000120

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000120 	.word	0x20000120

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	@ (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	@ (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	@ 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff29 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff3e 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff31 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffa2 	bl	8000b14 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e098      	b.n	8000d20 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8000d2c <HAL_DMA_Init+0x150>)
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d80f      	bhi.n	8000c1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b4b      	ldr	r3, [pc, #300]	@ (8000d30 <HAL_DMA_Init+0x154>)
 8000c02:	4413      	add	r3, r2
 8000c04:	4a4b      	ldr	r2, [pc, #300]	@ (8000d34 <HAL_DMA_Init+0x158>)
 8000c06:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0a:	091b      	lsrs	r3, r3, #4
 8000c0c:	009a      	lsls	r2, r3, #2
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a48      	ldr	r2, [pc, #288]	@ (8000d38 <HAL_DMA_Init+0x15c>)
 8000c16:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c18:	e00e      	b.n	8000c38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b46      	ldr	r3, [pc, #280]	@ (8000d3c <HAL_DMA_Init+0x160>)
 8000c22:	4413      	add	r3, r2
 8000c24:	4a43      	ldr	r2, [pc, #268]	@ (8000d34 <HAL_DMA_Init+0x158>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	009a      	lsls	r2, r3, #2
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a42      	ldr	r2, [pc, #264]	@ (8000d40 <HAL_DMA_Init+0x164>)
 8000c36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000c52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c92:	d039      	beq.n	8000d08 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <HAL_DMA_Init+0x15c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11a      	bne.n	8000cd4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c9e:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <HAL_DMA_Init+0x168>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f003 031c 	and.w	r3, r3, #28
 8000caa:	210f      	movs	r1, #15
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4924      	ldr	r1, [pc, #144]	@ (8000d44 <HAL_DMA_Init+0x168>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <HAL_DMA_Init+0x168>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6859      	ldr	r1, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc4:	f003 031c 	and.w	r3, r3, #28
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	491d      	ldr	r1, [pc, #116]	@ (8000d44 <HAL_DMA_Init+0x168>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
 8000cd2:	e019      	b.n	8000d08 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_DMA_Init+0x16c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cdc:	f003 031c 	and.w	r3, r3, #28
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4917      	ldr	r1, [pc, #92]	@ (8000d48 <HAL_DMA_Init+0x16c>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_DMA_Init+0x16c>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6859      	ldr	r1, [r3, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f003 031c 	and.w	r3, r3, #28
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	4911      	ldr	r1, [pc, #68]	@ (8000d48 <HAL_DMA_Init+0x16c>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40020407 	.word	0x40020407
 8000d30:	bffdfff8 	.word	0xbffdfff8
 8000d34:	cccccccd 	.word	0xcccccccd
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	bffdfbf8 	.word	0xbffdfbf8
 8000d40:	40020400 	.word	0x40020400
 8000d44:	400200a8 	.word	0x400200a8
 8000d48:	400204a8 	.word	0x400204a8

08000d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d101      	bne.n	8000d6c <HAL_DMA_Start_IT+0x20>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e04b      	b.n	8000e04 <HAL_DMA_Start_IT+0xb8>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d13a      	bne.n	8000df6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2202      	movs	r2, #2
 8000d84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f92f 	bl	8001008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d008      	beq.n	8000dc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 020e 	orr.w	r2, r2, #14
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e00f      	b.n	8000de4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0204 	bic.w	r2, r2, #4
 8000dd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 020a 	orr.w	r2, r2, #10
 8000de2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e005      	b.n	8000e02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d005      	beq.n	8000e30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2204      	movs	r2, #4
 8000e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e029      	b.n	8000e84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020e 	bic.w	r2, r2, #14
 8000e3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e54:	f003 021c 	and.w	r2, r3, #28
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	4798      	blx	r3
    }
  }
  return status;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f003 031c 	and.w	r3, r3, #28
 8000eae:	2204      	movs	r2, #4
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d026      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x7a>
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d021      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0320 	and.w	r3, r3, #32
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d107      	bne.n	8000ee2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0204 	bic.w	r2, r2, #4
 8000ee0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f003 021c 	and.w	r2, r3, #28
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	2104      	movs	r1, #4
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d071      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f06:	e06c      	b.n	8000fe2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0c:	f003 031c 	and.w	r3, r3, #28
 8000f10:	2202      	movs	r2, #2
 8000f12:	409a      	lsls	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d02e      	beq.n	8000f7a <HAL_DMA_IRQHandler+0xec>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d029      	beq.n	8000f7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10b      	bne.n	8000f4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 020a 	bic.w	r2, r2, #10
 8000f42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f50:	f003 021c 	and.w	r2, r3, #28
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	2102      	movs	r1, #2
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d038      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f78:	e033      	b.n	8000fe2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	f003 031c 	and.w	r3, r3, #28
 8000f82:	2208      	movs	r2, #8
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d02a      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0x156>
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d025      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 020e 	bic.w	r2, r2, #14
 8000fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fac:	f003 021c 	and.w	r2, r3, #28
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
}
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ffa:	b2db      	uxtb	r3, r3
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f003 021c 	and.w	r2, r3, #28
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b10      	cmp	r3, #16
 8001038:	d108      	bne.n	800104c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800104a:	e007      	b.n	800105c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001076:	e17f      	b.n	8001378 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8171 	beq.w	8001372 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d005      	beq.n	80010a8 <HAL_GPIO_Init+0x40>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	f003 0201 	and.w	r2, r3, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b03      	cmp	r3, #3
 8001114:	d118      	bne.n	8001148 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	6939      	ldr	r1, [r7, #16]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80ac 	beq.w	8001372 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b5f      	ldr	r3, [pc, #380]	@ (8001398 <HAL_GPIO_Init+0x330>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121e:	4a5e      	ldr	r2, [pc, #376]	@ (8001398 <HAL_GPIO_Init+0x330>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6613      	str	r3, [r2, #96]	@ 0x60
 8001226:	4b5c      	ldr	r3, [pc, #368]	@ (8001398 <HAL_GPIO_Init+0x330>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001232:	4a5a      	ldr	r2, [pc, #360]	@ (800139c <HAL_GPIO_Init+0x334>)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x242>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4f      	ldr	r2, [pc, #316]	@ (80013a0 <HAL_GPIO_Init+0x338>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x23e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4e      	ldr	r2, [pc, #312]	@ (80013a4 <HAL_GPIO_Init+0x33c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x23a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4d      	ldr	r2, [pc, #308]	@ (80013a8 <HAL_GPIO_Init+0x340>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x236>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4c      	ldr	r2, [pc, #304]	@ (80013ac <HAL_GPIO_Init+0x344>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x232>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4b      	ldr	r2, [pc, #300]	@ (80013b0 <HAL_GPIO_Init+0x348>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x22e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4a      	ldr	r2, [pc, #296]	@ (80013b4 <HAL_GPIO_Init+0x34c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x22a>
 800128e:	2306      	movs	r3, #6
 8001290:	e00c      	b.n	80012ac <HAL_GPIO_Init+0x244>
 8001292:	2307      	movs	r3, #7
 8001294:	e00a      	b.n	80012ac <HAL_GPIO_Init+0x244>
 8001296:	2305      	movs	r3, #5
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x244>
 800129a:	2304      	movs	r3, #4
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x244>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x244>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x244>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x244>
 80012aa:	2300      	movs	r3, #0
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012bc:	4937      	ldr	r1, [pc, #220]	@ (800139c <HAL_GPIO_Init+0x334>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ca:	4b3b      	ldr	r3, [pc, #236]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ee:	4a32      	ldr	r2, [pc, #200]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f4:	4b30      	ldr	r3, [pc, #192]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001318:	4a27      	ldr	r2, [pc, #156]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001342:	4a1d      	ldr	r2, [pc, #116]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800136c:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <HAL_GPIO_Init+0x350>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	f47f ae78 	bne.w	8001078 <HAL_GPIO_Init+0x10>
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800
 80013a8:	48000c00 	.word	0x48000c00
 80013ac:	48001000 	.word	0x48001000
 80013b0:	48001400 	.word	0x48001400
 80013b4:	48001800 	.word	0x48001800
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e08d      	b.n	80014ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f920 	bl	8000628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2224      	movs	r2, #36	@ 0x24
 80013ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800140c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800141c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e006      	b.n	8001444 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001442:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d108      	bne.n	800145e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	e007      	b.n	800146e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800146c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800147c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69d9      	ldr	r1, [r3, #28]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	461a      	mov	r2, r3
 8001500:	460b      	mov	r3, r1
 8001502:	817b      	strh	r3, [r7, #10]
 8001504:	4613      	mov	r3, r2
 8001506:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b20      	cmp	r3, #32
 8001516:	f040 80ef 	bne.w	80016f8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001528:	d101      	bne.n	800152e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800152a:	2302      	movs	r3, #2
 800152c:	e0e5      	b.n	80016fa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_I2C_Master_Transmit_DMA+0x48>
 8001538:	2302      	movs	r3, #2
 800153a:	e0de      	b.n	80016fa <HAL_I2C_Master_Transmit_DMA+0x206>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2221      	movs	r2, #33	@ 0x21
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2210      	movs	r2, #16
 8001550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	893a      	ldrh	r2, [r7, #8]
 8001564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4a66      	ldr	r2, [pc, #408]	@ (8001704 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a66      	ldr	r2, [pc, #408]	@ (8001708 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001576:	b29b      	uxth	r3, r3
 8001578:	2bff      	cmp	r3, #255	@ 0xff
 800157a:	d906      	bls.n	800158a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	22ff      	movs	r2, #255	@ 0xff
 8001580:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001582:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	e007      	b.n	800159a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001594:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001598:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01a      	beq.n	80015d8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015bc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d074      	beq.n	80016ca <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d022      	beq.n	800162e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ec:	4a47      	ldr	r2, [pc, #284]	@ (800170c <HAL_I2C_Master_Transmit_DMA+0x218>)
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f4:	4a46      	ldr	r2, [pc, #280]	@ (8001710 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80015f6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001604:	2200      	movs	r2, #0
 8001606:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001610:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001618:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800161e:	f7ff fb95 	bl	8000d4c <HAL_DMA_Start_IT>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d13a      	bne.n	80016a2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800162c:	e013      	b.n	8001656 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e051      	b.n	80016fa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3301      	adds	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	8979      	ldrh	r1, [r7, #10]
 8001662:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f001 fcf9 	bl	8003060 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001688:	2110      	movs	r1, #16
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f001 fd1a 	bl	80030c4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e028      	b.n	80016f4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f043 0210 	orr.w	r2, r3, #16
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e017      	b.n	80016fa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80016ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	8979      	ldrh	r1, [r7, #10]
 80016d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f001 fcbe 	bl	8003060 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80016ec:	2101      	movs	r1, #1
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f001 fce8 	bl	80030c4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80016f8:	2302      	movs	r3, #2
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	ffff0000 	.word	0xffff0000
 8001708:	08001ed7 	.word	0x08001ed7
 800170c:	08002eaf 	.word	0x08002eaf
 8001710:	08002ff7 	.word	0x08002ff7
 8001714:	80002000 	.word	0x80002000
 8001718:	08001a7b 	.word	0x08001a7b

0800171c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af02      	add	r7, sp, #8
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	461a      	mov	r2, r3
 8001728:	460b      	mov	r3, r1
 800172a:	817b      	strh	r3, [r7, #10]
 800172c:	4613      	mov	r3, r2
 800172e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b20      	cmp	r3, #32
 800173a:	f040 80cd 	bne.w	80018d8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
 8001750:	e0c3      	b.n	80018da <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2C_Master_Receive_DMA+0x44>
 800175c:	2302      	movs	r3, #2
 800175e:	e0bc      	b.n	80018da <HAL_I2C_Master_Receive_DMA+0x1be>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2222      	movs	r2, #34	@ 0x22
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2210      	movs	r2, #16
 8001774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	893a      	ldrh	r2, [r7, #8]
 8001788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a55      	ldr	r2, [pc, #340]	@ (80018e4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a55      	ldr	r2, [pc, #340]	@ (80018e8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8001794:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	2bff      	cmp	r3, #255	@ 0xff
 800179e:	d906      	bls.n	80017ae <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80017a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e007      	b.n	80017be <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d070      	beq.n	80018a8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d020      	beq.n	8001810 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d2:	4a46      	ldr	r2, [pc, #280]	@ (80018ec <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017da:	4a45      	ldr	r2, [pc, #276]	@ (80018f0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e2:	2200      	movs	r2, #0
 80017e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ea:	2200      	movs	r2, #0
 80017ec:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3324      	adds	r3, #36	@ 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001800:	f7ff faa4 	bl	8000d4c <HAL_DMA_Start_IT>
 8001804:	4603      	mov	r3, r0
 8001806:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001808:	7cfb      	ldrb	r3, [r7, #19]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d138      	bne.n	8001880 <HAL_I2C_Master_Receive_DMA+0x164>
 800180e:	e013      	b.n	8001838 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e050      	b.n	80018da <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183c:	b2da      	uxtb	r2, r3
 800183e:	8979      	ldrh	r1, [r7, #10]
 8001840:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f001 fc0a 	bl	8003060 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001866:	2110      	movs	r1, #16
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f001 fc2b 	bl	80030c4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e029      	b.n	80018d4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	f043 0210 	orr.w	r2, r3, #16
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e018      	b.n	80018da <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	8979      	ldrh	r1, [r7, #10]
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f001 fbce 	bl	8003060 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80018cc:	2102      	movs	r1, #2
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f001 fbf8 	bl	80030c4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e000      	b.n	80018da <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80018d8:	2302      	movs	r3, #2
  }
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	ffff0000 	.word	0xffff0000
 80018e8:	08001ed7 	.word	0x08001ed7
 80018ec:	08002f45 	.word	0x08002f45
 80018f0:	08002ff7 	.word	0x08002ff7
 80018f4:	80002400 	.word	0x80002400
 80018f8:	08001a7b 	.word	0x08001a7b

080018fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	4798      	blx	r3
  }
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00f      	beq.n	8001972 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00a      	beq.n	8001972 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001970:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00f      	beq.n	800199c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f043 0208 	orr.w	r2, r3, #8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800199a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00f      	beq.n	80019c6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b4:	f043 0202 	orr.w	r2, r3, #2
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 030b 	and.w	r3, r3, #11
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 f92d 	bl	8002c38 <I2C_ITError>
  }
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	70fb      	strb	r3, [r7, #3]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b088      	sub	sp, #32
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <I2C_Master_ISR_IT+0x1e>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e121      	b.n	8001cdc <I2C_Master_ISR_IT+0x262>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d012      	beq.n	8001ad0 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00d      	beq.n	8001ad0 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac0:	f043 0204 	orr.w	r2, r3, #4
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f001 f9cc 	bl	8002e66 <I2C_Flush_TXDR>
 8001ace:	e0f2      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d022      	beq.n	8001b20 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01d      	beq.n	8001b20 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f023 0304 	bic.w	r3, r3, #4
 8001aea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b1e:	e0ca      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d128      	bne.n	8001b7c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d01e      	beq.n	8001b7c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80b6 	beq.w	8001cb6 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8001b7a:	e09c      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d06a      	beq.n	8001c5c <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d065      	beq.n	8001c5c <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04e      	beq.n	8001c38 <I2C_Master_ISR_IT+0x1be>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d14a      	bne.n	8001c38 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bae:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2bff      	cmp	r3, #255	@ 0xff
 8001bb8:	d91c      	bls.n	8001bf4 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d103      	bne.n	8001bd6 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001bd4:	e002      	b.n	8001bdc <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	22ff      	movs	r2, #255	@ 0xff
 8001bda:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	8a79      	ldrh	r1, [r7, #18]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f001 fa37 	bl	8003060 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bf2:	e032      	b.n	8001c5a <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c06:	d00b      	beq.n	8001c20 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001c12:	8a79      	ldrh	r1, [r7, #18]
 8001c14:	2000      	movs	r0, #0
 8001c16:	9000      	str	r0, [sp, #0]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f001 fa21 	bl	8003060 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c1e:	e01c      	b.n	8001c5a <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	8a79      	ldrh	r1, [r7, #18]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f001 fa15 	bl	8003060 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c36:	e010      	b.n	8001c5a <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c46:	d003      	beq.n	8001c50 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fcdc 	bl	8002606 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c4e:	e032      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001c50:	2140      	movs	r1, #64	@ 0x40
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fff0 	bl	8002c38 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c58:	e02d      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
 8001c5a:	e02c      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d027      	beq.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d022      	beq.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c88:	d015      	beq.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c92:	d108      	bne.n	8001ca6 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	e007      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fcad 	bl	8002606 <I2C_ITMasterSeqCplt>
 8001cac:	e003      	b.n	8001cb6 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001cae:	2140      	movs	r1, #64	@ 0x40
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 ffc1 	bl	8002c38 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001cca:	6979      	ldr	r1, [r7, #20]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fd33 	bl	8002738 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <I2C_Slave_ISR_IT+0x24>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e0e2      	b.n	8001ece <I2C_Slave_ISR_IT+0x1ea>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001d24:	6939      	ldr	r1, [r7, #16]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fdce 	bl	80028c8 <I2C_ITSlaveCplt>
 8001d2c:	e0ca      	b.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d04b      	beq.n	8001dd0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d046      	beq.n	8001dd0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d128      	bne.n	8001d9e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b28      	cmp	r3, #40	@ 0x28
 8001d56:	d108      	bne.n	8001d6a <I2C_Slave_ISR_IT+0x86>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d5e:	d104      	bne.n	8001d6a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 ff14 	bl	8002b90 <I2C_ITListenCplt>
 8001d68:	e031      	b.n	8001dce <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b29      	cmp	r3, #41	@ 0x29
 8001d74:	d10e      	bne.n	8001d94 <I2C_Slave_ISR_IT+0xb0>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d7c:	d00a      	beq.n	8001d94 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2210      	movs	r2, #16
 8001d84:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f001 f86d 	bl	8002e66 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fc77 	bl	8002680 <I2C_ITSlaveSeqCplt>
 8001d92:	e01c      	b.n	8001dce <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001d9c:	e08f      	b.n	8001ebe <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2210      	movs	r2, #16
 8001da4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f043 0204 	orr.w	r2, r3, #4
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <I2C_Slave_ISR_IT+0xdc>
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dbe:	d17e      	bne.n	8001ebe <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 ff36 	bl	8002c38 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001dcc:	e077      	b.n	8001ebe <I2C_Slave_ISR_IT+0x1da>
 8001dce:	e076      	b.n	8001ebe <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d02f      	beq.n	8001e3a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d02a      	beq.n	8001e3a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d018      	beq.n	8001e20 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d14b      	bne.n	8001ec2 <I2C_Slave_ISR_IT+0x1de>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e30:	d047      	beq.n	8001ec2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fc24 	bl	8002680 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001e38:	e043      	b.n	8001ec2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001e4e:	6939      	ldr	r1, [r7, #16]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fb54 	bl	80024fe <I2C_ITAddrCplt>
 8001e56:	e035      	b.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d030      	beq.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d02b      	beq.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d018      	beq.n	8001ea8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001ea6:	e00d      	b.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eae:	d002      	beq.n	8001eb6 <I2C_Slave_ISR_IT+0x1d2>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fbe2 	bl	8002680 <I2C_ITSlaveSeqCplt>
 8001ebc:	e002      	b.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001ebe:	bf00      	nop
 8001ec0:	e000      	b.n	8001ec4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001ec2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b088      	sub	sp, #32
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <I2C_Master_ISR_DMA+0x1a>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0e7      	b.n	80020c0 <I2C_Master_ISR_DMA+0x1ea>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d016      	beq.n	8001f30 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d011      	beq.n	8001f30 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2210      	movs	r2, #16
 8001f12:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f18:	f043 0204 	orr.w	r2, r3, #4
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f20:	2120      	movs	r1, #32
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f001 f8ce 	bl	80030c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 ff9c 	bl	8002e66 <I2C_Flush_TXDR>
 8001f2e:	e0c2      	b.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07f      	beq.n	800203a <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d07a      	beq.n	800203a <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f52:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d05c      	beq.n	8002018 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2bff      	cmp	r3, #255	@ 0xff
 8001f74:	d914      	bls.n	8001fa0 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d103      	bne.n	8001f92 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001f90:	e002      	b.n	8001f98 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	22ff      	movs	r2, #255	@ 0xff
 8001f96:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e010      	b.n	8001fc2 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fb2:	d003      	beq.n	8001fbc <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e002      	b.n	8001fc2 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001fbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fc0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	8a79      	ldrh	r1, [r7, #18]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f001 f845 	bl	8003060 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b22      	cmp	r3, #34	@ 0x22
 8001ff2:	d108      	bne.n	8002006 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002002:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002004:	e057      	b.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002014:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002016:	e04e      	b.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002026:	d003      	beq.n	8002030 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 faec 	bl	8002606 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800202e:	e042      	b.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002030:	2140      	movs	r1, #64	@ 0x40
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fe00 	bl	8002c38 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002038:	e03d      	b.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d028      	beq.n	8002096 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800204a:	2b00      	cmp	r3, #0
 800204c:	d023      	beq.n	8002096 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d119      	bne.n	800208c <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002066:	d025      	beq.n	80020b4 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002070:	d108      	bne.n	8002084 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002080:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002082:	e017      	b.n	80020b4 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fabe 	bl	8002606 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800208a:	e013      	b.n	80020b4 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800208c:	2140      	movs	r1, #64	@ 0x40
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fdd2 	bl	8002c38 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002094:	e00e      	b.n	80020b4 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fb43 	bl	8002738 <I2C_ITMasterCplt>
 80020b2:	e000      	b.n	80020b6 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80020b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80020d4:	4b90      	ldr	r3, [pc, #576]	@ (8002318 <I2C_Mem_ISR_DMA+0x250>)
 80020d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <I2C_Mem_ISR_DMA+0x1e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e12f      	b.n	8002346 <I2C_Mem_ISR_DMA+0x27e>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d016      	beq.n	8002126 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2210      	movs	r2, #16
 8002108:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f043 0204 	orr.w	r2, r3, #4
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002116:	2120      	movs	r1, #32
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 ffd3 	bl	80030c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fea1 	bl	8002e66 <I2C_Flush_TXDR>
 8002124:	e10a      	b.n	800233c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f04f 32ff 	mov.w	r2, #4294967295
 800214a:	651a      	str	r2, [r3, #80]	@ 0x50
 800214c:	e0f6      	b.n	800233c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002154:	2b00      	cmp	r3, #0
 8002156:	d06d      	beq.n	8002234 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800215e:	2b00      	cmp	r3, #0
 8002160:	d068      	beq.n	8002234 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002162:	2101      	movs	r1, #1
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f001 f831 	bl	80031cc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800216a:	2110      	movs	r1, #16
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 ffa9 	bl	80030c4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d056      	beq.n	800222a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2bff      	cmp	r3, #255	@ 0xff
 8002184:	d91e      	bls.n	80021c4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d103      	bne.n	80021a2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	851a      	strh	r2, [r3, #40]	@ 0x28
 80021a0:	e002      	b.n	80021a8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	22ff      	movs	r2, #255	@ 0xff
 80021a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ac:	b299      	uxth	r1, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 ff4f 	bl	8003060 <I2C_TransferConfig>
 80021c2:	e011      	b.n	80021e8 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	b299      	uxth	r1, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	2300      	movs	r3, #0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 ff3c 	bl	8003060 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b22      	cmp	r3, #34	@ 0x22
 8002204:	d108      	bne.n	8002218 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002214:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002216:	e091      	b.n	800233c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002226:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002228:	e088      	b.n	800233c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800222a:	2140      	movs	r1, #64	@ 0x40
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fd03 	bl	8002c38 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002232:	e083      	b.n	800233c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d070      	beq.n	8002320 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002244:	2b00      	cmp	r3, #0
 8002246:	d06b      	beq.n	8002320 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002248:	2101      	movs	r1, #1
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 ffbe 	bl	80031cc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002250:	2110      	movs	r1, #16
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 ff36 	bl	80030c4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b22      	cmp	r3, #34	@ 0x22
 8002262:	d101      	bne.n	8002268 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002264:	4b2d      	ldr	r3, [pc, #180]	@ (800231c <I2C_Mem_ISR_DMA+0x254>)
 8002266:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	2bff      	cmp	r3, #255	@ 0xff
 8002270:	d91e      	bls.n	80022b0 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d103      	bne.n	800228e <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800228c:	e002      	b.n	8002294 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	22ff      	movs	r2, #255	@ 0xff
 8002292:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002298:	b299      	uxth	r1, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fed9 	bl	8003060 <I2C_TransferConfig>
 80022ae:	e011      	b.n	80022d4 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	b299      	uxth	r1, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fec6 	bl	8003060 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b22      	cmp	r3, #34	@ 0x22
 80022f0:	d108      	bne.n	8002304 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002300:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002302:	e01b      	b.n	800233c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002312:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002314:	e012      	b.n	800233c <I2C_Mem_ISR_DMA+0x274>
 8002316:	bf00      	nop
 8002318:	80002000 	.word	0x80002000
 800231c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f9fe 	bl	8002738 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop

08002350 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <I2C_Slave_ISR_DMA+0x24>
 8002370:	2302      	movs	r3, #2
 8002372:	e0c0      	b.n	80024f6 <I2C_Slave_ISR_DMA+0x1a6>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fa98 	bl	80028c8 <I2C_ITSlaveCplt>
 8002398:	e0a8      	b.n	80024ec <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8095 	beq.w	80024d0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 808f 	beq.w	80024d0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d104      	bne.n	80023c6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07d      	beq.n	80024c2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00c      	beq.n	80023e8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00c      	beq.n	800240a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002406:	2301      	movs	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d128      	bne.n	8002462 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b28      	cmp	r3, #40	@ 0x28
 800241a:	d108      	bne.n	800242e <I2C_Slave_ISR_DMA+0xde>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002422:	d104      	bne.n	800242e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fbb2 	bl	8002b90 <I2C_ITListenCplt>
 800242c:	e048      	b.n	80024c0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b29      	cmp	r3, #41	@ 0x29
 8002438:	d10e      	bne.n	8002458 <I2C_Slave_ISR_DMA+0x108>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002440:	d00a      	beq.n	8002458 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2210      	movs	r2, #16
 8002448:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fd0b 	bl	8002e66 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f915 	bl	8002680 <I2C_ITSlaveSeqCplt>
 8002456:	e033      	b.n	80024c0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2210      	movs	r2, #16
 800245e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002460:	e034      	b.n	80024cc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2210      	movs	r2, #16
 8002468:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <I2C_Slave_ISR_DMA+0x13c>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800248a:	d11f      	bne.n	80024cc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b21      	cmp	r3, #33	@ 0x21
 8002490:	d002      	beq.n	8002498 <I2C_Slave_ISR_DMA+0x148>
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	2b29      	cmp	r3, #41	@ 0x29
 8002496:	d103      	bne.n	80024a0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2221      	movs	r2, #33	@ 0x21
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
 800249e:	e008      	b.n	80024b2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b22      	cmp	r3, #34	@ 0x22
 80024a4:	d002      	beq.n	80024ac <I2C_Slave_ISR_DMA+0x15c>
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80024aa:	d102      	bne.n	80024b2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2222      	movs	r2, #34	@ 0x22
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	4619      	mov	r1, r3
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fbbd 	bl	8002c38 <I2C_ITError>
      if (treatdmanack == 1U)
 80024be:	e005      	b.n	80024cc <I2C_Slave_ISR_DMA+0x17c>
 80024c0:	e004      	b.n	80024cc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2210      	movs	r2, #16
 80024c8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024ca:	e00f      	b.n	80024ec <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80024cc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024ce:	e00d      	b.n	80024ec <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f809 	bl	80024fe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002514:	2b28      	cmp	r3, #40	@ 0x28
 8002516:	d16a      	bne.n	80025ee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	b29b      	uxth	r3, r3
 8002532:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002536:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002552:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d138      	bne.n	80025ce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	09db      	lsrs	r3, r3, #7
 8002560:	b29a      	uxth	r2, r3
 8002562:	89bb      	ldrh	r3, [r7, #12]
 8002564:	4053      	eors	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	f003 0306 	and.w	r3, r3, #6
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11c      	bne.n	80025aa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002570:	897b      	ldrh	r3, [r7, #10]
 8002572:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002582:	2b02      	cmp	r3, #2
 8002584:	d13b      	bne.n	80025fe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2208      	movs	r2, #8
 8002592:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800259c:	89ba      	ldrh	r2, [r7, #12]
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fa33 	bl	8001a0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80025a8:	e029      	b.n	80025fe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80025ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fe0a 	bl	80031cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025c0:	89ba      	ldrh	r2, [r7, #12]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fa21 	bl	8001a0e <HAL_I2C_AddrCallback>
}
 80025cc:	e017      	b.n	80025fe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80025ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fdfa 	bl	80031cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025e0:	89ba      	ldrh	r2, [r7, #12]
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fa11 	bl	8001a0e <HAL_I2C_AddrCallback>
}
 80025ec:	e007      	b.n	80025fe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b21      	cmp	r3, #33	@ 0x21
 8002620:	d115      	bne.n	800264e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2211      	movs	r2, #17
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002636:	2101      	movs	r1, #1
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fdc7 	bl	80031cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fd fe78 	bl	800033c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800264c:	e014      	b.n	8002678 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2212      	movs	r2, #18
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002662:	2102      	movs	r1, #2
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fdb1 	bl	80031cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fd fe78 	bl	8000368 <HAL_I2C_MasterRxCpltCallback>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00c      	b.n	80026ce <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b29      	cmp	r3, #41	@ 0x29
 80026d8:	d112      	bne.n	8002700 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2228      	movs	r2, #40	@ 0x28
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2221      	movs	r2, #33	@ 0x21
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026e8:	2101      	movs	r1, #1
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fd6e 	bl	80031cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff f974 	bl	80019e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80026fe:	e017      	b.n	8002730 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b2a      	cmp	r3, #42	@ 0x2a
 800270a:	d111      	bne.n	8002730 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2228      	movs	r2, #40	@ 0x28
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2222      	movs	r2, #34	@ 0x22
 8002718:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800271a:	2102      	movs	r1, #2
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fd55 	bl	80031cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff f965 	bl	80019fa <HAL_I2C_SlaveRxCpltCallback>
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2220      	movs	r2, #32
 800274c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b21      	cmp	r3, #33	@ 0x21
 8002758:	d107      	bne.n	800276a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800275a:	2101      	movs	r1, #1
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fd35 	bl	80031cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2211      	movs	r2, #17
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
 8002768:	e00c      	b.n	8002784 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b22      	cmp	r3, #34	@ 0x22
 8002774:	d106      	bne.n	8002784 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002776:	2102      	movs	r1, #2
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fd27 	bl	80031cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2212      	movs	r2, #18
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <I2C_ITMasterCplt+0x188>)
 8002790:	400b      	ands	r3, r1
 8002792:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a49      	ldr	r2, [pc, #292]	@ (80028c4 <I2C_ITMasterCplt+0x18c>)
 800279e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2210      	movs	r2, #16
 80027b0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b60      	cmp	r3, #96	@ 0x60
 80027c8:	d10a      	bne.n	80027e0 <I2C_ITMasterCplt+0xa8>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80027de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb40 	bl	8002e66 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b60      	cmp	r3, #96	@ 0x60
 80027f6:	d002      	beq.n	80027fe <I2C_ITMasterCplt+0xc6>
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fa17 	bl	8002c38 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800280a:	e054      	b.n	80028b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b21      	cmp	r3, #33	@ 0x21
 8002816:	d124      	bne.n	8002862 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b40      	cmp	r3, #64	@ 0x40
 8002830:	d10b      	bne.n	800284a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff f8fb 	bl	8001a3e <HAL_I2C_MemTxCpltCallback>
}
 8002848:	e035      	b.n	80028b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fd fd6e 	bl	800033c <HAL_I2C_MasterTxCpltCallback>
}
 8002860:	e029      	b.n	80028b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b22      	cmp	r3, #34	@ 0x22
 800286c:	d123      	bne.n	80028b6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b40      	cmp	r3, #64	@ 0x40
 8002886:	d10b      	bne.n	80028a0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff f8da 	bl	8001a52 <HAL_I2C_MemRxCpltCallback>
}
 800289e:	e00a      	b.n	80028b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fd fd59 	bl	8000368 <HAL_I2C_MasterRxCpltCallback>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	fe00e800 	.word	0xfe00e800
 80028c4:	ffff0000 	.word	0xffff0000

080028c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2220      	movs	r2, #32
 80028f2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028f4:	7afb      	ldrb	r3, [r7, #11]
 80028f6:	2b21      	cmp	r3, #33	@ 0x21
 80028f8:	d002      	beq.n	8002900 <I2C_ITSlaveCplt+0x38>
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	2b29      	cmp	r3, #41	@ 0x29
 80028fe:	d108      	bne.n	8002912 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002900:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fc61 	bl	80031cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2221      	movs	r2, #33	@ 0x21
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002910:	e019      	b.n	8002946 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	2b22      	cmp	r3, #34	@ 0x22
 8002916:	d002      	beq.n	800291e <I2C_ITSlaveCplt+0x56>
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	2b2a      	cmp	r3, #42	@ 0x2a
 800291c:	d108      	bne.n	8002930 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800291e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fc52 	bl	80031cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2222      	movs	r2, #34	@ 0x22
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30
 800292e:	e00a      	b.n	8002946 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	2b28      	cmp	r3, #40	@ 0x28
 8002934:	d107      	bne.n	8002946 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002936:	f248 0103 	movw	r1, #32771	@ 0x8003
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fc46 	bl	80031cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002954:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b89      	ldr	r3, [pc, #548]	@ (8002b88 <I2C_ITSlaveCplt+0x2c0>)
 8002962:	400b      	ands	r3, r1
 8002964:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa7d 	bl	8002e66 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d013      	beq.n	800299e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002984:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01f      	beq.n	80029ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800299c:	e017      	b.n	80029ce <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0304 	bic.w	r3, r3, #4
 80029de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	f043 0204 	orr.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d049      	beq.n	8002ace <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d044      	beq.n	8002ace <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d128      	bne.n	8002aa0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b28      	cmp	r3, #40	@ 0x28
 8002a58:	d108      	bne.n	8002a6c <I2C_ITSlaveCplt+0x1a4>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a60:	d104      	bne.n	8002a6c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a62:	6979      	ldr	r1, [r7, #20]
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f893 	bl	8002b90 <I2C_ITListenCplt>
 8002a6a:	e030      	b.n	8002ace <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b29      	cmp	r3, #41	@ 0x29
 8002a76:	d10e      	bne.n	8002a96 <I2C_ITSlaveCplt+0x1ce>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a7e:	d00a      	beq.n	8002a96 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2210      	movs	r2, #16
 8002a86:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f9ec 	bl	8002e66 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fdf6 	bl	8002680 <I2C_ITSlaveSeqCplt>
 8002a94:	e01b      	b.n	8002ace <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	61da      	str	r2, [r3, #28]
 8002a9e:	e016      	b.n	8002ace <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	f043 0204 	orr.w	r2, r3, #4
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <I2C_ITSlaveCplt+0x1fa>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac0:	d105      	bne.n	8002ace <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8b5 	bl	8002c38 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8a4 	bl	8002c38 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b28      	cmp	r3, #40	@ 0x28
 8002afa:	d141      	bne.n	8002b80 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002afc:	6979      	ldr	r1, [r7, #20]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f846 	bl	8002b90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b04:	e03c      	b.n	8002b80 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b0e:	d014      	beq.n	8002b3a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fdb5 	bl	8002680 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1c      	ldr	r2, [pc, #112]	@ (8002b8c <I2C_ITSlaveCplt+0x2c4>)
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe ff79 	bl	8001a2a <HAL_I2C_ListenCpltCallback>
}
 8002b38:	e022      	b.n	8002b80 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b22      	cmp	r3, #34	@ 0x22
 8002b44:	d10e      	bne.n	8002b64 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fe ff4c 	bl	80019fa <HAL_I2C_SlaveRxCpltCallback>
}
 8002b62:	e00d      	b.n	8002b80 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe ff33 	bl	80019e6 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	fe00e800 	.word	0xfe00e800
 8002b8c:	ffff0000 	.word	0xffff0000

08002b90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a25      	ldr	r2, [pc, #148]	@ (8002c34 <I2C_ITListenCplt+0xa4>)
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d022      	beq.n	8002c0c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c0c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fadb 	bl	80031cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe feff 	bl	8001a2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	ffff0000 	.word	0xffff0000

08002c38 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c48:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a6d      	ldr	r2, [pc, #436]	@ (8002e0c <I2C_ITError+0x1d4>)
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b28      	cmp	r3, #40	@ 0x28
 8002c6e:	d005      	beq.n	8002c7c <I2C_ITError+0x44>
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b29      	cmp	r3, #41	@ 0x29
 8002c74:	d002      	beq.n	8002c7c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c7a:	d10b      	bne.n	8002c94 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c7c:	2103      	movs	r1, #3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 faa4 	bl	80031cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2228      	movs	r2, #40	@ 0x28
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a60      	ldr	r2, [pc, #384]	@ (8002e10 <I2C_ITError+0x1d8>)
 8002c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c92:	e030      	b.n	8002cf6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c94:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fa97 	bl	80031cc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8e1 	bl	8002e66 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b60      	cmp	r3, #96	@ 0x60
 8002cae:	d01f      	beq.n	8002cf0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d114      	bne.n	8002cf0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d109      	bne.n	8002ce8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2210      	movs	r2, #16
 8002cda:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2220      	movs	r2, #32
 8002cee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d039      	beq.n	8002d78 <I2C_ITError+0x140>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b11      	cmp	r3, #17
 8002d08:	d002      	beq.n	8002d10 <I2C_ITError+0xd8>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b21      	cmp	r3, #33	@ 0x21
 8002d0e:	d133      	bne.n	8002d78 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1e:	d107      	bne.n	8002d30 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d2e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe f959 	bl	8000fec <HAL_DMA_GetState>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d017      	beq.n	8002d70 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	4a33      	ldr	r2, [pc, #204]	@ (8002e14 <I2C_ITError+0x1dc>)
 8002d46:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe f859 	bl	8000e0c <HAL_DMA_Abort_IT>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d04d      	beq.n	8002dfc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d6e:	e045      	b.n	8002dfc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f851 	bl	8002e18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d76:	e041      	b.n	8002dfc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d039      	beq.n	8002df4 <I2C_ITError+0x1bc>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b12      	cmp	r3, #18
 8002d84:	d002      	beq.n	8002d8c <I2C_ITError+0x154>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b22      	cmp	r3, #34	@ 0x22
 8002d8a:	d133      	bne.n	8002df4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d9a:	d107      	bne.n	8002dac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002daa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe f91b 	bl	8000fec <HAL_DMA_GetState>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d017      	beq.n	8002dec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc0:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <I2C_ITError+0x1dc>)
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe f81b 	bl	8000e0c <HAL_DMA_Abort_IT>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002de6:	4610      	mov	r0, r2
 8002de8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dea:	e009      	b.n	8002e00 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f813 	bl	8002e18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002df2:	e005      	b.n	8002e00 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f80f 	bl	8002e18 <I2C_TreatErrorCallback>
  }
}
 8002dfa:	e002      	b.n	8002e02 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e00:	bf00      	nop
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	ffff0000 	.word	0xffff0000
 8002e10:	08001ce5 	.word	0x08001ce5
 8002e14:	08003025 	.word	0x08003025

08002e18 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b60      	cmp	r3, #96	@ 0x60
 8002e2a:	d10e      	bne.n	8002e4a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fe0f 	bl	8001a66 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e48:	e009      	b.n	8002e5e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd fa65 	bl	8000328 <HAL_I2C_ErrorCallback>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d103      	bne.n	8002e84 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d007      	beq.n	8002ea2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	619a      	str	r2, [r3, #24]
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002eca:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f8f3 	bl	80030c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002ede:	e02d      	b.n	8002f3c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002ee8:	441a      	add	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2bff      	cmp	r3, #255	@ 0xff
 8002ef6:	d903      	bls.n	8002f00 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	22ff      	movs	r2, #255	@ 0xff
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002efe:	e004      	b.n	8002f0a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	4619      	mov	r1, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3328      	adds	r3, #40	@ 0x28
 8002f1a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002f20:	f7fd ff14 	bl	8000d4c <HAL_DMA_Start_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002f2a:	2110      	movs	r1, #16
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fe83 	bl	8002c38 <I2C_ITError>
}
 8002f32:	e003      	b.n	8002f3c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002f34:	2140      	movs	r1, #64	@ 0x40
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8c4 	bl	80030c4 <I2C_Enable_IRQ>
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f60:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002f6c:	2120      	movs	r1, #32
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f8a8 	bl	80030c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002f74:	e03b      	b.n	8002fee <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002f7e:	441a      	add	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2bff      	cmp	r3, #255	@ 0xff
 8002f8c:	d911      	bls.n	8002fb2 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d103      	bne.n	8002faa <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002fa8:	e008      	b.n	8002fbc <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	22ff      	movs	r2, #255	@ 0xff
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002fb0:	e004      	b.n	8002fbc <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3324      	adds	r3, #36	@ 0x24
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002fd2:	f7fd febb 	bl	8000d4c <HAL_DMA_Start_IT>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002fdc:	2110      	movs	r1, #16
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7ff fe2a 	bl	8002c38 <I2C_ITError>
}
 8002fe4:	e003      	b.n	8002fee <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002fe6:	2140      	movs	r1, #64	@ 0x40
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f86b 	bl	80030c4 <I2C_Enable_IRQ>
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003012:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003014:	2110      	movs	r1, #16
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fe0e 	bl	8002c38 <I2C_ITError>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303e:	2200      	movs	r2, #0
 8003040:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	2200      	movs	r2, #0
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff fee0 	bl	8002e18 <I2C_TreatErrorCallback>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	817b      	strh	r3, [r7, #10]
 800306e:	4613      	mov	r3, r2
 8003070:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003072:	897b      	ldrh	r3, [r7, #10]
 8003074:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003078:	7a7b      	ldrb	r3, [r7, #9]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003080:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	4313      	orrs	r3, r2
 800308a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800308e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	0d5b      	lsrs	r3, r3, #21
 800309a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800309e:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <I2C_TransferConfig+0x60>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	43db      	mvns	r3, r3
 80030a4:	ea02 0103 	and.w	r1, r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	03ff63ff 	.word	0x03ff63ff

080030c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d8:	4a39      	ldr	r2, [pc, #228]	@ (80031c0 <I2C_Enable_IRQ+0xfc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d032      	beq.n	8003144 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80030e2:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <I2C_Enable_IRQ+0x100>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d02d      	beq.n	8003144 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80030ec:	4a36      	ldr	r2, [pc, #216]	@ (80031c8 <I2C_Enable_IRQ+0x104>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d028      	beq.n	8003144 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	da03      	bge.n	8003102 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003100:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003112:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003124:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	2b10      	cmp	r3, #16
 800312a:	d103      	bne.n	8003134 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003132:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	2b20      	cmp	r3, #32
 8003138:	d133      	bne.n	80031a2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f043 0320 	orr.w	r3, r3, #32
 8003140:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003142:	e02e      	b.n	80031a2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003144:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da03      	bge.n	8003154 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003152:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003164:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003176:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	2b10      	cmp	r3, #16
 800317c:	d103      	bne.n	8003186 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003184:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	2b20      	cmp	r3, #32
 800318a:	d103      	bne.n	8003194 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003192:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	2b40      	cmp	r3, #64	@ 0x40
 8003198:	d103      	bne.n	80031a2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	08001ed7 	.word	0x08001ed7
 80031c4:	08002351 	.word	0x08002351
 80031c8:	080020c9 	.word	0x080020c9

080031cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00f      	beq.n	8003206 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80031ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031fa:	2b28      	cmp	r3, #40	@ 0x28
 80031fc:	d003      	beq.n	8003206 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003204:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00f      	beq.n	8003230 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003216:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003224:	2b28      	cmp	r3, #40	@ 0x28
 8003226:	d003      	beq.n	8003230 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800322e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003230:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003234:	2b00      	cmp	r3, #0
 8003236:	da03      	bge.n	8003240 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800323e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	2b10      	cmp	r3, #16
 8003244:	d103      	bne.n	800324e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800324c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	2b20      	cmp	r3, #32
 8003252:	d103      	bne.n	800325c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	2b40      	cmp	r3, #64	@ 0x40
 8003260:	d103      	bne.n	800326a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003268:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43da      	mvns	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	400a      	ands	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	d138      	bne.n	8003310 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e032      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	@ 0x24
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b20      	cmp	r3, #32
 8003332:	d139      	bne.n	80033a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800333e:	2302      	movs	r3, #2
 8003340:	e033      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2224      	movs	r2, #36	@ 0x24
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003370:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40007000 	.word	0x40007000

080033d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e2:	d130      	bne.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e4:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f0:	d038      	beq.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f2:	4b20      	ldr	r3, [pc, #128]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2232      	movs	r2, #50	@ 0x32
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	4a1b      	ldr	r2, [pc, #108]	@ (800347c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0c9b      	lsrs	r3, r3, #18
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003418:	e002      	b.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3b01      	subs	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342c:	d102      	bne.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x60>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f2      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	d110      	bne.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e00f      	b.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003446:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d007      	beq.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003454:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800345c:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003462:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40007000 	.word	0x40007000
 8003478:	20000000 	.word	0x20000000
 800347c:	431bde83 	.word	0x431bde83

08003480 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e3ca      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4b97      	ldr	r3, [pc, #604]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4b94      	ldr	r3, [pc, #592]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80e4 	beq.w	800367c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_RCC_OscConfig+0x4a>
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	f040 808b 	bne.w	80035d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	f040 8087 	bne.w	80035d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ca:	4b89      	ldr	r3, [pc, #548]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e3a2      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1a      	ldr	r2, [r3, #32]
 80034e6:	4b82      	ldr	r3, [pc, #520]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <HAL_RCC_OscConfig+0x7c>
 80034f2:	4b7f      	ldr	r3, [pc, #508]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034fa:	e005      	b.n	8003508 <HAL_RCC_OscConfig+0x88>
 80034fc:	4b7c      	ldr	r3, [pc, #496]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003508:	4293      	cmp	r3, r2
 800350a:	d223      	bcs.n	8003554 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fd1d 	bl	8003f50 <RCC_SetFlashLatencyFromMSIRange>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e383      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003520:	4b73      	ldr	r3, [pc, #460]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a72      	ldr	r2, [pc, #456]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b70      	ldr	r3, [pc, #448]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	496d      	ldr	r1, [pc, #436]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800353e:	4b6c      	ldr	r3, [pc, #432]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	4968      	ldr	r1, [pc, #416]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
 8003552:	e025      	b.n	80035a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003554:	4b66      	ldr	r3, [pc, #408]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a65      	ldr	r2, [pc, #404]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800355a:	f043 0308 	orr.w	r3, r3, #8
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4960      	ldr	r1, [pc, #384]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003572:	4b5f      	ldr	r3, [pc, #380]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	495b      	ldr	r1, [pc, #364]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d109      	bne.n	80035a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fcdd 	bl	8003f50 <RCC_SetFlashLatencyFromMSIRange>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e343      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a0:	f000 fc4a 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b52      	ldr	r3, [pc, #328]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	4950      	ldr	r1, [pc, #320]	@ (80036f4 <HAL_RCC_OscConfig+0x274>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	4a4e      	ldr	r2, [pc, #312]	@ (80036f8 <HAL_RCC_OscConfig+0x278>)
 80035be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035c0:	4b4e      	ldr	r3, [pc, #312]	@ (80036fc <HAL_RCC_OscConfig+0x27c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd f99b 	bl	8000900 <HAL_InitTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d052      	beq.n	800367a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	e327      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d032      	beq.n	8003646 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035e0:	4b43      	ldr	r3, [pc, #268]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a42      	ldr	r2, [pc, #264]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ec:	f7fd f9d8 	bl	80009a0 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035f4:	f7fd f9d4 	bl	80009a0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e310      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003606:	4b3a      	ldr	r3, [pc, #232]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003612:	4b37      	ldr	r3, [pc, #220]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a36      	ldr	r2, [pc, #216]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4931      	ldr	r1, [pc, #196]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003630:	4b2f      	ldr	r3, [pc, #188]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	492c      	ldr	r1, [pc, #176]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
 8003644:	e01a      	b.n	800367c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003646:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a29      	ldr	r2, [pc, #164]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003652:	f7fd f9a5 	bl	80009a0 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800365a:	f7fd f9a1 	bl	80009a0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e2dd      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800366c:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x1da>
 8003678:	e000      	b.n	800367c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800367a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d074      	beq.n	8003772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b08      	cmp	r3, #8
 800368c:	d005      	beq.n	800369a <HAL_RCC_OscConfig+0x21a>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	d10e      	bne.n	80036b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d10b      	bne.n	80036b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d064      	beq.n	8003770 <HAL_RCC_OscConfig+0x2f0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d160      	bne.n	8003770 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e2ba      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x24a>
 80036bc:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0b      	ldr	r2, [pc, #44]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e026      	b.n	8003718 <HAL_RCC_OscConfig+0x298>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036d2:	d115      	bne.n	8003700 <HAL_RCC_OscConfig+0x280>
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a05      	ldr	r2, [pc, #20]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80036da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a02      	ldr	r2, [pc, #8]	@ (80036f0 <HAL_RCC_OscConfig+0x270>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e014      	b.n	8003718 <HAL_RCC_OscConfig+0x298>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	080049f8 	.word	0x080049f8
 80036f8:	20000000 	.word	0x20000000
 80036fc:	20000004 	.word	0x20000004
 8003700:	4ba0      	ldr	r3, [pc, #640]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a9f      	ldr	r2, [pc, #636]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b9d      	ldr	r3, [pc, #628]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a9c      	ldr	r2, [pc, #624]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd f93e 	bl	80009a0 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7fd f93a 	bl	80009a0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e276      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373a:	4b92      	ldr	r3, [pc, #584]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x2a8>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fd f92a 	bl	80009a0 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fd f926 	bl	80009a0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	@ 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e262      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003762:	4b88      	ldr	r3, [pc, #544]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x2d0>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d060      	beq.n	8003840 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d005      	beq.n	8003790 <HAL_RCC_OscConfig+0x310>
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d119      	bne.n	80037be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d116      	bne.n	80037be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003790:	4b7c      	ldr	r3, [pc, #496]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_OscConfig+0x328>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e23f      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a8:	4b76      	ldr	r3, [pc, #472]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	4973      	ldr	r1, [pc, #460]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037bc:	e040      	b.n	8003840 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d023      	beq.n	800380e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd f8e5 	bl	80009a0 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037da:	f7fd f8e1 	bl	80009a0 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e21d      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ec:	4b65      	ldr	r3, [pc, #404]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b62      	ldr	r3, [pc, #392]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	495f      	ldr	r1, [pc, #380]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
 800380c:	e018      	b.n	8003840 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380e:	4b5d      	ldr	r3, [pc, #372]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a5c      	ldr	r2, [pc, #368]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fd f8c1 	bl	80009a0 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003822:	f7fd f8bd 	bl	80009a0 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e1f9      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003834:	4b53      	ldr	r3, [pc, #332]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d03c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01c      	beq.n	800388e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003854:	4b4b      	ldr	r3, [pc, #300]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385a:	4a4a      	ldr	r2, [pc, #296]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fd f89c 	bl	80009a0 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386c:	f7fd f898 	bl	80009a0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e1d4      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800387e:	4b41      	ldr	r3, [pc, #260]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ef      	beq.n	800386c <HAL_RCC_OscConfig+0x3ec>
 800388c:	e01b      	b.n	80038c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388e:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003894:	4a3b      	ldr	r2, [pc, #236]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fd f87f 	bl	80009a0 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fd f87b 	bl	80009a0 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e1b7      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b8:	4b32      	ldr	r3, [pc, #200]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ef      	bne.n	80038a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80a6 	beq.w	8003a20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e4:	4b27      	ldr	r3, [pc, #156]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e8:	4a26      	ldr	r2, [pc, #152]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80038f0:	4b24      	ldr	r3, [pc, #144]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fc:	2301      	movs	r3, #1
 80038fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_RCC_OscConfig+0x508>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d118      	bne.n	800393e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800390c:	4b1e      	ldr	r3, [pc, #120]	@ (8003988 <HAL_RCC_OscConfig+0x508>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <HAL_RCC_OscConfig+0x508>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003918:	f7fd f842 	bl	80009a0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fd f83e 	bl	80009a0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e17a      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003932:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <HAL_RCC_OscConfig+0x508>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d108      	bne.n	8003958 <HAL_RCC_OscConfig+0x4d8>
 8003946:	4b0f      	ldr	r3, [pc, #60]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394c:	4a0d      	ldr	r2, [pc, #52]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003956:	e029      	b.n	80039ac <HAL_RCC_OscConfig+0x52c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b05      	cmp	r3, #5
 800395e:	d115      	bne.n	800398c <HAL_RCC_OscConfig+0x50c>
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003966:	4a07      	ldr	r2, [pc, #28]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003970:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003976:	4a03      	ldr	r2, [pc, #12]	@ (8003984 <HAL_RCC_OscConfig+0x504>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003980:	e014      	b.n	80039ac <HAL_RCC_OscConfig+0x52c>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
 800398c:	4b9c      	ldr	r3, [pc, #624]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003992:	4a9b      	ldr	r2, [pc, #620]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800399c:	4b98      	ldr	r3, [pc, #608]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a2:	4a97      	ldr	r2, [pc, #604]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d016      	beq.n	80039e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fc fff4 	bl	80009a0 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fc fff0 	bl	80009a0 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e12a      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ed      	beq.n	80039bc <HAL_RCC_OscConfig+0x53c>
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fc ffdd 	bl	80009a0 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fc ffd9 	bl	80009a0 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e113      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a00:	4b7f      	ldr	r3, [pc, #508]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ed      	bne.n	80039ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0e:	7ffb      	ldrb	r3, [r7, #31]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a14:	4b7a      	ldr	r3, [pc, #488]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a18:	4a79      	ldr	r2, [pc, #484]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80fe 	beq.w	8003c26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	f040 80d0 	bne.w	8003bd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a34:	4b72      	ldr	r3, [pc, #456]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0203 	and.w	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d130      	bne.n	8003aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	3b01      	subs	r3, #1
 8003a54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d127      	bne.n	8003aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d11f      	bne.n	8003aaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a74:	2a07      	cmp	r2, #7
 8003a76:	bf14      	ite	ne
 8003a78:	2201      	movne	r2, #1
 8003a7a:	2200      	moveq	r2, #0
 8003a7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d113      	bne.n	8003aaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d06e      	beq.n	8003b88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d069      	beq.n	8003b84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ab0:	4b53      	ldr	r3, [pc, #332]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003abc:	4b50      	ldr	r3, [pc, #320]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0ad      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003acc:	4b4c      	ldr	r3, [pc, #304]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ad6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad8:	f7fc ff62 	bl	80009a0 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fc ff5e 	bl	80009a0 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e09a      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af2:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003afe:	4b40      	ldr	r3, [pc, #256]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	4b40      	ldr	r3, [pc, #256]	@ (8003c04 <HAL_RCC_OscConfig+0x784>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b0e:	3a01      	subs	r2, #1
 8003b10:	0112      	lsls	r2, r2, #4
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b18:	0212      	lsls	r2, r2, #8
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b20:	0852      	lsrs	r2, r2, #1
 8003b22:	3a01      	subs	r2, #1
 8003b24:	0552      	lsls	r2, r2, #21
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b2c:	0852      	lsrs	r2, r2, #1
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	0652      	lsls	r2, r2, #25
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b38:	0912      	lsrs	r2, r2, #4
 8003b3a:	0452      	lsls	r2, r2, #17
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	4930      	ldr	r1, [pc, #192]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b44:	4b2e      	ldr	r3, [pc, #184]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2d      	ldr	r2, [pc, #180]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b5c:	f7fc ff20 	bl	80009a0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fc ff1c 	bl	80009a0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e058      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b76:	4b22      	ldr	r3, [pc, #136]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b82:	e050      	b.n	8003c26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e04f      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b88:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d148      	bne.n	8003c26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b94:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba0:	4b17      	ldr	r3, [pc, #92]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003baa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bac:	f7fc fef8 	bl	80009a0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fc fef4 	bl	80009a0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e030      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x734>
 8003bd2:	e028      	b.n	8003c26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d023      	beq.n	8003c22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a08      	ldr	r2, [pc, #32]	@ (8003c00 <HAL_RCC_OscConfig+0x780>)
 8003be0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fc fedb 	bl	80009a0 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bec:	e00c      	b.n	8003c08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fc fed7 	bl	80009a0 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d905      	bls.n	8003c08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e013      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
 8003c00:	40021000 	.word	0x40021000
 8003c04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c08:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_RCC_OscConfig+0x7b0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ec      	bne.n	8003bee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_OscConfig+0x7b0>)
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	4905      	ldr	r1, [pc, #20]	@ (8003c30 <HAL_RCC_OscConfig+0x7b0>)
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <HAL_RCC_OscConfig+0x7b4>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60cb      	str	r3, [r1, #12]
 8003c20:	e001      	b.n	8003c26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	feeefffc 	.word	0xfeeefffc

08003c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0e7      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b75      	ldr	r3, [pc, #468]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d910      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b72      	ldr	r3, [pc, #456]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 0207 	bic.w	r2, r3, #7
 8003c62:	4970      	ldr	r1, [pc, #448]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0cf      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b66      	ldr	r3, [pc, #408]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d908      	bls.n	8003caa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c98:	4b63      	ldr	r3, [pc, #396]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4960      	ldr	r1, [pc, #384]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04c      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d121      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0a6      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd6:	4b54      	ldr	r3, [pc, #336]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d115      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e09a      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cee:	4b4e      	ldr	r3, [pc, #312]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e08e      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e086      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	4b46      	ldr	r3, [pc, #280]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4943      	ldr	r1, [pc, #268]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d20:	f7fc fe3e 	bl	80009a0 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fc fe3a 	bl	80009a0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e06e      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 020c 	and.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1eb      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	4b31      	ldr	r3, [pc, #196]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d208      	bcs.n	8003d7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	492b      	ldr	r1, [pc, #172]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7e:	4b29      	ldr	r3, [pc, #164]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d210      	bcs.n	8003dae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8c:	4b25      	ldr	r3, [pc, #148]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 0207 	bic.w	r2, r3, #7
 8003d94:	4923      	ldr	r1, [pc, #140]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9c:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <HAL_RCC_ClockConfig+0x1ec>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e036      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dba:	4b1b      	ldr	r3, [pc, #108]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4918      	ldr	r1, [pc, #96]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd8:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4910      	ldr	r1, [pc, #64]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dec:	f000 f824 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	490b      	ldr	r1, [pc, #44]	@ (8003e2c <HAL_RCC_ClockConfig+0x1f4>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	4a09      	ldr	r2, [pc, #36]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e0c:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <HAL_RCC_ClockConfig+0x1fc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fd75 	bl	8000900 <HAL_InitTick>
 8003e16:	4603      	mov	r3, r0
 8003e18:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	080049f8 	.word	0x080049f8
 8003e30:	20000000 	.word	0x20000000
 8003e34:	20000004 	.word	0x20000004

08003e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	@ 0x24
 8003e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e46:	4b3e      	ldr	r3, [pc, #248]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e50:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x34>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d121      	bne.n	8003eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d11e      	bne.n	8003eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e6c:	4b34      	ldr	r3, [pc, #208]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e78:	4b31      	ldr	r3, [pc, #196]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	e005      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e88:	4b2d      	ldr	r3, [pc, #180]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e94:	4a2b      	ldr	r2, [pc, #172]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d102      	bne.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eb0:	4b25      	ldr	r3, [pc, #148]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e004      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ebc:	4b23      	ldr	r3, [pc, #140]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d134      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d003      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0xa6>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d003      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8003edc:	e005      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee0:	617b      	str	r3, [r7, #20]
      break;
 8003ee2:	e005      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ee4:	4b19      	ldr	r3, [pc, #100]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ee6:	617b      	str	r3, [r7, #20]
      break;
 8003ee8:	e002      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	617b      	str	r3, [r7, #20]
      break;
 8003eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	3301      	adds	r3, #1
 8003efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003efe:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	fb03 f202 	mul.w	r2, r3, r2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f16:	4b0a      	ldr	r3, [pc, #40]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	0e5b      	lsrs	r3, r3, #25
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	3301      	adds	r3, #1
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f30:	69bb      	ldr	r3, [r7, #24]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	@ 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	08004a08 	.word	0x08004a08
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	007a1200 	.word	0x007a1200

08003f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f68:	f7ff fa26 	bl	80033b8 <HAL_PWREx_GetVoltageRange>
 8003f6c:	6178      	str	r0, [r7, #20]
 8003f6e:	e014      	b.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f70:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	4a24      	ldr	r2, [pc, #144]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f7c:	4b22      	ldr	r3, [pc, #136]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f88:	f7ff fa16 	bl	80033b8 <HAL_PWREx_GetVoltageRange>
 8003f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	4a1d      	ldr	r2, [pc, #116]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa0:	d10b      	bne.n	8003fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b80      	cmp	r3, #128	@ 0x80
 8003fa6:	d919      	bls.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fac:	d902      	bls.n	8003fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fae:	2302      	movs	r3, #2
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	e013      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e010      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b80      	cmp	r3, #128	@ 0x80
 8003fbe:	d902      	bls.n	8003fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	e00a      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b80      	cmp	r3, #128	@ 0x80
 8003fca:	d102      	bne.n	8003fd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fcc:	2302      	movs	r3, #2
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	e004      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b70      	cmp	r3, #112	@ 0x70
 8003fd6:	d101      	bne.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd8:	2301      	movs	r3, #1
 8003fda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 0207 	bic.w	r2, r3, #7
 8003fe4:	4909      	ldr	r1, [pc, #36]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fec:	4b07      	ldr	r3, [pc, #28]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d001      	beq.n	8003ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	40022000 	.word	0x40022000

08004010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004018:	2300      	movs	r3, #0
 800401a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800401c:	2300      	movs	r3, #0
 800401e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004028:	2b00      	cmp	r3, #0
 800402a:	d041      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004030:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004034:	d02a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004036:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800403a:	d824      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800403c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004040:	d008      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004042:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004046:	d81e      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800404c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004050:	d010      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004052:	e018      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004054:	4b86      	ldr	r3, [pc, #536]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a85      	ldr	r2, [pc, #532]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004060:	e015      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fabb 	bl	80045e4 <RCCEx_PLLSAI1_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004072:	e00c      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3320      	adds	r3, #32
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fba6 	bl	80047cc <RCCEx_PLLSAI2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004084:	e003      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	74fb      	strb	r3, [r7, #19]
      break;
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800408c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004094:	4b76      	ldr	r3, [pc, #472]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a2:	4973      	ldr	r1, [pc, #460]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d041      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040c4:	d02a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040ca:	d824      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040d6:	d81e      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040e0:	d010      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040e2:	e018      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040e4:	4b62      	ldr	r3, [pc, #392]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a61      	ldr	r2, [pc, #388]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040f0:	e015      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fa73 	bl	80045e4 <RCCEx_PLLSAI1_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004102:	e00c      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3320      	adds	r3, #32
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fb5e 	bl	80047cc <RCCEx_PLLSAI2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004114:	e003      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	74fb      	strb	r3, [r7, #19]
      break;
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800411c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004124:	4b52      	ldr	r3, [pc, #328]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004132:	494f      	ldr	r1, [pc, #316]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800413a:	e001      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80a0 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004152:	4b47      	ldr	r3, [pc, #284]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416c:	4a40      	ldr	r2, [pc, #256]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004172:	6593      	str	r3, [r2, #88]	@ 0x58
 8004174:	4b3e      	ldr	r3, [pc, #248]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004180:	2301      	movs	r3, #1
 8004182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004184:	4b3b      	ldr	r3, [pc, #236]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a3a      	ldr	r2, [pc, #232]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800418a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800418e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004190:	f7fc fc06 	bl	80009a0 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004196:	e009      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004198:	f7fc fc02 	bl	80009a0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d902      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	74fb      	strb	r3, [r7, #19]
        break;
 80041aa:	e005      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ac:	4b31      	ldr	r3, [pc, #196]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ef      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d15c      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041be:	4b2c      	ldr	r3, [pc, #176]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01f      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d019      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041dc:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041e8:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	4a20      	ldr	r2, [pc, #128]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004208:	4a19      	ldr	r2, [pc, #100]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fc fbc1 	bl	80009a0 <HAL_GetTick>
 800421e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004220:	e00b      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fc fbbd 	bl	80009a0 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d902      	bls.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	74fb      	strb	r3, [r7, #19]
            break;
 8004238:	e006      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423a:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ec      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424e:	4b08      	ldr	r3, [pc, #32]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004254:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425e:	4904      	ldr	r1, [pc, #16]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004266:	e009      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
 800426c:	e006      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
 8004274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427c:	7c7b      	ldrb	r3, [r7, #17]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004282:	4b9e      	ldr	r3, [pc, #632]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	4a9d      	ldr	r2, [pc, #628]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800428c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800429a:	4b98      	ldr	r3, [pc, #608]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a0:	f023 0203 	bic.w	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	4994      	ldr	r1, [pc, #592]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042bc:	4b8f      	ldr	r3, [pc, #572]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f023 020c 	bic.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ca:	498c      	ldr	r1, [pc, #560]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042de:	4b87      	ldr	r3, [pc, #540]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	4983      	ldr	r1, [pc, #524]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004300:	4b7e      	ldr	r3, [pc, #504]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004306:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	497b      	ldr	r1, [pc, #492]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004322:	4b76      	ldr	r3, [pc, #472]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004330:	4972      	ldr	r1, [pc, #456]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004344:	4b6d      	ldr	r3, [pc, #436]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004352:	496a      	ldr	r1, [pc, #424]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004366:	4b65      	ldr	r3, [pc, #404]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004374:	4961      	ldr	r1, [pc, #388]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004388:	4b5c      	ldr	r3, [pc, #368]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004396:	4959      	ldr	r1, [pc, #356]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043aa:	4b54      	ldr	r3, [pc, #336]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b8:	4950      	ldr	r1, [pc, #320]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043cc:	4b4b      	ldr	r3, [pc, #300]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043da:	4948      	ldr	r1, [pc, #288]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ee:	4b43      	ldr	r3, [pc, #268]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	493f      	ldr	r1, [pc, #252]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d028      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004410:	4b3a      	ldr	r3, [pc, #232]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800441e:	4937      	ldr	r1, [pc, #220]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800442e:	d106      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004430:	4b32      	ldr	r3, [pc, #200]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a31      	ldr	r2, [pc, #196]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800443a:	60d3      	str	r3, [r2, #12]
 800443c:	e011      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004442:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004446:	d10c      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f8c8 	bl	80045e4 <RCCEx_PLLSAI1_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d028      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800446e:	4b23      	ldr	r3, [pc, #140]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447c:	491f      	ldr	r1, [pc, #124]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800448c:	d106      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800448e:	4b1b      	ldr	r3, [pc, #108]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4a1a      	ldr	r2, [pc, #104]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004498:	60d3      	str	r3, [r2, #12]
 800449a:	e011      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2101      	movs	r1, #1
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 f899 	bl	80045e4 <RCCEx_PLLSAI1_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02b      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044da:	4908      	ldr	r1, [pc, #32]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ea:	d109      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ec:	4b03      	ldr	r3, [pc, #12]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a02      	ldr	r2, [pc, #8]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044f6:	60d3      	str	r3, [r2, #12]
 80044f8:	e014      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004504:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004508:	d10c      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f867 	bl	80045e4 <RCCEx_PLLSAI1_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02f      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004530:	4b2b      	ldr	r3, [pc, #172]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800453e:	4928      	ldr	r1, [pc, #160]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800454a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800454e:	d10d      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f844 	bl	80045e4 <RCCEx_PLLSAI1_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d014      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	74bb      	strb	r3, [r7, #18]
 800456a:	e011      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004574:	d10c      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3320      	adds	r3, #32
 800457a:	2102      	movs	r1, #2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f925 	bl	80047cc <RCCEx_PLLSAI2_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004586:	7cfb      	ldrb	r3, [r7, #19]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800459c:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045aa:	490d      	ldr	r1, [pc, #52]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045be:	4b08      	ldr	r3, [pc, #32]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ce:	4904      	ldr	r1, [pc, #16]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000

080045e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045f2:	4b75      	ldr	r3, [pc, #468]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045fe:	4b72      	ldr	r3, [pc, #456]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0203 	and.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d10d      	bne.n	800462a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
       ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004616:	4b6c      	ldr	r3, [pc, #432]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
       ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d047      	beq.n	80046ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
 800462e:	e044      	b.n	80046ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d018      	beq.n	800466a <RCCEx_PLLSAI1_Config+0x86>
 8004638:	2b03      	cmp	r3, #3
 800463a:	d825      	bhi.n	8004688 <RCCEx_PLLSAI1_Config+0xa4>
 800463c:	2b01      	cmp	r3, #1
 800463e:	d002      	beq.n	8004646 <RCCEx_PLLSAI1_Config+0x62>
 8004640:	2b02      	cmp	r3, #2
 8004642:	d009      	beq.n	8004658 <RCCEx_PLLSAI1_Config+0x74>
 8004644:	e020      	b.n	8004688 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004646:	4b60      	ldr	r3, [pc, #384]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d11d      	bne.n	800468e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004656:	e01a      	b.n	800468e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004658:	4b5b      	ldr	r3, [pc, #364]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	2b00      	cmp	r3, #0
 8004662:	d116      	bne.n	8004692 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004668:	e013      	b.n	8004692 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800466a:	4b57      	ldr	r3, [pc, #348]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004676:	4b54      	ldr	r3, [pc, #336]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004686:	e006      	b.n	8004696 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e004      	b.n	8004698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004696:	bf00      	nop
    }

    if(status == HAL_OK)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800469e:	4b4a      	ldr	r3, [pc, #296]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	430b      	orrs	r3, r1
 80046b4:	4944      	ldr	r1, [pc, #272]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d17d      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046c0:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a40      	ldr	r2, [pc, #256]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fc f968 	bl	80009a0 <HAL_GetTick>
 80046d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d2:	e009      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d4:	f7fc f964 	bl	80009a0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d902      	bls.n	80046e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	73fb      	strb	r3, [r7, #15]
        break;
 80046e6:	e005      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e8:	4b37      	ldr	r3, [pc, #220]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ef      	bne.n	80046d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d160      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d111      	bne.n	8004724 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004700:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6892      	ldr	r2, [r2, #8]
 8004710:	0211      	lsls	r1, r2, #8
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	0912      	lsrs	r2, r2, #4
 8004718:	0452      	lsls	r2, r2, #17
 800471a:	430a      	orrs	r2, r1
 800471c:	492a      	ldr	r1, [pc, #168]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	610b      	str	r3, [r1, #16]
 8004722:	e027      	b.n	8004774 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d112      	bne.n	8004750 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800472a:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004732:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	0211      	lsls	r1, r2, #8
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6912      	ldr	r2, [r2, #16]
 8004740:	0852      	lsrs	r2, r2, #1
 8004742:	3a01      	subs	r2, #1
 8004744:	0552      	lsls	r2, r2, #21
 8004746:	430a      	orrs	r2, r1
 8004748:	491f      	ldr	r1, [pc, #124]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	610b      	str	r3, [r1, #16]
 800474e:	e011      	b.n	8004774 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004750:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004758:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
 8004760:	0211      	lsls	r1, r2, #8
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6952      	ldr	r2, [r2, #20]
 8004766:	0852      	lsrs	r2, r2, #1
 8004768:	3a01      	subs	r2, #1
 800476a:	0652      	lsls	r2, r2, #25
 800476c:	430a      	orrs	r2, r1
 800476e:	4916      	ldr	r1, [pc, #88]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004770:	4313      	orrs	r3, r2
 8004772:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004774:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800477e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fc f90e 	bl	80009a0 <HAL_GetTick>
 8004784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004786:	e009      	b.n	800479c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004788:	f7fc f90a 	bl	80009a0 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d902      	bls.n	800479c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	73fb      	strb	r3, [r7, #15]
          break;
 800479a:	e005      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ef      	beq.n	8004788 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000

080047cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047da:	4b6a      	ldr	r3, [pc, #424]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047e6:	4b67      	ldr	r3, [pc, #412]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0203 	and.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d10d      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
       ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047fe:	4b61      	ldr	r3, [pc, #388]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
       ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d047      	beq.n	80048a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e044      	b.n	80048a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d018      	beq.n	8004852 <RCCEx_PLLSAI2_Config+0x86>
 8004820:	2b03      	cmp	r3, #3
 8004822:	d825      	bhi.n	8004870 <RCCEx_PLLSAI2_Config+0xa4>
 8004824:	2b01      	cmp	r3, #1
 8004826:	d002      	beq.n	800482e <RCCEx_PLLSAI2_Config+0x62>
 8004828:	2b02      	cmp	r3, #2
 800482a:	d009      	beq.n	8004840 <RCCEx_PLLSAI2_Config+0x74>
 800482c:	e020      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800482e:	4b55      	ldr	r3, [pc, #340]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11d      	bne.n	8004876 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483e:	e01a      	b.n	8004876 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004840:	4b50      	ldr	r3, [pc, #320]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004850:	e013      	b.n	800487a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004852:	4b4c      	ldr	r3, [pc, #304]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800485e:	4b49      	ldr	r3, [pc, #292]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800486e:	e006      	b.n	800487e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      break;
 8004874:	e004      	b.n	8004880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800487e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10d      	bne.n	80048a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004886:	4b3f      	ldr	r3, [pc, #252]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	430b      	orrs	r3, r1
 800489c:	4939      	ldr	r1, [pc, #228]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d167      	bne.n	8004978 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048a8:	4b36      	ldr	r3, [pc, #216]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a35      	ldr	r2, [pc, #212]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fc f874 	bl	80009a0 <HAL_GetTick>
 80048b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ba:	e009      	b.n	80048d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048bc:	f7fc f870 	bl	80009a0 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d902      	bls.n	80048d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	73fb      	strb	r3, [r7, #15]
        break;
 80048ce:	e005      	b.n	80048dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1ef      	bne.n	80048bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d14a      	bne.n	8004978 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d111      	bne.n	800490c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048e8:	4b26      	ldr	r3, [pc, #152]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80048f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6892      	ldr	r2, [r2, #8]
 80048f8:	0211      	lsls	r1, r2, #8
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68d2      	ldr	r2, [r2, #12]
 80048fe:	0912      	lsrs	r2, r2, #4
 8004900:	0452      	lsls	r2, r2, #17
 8004902:	430a      	orrs	r2, r1
 8004904:	491f      	ldr	r1, [pc, #124]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004906:	4313      	orrs	r3, r2
 8004908:	614b      	str	r3, [r1, #20]
 800490a:	e011      	b.n	8004930 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800490c:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004914:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6892      	ldr	r2, [r2, #8]
 800491c:	0211      	lsls	r1, r2, #8
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6912      	ldr	r2, [r2, #16]
 8004922:	0852      	lsrs	r2, r2, #1
 8004924:	3a01      	subs	r2, #1
 8004926:	0652      	lsls	r2, r2, #25
 8004928:	430a      	orrs	r2, r1
 800492a:	4916      	ldr	r1, [pc, #88]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492c:	4313      	orrs	r3, r2
 800492e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004930:	4b14      	ldr	r3, [pc, #80]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a13      	ldr	r2, [pc, #76]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493c:	f7fc f830 	bl	80009a0 <HAL_GetTick>
 8004940:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004942:	e009      	b.n	8004958 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004944:	f7fc f82c 	bl	80009a0 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d902      	bls.n	8004958 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	73fb      	strb	r3, [r7, #15]
          break;
 8004956:	e005      	b.n	8004964 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ef      	beq.n	8004944 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800496a:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4904      	ldr	r1, [pc, #16]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004974:	4313      	orrs	r3, r2
 8004976:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000

08004988 <memset>:
 8004988:	4402      	add	r2, r0
 800498a:	4603      	mov	r3, r0
 800498c:	4293      	cmp	r3, r2
 800498e:	d100      	bne.n	8004992 <memset+0xa>
 8004990:	4770      	bx	lr
 8004992:	f803 1b01 	strb.w	r1, [r3], #1
 8004996:	e7f9      	b.n	800498c <memset+0x4>

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4d0d      	ldr	r5, [pc, #52]	@ (80049d0 <__libc_init_array+0x38>)
 800499c:	4c0d      	ldr	r4, [pc, #52]	@ (80049d4 <__libc_init_array+0x3c>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	2600      	movs	r6, #0
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	4d0b      	ldr	r5, [pc, #44]	@ (80049d8 <__libc_init_array+0x40>)
 80049aa:	4c0c      	ldr	r4, [pc, #48]	@ (80049dc <__libc_init_array+0x44>)
 80049ac:	f000 f818 	bl	80049e0 <_init>
 80049b0:	1b64      	subs	r4, r4, r5
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	2600      	movs	r6, #0
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08004a38 	.word	0x08004a38
 80049d4:	08004a38 	.word	0x08004a38
 80049d8:	08004a38 	.word	0x08004a38
 80049dc:	08004a3c 	.word	0x08004a3c

080049e0 <_init>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr

080049ec <_fini>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr
