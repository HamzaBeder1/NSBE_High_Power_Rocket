
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f3c  08004f3c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f3c  08004f3c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f3c  08004f3c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f3c  08004f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f40  08004f40  00005f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  08004fa0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004fa0  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afea  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002188  00000000  00000000  00011076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00013200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083a  00000000  00000000  00013ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000235c  00000000  00000000  00014522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9b8  00000000  00000000  0001687e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5d1e  00000000  00000000  00025236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010af54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  0010af98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0010de28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ec0 	.word	0x08004ec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004ec0 	.word	0x08004ec0

080001c8 <readRegister>:
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 2);
	while(!sensorReady);
	sensorReady = 0;
}

void readRegister(uint8_t addr, uint8_t regAddr, uint8_t *result, uint16_t size){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	603a      	str	r2, [r7, #0]
 80001d0:	461a      	mov	r2, r3
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	4613      	mov	r3, r2
 80001dc:	80bb      	strh	r3, [r7, #4]
	uint8_t data[1] = {regAddr};
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Sequential_Transmit_DMA(&hI2C, (addr << 1), data, 1, I2C_FIRST_FRAME);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	b29b      	uxth	r3, r3
 80001e6:	005b      	lsls	r3, r3, #1
 80001e8:	b299      	uxth	r1, r3
 80001ea:	f107 020c 	add.w	r2, r7, #12
 80001ee:	2300      	movs	r3, #0
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	2301      	movs	r3, #1
 80001f4:	4815      	ldr	r0, [pc, #84]	@ (800024c <readRegister+0x84>)
 80001f6:	f001 fa1f 	bl	8001638 <HAL_I2C_Master_Seq_Transmit_DMA>
	while(!sensorReady);
 80001fa:	bf00      	nop
 80001fc:	4b14      	ldr	r3, [pc, #80]	@ (8000250 <readRegister+0x88>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	f083 0301 	eor.w	r3, r3, #1
 8000204:	b2db      	uxtb	r3, r3
 8000206:	2b00      	cmp	r3, #0
 8000208:	d1f8      	bne.n	80001fc <readRegister+0x34>
	sensorReady = 0;
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <readRegister+0x88>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Sequential_Receive_DMA(&hI2C, (addr << 1) | (0x01), result, size, I2C_LAST_FRAME);
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	b21b      	sxth	r3, r3
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	b21b      	sxth	r3, r3
 800021c:	b299      	uxth	r1, r3
 800021e:	88bb      	ldrh	r3, [r7, #4]
 8000220:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000224:	9200      	str	r2, [sp, #0]
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	4808      	ldr	r0, [pc, #32]	@ (800024c <readRegister+0x84>)
 800022a:	f001 fb55 	bl	80018d8 <HAL_I2C_Master_Seq_Receive_DMA>
	while(!transmitterReady);
 800022e:	bf00      	nop
 8000230:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <readRegister+0x8c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	f083 0301 	eor.w	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1f8      	bne.n	8000230 <readRegister+0x68>
	transmitterReady = 0;
 800023e:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <readRegister+0x8c>)
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000007c 	.word	0x2000007c
 8000250:	20000079 	.word	0x20000079
 8000254:	2000007a 	.word	0x2000007a

08000258 <I2C_Init>:
		writeRegister(addr, regAddr+i, value[i]);
	}
}

//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 800025c:	4b1c      	ldr	r3, [pc, #112]	@ (80002d0 <I2C_Init+0x78>)
 800025e:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <I2C_Init+0x7c>)
 8000260:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 8000262:	4b1b      	ldr	r3, [pc, #108]	@ (80002d0 <I2C_Init+0x78>)
 8000264:	2200      	movs	r2, #0
 8000266:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000268:	4b19      	ldr	r3, [pc, #100]	@ (80002d0 <I2C_Init+0x78>)
 800026a:	2200      	movs	r2, #0
 800026c:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800026e:	4b18      	ldr	r3, [pc, #96]	@ (80002d0 <I2C_Init+0x78>)
 8000270:	2201      	movs	r2, #1
 8000272:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000274:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <I2C_Init+0x78>)
 8000276:	2200      	movs	r2, #0
 8000278:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 800027a:	4b15      	ldr	r3, [pc, #84]	@ (80002d0 <I2C_Init+0x78>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000280:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <I2C_Init+0x78>)
 8000282:	2200      	movs	r2, #0
 8000284:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000286:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <I2C_Init+0x78>)
 8000288:	2200      	movs	r2, #0
 800028a:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <I2C_Init+0x78>)
 800028e:	2200      	movs	r2, #0
 8000290:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 8000292:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <I2C_Init+0x78>)
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <I2C_Init+0x80>)
 8000296:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <I2C_Init+0x78>)
 800029a:	f001 f931 	bl	8001500 <HAL_I2C_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <I2C_Init+0x50>
	{
		Error_Handler();
 80002a4:	f000 f8f6 	bl	8000494 <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002a8:	2100      	movs	r1, #0
 80002aa:	4809      	ldr	r0, [pc, #36]	@ (80002d0 <I2C_Init+0x78>)
 80002ac:	f003 f8f9 	bl	80034a2 <HAL_I2CEx_ConfigAnalogFilter>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <I2C_Init+0x62>
	{
		Error_Handler();
 80002b6:	f000 f8ed 	bl	8000494 <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <I2C_Init+0x78>)
 80002be:	f003 f93b 	bl	8003538 <HAL_I2CEx_ConfigDigitalFilter>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <I2C_Init+0x74>
    {
    	Error_Handler();
 80002c8:	f000 f8e4 	bl	8000494 <Error_Handler>
    }
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	40005400 	.word	0x40005400
 80002d8:	00100d14 	.word	0x00100d14

080002dc <HAL_I2C_ErrorCallback>:

#define BUFFERSIZE 100
#define DS3231ADDR 0b1101000


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2CHandle){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a05      	ldr	r2, [pc, #20]	@ (8000314 <HAL_I2C_MasterTxCpltCallback+0x24>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d102      	bne.n	8000308 <HAL_I2C_MasterTxCpltCallback+0x18>
		sensorReady = 1;
 8000302:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
	}
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40005400 	.word	0x40005400
 8000318:	20000079 	.word	0x20000079

0800031c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2CHandle){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a05      	ldr	r2, [pc, #20]	@ (8000340 <HAL_I2C_MasterRxCpltCallback+0x24>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d102      	bne.n	8000334 <HAL_I2C_MasterRxCpltCallback+0x18>
		transmitterReady = 1;
 800032e:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000330:	2201      	movs	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]
	}
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40005400 	.word	0x40005400
 8000344:	2000007a 	.word	0x2000007a

08000348 <main>:


int main(void)
{
 8000348:	b5b0      	push	{r4, r5, r7, lr}
 800034a:	b08a      	sub	sp, #40	@ 0x28
 800034c:	af00      	add	r7, sp, #0
  HAL_Init();
 800034e:	f000 fb60 	bl	8000a12 <HAL_Init>
  SystemClock_Config();
 8000352:	f000 f833 	bl	80003bc <SystemClock_Config>
  DMA_Init();
 8000356:	f000 f877 	bl	8000448 <DMA_Init>
  I2C_Init();
 800035a:	f7ff ff7d 	bl	8000258 <I2C_Init>
  uint8_t arr[] = {30, 0, 11, 28, 7, 12};
 800035e:	4a13      	ldr	r2, [pc, #76]	@ (80003ac <main+0x64>)
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000368:	6018      	str	r0, [r3, #0]
 800036a:	3304      	adds	r3, #4
 800036c:	8019      	strh	r1, [r3, #0]
  //initDS3231(2024, arr, 1, 12);
  //get_bmp_t();
  initMPU6050(0);
 800036e:	2000      	movs	r0, #0
 8000370:	f000 f896 	bl	80004a0 <initMPU6050>
  uint8_t timeData[6] = {30, 14, 4, 3, 24, 12};
 8000374:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <main+0x68>)
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037e:	6018      	str	r0, [r3, #0]
 8000380:	3304      	adds	r3, #4
 8000382:	8019      	strh	r1, [r3, #0]
  char header[] = "Time,Acceleration";
 8000384:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <main+0x6c>)
 8000386:	463c      	mov	r4, r7
 8000388:	461d      	mov	r5, r3
 800038a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038e:	682b      	ldr	r3, [r5, #0]
 8000390:	8023      	strh	r3, [r4, #0]
  while (1)
  {
	  //getDateAndTime();
	  getAccelMPU6050(second);
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <main+0x70>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f8f0 	bl	800057c <getAccelMPU6050>
	  //getAltitudeBMP180(second);
	  int x = 21;
 800039c:	2315      	movs	r3, #21
 800039e:	627b      	str	r3, [r7, #36]	@ 0x24
	  x+=1;
 80003a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a2:	3301      	adds	r3, #1
 80003a4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
 80003a6:	bf00      	nop
 80003a8:	e7f3      	b.n	8000392 <main+0x4a>
 80003aa:	bf00      	nop
 80003ac:	08004ed8 	.word	0x08004ed8
 80003b0:	08004ee0 	.word	0x08004ee0
 80003b4:	08004ee8 	.word	0x08004ee8
 80003b8:	20000078 	.word	0x20000078

080003bc <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b096      	sub	sp, #88	@ 0x58
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2244      	movs	r2, #68	@ 0x44
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f004 fcd4 	bl	8004d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003e2:	f003 f903 	bl	80035ec <HAL_PWREx_ControlVoltageScaling>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003ec:	f000 f852 	bl	8000494 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003f0:	2310      	movs	r3, #16
 80003f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f4:	2301      	movs	r3, #1
 80003f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003fc:	2360      	movs	r3, #96	@ 0x60
 80003fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000400:	2300      	movs	r3, #0
 8000402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4618      	mov	r0, r3
 800040a:	f003 f945 	bl	8003698 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000414:	f000 f83e 	bl	8000494 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	230f      	movs	r3, #15
 800041a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800042c:	463b      	mov	r3, r7
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f003 fd0d 	bl	8003e50 <HAL_RCC_ClockConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800043c:	f000 f82a 	bl	8000494 <Error_Handler>
  }
}
 8000440:	bf00      	nop
 8000442:	3758      	adds	r7, #88	@ 0x58
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <DMA_Init>:


//PB6 = SCL1, PB7 = SDA1


void DMA_Init(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800044e:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <DMA_Init+0x48>)
 8000450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000452:	4a0f      	ldr	r2, [pc, #60]	@ (8000490 <DMA_Init+0x48>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6493      	str	r3, [r2, #72]	@ 0x48
 800045a:	4b0d      	ldr	r3, [pc, #52]	@ (8000490 <DMA_Init+0x48>)
 800045c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2010      	movs	r0, #16
 800046c:	f000 fc21 	bl	8000cb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000470:	2010      	movs	r0, #16
 8000472:	f000 fc3a 	bl	8000cea <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2100      	movs	r1, #0
 800047a:	2011      	movs	r0, #17
 800047c:	f000 fc19 	bl	8000cb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000480:	2011      	movs	r0, #17
 8000482:	f000 fc32 	bl	8000cea <HAL_NVIC_EnableIRQ>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <Error_Handler>:
}



void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  __disable_irq();
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <Error_Handler+0x8>

080004a0 <initMPU6050>:

int accel_idx;
int velocity_idx;
int altitude_idx;

void initMPU6050(unsigned char AFS_SEL){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	switch(AFS_SEL){
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d818      	bhi.n	80004e2 <initMPU6050+0x42>
 80004b0:	a201      	add	r2, pc, #4	@ (adr r2, 80004b8 <initMPU6050+0x18>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004c9 	.word	0x080004c9
 80004bc:	080004d1 	.word	0x080004d1
 80004c0:	080004d7 	.word	0x080004d7
 80004c4:	080004dd 	.word	0x080004dd
	case RANGE_2G:
		step = 0.00059877;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <initMPU6050+0xa8>)
 80004ca:	4a20      	ldr	r2, [pc, #128]	@ (800054c <initMPU6050+0xac>)
 80004cc:	601a      	str	r2, [r3, #0]
		break;
 80004ce:	e009      	b.n	80004e4 <initMPU6050+0x44>
	case RANGE_4G:
		step = 0.00119;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000548 <initMPU6050+0xa8>)
 80004d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000550 <initMPU6050+0xb0>)
 80004d4:	601a      	str	r2, [r3, #0]
	case RANGE_8G:
		step = 0.002395;
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <initMPU6050+0xa8>)
 80004d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000554 <initMPU6050+0xb4>)
 80004da:	601a      	str	r2, [r3, #0]
	case RANGE_16G:
		step = 0.00479;
 80004dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <initMPU6050+0xa8>)
 80004de:	4a1e      	ldr	r2, [pc, #120]	@ (8000558 <initMPU6050+0xb8>)
 80004e0:	601a      	str	r2, [r3, #0]
	default:
		break;
 80004e2:	bf00      	nop
	readRegister(MPU6050ADDR, ACCEL_CONFIG, temp, 1);
	temp[0] &= 0b11100111;
	temp[0] |= (AFS_SEL << 3);
	writeRegister(MPU6050ADDR, ACCEL_CONFIG, temp);*/

	total_buffer_size = 100;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <initMPU6050+0xbc>)
 80004e6:	2264      	movs	r2, #100	@ 0x64
 80004e8:	601a      	str	r2, [r3, #0]
	accel_buffer_MPU6050 = (accelMPU6050*)malloc(sizeof(accelMPU6050)*total_buffer_size);
 80004ea:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <initMPU6050+0xbc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	4618      	mov	r0, r3
 80004f2:	f004 fb55 	bl	8004ba0 <malloc>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <initMPU6050+0xc0>)
 80004fc:	601a      	str	r2, [r3, #0]
	velocity_buffer_MPU6050 = (velocityMPU6050*)malloc(sizeof(velocityMPU6050)*total_buffer_size);
 80004fe:	4b17      	ldr	r3, [pc, #92]	@ (800055c <initMPU6050+0xbc>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f004 fb4b 	bl	8004ba0 <malloc>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <initMPU6050+0xc4>)
 8000510:	601a      	str	r2, [r3, #0]
	altitude_buffer_MPU6050 = (altitudeMPU6050*)malloc(sizeof(altitudeMPU6050)*total_buffer_size);
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <initMPU6050+0xbc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fb41 	bl	8004ba0 <malloc>
 800051e:	4603      	mov	r3, r0
 8000520:	461a      	mov	r2, r3
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <initMPU6050+0xc8>)
 8000524:	601a      	str	r2, [r3, #0]
	curr_buffer_size = 0;
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <initMPU6050+0xcc>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
	accel_idx = 0;
 800052c:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <initMPU6050+0xd0>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
	velocity_idx = 0;
 8000532:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <initMPU6050+0xd4>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
	altitude_idx = 0;
 8000538:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <initMPU6050+0xd8>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000160 	.word	0x20000160
 800054c:	3a1cf6c6 	.word	0x3a1cf6c6
 8000550:	3a9bf9c6 	.word	0x3a9bf9c6
 8000554:	3b1cf56f 	.word	0x3b1cf56f
 8000558:	3b9cf56f 	.word	0x3b9cf56f
 800055c:	20000170 	.word	0x20000170
 8000560:	20000164 	.word	0x20000164
 8000564:	20000168 	.word	0x20000168
 8000568:	2000016c 	.word	0x2000016c
 800056c:	20000174 	.word	0x20000174
 8000570:	20000178 	.word	0x20000178
 8000574:	2000017c 	.word	0x2000017c
 8000578:	20000180 	.word	0x20000180

0800057c <getAccelMPU6050>:

void getAccelMPU6050(int s){
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b08b      	sub	sp, #44	@ 0x2c
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	uint8_t accelReg[6];
	readRegister(MPU6050ADDR,ACCEL_XOUT_H, accelReg, 6);
 8000584:	f107 021c 	add.w	r2, r7, #28
 8000588:	2306      	movs	r3, #6
 800058a:	213b      	movs	r1, #59	@ 0x3b
 800058c:	2068      	movs	r0, #104	@ 0x68
 800058e:	f7ff fe1b 	bl	80001c8 <readRegister>

	int16_t X = (accelReg[0] << 8) | (accelReg[1]);
 8000592:	7f3b      	ldrb	r3, [r7, #28]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	b21a      	sxth	r2, r3
 8000598:	7f7b      	ldrb	r3, [r7, #29]
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t Y = (accelReg[2] << 8) | (accelReg[3]);
 80005a0:	7fbb      	ldrb	r3, [r7, #30]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	7ffb      	ldrb	r3, [r7, #31]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t Z = (accelReg[4] << 8) | (accelReg[5]);
 80005ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	847b      	strh	r3, [r7, #34]	@ 0x22

	accelMPU6050 a;
	a.accelX = X*step;
 80005c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <getAccelMPU6050+0x120>)
 80005ce:	edd3 7a00 	vldr	s15, [r3]
 80005d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d6:	edc7 7a03 	vstr	s15, [r7, #12]
	a.accelY = Y*step;
 80005da:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005e6:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <getAccelMPU6050+0x120>)
 80005e8:	edd3 7a00 	vldr	s15, [r3]
 80005ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005f0:	edc7 7a04 	vstr	s15, [r7, #16]
	a.accelZ = Z*step;
 80005f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <getAccelMPU6050+0x120>)
 8000602:	edd3 7a00 	vldr	s15, [r3]
 8000606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800060a:	edc7 7a05 	vstr	s15, [r7, #20]
	a.seconds = s;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	763b      	strb	r3, [r7, #24]

	if(curr_buffer_size + 1 >= total_buffer_size){
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <getAccelMPU6050+0x124>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <getAccelMPU6050+0x128>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d328      	bcc.n	8000674 <getAccelMPU6050+0xf8>
		total_buffer_size*=2;
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <getAccelMPU6050+0x128>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4a1e      	ldr	r2, [pc, #120]	@ (80006a4 <getAccelMPU6050+0x128>)
 800062a:	6013      	str	r3, [r2, #0]
		accel_buffer_MPU6050 = (accelMPU6050*)realloc(accel_buffer_MPU6050, total_buffer_size*sizeof(accelMPU6050));
 800062c:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <getAccelMPU6050+0x12c>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <getAccelMPU6050+0x128>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f004 fb67 	bl	8004d0c <realloc>
 800063e:	4603      	mov	r3, r0
 8000640:	4a19      	ldr	r2, [pc, #100]	@ (80006a8 <getAccelMPU6050+0x12c>)
 8000642:	6013      	str	r3, [r2, #0]
		velocity_buffer_MPU6050 = (velocityMPU6050*)realloc(velocity_buffer_MPU6050, total_buffer_size*sizeof(velocityMPU6050));
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <getAccelMPU6050+0x130>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <getAccelMPU6050+0x128>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f004 fb5b 	bl	8004d0c <realloc>
 8000656:	4603      	mov	r3, r0
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <getAccelMPU6050+0x130>)
 800065a:	6013      	str	r3, [r2, #0]
		altitude_buffer_MPU6050 = (altitudeMPU6050*)realloc(altitude_buffer_MPU6050, total_buffer_size*sizeof(altitudeMPU6050));
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <getAccelMPU6050+0x134>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <getAccelMPU6050+0x128>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	4619      	mov	r1, r3
 8000668:	4610      	mov	r0, r2
 800066a:	f004 fb4f 	bl	8004d0c <realloc>
 800066e:	4603      	mov	r3, r0
 8000670:	4a0f      	ldr	r2, [pc, #60]	@ (80006b0 <getAccelMPU6050+0x134>)
 8000672:	6013      	str	r3, [r2, #0]
	}

	accel_buffer_MPU6050[accel_idx++] = a;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <getAccelMPU6050+0x12c>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <getAccelMPU6050+0x138>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1c59      	adds	r1, r3, #1
 800067e:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <getAccelMPU6050+0x138>)
 8000680:	6001      	str	r1, [r0, #0]
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	4413      	add	r3, r2
 8000686:	461c      	mov	r4, r3
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000692:	bf00      	nop
 8000694:	372c      	adds	r7, #44	@ 0x2c
 8000696:	46bd      	mov	sp, r7
 8000698:	bd90      	pop	{r4, r7, pc}
 800069a:	bf00      	nop
 800069c:	20000160 	.word	0x20000160
 80006a0:	20000174 	.word	0x20000174
 80006a4:	20000170 	.word	0x20000170
 80006a8:	20000164 	.word	0x20000164
 80006ac:	20000168 	.word	0x20000168
 80006b0:	2000016c 	.word	0x2000016c
 80006b4:	20000178 	.word	0x20000178

080006b8 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_MspInit+0x44>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_MspInit+0x44>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8000700:	b580      	push	{r7, lr}
 8000702:	b0ac      	sub	sp, #176	@ 0xb0
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000708:	4b57      	ldr	r3, [pc, #348]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 800070a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070c:	4a56      	ldr	r2, [pc, #344]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 800070e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000712:	6593      	str	r3, [r2, #88]	@ 0x58
 8000714:	4b54      	ldr	r3, [pc, #336]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 8000716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b51      	ldr	r3, [pc, #324]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 8000722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000724:	4a50      	ldr	r2, [pc, #320]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 8000726:	f043 0302 	orr.w	r3, r3, #2
 800072a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072c:	4b4e      	ldr	r3, [pc, #312]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 800072e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000738:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800073c:	2288      	movs	r2, #136	@ 0x88
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f004 fb19 	bl	8004d78 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000746:	2340      	movs	r3, #64	@ 0x40
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800074a:	2300      	movs	r3, #0
 800074c:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fd68 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 800075e:	f7ff fe99 	bl	8000494 <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000762:	23c0      	movs	r3, #192	@ 0xc0
 8000764:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000766:	2312      	movs	r3, #18
 8000768:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076a:	2301      	movs	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000772:	2304      	movs	r3, #4
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 8000776:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a3b      	ldr	r2, [pc, #236]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b39      	ldr	r3, [pc, #228]	@ (8000868 <HAL_I2C_MspInit+0x168>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4835      	ldr	r0, [pc, #212]	@ (800086c <HAL_I2C_MspInit+0x16c>)
 8000796:	f000 fd09 	bl	80011ac <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 800079a:	4b35      	ldr	r3, [pc, #212]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 800079c:	4a35      	ldr	r2, [pc, #212]	@ (8000874 <HAL_I2C_MspInit+0x174>)
 800079e:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80007a0:	4b33      	ldr	r3, [pc, #204]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007a2:	2203      	movs	r2, #3
 80007a4:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007a6:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007a8:	2210      	movs	r2, #16
 80007aa:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ac:	4b30      	ldr	r3, [pc, #192]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007be:	4b2c      	ldr	r3, [pc, #176]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80007c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007ca:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 80007d0:	4827      	ldr	r0, [pc, #156]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007d2:	f000 faa5 	bl	8000d20 <HAL_DMA_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 80007dc:	f7ff fe5a 	bl	8000494 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80007e6:	4a22      	ldr	r2, [pc, #136]	@ (8000870 <HAL_I2C_MspInit+0x170>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <HAL_I2C_MspInit+0x17c>)
 80007f0:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 8000822:	4815      	ldr	r0, [pc, #84]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 8000824:	f000 fa7c 	bl	8000d20 <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_I2C_MspInit+0x132>
		Error_Handler();
 800082e:	f7ff fe31 	bl	8000494 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 8000836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000838:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <HAL_I2C_MspInit+0x178>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	201f      	movs	r0, #31
 8000844:	f000 fa35 	bl	8000cb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000848:	201f      	movs	r0, #31
 800084a:	f000 fa4e 	bl	8000cea <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2020      	movs	r0, #32
 8000854:	f000 fa2d 	bl	8000cb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000858:	2020      	movs	r0, #32
 800085a:	f000 fa46 	bl	8000cea <HAL_NVIC_EnableIRQ>
}
 800085e:	bf00      	nop
 8000860:	37b0      	adds	r7, #176	@ 0xb0
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400
 8000870:	200000d0 	.word	0x200000d0
 8000874:	4002006c 	.word	0x4002006c
 8000878:	20000118 	.word	0x20000118
 800087c:	40020080 	.word	0x40020080

08000880 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
   while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80008d6:	f000 f8f1 	bl	8000abc <HAL_IncTick>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <DMA1_Channel6_IRQHandler+0x10>)
 80008e6:	f000 fb74 	bl	8000fd2 <HAL_DMA_IRQHandler>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000d0 	.word	0x200000d0

080008f4 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <DMA1_Channel7_IRQHandler+0x10>)
 80008fa:	f000 fb6a 	bl	8000fd2 <HAL_DMA_IRQHandler>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000118 	.word	0x20000118

08000908 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <I2C1_EV_IRQHandler+0x10>)
 800090e:	f001 f8e7 	bl	8001ae0 <HAL_I2C_EV_IRQHandler>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000007c 	.word	0x2000007c

0800091c <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <I2C1_ER_IRQHandler+0x10>)
 8000922:	f001 f8f7 	bl	8001b14 <HAL_I2C_ER_IRQHandler>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000007c 	.word	0x2000007c

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	@ (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f004 fa22 	bl	8004da8 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20018000 	.word	0x20018000
 8000990:	00000400 	.word	0x00000400
 8000994:	20000184 	.word	0x20000184
 8000998:	200002d8 	.word	0x200002d8

0800099c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c4:	f7ff ffea 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f004 f9e1 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f2:	f7ff fca9 	bl	8000348 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a04:	08004f44 	.word	0x08004f44
  ldr r2, =_sbss
 8000a08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a0c:	200002d4 	.word	0x200002d4

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>

08000a12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f93d 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f80e 	bl	8000a44 <HAL_InitTick>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	e001      	b.n	8000a38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a34:	f7ff fe40 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <HAL_InitTick+0x6c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d023      	beq.n	8000aa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_InitTick+0x70>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <HAL_InitTick+0x6c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f949 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10f      	bne.n	8000a9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d809      	bhi.n	8000a94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f913 	bl	8000cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_InitTick+0x74>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e007      	b.n	8000aa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	e004      	b.n	8000aa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e001      	b.n	8000aa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000188 	.word	0x20000188

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000188 	.word	0x20000188

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff29 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff3e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff31 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e098      	b.n	8000e64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b4d      	ldr	r3, [pc, #308]	@ (8000e70 <HAL_DMA_Init+0x150>)
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d80f      	bhi.n	8000d5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b4b      	ldr	r3, [pc, #300]	@ (8000e74 <HAL_DMA_Init+0x154>)
 8000d46:	4413      	add	r3, r2
 8000d48:	4a4b      	ldr	r2, [pc, #300]	@ (8000e78 <HAL_DMA_Init+0x158>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	009a      	lsls	r2, r3, #2
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a48      	ldr	r2, [pc, #288]	@ (8000e7c <HAL_DMA_Init+0x15c>)
 8000d5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d5c:	e00e      	b.n	8000d7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b46      	ldr	r3, [pc, #280]	@ (8000e80 <HAL_DMA_Init+0x160>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4a43      	ldr	r2, [pc, #268]	@ (8000e78 <HAL_DMA_Init+0x158>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	009a      	lsls	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a42      	ldr	r2, [pc, #264]	@ (8000e84 <HAL_DMA_Init+0x164>)
 8000d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000dd6:	d039      	beq.n	8000e4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	4a27      	ldr	r2, [pc, #156]	@ (8000e7c <HAL_DMA_Init+0x15c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d11a      	bne.n	8000e18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <HAL_DMA_Init+0x168>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f003 031c 	and.w	r3, r3, #28
 8000dee:	210f      	movs	r1, #15
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	4924      	ldr	r1, [pc, #144]	@ (8000e88 <HAL_DMA_Init+0x168>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <HAL_DMA_Init+0x168>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e08:	f003 031c 	and.w	r3, r3, #28
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	491d      	ldr	r1, [pc, #116]	@ (8000e88 <HAL_DMA_Init+0x168>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
 8000e16:	e019      	b.n	8000e4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <HAL_DMA_Init+0x16c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e20:	f003 031c 	and.w	r3, r3, #28
 8000e24:	210f      	movs	r1, #15
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4917      	ldr	r1, [pc, #92]	@ (8000e8c <HAL_DMA_Init+0x16c>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_DMA_Init+0x16c>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6859      	ldr	r1, [r3, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	f003 031c 	and.w	r3, r3, #28
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	4911      	ldr	r1, [pc, #68]	@ (8000e8c <HAL_DMA_Init+0x16c>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40020407 	.word	0x40020407
 8000e74:	bffdfff8 	.word	0xbffdfff8
 8000e78:	cccccccd 	.word	0xcccccccd
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	bffdfbf8 	.word	0xbffdfbf8
 8000e84:	40020400 	.word	0x40020400
 8000e88:	400200a8 	.word	0x400200a8
 8000e8c:	400204a8 	.word	0x400204a8

08000e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <HAL_DMA_Start_IT+0x20>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e04b      	b.n	8000f48 <HAL_DMA_Start_IT+0xb8>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d13a      	bne.n	8000f3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0201 	bic.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 f92f 	bl	800114c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d008      	beq.n	8000f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 020e 	orr.w	r2, r2, #14
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e00f      	b.n	8000f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0204 	bic.w	r2, r2, #4
 8000f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 020a 	orr.w	r2, r2, #10
 8000f26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0201 	orr.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e005      	b.n	8000f46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f42:	2302      	movs	r3, #2
 8000f44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d005      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e029      	b.n	8000fc8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 020e 	bic.w	r2, r2, #14
 8000f82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0201 	bic.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f98:	f003 021c 	and.w	r2, r3, #28
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	4798      	blx	r3
    }
  }
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	f003 031c 	and.w	r3, r3, #28
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d026      	beq.n	800104c <HAL_DMA_IRQHandler+0x7a>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d021      	beq.n	800104c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0204 	bic.w	r2, r2, #4
 8001024:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f003 021c 	and.w	r2, r3, #28
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	2104      	movs	r1, #4
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	2b00      	cmp	r3, #0
 8001040:	d071      	beq.n	8001126 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800104a:	e06c      	b.n	8001126 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001050:	f003 031c 	and.w	r3, r3, #28
 8001054:	2202      	movs	r2, #2
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d02e      	beq.n	80010be <HAL_DMA_IRQHandler+0xec>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d029      	beq.n	80010be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10b      	bne.n	8001090 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020a 	bic.w	r2, r2, #10
 8001086:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001094:	f003 021c 	and.w	r2, r3, #28
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	2102      	movs	r1, #2
 800109e:	fa01 f202 	lsl.w	r2, r1, r2
 80010a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d038      	beq.n	8001126 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80010bc:	e033      	b.n	8001126 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f003 031c 	and.w	r3, r3, #28
 80010c6:	2208      	movs	r2, #8
 80010c8:	409a      	lsls	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d02a      	beq.n	8001128 <HAL_DMA_IRQHandler+0x156>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d025      	beq.n	8001128 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 020e 	bic.w	r2, r2, #14
 80010ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f0:	f003 021c 	and.w	r2, r3, #28
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001126:	bf00      	nop
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800113e:	b2db      	uxtb	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f003 021c 	and.w	r2, r3, #28
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b10      	cmp	r3, #16
 800117c:	d108      	bne.n	8001190 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800118e:	e007      	b.n	80011a0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	60da      	str	r2, [r3, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e17f      	b.n	80014bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8171 	beq.w	80014b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d005      	beq.n	80011ec <HAL_GPIO_Init+0x40>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d130      	bne.n	800124e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001222:	2201      	movs	r2, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f003 0201 	and.w	r2, r3, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b03      	cmp	r3, #3
 8001258:	d118      	bne.n	800128c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80ac 	beq.w	80014b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <HAL_GPIO_Init+0x330>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <HAL_GPIO_Init+0x330>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6613      	str	r3, [r2, #96]	@ 0x60
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <HAL_GPIO_Init+0x330>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001376:	4a5a      	ldr	r2, [pc, #360]	@ (80014e0 <HAL_GPIO_Init+0x334>)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x242>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4f      	ldr	r2, [pc, #316]	@ (80014e4 <HAL_GPIO_Init+0x338>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x23e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4e      	ldr	r2, [pc, #312]	@ (80014e8 <HAL_GPIO_Init+0x33c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x23a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4d      	ldr	r2, [pc, #308]	@ (80014ec <HAL_GPIO_Init+0x340>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x236>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	@ (80014f0 <HAL_GPIO_Init+0x344>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x232>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4b      	ldr	r2, [pc, #300]	@ (80014f4 <HAL_GPIO_Init+0x348>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x22e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <HAL_GPIO_Init+0x34c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x22a>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013ee:	2300      	movs	r3, #0
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001400:	4937      	ldr	r1, [pc, #220]	@ (80014e0 <HAL_GPIO_Init+0x334>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_GPIO_Init+0x350>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001432:	4a32      	ldr	r2, [pc, #200]	@ (80014fc <HAL_GPIO_Init+0x350>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <HAL_GPIO_Init+0x350>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800145c:	4a27      	ldr	r2, [pc, #156]	@ (80014fc <HAL_GPIO_Init+0x350>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <HAL_GPIO_Init+0x350>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001486:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <HAL_GPIO_Init+0x350>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_GPIO_Init+0x350>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b0:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <HAL_GPIO_Init+0x350>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f ae78 	bne.w	80011bc <HAL_GPIO_Init+0x10>
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000
 80014e4:	48000400 	.word	0x48000400
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000c00 	.word	0x48000c00
 80014f0:	48001000 	.word	0x48001000
 80014f4:	48001400 	.word	0x48001400
 80014f8:	48001800 	.word	0x48001800
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e08d      	b.n	800162e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff f8ea 	bl	8000700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2224      	movs	r2, #36	@ 0x24
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001550:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001560:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	e006      	b.n	8001588 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001586:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d108      	bne.n	80015a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	e007      	b.n	80015b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69d9      	ldr	r1, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	460b      	mov	r3, r1
 8001646:	817b      	strh	r3, [r7, #10]
 8001648:	4613      	mov	r3, r2
 800164a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800164c:	4b90      	ldr	r3, [pc, #576]	@ (8001890 <HAL_I2C_Master_Seq_Transmit_DMA+0x258>)
 800164e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 8135 	bne.w	80018cc <HAL_I2C_Master_Seq_Transmit_DMA+0x294>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_I2C_Master_Seq_Transmit_DMA+0x38>
 800166c:	2302      	movs	r3, #2
 800166e:	e12e      	b.n	80018ce <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2221      	movs	r2, #33	@ 0x21
 800167c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2210      	movs	r2, #16
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	893a      	ldrh	r2, [r7, #8]
 8001698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001894 <HAL_I2C_Master_Seq_Transmit_DMA+0x25c>)
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2bff      	cmp	r3, #255	@ 0xff
 80016ae:	d906      	bls.n	80016be <HAL_I2C_Master_Seq_Transmit_DMA+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	22ff      	movs	r2, #255	@ 0xff
 80016b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80016b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	e007      	b.n	80016ce <HAL_I2C_Master_Seq_Transmit_DMA+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d021      	beq.n	800171a <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
 80016d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016e2:	d11a      	bne.n	800171a <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fe:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	2b11      	cmp	r3, #17
 8001720:	d10e      	bne.n	8001740 <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8001722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001724:	2baa      	cmp	r3, #170	@ 0xaa
 8001726:	d003      	beq.n	8001730 <HAL_I2C_Master_Seq_Transmit_DMA+0xf8>
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 800172e:	d101      	bne.n	8001734 <HAL_I2C_Master_Seq_Transmit_DMA+0xfc>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_I2C_Master_Seq_Transmit_DMA+0xfe>
 8001734:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	e00a      	b.n	8001756 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f001 fe93 	bl	800346c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	2bff      	cmp	r3, #255	@ 0xff
 800174e:	d802      	bhi.n	8001756 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
      {
        xfermode = hi2c->XferOptions;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8084 	beq.w	8001868 <HAL_I2C_Master_Seq_Transmit_DMA+0x230>
    {
      if (hi2c->hdmatx != NULL)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001764:	2b00      	cmp	r3, #0
 8001766:	d022      	beq.n	80017ae <HAL_I2C_Master_Seq_Transmit_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176c:	4a4a      	ldr	r2, [pc, #296]	@ (8001898 <HAL_I2C_Master_Seq_Transmit_DMA+0x260>)
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001774:	4a49      	ldr	r2, [pc, #292]	@ (800189c <HAL_I2C_Master_Seq_Transmit_DMA+0x264>)
 8001776:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001784:	2200      	movs	r2, #0
 8001786:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001798:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800179e:	f7ff fb77 	bl	8000e90 <HAL_DMA_Start_IT>
 80017a2:	4603      	mov	r3, r0
 80017a4:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d149      	bne.n	8001840 <HAL_I2C_Master_Seq_Transmit_DMA+0x208>
 80017ac:	e013      	b.n	80017d6 <HAL_I2C_Master_Seq_Transmit_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07b      	b.n	80018ce <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      {
        /* Send Slave Address and set NBYTES to write */
        if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 80017d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ac>
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017e2:	d109      	bne.n	80017f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	8979      	ldrh	r1, [r7, #10]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f001 fd27 	bl	8003244 <I2C_TransferConfig>
 80017f6:	e009      	b.n	800180c <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
        }
        else
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	8979      	ldrh	r1, [r7, #10]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f001 fd1c 	bl	8003244 <I2C_TransferConfig>
        }

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001826:	2110      	movs	r1, #16
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f001 fd3d 	bl	80032a8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e043      	b.n	80018c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2220      	movs	r2, #32
 8001844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x268>)
 800186c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 800186e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_I2C_Master_Seq_Transmit_DMA+0x244>
 8001874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800187a:	d113      	bne.n	80018a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f001 fcdb 	bl	8003244 <I2C_TransferConfig>
 800188e:	e013      	b.n	80018b8 <HAL_I2C_Master_Seq_Transmit_DMA+0x280>
 8001890:	80002000 	.word	0x80002000
 8001894:	080020bb 	.word	0x080020bb
 8001898:	08003093 	.word	0x08003093
 800189c:	080031db 	.word	0x080031db
 80018a0:	08001c5f 	.word	0x08001c5f
      }
      else
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	8979      	ldrh	r1, [r7, #10]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f001 fcc6 	bl	8003244 <I2C_TransferConfig>
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018c0:	2101      	movs	r1, #1
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f001 fcf0 	bl	80032a8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	e000      	b.n	80018ce <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
  }
  else
  {
    return HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
  }
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop

080018d8 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 80018ec:	4b77      	ldr	r3, [pc, #476]	@ (8001acc <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 80018ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b20      	cmp	r3, #32
 80018fa:	f040 80e1 	bne.w	8001ac0 <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_I2C_Master_Seq_Receive_DMA+0x34>
 8001908:	2302      	movs	r3, #2
 800190a:	e0da      	b.n	8001ac2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2222      	movs	r2, #34	@ 0x22
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2210      	movs	r2, #16
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	893a      	ldrh	r2, [r7, #8]
 8001934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a64      	ldr	r2, [pc, #400]	@ (8001ad0 <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
 8001940:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	2bff      	cmp	r3, #255	@ 0xff
 800194a:	d906      	bls.n	800195a <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	22ff      	movs	r2, #255	@ 0xff
 8001950:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001952:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	e007      	b.n	800196a <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	2b12      	cmp	r3, #18
 8001970:	d10e      	bne.n	8001990 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8001972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001974:	2baa      	cmp	r3, #170	@ 0xaa
 8001976:	d003      	beq.n	8001980 <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 800197e:	d101      	bne.n	8001984 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
 8001984:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	e00a      	b.n	80019a6 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f001 fd6b 	bl	800346c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199a:	b29b      	uxth	r3, r3
 800199c:	2bff      	cmp	r3, #255	@ 0xff
 800199e:	d802      	bhi.n	80019a6 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d070      	beq.n	8001a90 <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d020      	beq.n	80019f8 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ba:	4a46      	ldr	r2, [pc, #280]	@ (8001ad4 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c2:	4a45      	ldr	r2, [pc, #276]	@ (8001ad8 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ca:	2200      	movs	r2, #0
 80019cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d2:	2200      	movs	r2, #0
 80019d4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3324      	adds	r3, #36	@ 0x24
 80019e0:	4619      	mov	r1, r3
 80019e2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80019e8:	f7ff fa52 	bl	8000e90 <HAL_DMA_Start_IT>
 80019ec:	4603      	mov	r3, r0
 80019ee:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d138      	bne.n	8001a68 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
 80019f6:	e013      	b.n	8001a20 <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e050      	b.n	8001ac2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	8979      	ldrh	r1, [r7, #10]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f001 fc08 	bl	8003244 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a4e:	2110      	movs	r1, #16
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f001 fc29 	bl	80032a8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e029      	b.n	8001abc <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	f043 0210 	orr.w	r2, r3, #16
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e018      	b.n	8001ac2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
 8001a94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f001 fbcc 	bl	8003244 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f001 fbf6 	bl	80032a8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	80002400 	.word	0x80002400
 8001ad0:	080020bb 	.word	0x080020bb
 8001ad4:	08003129 	.word	0x08003129
 8001ad8:	080031db 	.word	0x080031db
 8001adc:	08001c5f 	.word	0x08001c5f

08001ae0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00f      	beq.n	8001b56 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b54:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00f      	beq.n	8001b80 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	f043 0208 	orr.w	r2, r3, #8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b7e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00f      	beq.n	8001baa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	f043 0202 	orr.w	r2, r3, #2
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 030b 	and.w	r3, r3, #11
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f001 f92d 	bl	8002e1c <I2C_ITError>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b088      	sub	sp, #32
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <I2C_Master_ISR_IT+0x1e>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e121      	b.n	8001ec0 <I2C_Master_ISR_IT+0x262>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f001 f9cc 	bl	800304a <I2C_Flush_TXDR>
 8001cb2:	e0f2      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d022      	beq.n	8001d04 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01d      	beq.n	8001d04 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d02:	e0ca      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d128      	bne.n	8001d60 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01e      	beq.n	8001d60 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80b6 	beq.w	8001e9a <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8001d5e:	e09c      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06a      	beq.n	8001e40 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d065      	beq.n	8001e40 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d04e      	beq.n	8001e1c <I2C_Master_ISR_IT+0x1be>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d14a      	bne.n	8001e1c <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d92:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d91c      	bls.n	8001dd8 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d103      	bne.n	8001dba <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001db8:	e002      	b.n	8001dc0 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	22ff      	movs	r2, #255	@ 0xff
 8001dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	8a79      	ldrh	r1, [r7, #18]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f001 fa37 	bl	8003244 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd6:	e032      	b.n	8001e3e <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001dea:	d00b      	beq.n	8001e04 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001df6:	8a79      	ldrh	r1, [r7, #18]
 8001df8:	2000      	movs	r0, #0
 8001dfa:	9000      	str	r0, [sp, #0]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f001 fa21 	bl	8003244 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e02:	e01c      	b.n	8001e3e <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	8a79      	ldrh	r1, [r7, #18]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f001 fa15 	bl	8003244 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1a:	e010      	b.n	8001e3e <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e2a:	d003      	beq.n	8001e34 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fcdc 	bl	80027ea <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e32:	e032      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e34:	2140      	movs	r1, #64	@ 0x40
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fff0 	bl	8002e1c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e3c:	e02d      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
 8001e3e:	e02c      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d027      	beq.n	8001e9a <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d022      	beq.n	8001e9a <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d119      	bne.n	8001e92 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e6c:	d015      	beq.n	8001e9a <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e76:	d108      	bne.n	8001e8a <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	e007      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fcad 	bl	80027ea <I2C_ITMasterSeqCplt>
 8001e90:	e003      	b.n	8001e9a <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e92:	2140      	movs	r1, #64	@ 0x40
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 ffc1 	bl	8002e1c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001eae:	6979      	ldr	r1, [r7, #20]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fd33 	bl	800291c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <I2C_Slave_ISR_IT+0x24>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e0e2      	b.n	80020b2 <I2C_Slave_ISR_IT+0x1ea>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fdce 	bl	8002aac <I2C_ITSlaveCplt>
 8001f10:	e0ca      	b.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d04b      	beq.n	8001fb4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d046      	beq.n	8001fb4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d128      	bne.n	8001f82 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b28      	cmp	r3, #40	@ 0x28
 8001f3a:	d108      	bne.n	8001f4e <I2C_Slave_ISR_IT+0x86>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f42:	d104      	bne.n	8001f4e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f44:	6939      	ldr	r1, [r7, #16]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 ff14 	bl	8002d74 <I2C_ITListenCplt>
 8001f4c:	e031      	b.n	8001fb2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b29      	cmp	r3, #41	@ 0x29
 8001f58:	d10e      	bne.n	8001f78 <I2C_Slave_ISR_IT+0xb0>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f60:	d00a      	beq.n	8001f78 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2210      	movs	r2, #16
 8001f68:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f001 f86d 	bl	800304a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fc77 	bl	8002864 <I2C_ITSlaveSeqCplt>
 8001f76:	e01c      	b.n	8001fb2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001f80:	e08f      	b.n	80020a2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2210      	movs	r2, #16
 8001f88:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f043 0204 	orr.w	r2, r3, #4
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <I2C_Slave_ISR_IT+0xdc>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa2:	d17e      	bne.n	80020a2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 ff36 	bl	8002e1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001fb0:	e077      	b.n	80020a2 <I2C_Slave_ISR_IT+0x1da>
 8001fb2:	e076      	b.n	80020a2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d02f      	beq.n	800201e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d02a      	beq.n	800201e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d018      	beq.n	8002004 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d14b      	bne.n	80020a6 <I2C_Slave_ISR_IT+0x1de>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002014:	d047      	beq.n	80020a6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fc24 	bl	8002864 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800201c:	e043      	b.n	80020a6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002032:	6939      	ldr	r1, [r7, #16]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fb54 	bl	80026e2 <I2C_ITAddrCplt>
 800203a:	e035      	b.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d030      	beq.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02b      	beq.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d018      	beq.n	800208c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	@ 0x28
 800208a:	e00d      	b.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002092:	d002      	beq.n	800209a <I2C_Slave_ISR_IT+0x1d2>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fbe2 	bl	8002864 <I2C_ITSlaveSeqCplt>
 80020a0:	e002      	b.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80020a2:	bf00      	nop
 80020a4:	e000      	b.n	80020a8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80020a6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b088      	sub	sp, #32
 80020be:	af02      	add	r7, sp, #8
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <I2C_Master_ISR_DMA+0x1a>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e0e7      	b.n	80022a4 <I2C_Master_ISR_DMA+0x1ea>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d011      	beq.n	8002114 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2210      	movs	r2, #16
 80020f6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	f043 0204 	orr.w	r2, r3, #4
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002104:	2120      	movs	r1, #32
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f001 f8ce 	bl	80032a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 ff9c 	bl	800304a <I2C_Flush_TXDR>
 8002112:	e0c2      	b.n	800229a <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211a:	2b00      	cmp	r3, #0
 800211c:	d07f      	beq.n	800221e <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002124:	2b00      	cmp	r3, #0
 8002126:	d07a      	beq.n	800221e <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002136:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d05c      	beq.n	80021fc <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	b29b      	uxth	r3, r3
 800214a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800214e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2bff      	cmp	r3, #255	@ 0xff
 8002158:	d914      	bls.n	8002184 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d103      	bne.n	8002176 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002174:	e002      	b.n	800217c <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	22ff      	movs	r2, #255	@ 0xff
 800217a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800217c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e010      	b.n	80021a6 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002196:	d003      	beq.n	80021a0 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e002      	b.n	80021a6 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80021a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021a4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	8a79      	ldrh	r1, [r7, #18]
 80021ae:	2300      	movs	r3, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f001 f845 	bl	8003244 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b22      	cmp	r3, #34	@ 0x22
 80021d6:	d108      	bne.n	80021ea <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80021e8:	e057      	b.n	800229a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80021fa:	e04e      	b.n	800229a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800220a:	d003      	beq.n	8002214 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 faec 	bl	80027ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002212:	e042      	b.n	800229a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002214:	2140      	movs	r1, #64	@ 0x40
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fe00 	bl	8002e1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800221c:	e03d      	b.n	800229a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002224:	2b00      	cmp	r3, #0
 8002226:	d028      	beq.n	800227a <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d119      	bne.n	8002270 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800224a:	d025      	beq.n	8002298 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002254:	d108      	bne.n	8002268 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002264:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002266:	e017      	b.n	8002298 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fabe 	bl	80027ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800226e:	e013      	b.n	8002298 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002270:	2140      	movs	r1, #64	@ 0x40
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fdd2 	bl	8002e1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002278:	e00e      	b.n	8002298 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fb43 	bl	800291c <I2C_ITMasterCplt>
 8002296:	e000      	b.n	800229a <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8002298:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80022b8:	4b90      	ldr	r3, [pc, #576]	@ (80024fc <I2C_Mem_ISR_DMA+0x250>)
 80022ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <I2C_Mem_ISR_DMA+0x1e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e12f      	b.n	800252a <I2C_Mem_ISR_DMA+0x27e>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d016      	beq.n	800230a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2210      	movs	r2, #16
 80022ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80022fa:	2120      	movs	r1, #32
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 ffd3 	bl	80032a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fea1 	bl	800304a <I2C_Flush_TXDR>
 8002308:	e10a      	b.n	8002520 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f04f 32ff 	mov.w	r2, #4294967295
 800232e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002330:	e0f6      	b.n	8002520 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002338:	2b00      	cmp	r3, #0
 800233a:	d06d      	beq.n	8002418 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002342:	2b00      	cmp	r3, #0
 8002344:	d068      	beq.n	8002418 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002346:	2101      	movs	r1, #1
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f001 f831 	bl	80033b0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800234e:	2110      	movs	r1, #16
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 ffa9 	bl	80032a8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d056      	beq.n	800240e <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2bff      	cmp	r3, #255	@ 0xff
 8002368:	d91e      	bls.n	80023a8 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d103      	bne.n	8002386 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002384:	e002      	b.n	800238c <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	22ff      	movs	r2, #255	@ 0xff
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002390:	b299      	uxth	r1, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002396:	b2da      	uxtb	r2, r3
 8002398:	2300      	movs	r3, #0
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 ff4f 	bl	8003244 <I2C_TransferConfig>
 80023a6:	e011      	b.n	80023cc <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	b299      	uxth	r1, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	2300      	movs	r3, #0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 ff3c 	bl	8003244 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b22      	cmp	r3, #34	@ 0x22
 80023e8:	d108      	bne.n	80023fc <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80023fa:	e091      	b.n	8002520 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800240a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800240c:	e088      	b.n	8002520 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800240e:	2140      	movs	r1, #64	@ 0x40
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fd03 	bl	8002e1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002416:	e083      	b.n	8002520 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d070      	beq.n	8002504 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002428:	2b00      	cmp	r3, #0
 800242a:	d06b      	beq.n	8002504 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800242c:	2101      	movs	r1, #1
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 ffbe 	bl	80033b0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002434:	2110      	movs	r1, #16
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 ff36 	bl	80032a8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b22      	cmp	r3, #34	@ 0x22
 8002446:	d101      	bne.n	800244c <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <I2C_Mem_ISR_DMA+0x254>)
 800244a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2bff      	cmp	r3, #255	@ 0xff
 8002454:	d91e      	bls.n	8002494 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d103      	bne.n	8002472 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002470:	e002      	b.n	8002478 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	22ff      	movs	r2, #255	@ 0xff
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247c:	b299      	uxth	r1, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002482:	b2da      	uxtb	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fed9 	bl	8003244 <I2C_TransferConfig>
 8002492:	e011      	b.n	80024b8 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	b299      	uxth	r1, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fec6 	bl	8003244 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b22      	cmp	r3, #34	@ 0x22
 80024d4:	d108      	bne.n	80024e8 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024e4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024e6:	e01b      	b.n	8002520 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024f6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024f8:	e012      	b.n	8002520 <I2C_Mem_ISR_DMA+0x274>
 80024fa:	bf00      	nop
 80024fc:	80002000 	.word	0x80002000
 8002500:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f9fe 	bl	800291c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop

08002534 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <I2C_Slave_ISR_DMA+0x24>
 8002554:	2302      	movs	r3, #2
 8002556:	e0c0      	b.n	80026da <I2C_Slave_ISR_DMA+0x1a6>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fa98 	bl	8002aac <I2C_ITSlaveCplt>
 800257c:	e0a8      	b.n	80026d0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8095 	beq.w	80026b4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 808f 	beq.w	80026b4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d07d      	beq.n	80026a6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80025c8:	2301      	movs	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00c      	beq.n	80025ee <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d128      	bne.n	8002646 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b28      	cmp	r3, #40	@ 0x28
 80025fe:	d108      	bne.n	8002612 <I2C_Slave_ISR_DMA+0xde>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002606:	d104      	bne.n	8002612 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fbb2 	bl	8002d74 <I2C_ITListenCplt>
 8002610:	e048      	b.n	80026a4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b29      	cmp	r3, #41	@ 0x29
 800261c:	d10e      	bne.n	800263c <I2C_Slave_ISR_DMA+0x108>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002624:	d00a      	beq.n	800263c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2210      	movs	r2, #16
 800262c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fd0b 	bl	800304a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f915 	bl	8002864 <I2C_ITSlaveSeqCplt>
 800263a:	e033      	b.n	80026a4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2210      	movs	r2, #16
 8002642:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002644:	e034      	b.n	80026b0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2210      	movs	r2, #16
 800264c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f043 0204 	orr.w	r2, r3, #4
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002660:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <I2C_Slave_ISR_DMA+0x13c>
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800266e:	d11f      	bne.n	80026b0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b21      	cmp	r3, #33	@ 0x21
 8002674:	d002      	beq.n	800267c <I2C_Slave_ISR_DMA+0x148>
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b29      	cmp	r3, #41	@ 0x29
 800267a:	d103      	bne.n	8002684 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2221      	movs	r2, #33	@ 0x21
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
 8002682:	e008      	b.n	8002696 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b22      	cmp	r3, #34	@ 0x22
 8002688:	d002      	beq.n	8002690 <I2C_Slave_ISR_DMA+0x15c>
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b2a      	cmp	r3, #42	@ 0x2a
 800268e:	d102      	bne.n	8002696 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2222      	movs	r2, #34	@ 0x22
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	4619      	mov	r1, r3
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fbbd 	bl	8002e1c <I2C_ITError>
      if (treatdmanack == 1U)
 80026a2:	e005      	b.n	80026b0 <I2C_Slave_ISR_DMA+0x17c>
 80026a4:	e004      	b.n	80026b0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2210      	movs	r2, #16
 80026ac:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026ae:	e00f      	b.n	80026d0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80026b0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026b2:	e00d      	b.n	80026d0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f809 	bl	80026e2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80026f8:	2b28      	cmp	r3, #40	@ 0x28
 80026fa:	d16a      	bne.n	80027d2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	b29b      	uxth	r3, r3
 8002716:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800271a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002728:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002736:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d138      	bne.n	80027b2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002740:	897b      	ldrh	r3, [r7, #10]
 8002742:	09db      	lsrs	r3, r3, #7
 8002744:	b29a      	uxth	r2, r3
 8002746:	89bb      	ldrh	r3, [r7, #12]
 8002748:	4053      	eors	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	f003 0306 	and.w	r3, r3, #6
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11c      	bne.n	800278e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002754:	897b      	ldrh	r3, [r7, #10]
 8002756:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002766:	2b02      	cmp	r3, #2
 8002768:	d13b      	bne.n	80027e2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2208      	movs	r2, #8
 8002776:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002780:	89ba      	ldrh	r2, [r7, #12]
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	4619      	mov	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fa33 	bl	8001bf2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800278c:	e029      	b.n	80027e2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800278e:	893b      	ldrh	r3, [r7, #8]
 8002790:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002792:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fe0a 	bl	80033b0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027a4:	89ba      	ldrh	r2, [r7, #12]
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fa21 	bl	8001bf2 <HAL_I2C_AddrCallback>
}
 80027b0:	e017      	b.n	80027e2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fdfa 	bl	80033b0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027c4:	89ba      	ldrh	r2, [r7, #12]
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fa11 	bl	8001bf2 <HAL_I2C_AddrCallback>
}
 80027d0:	e007      	b.n	80027e2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2208      	movs	r2, #8
 80027d8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b21      	cmp	r3, #33	@ 0x21
 8002804:	d115      	bne.n	8002832 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2211      	movs	r2, #17
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800281a:	2101      	movs	r1, #1
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fdc7 	bl	80033b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd fd60 	bl	80002f0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002830:	e014      	b.n	800285c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2212      	movs	r2, #18
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002846:	2102      	movs	r1, #2
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fdb1 	bl	80033b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fd fd60 	bl	800031c <HAL_I2C_MasterRxCpltCallback>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e00c      	b.n	80028b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b29      	cmp	r3, #41	@ 0x29
 80028bc:	d112      	bne.n	80028e4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2228      	movs	r2, #40	@ 0x28
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2221      	movs	r2, #33	@ 0x21
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028cc:	2101      	movs	r1, #1
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fd6e 	bl	80033b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff f974 	bl	8001bca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028e2:	e017      	b.n	8002914 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ee:	d111      	bne.n	8002914 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2228      	movs	r2, #40	@ 0x28
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2222      	movs	r2, #34	@ 0x22
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028fe:	2102      	movs	r1, #2
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fd55 	bl	80033b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff f965 	bl	8001bde <HAL_I2C_SlaveRxCpltCallback>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2220      	movs	r2, #32
 8002930:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b21      	cmp	r3, #33	@ 0x21
 800293c:	d107      	bne.n	800294e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800293e:	2101      	movs	r1, #1
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fd35 	bl	80033b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2211      	movs	r2, #17
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
 800294c:	e00c      	b.n	8002968 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b22      	cmp	r3, #34	@ 0x22
 8002958:	d106      	bne.n	8002968 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800295a:	2102      	movs	r1, #2
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fd27 	bl	80033b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2212      	movs	r2, #18
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa4 <I2C_ITMasterCplt+0x188>)
 8002974:	400b      	ands	r3, r1
 8002976:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a49      	ldr	r2, [pc, #292]	@ (8002aa8 <I2C_ITMasterCplt+0x18c>)
 8002982:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	f043 0204 	orr.w	r2, r3, #4
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b60      	cmp	r3, #96	@ 0x60
 80029ac:	d10a      	bne.n	80029c4 <I2C_ITMasterCplt+0xa8>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80029c2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb40 	bl	800304a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b60      	cmp	r3, #96	@ 0x60
 80029da:	d002      	beq.n	80029e2 <I2C_ITMasterCplt+0xc6>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fa17 	bl	8002e1c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029ee:	e054      	b.n	8002a9a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b21      	cmp	r3, #33	@ 0x21
 80029fa:	d124      	bne.n	8002a46 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b40      	cmp	r3, #64	@ 0x40
 8002a14:	d10b      	bne.n	8002a2e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff f8fb 	bl	8001c22 <HAL_I2C_MemTxCpltCallback>
}
 8002a2c:	e035      	b.n	8002a9a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fc56 	bl	80002f0 <HAL_I2C_MasterTxCpltCallback>
}
 8002a44:	e029      	b.n	8002a9a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b22      	cmp	r3, #34	@ 0x22
 8002a50:	d123      	bne.n	8002a9a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b40      	cmp	r3, #64	@ 0x40
 8002a6a:	d10b      	bne.n	8002a84 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff f8da 	bl	8001c36 <HAL_I2C_MemRxCpltCallback>
}
 8002a82:	e00a      	b.n	8002a9a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fd fc41 	bl	800031c <HAL_I2C_MasterRxCpltCallback>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	fe00e800 	.word	0xfe00e800
 8002aa8:	ffff0000 	.word	0xffff0000

08002aac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ace:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	2b21      	cmp	r3, #33	@ 0x21
 8002adc:	d002      	beq.n	8002ae4 <I2C_ITSlaveCplt+0x38>
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	2b29      	cmp	r3, #41	@ 0x29
 8002ae2:	d108      	bne.n	8002af6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ae4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fc61 	bl	80033b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2221      	movs	r2, #33	@ 0x21
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002af4:	e019      	b.n	8002b2a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002af6:	7afb      	ldrb	r3, [r7, #11]
 8002af8:	2b22      	cmp	r3, #34	@ 0x22
 8002afa:	d002      	beq.n	8002b02 <I2C_ITSlaveCplt+0x56>
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b00:	d108      	bne.n	8002b14 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b02:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fc52 	bl	80033b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2222      	movs	r2, #34	@ 0x22
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b12:	e00a      	b.n	8002b2a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002b14:	7afb      	ldrb	r3, [r7, #11]
 8002b16:	2b28      	cmp	r3, #40	@ 0x28
 8002b18:	d107      	bne.n	8002b2a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002b1a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fc46 	bl	80033b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b38:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b89      	ldr	r3, [pc, #548]	@ (8002d6c <I2C_ITSlaveCplt+0x2c0>)
 8002b46:	400b      	ands	r3, r1
 8002b48:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa7d 	bl	800304a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d013      	beq.n	8002b82 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01f      	beq.n	8002bb2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b80:	e017      	b.n	8002bb2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00c      	beq.n	8002bfe <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d049      	beq.n	8002cb2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d044      	beq.n	8002cb2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d128      	bne.n	8002c84 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b28      	cmp	r3, #40	@ 0x28
 8002c3c:	d108      	bne.n	8002c50 <I2C_ITSlaveCplt+0x1a4>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c44:	d104      	bne.n	8002c50 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c46:	6979      	ldr	r1, [r7, #20]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f893 	bl	8002d74 <I2C_ITListenCplt>
 8002c4e:	e030      	b.n	8002cb2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b29      	cmp	r3, #41	@ 0x29
 8002c5a:	d10e      	bne.n	8002c7a <I2C_ITSlaveCplt+0x1ce>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c62:	d00a      	beq.n	8002c7a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f9ec 	bl	800304a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fdf6 	bl	8002864 <I2C_ITSlaveSeqCplt>
 8002c78:	e01b      	b.n	8002cb2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2210      	movs	r2, #16
 8002c80:	61da      	str	r2, [r3, #28]
 8002c82:	e016      	b.n	8002cb2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2210      	movs	r2, #16
 8002c8a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <I2C_ITSlaveCplt+0x1fa>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ca4:	d105      	bne.n	8002cb2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8b5 	bl	8002e1c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8a4 	bl	8002e1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b28      	cmp	r3, #40	@ 0x28
 8002cde:	d141      	bne.n	8002d64 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ce0:	6979      	ldr	r1, [r7, #20]
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f846 	bl	8002d74 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ce8:	e03c      	b.n	8002d64 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cf2:	d014      	beq.n	8002d1e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fdb5 	bl	8002864 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d70 <I2C_ITSlaveCplt+0x2c4>)
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe ff79 	bl	8001c0e <HAL_I2C_ListenCpltCallback>
}
 8002d1c:	e022      	b.n	8002d64 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b22      	cmp	r3, #34	@ 0x22
 8002d28:	d10e      	bne.n	8002d48 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe ff4c 	bl	8001bde <HAL_I2C_SlaveRxCpltCallback>
}
 8002d46:	e00d      	b.n	8002d64 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe ff33 	bl	8001bca <HAL_I2C_SlaveTxCpltCallback>
}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	fe00e800 	.word	0xfe00e800
 8002d70:	ffff0000 	.word	0xffff0000

08002d74 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a25      	ldr	r2, [pc, #148]	@ (8002e18 <I2C_ITListenCplt+0xa4>)
 8002d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d022      	beq.n	8002df0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002df0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fadb 	bl	80033b0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2210      	movs	r2, #16
 8002e00:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe feff 	bl	8001c0e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	ffff0000 	.word	0xffff0000

08002e1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff0 <I2C_ITError+0x1d4>)
 8002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b28      	cmp	r3, #40	@ 0x28
 8002e52:	d005      	beq.n	8002e60 <I2C_ITError+0x44>
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b29      	cmp	r3, #41	@ 0x29
 8002e58:	d002      	beq.n	8002e60 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e5e:	d10b      	bne.n	8002e78 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e60:	2103      	movs	r1, #3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 faa4 	bl	80033b0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2228      	movs	r2, #40	@ 0x28
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a60      	ldr	r2, [pc, #384]	@ (8002ff4 <I2C_ITError+0x1d8>)
 8002e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e76:	e030      	b.n	8002eda <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e78:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fa97 	bl	80033b0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8e1 	bl	800304a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b60      	cmp	r3, #96	@ 0x60
 8002e92:	d01f      	beq.n	8002ed4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d114      	bne.n	8002ed4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d109      	bne.n	8002ecc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d039      	beq.n	8002f5c <I2C_ITError+0x140>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b11      	cmp	r3, #17
 8002eec:	d002      	beq.n	8002ef4 <I2C_ITError+0xd8>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b21      	cmp	r3, #33	@ 0x21
 8002ef2:	d133      	bne.n	8002f5c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f02:	d107      	bne.n	8002f14 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe f909 	bl	8001130 <HAL_DMA_GetState>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d017      	beq.n	8002f54 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	4a33      	ldr	r2, [pc, #204]	@ (8002ff8 <I2C_ITError+0x1dc>)
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe f809 	bl	8000f50 <HAL_DMA_Abort_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d04d      	beq.n	8002fe0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f52:	e045      	b.n	8002fe0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f851 	bl	8002ffc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f5a:	e041      	b.n	8002fe0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d039      	beq.n	8002fd8 <I2C_ITError+0x1bc>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b12      	cmp	r3, #18
 8002f68:	d002      	beq.n	8002f70 <I2C_ITError+0x154>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b22      	cmp	r3, #34	@ 0x22
 8002f6e:	d133      	bne.n	8002fd8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f7e:	d107      	bne.n	8002f90 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f8cb 	bl	8001130 <HAL_DMA_GetState>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d017      	beq.n	8002fd0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	4a14      	ldr	r2, [pc, #80]	@ (8002ff8 <I2C_ITError+0x1dc>)
 8002fa6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd ffcb 	bl	8000f50 <HAL_DMA_Abort_IT>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fce:	e009      	b.n	8002fe4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f813 	bl	8002ffc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fd6:	e005      	b.n	8002fe4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f80f 	bl	8002ffc <I2C_TreatErrorCallback>
  }
}
 8002fde:	e002      	b.n	8002fe6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe4:	bf00      	nop
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	ffff0000 	.word	0xffff0000
 8002ff4:	08001ec9 	.word	0x08001ec9
 8002ff8:	08003209 	.word	0x08003209

08002ffc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b60      	cmp	r3, #96	@ 0x60
 800300e:	d10e      	bne.n	800302e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fe0f 	bl	8001c4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800302c:	e009      	b.n	8003042 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd f94d 	bl	80002dc <HAL_I2C_ErrorCallback>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d103      	bne.n	8003068 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d007      	beq.n	8003086 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	619a      	str	r2, [r3, #24]
  }
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030ae:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80030ba:	2120      	movs	r1, #32
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f8f3 	bl	80032a8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80030c2:	e02d      	b.n	8003120 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80030cc:	441a      	add	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2bff      	cmp	r3, #255	@ 0xff
 80030da:	d903      	bls.n	80030e4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	22ff      	movs	r2, #255	@ 0xff
 80030e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80030e2:	e004      	b.n	80030ee <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	4619      	mov	r1, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3328      	adds	r3, #40	@ 0x28
 80030fe:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003104:	f7fd fec4 	bl	8000e90 <HAL_DMA_Start_IT>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800310e:	2110      	movs	r1, #16
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff fe83 	bl	8002e1c <I2C_ITError>
}
 8003116:	e003      	b.n	8003120 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003118:	2140      	movs	r1, #64	@ 0x40
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8c4 	bl	80032a8 <I2C_Enable_IRQ>
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003144:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003150:	2120      	movs	r1, #32
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8a8 	bl	80032a8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003158:	e03b      	b.n	80031d2 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003162:	441a      	add	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2bff      	cmp	r3, #255	@ 0xff
 8003170:	d911      	bls.n	8003196 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d103      	bne.n	800318e <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800318c:	e008      	b.n	80031a0 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	22ff      	movs	r2, #255	@ 0xff
 8003192:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003194:	e004      	b.n	80031a0 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3324      	adds	r3, #36	@ 0x24
 80031aa:	4619      	mov	r1, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80031b6:	f7fd fe6b 	bl	8000e90 <HAL_DMA_Start_IT>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80031c0:	2110      	movs	r1, #16
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff fe2a 	bl	8002e1c <I2C_ITError>
}
 80031c8:	e003      	b.n	80031d2 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80031ca:	2140      	movs	r1, #64	@ 0x40
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f86b 	bl	80032a8 <I2C_Enable_IRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80031f8:	2110      	movs	r1, #16
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7ff fe0e 	bl	8002e1c <I2C_ITError>
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	2200      	movs	r2, #0
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003232:	2200      	movs	r2, #0
 8003234:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fee0 	bl	8002ffc <I2C_TreatErrorCallback>
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	4613      	mov	r3, r2
 8003254:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800325c:	7a7b      	ldrb	r3, [r7, #9]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003264:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	4313      	orrs	r3, r2
 800326e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003272:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	0d5b      	lsrs	r3, r3, #21
 800327e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003282:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <I2C_TransferConfig+0x60>)
 8003284:	430b      	orrs	r3, r1
 8003286:	43db      	mvns	r3, r3
 8003288:	ea02 0103 	and.w	r1, r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	03ff63ff 	.word	0x03ff63ff

080032a8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032bc:	4a39      	ldr	r2, [pc, #228]	@ (80033a4 <I2C_Enable_IRQ+0xfc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d032      	beq.n	8003328 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80032c6:	4a38      	ldr	r2, [pc, #224]	@ (80033a8 <I2C_Enable_IRQ+0x100>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d02d      	beq.n	8003328 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80032d0:	4a36      	ldr	r2, [pc, #216]	@ (80033ac <I2C_Enable_IRQ+0x104>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d028      	beq.n	8003328 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	da03      	bge.n	80032e6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80032e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80032f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003308:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d103      	bne.n	8003318 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003316:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	2b20      	cmp	r3, #32
 800331c:	d133      	bne.n	8003386 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f043 0320 	orr.w	r3, r3, #32
 8003324:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003326:	e02e      	b.n	8003386 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003328:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da03      	bge.n	8003338 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003336:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003348:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800335a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	2b10      	cmp	r3, #16
 8003360:	d103      	bne.n	800336a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003368:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	2b20      	cmp	r3, #32
 800336e:	d103      	bne.n	8003378 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003376:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003378:	887b      	ldrh	r3, [r7, #2]
 800337a:	2b40      	cmp	r3, #64	@ 0x40
 800337c:	d103      	bne.n	8003386 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003384:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	080020bb 	.word	0x080020bb
 80033a8:	08002535 	.word	0x08002535
 80033ac:	080022ad 	.word	0x080022ad

080033b0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00f      	beq.n	80033ea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80033d0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033de:	2b28      	cmp	r3, #40	@ 0x28
 80033e0:	d003      	beq.n	80033ea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80033e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00f      	beq.n	8003414 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80033fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003408:	2b28      	cmp	r3, #40	@ 0x28
 800340a:	d003      	beq.n	8003414 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003412:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003414:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da03      	bge.n	8003424 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003422:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	2b10      	cmp	r3, #16
 8003428:	d103      	bne.n	8003432 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003430:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	2b20      	cmp	r3, #32
 8003436:	d103      	bne.n	8003440 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f043 0320 	orr.w	r3, r3, #32
 800343e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003440:	887b      	ldrh	r3, [r7, #2]
 8003442:	2b40      	cmp	r3, #64	@ 0x40
 8003444:	d103      	bne.n	800344e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800344c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	43da      	mvns	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	400a      	ands	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	2baa      	cmp	r3, #170	@ 0xaa
 800347a:	d103      	bne.n	8003484 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003482:	e008      	b.n	8003496 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 800348c:	d103      	bne.n	8003496 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003494:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d138      	bne.n	800352a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e032      	b.n	800352c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2224      	movs	r2, #36	@ 0x24
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e000      	b.n	800352c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
  }
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b20      	cmp	r3, #32
 800354c:	d139      	bne.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003558:	2302      	movs	r3, #2
 800355a:	e033      	b.n	80035c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	@ 0x24
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800358a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035d4:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40007000 	.word	0x40007000

080035ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fa:	d130      	bne.n	800365e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fc:	4b23      	ldr	r3, [pc, #140]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003608:	d038      	beq.n	800367c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800360a:	4b20      	ldr	r3, [pc, #128]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003612:	4a1e      	ldr	r2, [pc, #120]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003614:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003618:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800361a:	4b1d      	ldr	r3, [pc, #116]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2232      	movs	r2, #50	@ 0x32
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	4a1b      	ldr	r2, [pc, #108]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	3301      	adds	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003630:	e002      	b.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3b01      	subs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003638:	4b14      	ldr	r3, [pc, #80]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003644:	d102      	bne.n	800364c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f2      	bne.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800364c:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003658:	d110      	bne.n	800367c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e00f      	b.n	800367e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800365e:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366a:	d007      	beq.n	800367c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800366c:	4b07      	ldr	r3, [pc, #28]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003674:	4a05      	ldr	r2, [pc, #20]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003676:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800367a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40007000 	.word	0x40007000
 8003690:	20000000 	.word	0x20000000
 8003694:	431bde83 	.word	0x431bde83

08003698 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e3ca      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036aa:	4b97      	ldr	r3, [pc, #604]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b4:	4b94      	ldr	r3, [pc, #592]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80e4 	beq.w	8003894 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_RCC_OscConfig+0x4a>
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	f040 808b 	bne.w	80037f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 8087 	bne.w	80037f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036e2:	4b89      	ldr	r3, [pc, #548]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_RCC_OscConfig+0x62>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e3a2      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1a      	ldr	r2, [r3, #32]
 80036fe:	4b82      	ldr	r3, [pc, #520]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_RCC_OscConfig+0x7c>
 800370a:	4b7f      	ldr	r3, [pc, #508]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003712:	e005      	b.n	8003720 <HAL_RCC_OscConfig+0x88>
 8003714:	4b7c      	ldr	r3, [pc, #496]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003720:	4293      	cmp	r3, r2
 8003722:	d223      	bcs.n	800376c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fd1d 	bl	8004168 <RCC_SetFlashLatencyFromMSIRange>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e383      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003738:	4b73      	ldr	r3, [pc, #460]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a72      	ldr	r2, [pc, #456]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800373e:	f043 0308 	orr.w	r3, r3, #8
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b70      	ldr	r3, [pc, #448]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	496d      	ldr	r1, [pc, #436]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003756:	4b6c      	ldr	r3, [pc, #432]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	4968      	ldr	r1, [pc, #416]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
 800376a:	e025      	b.n	80037b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800376c:	4b66      	ldr	r3, [pc, #408]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a65      	ldr	r2, [pc, #404]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003772:	f043 0308 	orr.w	r3, r3, #8
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b63      	ldr	r3, [pc, #396]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4960      	ldr	r1, [pc, #384]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378a:	4b5f      	ldr	r3, [pc, #380]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	495b      	ldr	r1, [pc, #364]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fcdd 	bl	8004168 <RCC_SetFlashLatencyFromMSIRange>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e343      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037b8:	f000 fc4a 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b52      	ldr	r3, [pc, #328]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	4950      	ldr	r1, [pc, #320]	@ (800390c <HAL_RCC_OscConfig+0x274>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003910 <HAL_RCC_OscConfig+0x278>)
 80037d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003914 <HAL_RCC_OscConfig+0x27c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd f931 	bl	8000a44 <HAL_InitTick>
 80037e2:	4603      	mov	r3, r0
 80037e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d052      	beq.n	8003892 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	e327      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d032      	beq.n	800385e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037f8:	4b43      	ldr	r3, [pc, #268]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a42      	ldr	r2, [pc, #264]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003804:	f7fd f96e 	bl	8000ae4 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800380c:	f7fd f96a 	bl	8000ae4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e310      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800381e:	4b3a      	ldr	r3, [pc, #232]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382a:	4b37      	ldr	r3, [pc, #220]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a36      	ldr	r2, [pc, #216]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b34      	ldr	r3, [pc, #208]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4931      	ldr	r1, [pc, #196]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003848:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	492c      	ldr	r1, [pc, #176]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	e01a      	b.n	8003894 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800385e:	4b2a      	ldr	r3, [pc, #168]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a29      	ldr	r2, [pc, #164]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800386a:	f7fd f93b 	bl	8000ae4 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003872:	f7fd f937 	bl	8000ae4 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e2dd      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003884:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x1da>
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003892:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d074      	beq.n	800398a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x21a>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d10e      	bne.n	80038ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d10b      	bne.n	80038ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b2:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d064      	beq.n	8003988 <HAL_RCC_OscConfig+0x2f0>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d160      	bne.n	8003988 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e2ba      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x24a>
 80038d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	e026      	b.n	8003930 <HAL_RCC_OscConfig+0x298>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ea:	d115      	bne.n	8003918 <HAL_RCC_OscConfig+0x280>
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a05      	ldr	r2, [pc, #20]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b03      	ldr	r3, [pc, #12]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a02      	ldr	r2, [pc, #8]	@ (8003908 <HAL_RCC_OscConfig+0x270>)
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e014      	b.n	8003930 <HAL_RCC_OscConfig+0x298>
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	08004efc 	.word	0x08004efc
 8003910:	20000000 	.word	0x20000000
 8003914:	20000004 	.word	0x20000004
 8003918:	4ba0      	ldr	r3, [pc, #640]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a9f      	ldr	r2, [pc, #636]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800391e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b9d      	ldr	r3, [pc, #628]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a9c      	ldr	r2, [pc, #624]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800392e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd f8d4 	bl	8000ae4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fd f8d0 	bl	8000ae4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	@ 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e276      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003952:	4b92      	ldr	r3, [pc, #584]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x2a8>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd f8c0 	bl	8000ae4 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fd f8bc 	bl	8000ae4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	@ 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e262      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800397a:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x2d0>
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d060      	beq.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_OscConfig+0x310>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d119      	bne.n	80039d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d116      	bne.n	80039d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	4b7c      	ldr	r3, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_OscConfig+0x328>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e23f      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	4973      	ldr	r1, [pc, #460]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d4:	e040      	b.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d023      	beq.n	8003a26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039de:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd f87b 	bl	8000ae4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fd f877 	bl	8000ae4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e21d      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a04:	4b65      	ldr	r3, [pc, #404]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b62      	ldr	r3, [pc, #392]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	495f      	ldr	r1, [pc, #380]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
 8003a24:	e018      	b.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b5d      	ldr	r3, [pc, #372]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fd f857 	bl	8000ae4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fd f853 	bl	8000ae4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1f9      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d03c      	beq.n	8003ade <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01c      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a72:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7fd f832 	bl	8000ae4 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a84:	f7fd f82e 	bl	8000ae4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e1d4      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a96:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ef      	beq.n	8003a84 <HAL_RCC_OscConfig+0x3ec>
 8003aa4:	e01b      	b.n	8003ade <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aac:	4a3b      	ldr	r2, [pc, #236]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fd f815 	bl	8000ae4 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003abe:	f7fd f811 	bl	8000ae4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1b7      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad0:	4b32      	ldr	r3, [pc, #200]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1ef      	bne.n	8003abe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80a6 	beq.w	8003c38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003af0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b08:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b18:	4b21      	ldr	r3, [pc, #132]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d118      	bne.n	8003b56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b30:	f7fc ffd8 	bl	8000ae4 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fc ffd4 	bl	8000ae4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e17a      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_RCC_OscConfig+0x508>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4d8>
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b64:	4a0d      	ldr	r2, [pc, #52]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b6e:	e029      	b.n	8003bc4 <HAL_RCC_OscConfig+0x52c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d115      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x50c>
 8003b78:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	4a07      	ldr	r2, [pc, #28]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b88:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	4a03      	ldr	r2, [pc, #12]	@ (8003b9c <HAL_RCC_OscConfig+0x504>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b98:	e014      	b.n	8003bc4 <HAL_RCC_OscConfig+0x52c>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	4a9b      	ldr	r2, [pc, #620]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bb4:	4b98      	ldr	r3, [pc, #608]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	4a97      	ldr	r2, [pc, #604]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fc ff8a 	bl	8000ae4 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fc ff86 	bl	8000ae4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e12a      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bea:	4b8b      	ldr	r3, [pc, #556]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ed      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x53c>
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fc ff73 	bl	8000ae4 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fc ff6f 	bl	8000ae4 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e113      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c18:	4b7f      	ldr	r3, [pc, #508]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ed      	bne.n	8003c02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c26:	7ffb      	ldrb	r3, [r7, #31]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c30:	4a79      	ldr	r2, [pc, #484]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80fe 	beq.w	8003e3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	f040 80d0 	bne.w	8003dec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c4c:	4b72      	ldr	r3, [pc, #456]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0203 	and.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d130      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d127      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d11f      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c8c:	2a07      	cmp	r2, #7
 8003c8e:	bf14      	ite	ne
 8003c90:	2201      	movne	r2, #1
 8003c92:	2200      	moveq	r2, #0
 8003c94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d113      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d06e      	beq.n	8003da0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d069      	beq.n	8003d9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cc8:	4b53      	ldr	r3, [pc, #332]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003cd4:	4b50      	ldr	r3, [pc, #320]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0ad      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cf0:	f7fc fef8 	bl	8000ae4 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fc fef4 	bl	8000ae4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e09a      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0a:	4b43      	ldr	r3, [pc, #268]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d16:	4b40      	ldr	r3, [pc, #256]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	4b40      	ldr	r3, [pc, #256]	@ (8003e1c <HAL_RCC_OscConfig+0x784>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d26:	3a01      	subs	r2, #1
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d30:	0212      	lsls	r2, r2, #8
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d38:	0852      	lsrs	r2, r2, #1
 8003d3a:	3a01      	subs	r2, #1
 8003d3c:	0552      	lsls	r2, r2, #21
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d44:	0852      	lsrs	r2, r2, #1
 8003d46:	3a01      	subs	r2, #1
 8003d48:	0652      	lsls	r2, r2, #25
 8003d4a:	4311      	orrs	r1, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d50:	0912      	lsrs	r2, r2, #4
 8003d52:	0452      	lsls	r2, r2, #17
 8003d54:	430a      	orrs	r2, r1
 8003d56:	4930      	ldr	r1, [pc, #192]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d68:	4b2b      	ldr	r3, [pc, #172]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d74:	f7fc feb6 	bl	8000ae4 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fc feb2 	bl	8000ae4 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e058      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	4b22      	ldr	r3, [pc, #136]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d9a:	e050      	b.n	8003e3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e04f      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d148      	bne.n	8003e3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dac:	4b1a      	ldr	r3, [pc, #104]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a19      	ldr	r2, [pc, #100]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db8:	4b17      	ldr	r3, [pc, #92]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dc4:	f7fc fe8e 	bl	8000ae4 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fc fe8a 	bl	8000ae4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e030      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x734>
 8003dea:	e028      	b.n	8003e3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d023      	beq.n	8003e3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a08      	ldr	r2, [pc, #32]	@ (8003e18 <HAL_RCC_OscConfig+0x780>)
 8003df8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fc fe71 	bl	8000ae4 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e04:	e00c      	b.n	8003e20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e06:	f7fc fe6d 	bl	8000ae4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d905      	bls.n	8003e20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e013      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <HAL_RCC_OscConfig+0x7b0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ec      	bne.n	8003e06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_RCC_OscConfig+0x7b0>)
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4905      	ldr	r1, [pc, #20]	@ (8003e48 <HAL_RCC_OscConfig+0x7b0>)
 8003e32:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCC_OscConfig+0x7b4>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60cb      	str	r3, [r1, #12]
 8003e38:	e001      	b.n	8003e3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	feeefffc 	.word	0xfeeefffc

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0e7      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b75      	ldr	r3, [pc, #468]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d910      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b72      	ldr	r3, [pc, #456]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	4970      	ldr	r1, [pc, #448]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b6e      	ldr	r3, [pc, #440]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0cf      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d010      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	4b66      	ldr	r3, [pc, #408]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d908      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b63      	ldr	r3, [pc, #396]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4960      	ldr	r1, [pc, #384]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d04c      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d121      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0a6      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eee:	4b54      	ldr	r3, [pc, #336]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d115      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e09a      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f06:	4b4e      	ldr	r3, [pc, #312]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e08e      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f16:	4b4a      	ldr	r3, [pc, #296]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e086      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b46      	ldr	r3, [pc, #280]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4943      	ldr	r1, [pc, #268]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fc fdd4 	bl	8000ae4 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fc fdd0 	bl	8000ae4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e06e      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b3a      	ldr	r3, [pc, #232]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d010      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	4b31      	ldr	r3, [pc, #196]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d208      	bcs.n	8003f96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f84:	4b2e      	ldr	r3, [pc, #184]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	492b      	ldr	r1, [pc, #172]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f96:	4b29      	ldr	r3, [pc, #164]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d210      	bcs.n	8003fc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa4:	4b25      	ldr	r3, [pc, #148]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 0207 	bic.w	r2, r3, #7
 8003fac:	4923      	ldr	r1, [pc, #140]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb4:	4b21      	ldr	r3, [pc, #132]	@ (800403c <HAL_RCC_ClockConfig+0x1ec>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e036      	b.n	8004034 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4918      	ldr	r1, [pc, #96]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff0:	4b13      	ldr	r3, [pc, #76]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4910      	ldr	r1, [pc, #64]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004004:	f000 f824 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	490b      	ldr	r1, [pc, #44]	@ (8004044 <HAL_RCC_ClockConfig+0x1f4>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	4a09      	ldr	r2, [pc, #36]	@ (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8004022:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <HAL_RCC_ClockConfig+0x1fc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc fd0b 	bl	8000a44 <HAL_InitTick>
 800402e:	4603      	mov	r3, r0
 8004030:	72fb      	strb	r3, [r7, #11]

  return status;
 8004032:	7afb      	ldrb	r3, [r7, #11]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40022000 	.word	0x40022000
 8004040:	40021000 	.word	0x40021000
 8004044:	08004efc 	.word	0x08004efc
 8004048:	20000000 	.word	0x20000000
 800404c:	20000004 	.word	0x20000004

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	b089      	sub	sp, #36	@ 0x24
 8004054:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405e:	4b3e      	ldr	r3, [pc, #248]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004068:	4b3b      	ldr	r3, [pc, #236]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x34>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d121      	bne.n	80040c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d11e      	bne.n	80040c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004084:	4b34      	ldr	r3, [pc, #208]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004090:	4b31      	ldr	r3, [pc, #196]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e005      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040ac:	4a2b      	ldr	r2, [pc, #172]	@ (800415c <HAL_RCC_GetSysClockFreq+0x10c>)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040c8:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x110>)
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e004      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040d4:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x114>)
 80040d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d134      	bne.n	8004148 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040de:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d003      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d003      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0xac>
 80040f4:	e005      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x110>)
 80040f8:	617b      	str	r3, [r7, #20]
      break;
 80040fa:	e005      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040fc:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x114>)
 80040fe:	617b      	str	r3, [r7, #20]
      break;
 8004100:	e002      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	617b      	str	r3, [r7, #20]
      break;
 8004106:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004108:	4b13      	ldr	r3, [pc, #76]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	3301      	adds	r3, #1
 8004114:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004116:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	fb03 f202 	mul.w	r2, r3, r2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x108>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	0e5b      	lsrs	r3, r3, #25
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	3301      	adds	r3, #1
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004148:	69bb      	ldr	r3, [r7, #24]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	@ 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	08004f0c 	.word	0x08004f0c
 8004160:	00f42400 	.word	0x00f42400
 8004164:	007a1200 	.word	0x007a1200

08004168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004174:	4b2a      	ldr	r3, [pc, #168]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004180:	f7ff fa26 	bl	80035d0 <HAL_PWREx_GetVoltageRange>
 8004184:	6178      	str	r0, [r7, #20]
 8004186:	e014      	b.n	80041b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b25      	ldr	r3, [pc, #148]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	4a24      	ldr	r2, [pc, #144]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004192:	6593      	str	r3, [r2, #88]	@ 0x58
 8004194:	4b22      	ldr	r3, [pc, #136]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041a0:	f7ff fa16 	bl	80035d0 <HAL_PWREx_GetVoltageRange>
 80041a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b8:	d10b      	bne.n	80041d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b80      	cmp	r3, #128	@ 0x80
 80041be:	d919      	bls.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80041c4:	d902      	bls.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041c6:	2302      	movs	r3, #2
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e013      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041cc:	2301      	movs	r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	e010      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b80      	cmp	r3, #128	@ 0x80
 80041d6:	d902      	bls.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041d8:	2303      	movs	r3, #3
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e00a      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b80      	cmp	r3, #128	@ 0x80
 80041e2:	d102      	bne.n	80041ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e4:	2302      	movs	r3, #2
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	e004      	b.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b70      	cmp	r3, #112	@ 0x70
 80041ee:	d101      	bne.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f0:	2301      	movs	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 0207 	bic.w	r2, r3, #7
 80041fc:	4909      	ldr	r1, [pc, #36]	@ (8004224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004204:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	429a      	cmp	r2, r3
 8004210:	d001      	beq.n	8004216 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	40022000 	.word	0x40022000

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004230:	2300      	movs	r3, #0
 8004232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004234:	2300      	movs	r3, #0
 8004236:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004240:	2b00      	cmp	r3, #0
 8004242:	d041      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004248:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800424c:	d02a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800424e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004252:	d824      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004254:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004258:	d008      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800425a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800425e:	d81e      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004268:	d010      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800426a:	e018      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800426c:	4b86      	ldr	r3, [pc, #536]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a85      	ldr	r2, [pc, #532]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004276:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004278:	e015      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fabb 	bl	80047fc <RCCEx_PLLSAI1_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800428a:	e00c      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3320      	adds	r3, #32
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fba6 	bl	80049e4 <RCCEx_PLLSAI2_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	74fb      	strb	r3, [r7, #19]
      break;
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ac:	4b76      	ldr	r3, [pc, #472]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ba:	4973      	ldr	r1, [pc, #460]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042c2:	e001      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d041      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042dc:	d02a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042e2:	d824      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042e8:	d008      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042ee:	d81e      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042f8:	d010      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042fa:	e018      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042fc:	4b62      	ldr	r3, [pc, #392]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a61      	ldr	r2, [pc, #388]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004306:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004308:	e015      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fa73 	bl	80047fc <RCCEx_PLLSAI1_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800431a:	e00c      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3320      	adds	r3, #32
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fb5e 	bl	80049e4 <RCCEx_PLLSAI2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	74fb      	strb	r3, [r7, #19]
      break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800433c:	4b52      	ldr	r3, [pc, #328]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434a:	494f      	ldr	r1, [pc, #316]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004352:	e001      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a0 	beq.w	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800436a:	4b47      	ldr	r3, [pc, #284]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004380:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	4a40      	ldr	r2, [pc, #256]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438a:	6593      	str	r3, [r2, #88]	@ 0x58
 800438c:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004398:	2301      	movs	r3, #1
 800439a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800439c:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3a      	ldr	r2, [pc, #232]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a8:	f7fc fb9c 	bl	8000ae4 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ae:	e009      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b0:	f7fc fb98 	bl	8000ae4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	74fb      	strb	r3, [r7, #19]
        break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c4:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ef      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d15c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01f      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d019      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043f4:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004400:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	4a20      	ldr	r2, [pc, #128]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fc fb57 	bl	8000ae4 <HAL_GetTick>
 8004436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004438:	e00b      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fc fb53 	bl	8000ae4 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d902      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	74fb      	strb	r3, [r7, #19]
            break;
 8004450:	e006      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004452:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ec      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004466:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004476:	4904      	ldr	r1, [pc, #16]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800447e:	e009      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004494:	7c7b      	ldrb	r3, [r7, #17]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d105      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449a:	4b9e      	ldr	r3, [pc, #632]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449e:	4a9d      	ldr	r2, [pc, #628]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b2:	4b98      	ldr	r3, [pc, #608]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f023 0203 	bic.w	r2, r3, #3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c0:	4994      	ldr	r1, [pc, #592]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f023 020c 	bic.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e2:	498c      	ldr	r1, [pc, #560]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f6:	4b87      	ldr	r3, [pc, #540]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	4983      	ldr	r1, [pc, #524]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004518:	4b7e      	ldr	r3, [pc, #504]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	497b      	ldr	r1, [pc, #492]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800453a:	4b76      	ldr	r3, [pc, #472]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004548:	4972      	ldr	r1, [pc, #456]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800455c:	4b6d      	ldr	r3, [pc, #436]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	496a      	ldr	r1, [pc, #424]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457e:	4b65      	ldr	r3, [pc, #404]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458c:	4961      	ldr	r1, [pc, #388]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ae:	4959      	ldr	r1, [pc, #356]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c2:	4b54      	ldr	r3, [pc, #336]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d0:	4950      	ldr	r1, [pc, #320]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	4948      	ldr	r1, [pc, #288]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004606:	4b43      	ldr	r3, [pc, #268]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	493f      	ldr	r1, [pc, #252]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d028      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004628:	4b3a      	ldr	r3, [pc, #232]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004636:	4937      	ldr	r1, [pc, #220]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004646:	d106      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004648:	4b32      	ldr	r3, [pc, #200]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a31      	ldr	r2, [pc, #196]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004652:	60d3      	str	r3, [r2, #12]
 8004654:	e011      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800465a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800465e:	d10c      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f8c8 	bl	80047fc <RCCEx_PLLSAI1_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d028      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004686:	4b23      	ldr	r3, [pc, #140]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004694:	491f      	ldr	r1, [pc, #124]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046b0:	60d3      	str	r3, [r2, #12]
 80046b2:	e011      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f899 	bl	80047fc <RCCEx_PLLSAI1_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02b      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f2:	4908      	ldr	r1, [pc, #32]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004702:	d109      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a02      	ldr	r2, [pc, #8]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
 8004710:	e014      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004720:	d10c      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f867 	bl	80047fc <RCCEx_PLLSAI1_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d02f      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004748:	4b2b      	ldr	r3, [pc, #172]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004756:	4928      	ldr	r1, [pc, #160]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004766:	d10d      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f844 	bl	80047fc <RCCEx_PLLSAI1_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d014      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	74bb      	strb	r3, [r7, #18]
 8004782:	e011      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3320      	adds	r3, #32
 8004792:	2102      	movs	r1, #2
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f925 	bl	80049e4 <RCCEx_PLLSAI2_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047b4:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c2:	490d      	ldr	r1, [pc, #52]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047d6:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047e6:	4904      	ldr	r1, [pc, #16]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000

080047fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800480a:	4b75      	ldr	r3, [pc, #468]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004816:	4b72      	ldr	r3, [pc, #456]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0203 	and.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d10d      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
       ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800482e:	4b6c      	ldr	r3, [pc, #432]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
       ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d047      	beq.n	80048d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	e044      	b.n	80048d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d018      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x86>
 8004850:	2b03      	cmp	r3, #3
 8004852:	d825      	bhi.n	80048a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004854:	2b01      	cmp	r3, #1
 8004856:	d002      	beq.n	800485e <RCCEx_PLLSAI1_Config+0x62>
 8004858:	2b02      	cmp	r3, #2
 800485a:	d009      	beq.n	8004870 <RCCEx_PLLSAI1_Config+0x74>
 800485c:	e020      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485e:	4b60      	ldr	r3, [pc, #384]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11d      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486e:	e01a      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004870:	4b5b      	ldr	r3, [pc, #364]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d116      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e013      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004882:	4b57      	ldr	r3, [pc, #348]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800488e:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800489e:	e006      	b.n	80048ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e004      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10d      	bne.n	80048d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048b6:	4b4a      	ldr	r3, [pc, #296]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	430b      	orrs	r3, r1
 80048cc:	4944      	ldr	r1, [pc, #272]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d17d      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048d8:	4b41      	ldr	r3, [pc, #260]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a40      	ldr	r2, [pc, #256]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7fc f8fe 	bl	8000ae4 <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ea:	e009      	b.n	8004900 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ec:	f7fc f8fa 	bl	8000ae4 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d902      	bls.n	8004900 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	73fb      	strb	r3, [r7, #15]
        break;
 80048fe:	e005      	b.n	800490c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004900:	4b37      	ldr	r3, [pc, #220]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ef      	bne.n	80048ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d160      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004918:	4b31      	ldr	r3, [pc, #196]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6892      	ldr	r2, [r2, #8]
 8004928:	0211      	lsls	r1, r2, #8
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68d2      	ldr	r2, [r2, #12]
 800492e:	0912      	lsrs	r2, r2, #4
 8004930:	0452      	lsls	r2, r2, #17
 8004932:	430a      	orrs	r2, r1
 8004934:	492a      	ldr	r1, [pc, #168]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	4313      	orrs	r3, r2
 8004938:	610b      	str	r3, [r1, #16]
 800493a:	e027      	b.n	800498c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d112      	bne.n	8004968 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004942:	4b27      	ldr	r3, [pc, #156]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800494a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6892      	ldr	r2, [r2, #8]
 8004952:	0211      	lsls	r1, r2, #8
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6912      	ldr	r2, [r2, #16]
 8004958:	0852      	lsrs	r2, r2, #1
 800495a:	3a01      	subs	r2, #1
 800495c:	0552      	lsls	r2, r2, #21
 800495e:	430a      	orrs	r2, r1
 8004960:	491f      	ldr	r1, [pc, #124]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	610b      	str	r3, [r1, #16]
 8004966:	e011      	b.n	800498c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004968:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004970:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6892      	ldr	r2, [r2, #8]
 8004978:	0211      	lsls	r1, r2, #8
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6952      	ldr	r2, [r2, #20]
 800497e:	0852      	lsrs	r2, r2, #1
 8004980:	3a01      	subs	r2, #1
 8004982:	0652      	lsls	r2, r2, #25
 8004984:	430a      	orrs	r2, r1
 8004986:	4916      	ldr	r1, [pc, #88]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004996:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fc f8a4 	bl	8000ae4 <HAL_GetTick>
 800499c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800499e:	e009      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a0:	f7fc f8a0 	bl	8000ae4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d902      	bls.n	80049b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	73fb      	strb	r3, [r7, #15]
          break;
 80049b2:	e005      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ef      	beq.n	80049a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	4904      	ldr	r1, [pc, #16]	@ (80049e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000

080049e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049fe:	4b67      	ldr	r3, [pc, #412]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
       ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a16:	4b61      	ldr	r3, [pc, #388]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
       ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d047      	beq.n	8004aba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e044      	b.n	8004aba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d018      	beq.n	8004a6a <RCCEx_PLLSAI2_Config+0x86>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d825      	bhi.n	8004a88 <RCCEx_PLLSAI2_Config+0xa4>
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <RCCEx_PLLSAI2_Config+0x62>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d009      	beq.n	8004a58 <RCCEx_PLLSAI2_Config+0x74>
 8004a44:	e020      	b.n	8004a88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a46:	4b55      	ldr	r3, [pc, #340]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a56:	e01a      	b.n	8004a8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a58:	4b50      	ldr	r3, [pc, #320]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e013      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a76:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a86:	e006      	b.n	8004a96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e004      	b.n	8004a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	4939      	ldr	r1, [pc, #228]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d167      	bne.n	8004b90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ac0:	4b36      	ldr	r3, [pc, #216]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a35      	ldr	r2, [pc, #212]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004acc:	f7fc f80a 	bl	8000ae4 <HAL_GetTick>
 8004ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ad2:	e009      	b.n	8004ae8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ad4:	f7fc f806 	bl	8000ae4 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae6:	e005      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ef      	bne.n	8004ad4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d14a      	bne.n	8004b90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d111      	bne.n	8004b24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b00:	4b26      	ldr	r3, [pc, #152]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	0211      	lsls	r1, r2, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68d2      	ldr	r2, [r2, #12]
 8004b16:	0912      	lsrs	r2, r2, #4
 8004b18:	0452      	lsls	r2, r2, #17
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	491f      	ldr	r1, [pc, #124]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	614b      	str	r3, [r1, #20]
 8004b22:	e011      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b24:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6892      	ldr	r2, [r2, #8]
 8004b34:	0211      	lsls	r1, r2, #8
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6912      	ldr	r2, [r2, #16]
 8004b3a:	0852      	lsrs	r2, r2, #1
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	0652      	lsls	r2, r2, #25
 8004b40:	430a      	orrs	r2, r1
 8004b42:	4916      	ldr	r1, [pc, #88]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b48:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fb ffc6 	bl	8000ae4 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b5a:	e009      	b.n	8004b70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b5c:	f7fb ffc2 	bl	8000ae4 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d902      	bls.n	8004b70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b6e:	e005      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0ef      	beq.n	8004b5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b82:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4904      	ldr	r1, [pc, #16]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000

08004ba0 <malloc>:
 8004ba0:	4b02      	ldr	r3, [pc, #8]	@ (8004bac <malloc+0xc>)
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	f000 b825 	b.w	8004bf4 <_malloc_r>
 8004baa:	bf00      	nop
 8004bac:	2000000c 	.word	0x2000000c

08004bb0 <sbrk_aligned>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8004bf0 <sbrk_aligned+0x40>)
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	6831      	ldr	r1, [r6, #0]
 8004bb8:	4605      	mov	r5, r0
 8004bba:	b911      	cbnz	r1, 8004bc2 <sbrk_aligned+0x12>
 8004bbc:	f000 f8e4 	bl	8004d88 <_sbrk_r>
 8004bc0:	6030      	str	r0, [r6, #0]
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f8df 	bl	8004d88 <_sbrk_r>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	d103      	bne.n	8004bd6 <sbrk_aligned+0x26>
 8004bce:	f04f 34ff 	mov.w	r4, #4294967295
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	bd70      	pop	{r4, r5, r6, pc}
 8004bd6:	1cc4      	adds	r4, r0, #3
 8004bd8:	f024 0403 	bic.w	r4, r4, #3
 8004bdc:	42a0      	cmp	r0, r4
 8004bde:	d0f8      	beq.n	8004bd2 <sbrk_aligned+0x22>
 8004be0:	1a21      	subs	r1, r4, r0
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 f8d0 	bl	8004d88 <_sbrk_r>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d1f2      	bne.n	8004bd2 <sbrk_aligned+0x22>
 8004bec:	e7ef      	b.n	8004bce <sbrk_aligned+0x1e>
 8004bee:	bf00      	nop
 8004bf0:	2000018c 	.word	0x2000018c

08004bf4 <_malloc_r>:
 8004bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf8:	1ccd      	adds	r5, r1, #3
 8004bfa:	f025 0503 	bic.w	r5, r5, #3
 8004bfe:	3508      	adds	r5, #8
 8004c00:	2d0c      	cmp	r5, #12
 8004c02:	bf38      	it	cc
 8004c04:	250c      	movcc	r5, #12
 8004c06:	2d00      	cmp	r5, #0
 8004c08:	4606      	mov	r6, r0
 8004c0a:	db01      	blt.n	8004c10 <_malloc_r+0x1c>
 8004c0c:	42a9      	cmp	r1, r5
 8004c0e:	d904      	bls.n	8004c1a <_malloc_r+0x26>
 8004c10:	230c      	movs	r3, #12
 8004c12:	6033      	str	r3, [r6, #0]
 8004c14:	2000      	movs	r0, #0
 8004c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cf0 <_malloc_r+0xfc>
 8004c1e:	f000 f869 	bl	8004cf4 <__malloc_lock>
 8004c22:	f8d8 3000 	ldr.w	r3, [r8]
 8004c26:	461c      	mov	r4, r3
 8004c28:	bb44      	cbnz	r4, 8004c7c <_malloc_r+0x88>
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f7ff ffbf 	bl	8004bb0 <sbrk_aligned>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	4604      	mov	r4, r0
 8004c36:	d158      	bne.n	8004cea <_malloc_r+0xf6>
 8004c38:	f8d8 4000 	ldr.w	r4, [r8]
 8004c3c:	4627      	mov	r7, r4
 8004c3e:	2f00      	cmp	r7, #0
 8004c40:	d143      	bne.n	8004cca <_malloc_r+0xd6>
 8004c42:	2c00      	cmp	r4, #0
 8004c44:	d04b      	beq.n	8004cde <_malloc_r+0xea>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	4639      	mov	r1, r7
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	eb04 0903 	add.w	r9, r4, r3
 8004c50:	f000 f89a 	bl	8004d88 <_sbrk_r>
 8004c54:	4581      	cmp	r9, r0
 8004c56:	d142      	bne.n	8004cde <_malloc_r+0xea>
 8004c58:	6821      	ldr	r1, [r4, #0]
 8004c5a:	1a6d      	subs	r5, r5, r1
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f7ff ffa6 	bl	8004bb0 <sbrk_aligned>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d03a      	beq.n	8004cde <_malloc_r+0xea>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	442b      	add	r3, r5
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	bb62      	cbnz	r2, 8004cd0 <_malloc_r+0xdc>
 8004c76:	f8c8 7000 	str.w	r7, [r8]
 8004c7a:	e00f      	b.n	8004c9c <_malloc_r+0xa8>
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	1b52      	subs	r2, r2, r5
 8004c80:	d420      	bmi.n	8004cc4 <_malloc_r+0xd0>
 8004c82:	2a0b      	cmp	r2, #11
 8004c84:	d917      	bls.n	8004cb6 <_malloc_r+0xc2>
 8004c86:	1961      	adds	r1, r4, r5
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	6025      	str	r5, [r4, #0]
 8004c8c:	bf18      	it	ne
 8004c8e:	6059      	strne	r1, [r3, #4]
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	bf08      	it	eq
 8004c94:	f8c8 1000 	streq.w	r1, [r8]
 8004c98:	5162      	str	r2, [r4, r5]
 8004c9a:	604b      	str	r3, [r1, #4]
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 f82f 	bl	8004d00 <__malloc_unlock>
 8004ca2:	f104 000b 	add.w	r0, r4, #11
 8004ca6:	1d23      	adds	r3, r4, #4
 8004ca8:	f020 0007 	bic.w	r0, r0, #7
 8004cac:	1ac2      	subs	r2, r0, r3
 8004cae:	bf1c      	itt	ne
 8004cb0:	1a1b      	subne	r3, r3, r0
 8004cb2:	50a3      	strne	r3, [r4, r2]
 8004cb4:	e7af      	b.n	8004c16 <_malloc_r+0x22>
 8004cb6:	6862      	ldr	r2, [r4, #4]
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	bf0c      	ite	eq
 8004cbc:	f8c8 2000 	streq.w	r2, [r8]
 8004cc0:	605a      	strne	r2, [r3, #4]
 8004cc2:	e7eb      	b.n	8004c9c <_malloc_r+0xa8>
 8004cc4:	4623      	mov	r3, r4
 8004cc6:	6864      	ldr	r4, [r4, #4]
 8004cc8:	e7ae      	b.n	8004c28 <_malloc_r+0x34>
 8004cca:	463c      	mov	r4, r7
 8004ccc:	687f      	ldr	r7, [r7, #4]
 8004cce:	e7b6      	b.n	8004c3e <_malloc_r+0x4a>
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	42a3      	cmp	r3, r4
 8004cd6:	d1fb      	bne.n	8004cd0 <_malloc_r+0xdc>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6053      	str	r3, [r2, #4]
 8004cdc:	e7de      	b.n	8004c9c <_malloc_r+0xa8>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	6033      	str	r3, [r6, #0]
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f000 f80c 	bl	8004d00 <__malloc_unlock>
 8004ce8:	e794      	b.n	8004c14 <_malloc_r+0x20>
 8004cea:	6005      	str	r5, [r0, #0]
 8004cec:	e7d6      	b.n	8004c9c <_malloc_r+0xa8>
 8004cee:	bf00      	nop
 8004cf0:	20000190 	.word	0x20000190

08004cf4 <__malloc_lock>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__malloc_lock+0x8>)
 8004cf6:	f000 b881 	b.w	8004dfc <__retarget_lock_acquire_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	200002d0 	.word	0x200002d0

08004d00 <__malloc_unlock>:
 8004d00:	4801      	ldr	r0, [pc, #4]	@ (8004d08 <__malloc_unlock+0x8>)
 8004d02:	f000 b87c 	b.w	8004dfe <__retarget_lock_release_recursive>
 8004d06:	bf00      	nop
 8004d08:	200002d0 	.word	0x200002d0

08004d0c <realloc>:
 8004d0c:	4b02      	ldr	r3, [pc, #8]	@ (8004d18 <realloc+0xc>)
 8004d0e:	460a      	mov	r2, r1
 8004d10:	4601      	mov	r1, r0
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	f000 b802 	b.w	8004d1c <_realloc_r>
 8004d18:	2000000c 	.word	0x2000000c

08004d1c <_realloc_r>:
 8004d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d20:	4680      	mov	r8, r0
 8004d22:	4615      	mov	r5, r2
 8004d24:	460c      	mov	r4, r1
 8004d26:	b921      	cbnz	r1, 8004d32 <_realloc_r+0x16>
 8004d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	f7ff bf61 	b.w	8004bf4 <_malloc_r>
 8004d32:	b92a      	cbnz	r2, 8004d40 <_realloc_r+0x24>
 8004d34:	f000 f872 	bl	8004e1c <_free_r>
 8004d38:	2400      	movs	r4, #0
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d40:	f000 f8b6 	bl	8004eb0 <_malloc_usable_size_r>
 8004d44:	4285      	cmp	r5, r0
 8004d46:	4606      	mov	r6, r0
 8004d48:	d802      	bhi.n	8004d50 <_realloc_r+0x34>
 8004d4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d4e:	d8f4      	bhi.n	8004d3a <_realloc_r+0x1e>
 8004d50:	4629      	mov	r1, r5
 8004d52:	4640      	mov	r0, r8
 8004d54:	f7ff ff4e 	bl	8004bf4 <_malloc_r>
 8004d58:	4607      	mov	r7, r0
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d0ec      	beq.n	8004d38 <_realloc_r+0x1c>
 8004d5e:	42b5      	cmp	r5, r6
 8004d60:	462a      	mov	r2, r5
 8004d62:	4621      	mov	r1, r4
 8004d64:	bf28      	it	cs
 8004d66:	4632      	movcs	r2, r6
 8004d68:	f000 f84a 	bl	8004e00 <memcpy>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f000 f854 	bl	8004e1c <_free_r>
 8004d74:	463c      	mov	r4, r7
 8004d76:	e7e0      	b.n	8004d3a <_realloc_r+0x1e>

08004d78 <memset>:
 8004d78:	4402      	add	r2, r0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d100      	bne.n	8004d82 <memset+0xa>
 8004d80:	4770      	bx	lr
 8004d82:	f803 1b01 	strb.w	r1, [r3], #1
 8004d86:	e7f9      	b.n	8004d7c <memset+0x4>

08004d88 <_sbrk_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d06      	ldr	r5, [pc, #24]	@ (8004da4 <_sbrk_r+0x1c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fb fdcc 	bl	8000930 <_sbrk>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_sbrk_r+0x1a>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_sbrk_r+0x1a>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	200002cc 	.word	0x200002cc

08004da8 <__errno>:
 8004da8:	4b01      	ldr	r3, [pc, #4]	@ (8004db0 <__errno+0x8>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	2000000c 	.word	0x2000000c

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4d0d      	ldr	r5, [pc, #52]	@ (8004dec <__libc_init_array+0x38>)
 8004db8:	4c0d      	ldr	r4, [pc, #52]	@ (8004df0 <__libc_init_array+0x3c>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004df4 <__libc_init_array+0x40>)
 8004dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004df8 <__libc_init_array+0x44>)
 8004dc8:	f000 f87a 	bl	8004ec0 <_init>
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	4798      	blx	r3
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	4798      	blx	r3
 8004de8:	3601      	adds	r6, #1
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08004f3c 	.word	0x08004f3c
 8004df0:	08004f3c 	.word	0x08004f3c
 8004df4:	08004f3c 	.word	0x08004f3c
 8004df8:	08004f40 	.word	0x08004f40

08004dfc <__retarget_lock_acquire_recursive>:
 8004dfc:	4770      	bx	lr

08004dfe <__retarget_lock_release_recursive>:
 8004dfe:	4770      	bx	lr

08004e00 <memcpy>:
 8004e00:	440a      	add	r2, r1
 8004e02:	4291      	cmp	r1, r2
 8004e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e08:	d100      	bne.n	8004e0c <memcpy+0xc>
 8004e0a:	4770      	bx	lr
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e16:	4291      	cmp	r1, r2
 8004e18:	d1f9      	bne.n	8004e0e <memcpy+0xe>
 8004e1a:	bd10      	pop	{r4, pc}

08004e1c <_free_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4605      	mov	r5, r0
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d041      	beq.n	8004ea8 <_free_r+0x8c>
 8004e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e28:	1f0c      	subs	r4, r1, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bfb8      	it	lt
 8004e2e:	18e4      	addlt	r4, r4, r3
 8004e30:	f7ff ff60 	bl	8004cf4 <__malloc_lock>
 8004e34:	4a1d      	ldr	r2, [pc, #116]	@ (8004eac <_free_r+0x90>)
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	b933      	cbnz	r3, 8004e48 <_free_r+0x2c>
 8004e3a:	6063      	str	r3, [r4, #4]
 8004e3c:	6014      	str	r4, [r2, #0]
 8004e3e:	4628      	mov	r0, r5
 8004e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e44:	f7ff bf5c 	b.w	8004d00 <__malloc_unlock>
 8004e48:	42a3      	cmp	r3, r4
 8004e4a:	d908      	bls.n	8004e5e <_free_r+0x42>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	1821      	adds	r1, r4, r0
 8004e50:	428b      	cmp	r3, r1
 8004e52:	bf01      	itttt	eq
 8004e54:	6819      	ldreq	r1, [r3, #0]
 8004e56:	685b      	ldreq	r3, [r3, #4]
 8004e58:	1809      	addeq	r1, r1, r0
 8004e5a:	6021      	streq	r1, [r4, #0]
 8004e5c:	e7ed      	b.n	8004e3a <_free_r+0x1e>
 8004e5e:	461a      	mov	r2, r3
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	b10b      	cbz	r3, 8004e68 <_free_r+0x4c>
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	d9fa      	bls.n	8004e5e <_free_r+0x42>
 8004e68:	6811      	ldr	r1, [r2, #0]
 8004e6a:	1850      	adds	r0, r2, r1
 8004e6c:	42a0      	cmp	r0, r4
 8004e6e:	d10b      	bne.n	8004e88 <_free_r+0x6c>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	4401      	add	r1, r0
 8004e74:	1850      	adds	r0, r2, r1
 8004e76:	4283      	cmp	r3, r0
 8004e78:	6011      	str	r1, [r2, #0]
 8004e7a:	d1e0      	bne.n	8004e3e <_free_r+0x22>
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	6053      	str	r3, [r2, #4]
 8004e82:	4408      	add	r0, r1
 8004e84:	6010      	str	r0, [r2, #0]
 8004e86:	e7da      	b.n	8004e3e <_free_r+0x22>
 8004e88:	d902      	bls.n	8004e90 <_free_r+0x74>
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	602b      	str	r3, [r5, #0]
 8004e8e:	e7d6      	b.n	8004e3e <_free_r+0x22>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	1821      	adds	r1, r4, r0
 8004e94:	428b      	cmp	r3, r1
 8004e96:	bf04      	itt	eq
 8004e98:	6819      	ldreq	r1, [r3, #0]
 8004e9a:	685b      	ldreq	r3, [r3, #4]
 8004e9c:	6063      	str	r3, [r4, #4]
 8004e9e:	bf04      	itt	eq
 8004ea0:	1809      	addeq	r1, r1, r0
 8004ea2:	6021      	streq	r1, [r4, #0]
 8004ea4:	6054      	str	r4, [r2, #4]
 8004ea6:	e7ca      	b.n	8004e3e <_free_r+0x22>
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000190 	.word	0x20000190

08004eb0 <_malloc_usable_size_r>:
 8004eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb4:	1f18      	subs	r0, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfbc      	itt	lt
 8004eba:	580b      	ldrlt	r3, [r1, r0]
 8004ebc:	18c0      	addlt	r0, r0, r3
 8004ebe:	4770      	bx	lr

08004ec0 <_init>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr

08004ecc <_fini>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr
