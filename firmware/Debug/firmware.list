
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ddc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08004f64  08004f64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f0  080050f0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  2000000c  08005104  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08005104  0000751c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b68e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f20  00000000  00000000  000126ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  000145f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081d  00000000  00000000  000150b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c56  00000000  00000000  000158d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e340  00000000  00000000  0001852b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7e97  00000000  00000000  0002686b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac4  00000000  00000000  0010e748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0011120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f4c 	.word	0x08004f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f4c 	.word	0x08004f4c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
	if(I2CHandle->Instance == I2C1){
		transmitterReady = 1;
	}
}
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b0a0      	sub	sp, #128	@ 0x80
 80001dc:	af00      	add	r7, sp, #0
 HAL_Init();
 80001de:	f000 fd40 	bl	8000c62 <HAL_Init>
 SystemClock_Config();
 80001e2:	f000 f8b7 	bl	8000354 <SystemClock_Config>
 GPIO_Init();
 80001e6:	f000 f8fb 	bl	80003e0 <GPIO_Init>
 //DMA_Init();
 //I2C_Init();
 SPI_Init();
 80001ea:	f000 fc2b 	bl	8000a44 <SPI_Init>
 uint8_t arr[] = {30, 0, 11, 28, 7, 12};
 80001ee:	4a50      	ldr	r2, [pc, #320]	@ (8000330 <main+0x158>)
 80001f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80001f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001f8:	6018      	str	r0, [r3, #0]
 80001fa:	3304      	adds	r3, #4
 80001fc:	8019      	strh	r1, [r3, #0]
 //initDS3231(2024, arr, 1, 12);
 //get_bmp_t();
 //initMPU6050(0);
 uint8_t timeData[6] = {30, 14, 4, 3, 24, 12};
 80001fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000334 <main+0x15c>)
 8000200:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000208:	6018      	str	r0, [r3, #0]
 800020a:	3304      	adds	r3, #4
 800020c:	8019      	strh	r1, [r3, #0]
 char header[] = "Time,Acceleration";
 800020e:	4b4a      	ldr	r3, [pc, #296]	@ (8000338 <main+0x160>)
 8000210:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000214:	461d      	mov	r5, r3
 8000216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800021a:	682b      	ldr	r3, [r5, #0]
 800021c:	8023      	strh	r3, [r4, #0]
 bool result = initialize_SD_card();
 800021e:	f000 fb61 	bl	80008e4 <initialize_SD_card>
 8000222:	4603      	mov	r3, r0
 8000224:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 if(!result)
 8000228:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800022c:	f083 0301 	eor.w	r3, r3, #1
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <main+0x62>
	  while(1);
 8000236:	bf00      	nop
 8000238:	e7fd      	b.n	8000236 <main+0x5e>
 result = is_SD_card_initialized();
 800023a:	f000 fbf7 	bl	8000a2c <is_SD_card_initialized>
 800023e:	4603      	mov	r3, r0
 8000240:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 if(!result)
 8000244:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000248:	f083 0301 	eor.w	r3, r3, #1
 800024c:	b2db      	uxtb	r3, r3
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <main+0x7e>
	  while(1);
 8000252:	bf00      	nop
 8000254:	e7fd      	b.n	8000252 <main+0x7a>
 res = f_mount(&fs, "0:", 1);
 8000256:	2201      	movs	r2, #1
 8000258:	4938      	ldr	r1, [pc, #224]	@ (800033c <main+0x164>)
 800025a:	4839      	ldr	r0, [pc, #228]	@ (8000340 <main+0x168>)
 800025c:	f004 f8ee 	bl	800443c <f_mount>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b37      	ldr	r3, [pc, #220]	@ (8000344 <main+0x16c>)
 8000266:	701a      	strb	r2, [r3, #0]
 if(res != FR_OK)
 8000268:	4b36      	ldr	r3, [pc, #216]	@ (8000344 <main+0x16c>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0x9c>
	  while(1);
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0x98>
 res = f_open(&file, "text.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000274:	220a      	movs	r2, #10
 8000276:	4934      	ldr	r1, [pc, #208]	@ (8000348 <main+0x170>)
 8000278:	4834      	ldr	r0, [pc, #208]	@ (800034c <main+0x174>)
 800027a:	f004 f925 	bl	80044c8 <f_open>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b30      	ldr	r3, [pc, #192]	@ (8000344 <main+0x16c>)
 8000284:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 8000286:	4b2f      	ldr	r3, [pc, #188]	@ (8000344 <main+0x16c>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d126      	bne.n	80002dc <main+0x104>
	  const char* text = "Hello, SD card!\n";
 800028e:	4b30      	ldr	r3, [pc, #192]	@ (8000350 <main+0x178>)
 8000290:	67bb      	str	r3, [r7, #120]	@ 0x78
	  UINT bytesWritten;
	  res = f_write(&file, text, strlen(text), &bytesWritten);
 8000292:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000294:	f7ff ff98 	bl	80001c8 <strlen>
 8000298:	4602      	mov	r2, r0
 800029a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800029e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80002a0:	482a      	ldr	r0, [pc, #168]	@ (800034c <main+0x174>)
 80002a2:	f004 fc0a 	bl	8004aba <f_write>
 80002a6:	4603      	mov	r3, r0
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <main+0x16c>)
 80002ac:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 80002ae:	4b25      	ldr	r3, [pc, #148]	@ (8000344 <main+0x16c>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0xe2>
		  while(1);
 80002b6:	bf00      	nop
 80002b8:	e7fd      	b.n	80002b6 <main+0xde>
	  f_close(&file);
 80002ba:	4824      	ldr	r0, [pc, #144]	@ (800034c <main+0x174>)
 80002bc:	f004 fdf0 	bl	8004ea0 <f_close>
 }
 else
	  while(1);
 res = f_open(&file, "text.txt", FA_READ);
 80002c0:	2201      	movs	r2, #1
 80002c2:	4921      	ldr	r1, [pc, #132]	@ (8000348 <main+0x170>)
 80002c4:	4821      	ldr	r0, [pc, #132]	@ (800034c <main+0x174>)
 80002c6:	f004 f8ff 	bl	80044c8 <f_open>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000344 <main+0x16c>)
 80002d0:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 80002d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <main+0x16c>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d121      	bne.n	800031e <main+0x146>
 80002da:	e000      	b.n	80002de <main+0x106>
	  while(1);
 80002dc:	e7fe      	b.n	80002dc <main+0x104>
	  char buffer[64];
	  UINT bytesRead;
	  res = f_read(&file, buffer, sizeof(buffer) - 1, &bytesRead);
 80002de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80002e2:	1d39      	adds	r1, r7, #4
 80002e4:	223f      	movs	r2, #63	@ 0x3f
 80002e6:	4819      	ldr	r0, [pc, #100]	@ (800034c <main+0x174>)
 80002e8:	f004 faa8 	bl	800483c <f_read>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <main+0x16c>)
 80002f2:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 80002f4:	4b13      	ldr	r3, [pc, #76]	@ (8000344 <main+0x16c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <main+0x128>
		  while(1);
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <main+0x124>
	  buffer[bytesRead] = '\0';
 8000300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000302:	3380      	adds	r3, #128	@ 0x80
 8000304:	443b      	add	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	f803 2c7c 	strb.w	r2, [r3, #-124]
	  f_close(&file);
 800030c:	480f      	ldr	r0, [pc, #60]	@ (800034c <main+0x174>)
 800030e:	f004 fdc7 	bl	8004ea0 <f_close>
 }
 else
	  while(1);

 int x = 21;
 8000312:	2315      	movs	r3, #21
 8000314:	677b      	str	r3, [r7, #116]	@ 0x74
 x+=1;
 8000316:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000318:	3301      	adds	r3, #1
 800031a:	677b      	str	r3, [r7, #116]	@ 0x74
 800031c:	e000      	b.n	8000320 <main+0x148>
	  while(1);
 800031e:	e7fe      	b.n	800031e <main+0x146>
 while (1)
 {
	  //getDateAndTime();
	 // getAccelMPU6050(second);
	  //getAltitudeBMP180(second);
	  int x = 21;
 8000320:	2315      	movs	r3, #21
 8000322:	673b      	str	r3, [r7, #112]	@ 0x70
	  x+=1;
 8000324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000326:	3301      	adds	r3, #1
 8000328:	673b      	str	r3, [r7, #112]	@ 0x70
 {
 800032a:	bf00      	nop
 800032c:	e7f8      	b.n	8000320 <main+0x148>
 800032e:	bf00      	nop
 8000330:	08004f88 	.word	0x08004f88
 8000334:	08004f90 	.word	0x08004f90
 8000338:	08004f98 	.word	0x08004f98
 800033c:	08004f64 	.word	0x08004f64
 8000340:	20000028 	.word	0x20000028
 8000344:	20000488 	.word	0x20000488
 8000348:	08004f68 	.word	0x08004f68
 800034c:	20000258 	.word	0x20000258
 8000350:	08004f74 	.word	0x08004f74

08000354 <SystemClock_Config>:
 }
}
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	@ 0x58
 8000358:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2244      	movs	r2, #68	@ 0x44
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f004 fdc6 	bl	8004ef4 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]
 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800037a:	f000 ffc1 	bl	8001300 <HAL_PWREx_ControlVoltageScaling>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x34>
 {
   Error_Handler();
 8000384:	f000 f85e 	bl	8000444 <Error_Handler>
 }
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000388:	2310      	movs	r3, #16
 800038a:	617b      	str	r3, [r7, #20]
 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.MSICalibrationValue = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000394:	2360      	movs	r3, #96	@ 0x60
 8000396:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000398:	2300      	movs	r3, #0
 800039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 f803 	bl	80013ac <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x5c>
 {
   Error_Handler();
 80003ac:	f000 f84a 	bl	8000444 <Error_Handler>
 }
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	603b      	str	r3, [r7, #0]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c4:	463b      	mov	r3, r7
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fbcb 	bl	8001b64 <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x84>
 {
   Error_Handler();
 80003d4:	f000 f836 	bl	8000444 <Error_Handler>
 }
}
 80003d8:	bf00      	nop
 80003da:	3758      	adds	r7, #88	@ 0x58
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <GPIO_Init>:
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
}
void GPIO_Init(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */
	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <GPIO_Init+0x60>)
 80003f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f8:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <GPIO_Init+0x60>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <GPIO_Init+0x60>)
 8000402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]
	 /*Configure GPIO pin Output Level */
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000416:	f000 ff4d 	bl	80012b4 <HAL_GPIO_WritePin>
	 /*Configure GPIO pin : PA9 */
	 GPIO_InitStruct.Pin = GPIO_PIN_9;
 800041a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800041e:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000434:	f000 fd94 	bl	8000f60 <HAL_GPIO_Init>
	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <Error_Handler>:
 {
   Error_Handler();
 }*/
}
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
 __disable_irq();
 while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <send_command>:
#include "sd.h"


static bool is_initialized = 0;

bool send_command(uint8_t* cmd, uint8_t response){
 8000450:	b580      	push	{r7, lr}
 8000452:	b08a      	sub	sp, #40	@ 0x28
 8000454:	af02      	add	r7, sp, #8
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	bool success = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800046a:	f000 ff23 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 6, HAL_MAX_DELAY);
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	2206      	movs	r2, #6
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	4836      	ldr	r0, [pc, #216]	@ (8000550 <send_command+0x100>)
 8000478:	f001 fdea 	bl	8002050 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000486:	f000 ff15 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fc5e 	bl	8000d4c <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	e053      	b.n	800053e <send_command+0xee>
		uint8_t result[1];
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800049c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a0:	f000 ff08 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, result, 1, HAL_MAX_DELAY);
 80004a4:	23ff      	movs	r3, #255	@ 0xff
 80004a6:	743b      	strb	r3, [r7, #16]
 80004a8:	f107 0214 	add.w	r2, r7, #20
 80004ac:	f107 0110 	add.w	r1, r7, #16
 80004b0:	f04f 33ff 	mov.w	r3, #4294967295
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2301      	movs	r3, #1
 80004b8:	4825      	ldr	r0, [pc, #148]	@ (8000550 <send_command+0x100>)
 80004ba:	f001 ff1f 	bl	80022fc <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c8:	f000 fef4 	bl	80012b4 <HAL_GPIO_WritePin>
		if(result[0] == response){
 80004cc:	7d3b      	ldrb	r3, [r7, #20]
 80004ce:	78fa      	ldrb	r2, [r7, #3]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d12e      	bne.n	8000532 <send_command+0xe2>
			if(cmd[0] == 0x48){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b48      	cmp	r3, #72	@ 0x48
 80004da:	d127      	bne.n	800052c <send_command+0xdc>
				uint8_t result_cmd8[4];
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e6:	f000 fee5 	bl	80012b4 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF, 0xFF, 0xFF}, result_cmd8, 4, HAL_MAX_DELAY);
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <send_command+0x104>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	f107 020c 	add.w	r2, r7, #12
 80004f4:	f107 0108 	add.w	r1, r7, #8
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2304      	movs	r3, #4
 8000500:	4813      	ldr	r0, [pc, #76]	@ (8000550 <send_command+0x100>)
 8000502:	f001 fefb 	bl	80022fc <HAL_SPI_TransmitReceive>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000510:	f000 fed0 	bl	80012b4 <HAL_GPIO_WritePin>
				if(result_cmd8[0] != 0x00 || result_cmd8[1] != 0x00 || result_cmd8[2] != 0x01 || result_cmd8[3] != 0xAA)
 8000514:	7b3b      	ldrb	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <send_command+0xe8>
 800051a:	7b7b      	ldrb	r3, [r7, #13]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10b      	bne.n	8000538 <send_command+0xe8>
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d108      	bne.n	8000538 <send_command+0xe8>
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	2baa      	cmp	r3, #170	@ 0xaa
 800052a:	d105      	bne.n	8000538 <send_command+0xe8>
					continue;
			}
			success = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	77fb      	strb	r3, [r7, #31]
 8000530:	e009      	b.n	8000546 <send_command+0xf6>
			break;
		}
		HAL_Delay(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fc0a 	bl	8000d4c <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	3301      	adds	r3, #1
 800053c:	61bb      	str	r3, [r7, #24]
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000544:	dba7      	blt.n	8000496 <send_command+0x46>
	}
	return success;
 8000546:	7ffb      	ldrb	r3, [r7, #31]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000048c 	.word	0x2000048c
 8000554:	08004fac 	.word	0x08004fac

08000558 <initialize_SPI_mode>:

void initialize_SPI_mode(){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f000 fea4 	bl	80012b4 <HAL_GPIO_WritePin>
	uint8_t dummy[10];
	memset(dummy, 0xFF, sizeof(dummy));
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	220a      	movs	r2, #10
 8000570:	21ff      	movs	r1, #255	@ 0xff
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fcbe 	bl	8004ef4 <memset>
	HAL_SPI_Transmit(&hspi1, dummy, sizeof(dummy), HAL_MAX_DELAY);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	220a      	movs	r2, #10
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <initialize_SPI_mode+0x38>)
 8000582:	f001 fd65 	bl	8002050 <HAL_SPI_Transmit>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000048c 	.word	0x2000048c

08000594 <read_block>:

bool read_block(uint32_t block, uint8_t* data){
 8000594:	b580      	push	{r7, lr}
 8000596:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800059a:	af02      	add	r7, sp, #8
 800059c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005a0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005aa:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80005ae:	6019      	str	r1, [r3, #0]
	uint8_t cmd17[6];
	cmd17[0] = 0x51;
 80005b0:	2351      	movs	r3, #81	@ 0x51
 80005b2:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
	cmd17[1] = (block >> 24)&0xFF;
 80005b6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005ba:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	0e1b      	lsrs	r3, r3, #24
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	cmd17[2] = (block >> 16)&0xFF;
 80005c8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005cc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	cmd17[3] = (block >> 8) & 0xFF;
 80005da:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005de:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
	cmd17[4] = (block)&0xFF;
 80005ec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005f0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
	cmd17[5] = 0xFF;
 80005fc:	23ff      	movs	r3, #255	@ 0xff
 80005fe:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
	bool result = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	result = send_command(cmd17, 0x00);
 8000608:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff1e 	bl	8000450 <send_command>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	if(!result)
 800061a:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 800061e:	f083 0301 	eor.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <read_block+0x98>
		return 0;
 8000628:	2300      	movs	r3, #0
 800062a:	e07e      	b.n	800072a <read_block+0x196>
	uint8_t response[1];
	for(int i = 0; i < 1000; i++){
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000632:	e027      	b.n	8000684 <read_block+0xf0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f000 fe39 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 8000642:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000646:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800064a:	22ff      	movs	r2, #255	@ 0xff
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000652:	f107 010c 	add.w	r1, r7, #12
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2301      	movs	r3, #1
 800065e:	4835      	ldr	r0, [pc, #212]	@ (8000734 <read_block+0x1a0>)
 8000660:	f001 fe4c 	bl	80022fc <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800066a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066e:	f000 fe21 	bl	80012b4 <HAL_GPIO_WritePin>
		if(response[0] == 0xFE){
 8000672:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8000676:	2bfe      	cmp	r3, #254	@ 0xfe
 8000678:	d00a      	beq.n	8000690 <read_block+0xfc>
	for(int i = 0; i < 1000; i++){
 800067a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800067e:	3301      	adds	r3, #1
 8000680:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000684:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800068c:	dbd2      	blt.n	8000634 <read_block+0xa0>
 800068e:	e000      	b.n	8000692 <read_block+0xfe>
			break;
 8000690:	bf00      	nop
		}
	}

	if(response[0] != 0xFE)
 8000692:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8000696:	2bfe      	cmp	r3, #254	@ 0xfe
 8000698:	d001      	beq.n	800069e <read_block+0x10a>
		return 0;
 800069a:	2300      	movs	r3, #0
 800069c:	e045      	b.n	800072a <read_block+0x196>

	uint8_t send[512];
	memset(send, 0xFF,512);
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a6:	21ff      	movs	r1, #255	@ 0xff
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fc23 	bl	8004ef4 <memset>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f000 fdfc 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send, data, 512, HAL_MAX_DELAY);
 80006bc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80006c0:	f5a3 720a 	sub.w	r2, r3, #552	@ 0x228
 80006c4:	f107 0118 	add.w	r1, r7, #24
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	4817      	ldr	r0, [pc, #92]	@ (8000734 <read_block+0x1a0>)
 80006d6:	f001 fe11 	bl	80022fc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f000 fde6 	bl	80012b4 <HAL_GPIO_WritePin>

	uint8_t crc[2];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f2:	f000 fddf 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF}, crc, 2, HAL_MAX_DELAY);
 80006f6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80006fa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <read_block+0x1a4>)
 8000700:	8812      	ldrh	r2, [r2, #0]
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	f107 0214 	add.w	r2, r7, #20
 8000708:	f107 0110 	add.w	r1, r7, #16
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2302      	movs	r3, #2
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <read_block+0x1a0>)
 8000716:	f001 fdf1 	bl	80022fc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000724:	f000 fdc6 	bl	80012b4 <HAL_GPIO_WritePin>
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000048c 	.word	0x2000048c
 8000738:	08004fb0 	.word	0x08004fb0

0800073c <write_block>:

bool write_block(uint32_t block, uint8_t* data){
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	@ 0x38
 8000740:	af02      	add	r7, sp, #8
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	uint8_t cmd24[6];
	cmd24[0] = 0x58;
 8000746:	2358      	movs	r3, #88	@ 0x58
 8000748:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	cmd24[1] = (block >> 24)&0xFF;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	0e1b      	lsrs	r3, r3, #24
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	cmd24[2] = (block >> 16)&0xFF;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	0c1b      	lsrs	r3, r3, #16
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	cmd24[3] = (block >> 8) & 0xFF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	cmd24[4] = (block)&0xFF;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	cmd24[5] = 0xFF;
 8000772:	23ff      	movs	r3, #255	@ 0xff
 8000774:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	bool result = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	result = send_command(cmd24, 0x00);
 800077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe63 	bl	8000450 <send_command>
 800078a:	4603      	mov	r3, r0
 800078c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if(!result)
 8000790:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000794:	f083 0301 	eor.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <write_block+0x66>
		return 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	e097      	b.n	80008d2 <write_block+0x196>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f000 fd82 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFE}, 1, HAL_MAX_DELAY);
 80007b0:	23fe      	movs	r3, #254	@ 0xfe
 80007b2:	f887 3020 	strb.w	r3, [r7, #32]
 80007b6:	f107 0120 	add.w	r1, r7, #32
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	2201      	movs	r2, #1
 80007c0:	4846      	ldr	r0, [pc, #280]	@ (80008dc <write_block+0x1a0>)
 80007c2:	f001 fc45 	bl	8002050 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f000 fd70 	bl	80012b4 <HAL_GPIO_WritePin>

	for(int i = 0; i < 512; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007d8:	e01d      	b.n	8000816 <write_block+0xda>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e4:	f000 fd66 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t[]){data[i]}, 1, HAL_MAX_DELAY);
 80007e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	743b      	strb	r3, [r7, #16]
 80007f2:	f107 0110 	add.w	r1, r7, #16
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	2201      	movs	r2, #1
 80007fc:	4837      	ldr	r0, [pc, #220]	@ (80008dc <write_block+0x1a0>)
 80007fe:	f001 fc27 	bl	8002050 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080c:	f000 fd52 	bl	80012b4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 512; i++){
 8000810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000812:	3301      	adds	r3, #1
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800081c:	dbdd      	blt.n	80007da <write_block+0x9e>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f000 fd44 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFF, 0xFF}, 2, HAL_MAX_DELAY);
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <write_block+0x1a4>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	83bb      	strh	r3, [r7, #28]
 8000832:	f107 011c 	add.w	r1, r7, #28
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2202      	movs	r2, #2
 800083c:	4827      	ldr	r0, [pc, #156]	@ (80008dc <write_block+0x1a0>)
 800083e:	f001 fc07 	bl	8002050 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084c:	f000 fd32 	bl	80012b4 <HAL_GPIO_WritePin>

	uint8_t response[1];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f000 fd2b 	bl	80012b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 800085e:	23ff      	movs	r3, #255	@ 0xff
 8000860:	753b      	strb	r3, [r7, #20]
 8000862:	f107 0218 	add.w	r2, r7, #24
 8000866:	f107 0114 	add.w	r1, r7, #20
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	481a      	ldr	r0, [pc, #104]	@ (80008dc <write_block+0x1a0>)
 8000874:	f001 fd42 	bl	80022fc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000882:	f000 fd17 	bl	80012b4 <HAL_GPIO_WritePin>
	if((uint8_t)(response[0]&0x1F) != 0x05)
 8000886:	7e3b      	ldrb	r3, [r7, #24]
 8000888:	f003 031f 	and.w	r3, r3, #31
 800088c:	2b05      	cmp	r3, #5
 800088e:	d001      	beq.n	8000894 <write_block+0x158>
		return 0;
 8000890:	2300      	movs	r3, #0
 8000892:	e01e      	b.n	80008d2 <write_block+0x196>

	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f000 fd09 	bl	80012b4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 80008a2:	23ff      	movs	r3, #255	@ 0xff
 80008a4:	733b      	strb	r3, [r7, #12]
 80008a6:	f107 0218 	add.w	r2, r7, #24
 80008aa:	f107 010c 	add.w	r1, r7, #12
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	4809      	ldr	r0, [pc, #36]	@ (80008dc <write_block+0x1a0>)
 80008b8:	f001 fd20 	bl	80022fc <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f000 fcf5 	bl	80012b4 <HAL_GPIO_WritePin>
		if(response[0] != 0x00)
 80008ca:	7e3b      	ldrb	r3, [r7, #24]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0e1      	beq.n	8000894 <write_block+0x158>
			break;
	}

	return 1;
 80008d0:	2301      	movs	r3, #1
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3730      	adds	r7, #48	@ 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000048c 	.word	0x2000048c
 80008e0:	08004fb0 	.word	0x08004fb0

080008e4 <initialize_SD_card>:

bool initialize_SD_card(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
	uint8_t cmd0[6] = {0x40, 0x00, 0x00, 0x00, 0x00, 0x95};
 80008ea:	4a4a      	ldr	r2, [pc, #296]	@ (8000a14 <initialize_SD_card+0x130>)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f4:	6018      	str	r0, [r3, #0]
 80008f6:	3304      	adds	r3, #4
 80008f8:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd8[6] = {0x48, 0x00, 0x00, 0x01, 0xAA, 0x87};
 80008fa:	4a47      	ldr	r2, [pc, #284]	@ (8000a18 <initialize_SD_card+0x134>)
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000904:	6018      	str	r0, [r3, #0]
 8000906:	3304      	adds	r3, #4
 8000908:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd55[6] = {0x77, 0x00, 0x00, 0x00, 0x00, 0xFF};
 800090a:	4a44      	ldr	r2, [pc, #272]	@ (8000a1c <initialize_SD_card+0x138>)
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000914:	6018      	str	r0, [r3, #0]
 8000916:	3304      	adds	r3, #4
 8000918:	8019      	strh	r1, [r3, #0]
		  uint8_t acdm41[6] = {0x69, 0x40,0x00, 0x00, 0x00, 0xFF};
 800091a:	4a41      	ldr	r2, [pc, #260]	@ (8000a20 <initialize_SD_card+0x13c>)
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000924:	6018      	str	r0, [r3, #0]
 8000926:	3304      	adds	r3, #4
 8000928:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd16[6] = {0x50, 0x00, 0x00, 0x02, 0x00, 0xFF};
 800092a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a24 <initialize_SD_card+0x140>)
 800092c:	463b      	mov	r3, r7
 800092e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000932:	6018      	str	r0, [r3, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	8019      	strh	r1, [r3, #0]
		  bool result = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		  initialize_SPI_mode();
 800093e:	f7ff fe0b 	bl	8000558 <initialize_SPI_mode>
		  while(result == 0)
 8000942:	e008      	b.n	8000956 <initialize_SD_card+0x72>
			  result = send_command(cmd0, 0x01);
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	2101      	movs	r1, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fd80 	bl	8000450 <send_command>
 8000950:	4603      	mov	r3, r0
 8000952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1ef      	bne.n	8000944 <initialize_SD_card+0x60>
		  result = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 800096a:	e008      	b.n	800097e <initialize_SD_card+0x9a>
			  result = send_command(cmd8, 0x01);
 800096c:	f107 0318 	add.w	r3, r7, #24
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fd6c 	bl	8000450 <send_command>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 800097e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000982:	f083 0301 	eor.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1ef      	bne.n	800096c <initialize_SD_card+0x88>
		  result = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000992:	e01a      	b.n	80009ca <initialize_SD_card+0xe6>
			  bool temp = send_command(cmd55, 0x01);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2101      	movs	r1, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fd58 	bl	8000450 <send_command>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			  if(!temp)
 80009a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009aa:	f083 0301 	eor.w	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d109      	bne.n	80009c8 <initialize_SD_card+0xe4>
				  continue;
			  result = send_command(acdm41, 0x00);
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd48 	bl	8000450 <send_command>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80009c6:	e000      	b.n	80009ca <initialize_SD_card+0xe6>
				  continue;
 80009c8:	bf00      	nop
		  while(result == 0){
 80009ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1dd      	bne.n	8000994 <initialize_SD_card+0xb0>
		  }
		  result = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 80009de:	e007      	b.n	80009f0 <initialize_SD_card+0x10c>
			  result = send_command(cmd16, 0x00);
 80009e0:	463b      	mov	r3, r7
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fd33 	bl	8000450 <send_command>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 80009f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f0      	bne.n	80009e0 <initialize_SD_card+0xfc>
		  }
		  result = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  is_initialized = 1;
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <initialize_SD_card+0x144>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
		  return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08004fb4 	.word	0x08004fb4
 8000a18:	08004fbc 	.word	0x08004fbc
 8000a1c:	08004fc4 	.word	0x08004fc4
 8000a20:	08004fcc 	.word	0x08004fcc
 8000a24:	08004fd4 	.word	0x08004fd4
 8000a28:	20000489 	.word	0x20000489

08000a2c <is_SD_card_initialized>:

bool is_SD_card_initialized(){
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	return is_initialized;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <is_SD_card_initialized+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000489 	.word	0x20000489

08000a44 <SPI_Init>:
 #include "spi.h"

SPI_HandleTypeDef hspi1;
//PA5 = SCK, PA6 = MISO, PA7 = MOSI, PA9 = CS
void SPI_Init(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	 /* USER CODE END SPI1_Init 0 */
	 /* USER CODE BEGIN SPI1_Init 1 */
	 /* USER CODE END SPI1_Init 1 */
	 /* SPI1 parameter configuration*/
	 hspi1.Instance = SPI1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <SPI_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000abc <SPI_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
	 hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <SPI_Init+0x74>)
 8000a50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a54:	605a      	str	r2, [r3, #4]
	 hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <SPI_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	 hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <SPI_Init+0x74>)
 8000a5e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a62:	60da      	str	r2, [r3, #12]
	 hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <SPI_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
	 hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <SPI_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
	 hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <SPI_Init+0x74>)
 8000a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a76:	619a      	str	r2, [r3, #24]
	 hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <SPI_Init+0x74>)
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	61da      	str	r2, [r3, #28]
	 hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <SPI_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
	 hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <SPI_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
	 hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <SPI_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	 hspi1.Init.CRCPolynomial = 7;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <SPI_Init+0x74>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <SPI_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	@ 0x30
	 hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <SPI_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
	 if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <SPI_Init+0x74>)
 8000aa4:	f001 fa4a 	bl	8001f3c <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SPI_Init+0x6e>
	 {
	   Error_Handler();
 8000aae:	f7ff fcc9 	bl	8000444 <Error_Handler>
	 }
	 /* USER CODE BEGIN SPI1_Init 2 */
	 /* USER CODE END SPI1_Init 2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000048c 	.word	0x2000048c
 8000abc:	40013000 	.word	0x40013000

08000ac0 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a17      	ldr	r2, [pc, #92]	@ (8000b84 <HAL_SPI_MspInit+0x7c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d128      	bne.n	8000b7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	4a16      	ldr	r2, [pc, #88]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_SPI_MspInit+0x80>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b5a:	23e0      	movs	r3, #224	@ 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f000 f9f2 	bl	8000f60 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	@ 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013000 	.word	0x40013000
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be2:	f000 f893 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c14:	f7ff ffea 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	@ (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f004 f961 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff fac9 	bl	80001d8 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c54:	080050f8 	.word	0x080050f8
  ldr r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c5c:	2000051c 	.word	0x2000051c

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>

08000c62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f943 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f80e 	bl	8000c94 <HAL_InitTick>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	71fb      	strb	r3, [r7, #7]
 8000c82:	e001      	b.n	8000c88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c84:	f7ff ff1c 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_InitTick+0x6c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d023      	beq.n	8000cf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_InitTick+0x70>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_InitTick+0x6c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f941 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10f      	bne.n	8000cea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d809      	bhi.n	8000ce4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f919 	bl	8000f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_InitTick+0x74>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e007      	b.n	8000cf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e004      	b.n	8000cf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e001      	b.n	8000cf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	200004f0 	.word	0x200004f0

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	200004f0 	.word	0x200004f0

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff ffee 	bl	8000d34 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffde 	bl	8000d34 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff47 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5c 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb0 	bl	8000eb4 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	e17f      	b.n	8001270 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8171 	beq.w	800126a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x40>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d118      	bne.n	8001040 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	6939      	ldr	r1, [r7, #16]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80ac 	beq.w	800126a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b5f      	ldr	r3, [pc, #380]	@ (8001290 <HAL_GPIO_Init+0x330>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001116:	4a5e      	ldr	r2, [pc, #376]	@ (8001290 <HAL_GPIO_Init+0x330>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6613      	str	r3, [r2, #96]	@ 0x60
 800111e:	4b5c      	ldr	r3, [pc, #368]	@ (8001290 <HAL_GPIO_Init+0x330>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800112a:	4a5a      	ldr	r2, [pc, #360]	@ (8001294 <HAL_GPIO_Init+0x334>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x242>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4f      	ldr	r2, [pc, #316]	@ (8001298 <HAL_GPIO_Init+0x338>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x23e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4e      	ldr	r2, [pc, #312]	@ (800129c <HAL_GPIO_Init+0x33c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x23a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4d      	ldr	r2, [pc, #308]	@ (80012a0 <HAL_GPIO_Init+0x340>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x236>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4c      	ldr	r2, [pc, #304]	@ (80012a4 <HAL_GPIO_Init+0x344>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x232>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4b      	ldr	r2, [pc, #300]	@ (80012a8 <HAL_GPIO_Init+0x348>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x22e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4a      	ldr	r2, [pc, #296]	@ (80012ac <HAL_GPIO_Init+0x34c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x22a>
 8001186:	2306      	movs	r3, #6
 8001188:	e00c      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800118a:	2307      	movs	r3, #7
 800118c:	e00a      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800118e:	2305      	movs	r3, #5
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 8001192:	2304      	movs	r3, #4
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4937      	ldr	r1, [pc, #220]	@ (8001294 <HAL_GPIO_Init+0x334>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011c2:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011e6:	4a32      	ldr	r2, [pc, #200]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ec:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001210:	4a27      	ldr	r2, [pc, #156]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001216:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800123a:	4a1d      	ldr	r2, [pc, #116]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001264:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <HAL_GPIO_Init+0x350>)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	f47f ae78 	bne.w	8000f70 <HAL_GPIO_Init+0x10>
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	48001400 	.word	0x48001400
 80012ac:	48001800 	.word	0x48001800
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800130e:	d130      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800131c:	d038      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001326:	4a1e      	ldr	r2, [pc, #120]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2232      	movs	r2, #50	@ 0x32
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	e002      	b.n	800134c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001358:	d102      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f2      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800136c:	d110      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e00f      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137e:	d007      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001388:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800138e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83

080013ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e3ca      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013be:	4b97      	ldr	r3, [pc, #604]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c8:	4b94      	ldr	r3, [pc, #592]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80e4 	beq.w	80015a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4a>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	f040 808b 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 8087 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x62>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e3a2      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b82      	ldr	r3, [pc, #520]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_RCC_OscConfig+0x7c>
 800141e:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x88>
 8001428:	4b7c      	ldr	r3, [pc, #496]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001434:	4293      	cmp	r3, r2
 8001436:	d223      	bcs.n	8001480 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd1d 	bl	8001e7c <RCC_SetFlashLatencyFromMSIRange>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e383      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b73      	ldr	r3, [pc, #460]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a72      	ldr	r2, [pc, #456]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b70      	ldr	r3, [pc, #448]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	496d      	ldr	r1, [pc, #436]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b6c      	ldr	r3, [pc, #432]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	4968      	ldr	r1, [pc, #416]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e025      	b.n	80014cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b66      	ldr	r3, [pc, #408]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a65      	ldr	r2, [pc, #404]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b63      	ldr	r3, [pc, #396]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4960      	ldr	r1, [pc, #384]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149e:	4b5f      	ldr	r3, [pc, #380]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	495b      	ldr	r1, [pc, #364]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fcdd 	bl	8001e7c <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e343      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014cc:	f000 fc4a 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b52      	ldr	r3, [pc, #328]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	4950      	ldr	r1, [pc, #320]	@ (8001620 <HAL_RCC_OscConfig+0x274>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <HAL_RCC_OscConfig+0x278>)
 80014ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001628 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fbcf 	bl	8000c94 <HAL_InitTick>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d052      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	e327      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d032      	beq.n	8001572 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150c:	4b43      	ldr	r3, [pc, #268]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a42      	ldr	r2, [pc, #264]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fc0c 	bl	8000d34 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fc08 	bl	8000d34 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e310      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a36      	ldr	r2, [pc, #216]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4931      	ldr	r1, [pc, #196]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	492c      	ldr	r1, [pc, #176]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e01a      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001572:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a29      	ldr	r2, [pc, #164]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157e:	f7ff fbd9 	bl	8000d34 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001586:	f7ff fbd5 	bl	8000d34 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e2dd      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x1da>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d074      	beq.n	800169e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x21a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d10e      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d064      	beq.n	800169c <HAL_RCC_OscConfig+0x2f0>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d160      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2ba      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x24a>
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e026      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015fe:	d115      	bne.n	800162c <HAL_RCC_OscConfig+0x280>
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a02      	ldr	r2, [pc, #8]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	08005028 	.word	0x08005028
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004
 800162c:	4ba0      	ldr	r3, [pc, #640]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a9f      	ldr	r2, [pc, #636]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b9d      	ldr	r3, [pc, #628]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9c      	ldr	r2, [pc, #624]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb72 	bl	8000d34 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb6e 	bl	8000d34 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e276      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2a8>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fb5e 	bl	8000d34 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fb5a 	bl	8000d34 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	@ 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e262      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	4b88      	ldr	r3, [pc, #544]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x2d0>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d060      	beq.n	800176c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x310>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d119      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	4b7c      	ldr	r3, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x328>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e23f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b76      	ldr	r3, [pc, #472]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4973      	ldr	r1, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	e040      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb19 	bl	8000d34 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fb15 	bl	8000d34 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e21d      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	4b65      	ldr	r3, [pc, #404]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b62      	ldr	r3, [pc, #392]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	495f      	ldr	r1, [pc, #380]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e018      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a5c      	ldr	r2, [pc, #368]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff faf5 	bl	8000d34 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff faf1 	bl	8000d34 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1f9      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	4a4a      	ldr	r2, [pc, #296]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fad0 	bl	8000d34 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff facc 	bl	8000d34 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1d4      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017aa:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x3ec>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c0:	4a3b      	ldr	r2, [pc, #236]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fab3 	bl	8000d34 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff faaf 	bl	8000d34 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1b7      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	4b32      	ldr	r3, [pc, #200]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80a6 	beq.w	800194c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001828:	2301      	movs	r3, #1
 800182a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001844:	f7ff fa76 	bl	8000d34 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff fa72 	bl	8000d34 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e17a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_RCC_OscConfig+0x508>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d8>
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001882:	e029      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d115      	bne.n	80018b8 <HAL_RCC_OscConfig+0x50c>
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001892:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a2:	4a03      	ldr	r2, [pc, #12]	@ (80018b0 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
 80018b8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018be:	4a9b      	ldr	r2, [pc, #620]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c8:	4b98      	ldr	r3, [pc, #608]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ce:	4a97      	ldr	r2, [pc, #604]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d016      	beq.n	800190e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fa28 	bl	8000d34 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff fa24 	bl	8000d34 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e12a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ed      	beq.n	80018e8 <HAL_RCC_OscConfig+0x53c>
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff fa11 	bl	8000d34 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fa0d 	bl	8000d34 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e113      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ed      	bne.n	8001916 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b7a      	ldr	r3, [pc, #488]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	4a79      	ldr	r2, [pc, #484]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80fe 	beq.w	8001b52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 80d0 	bne.w	8001b00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001960:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d130      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	3b01      	subs	r3, #1
 8001980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d127      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001990:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a0:	2a07      	cmp	r2, #7
 80019a2:	bf14      	ite	ne
 80019a4:	2201      	movne	r2, #1
 80019a6:	2200      	moveq	r2, #0
 80019a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d06e      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d069      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e8:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0ad      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a04:	f7ff f996 	bl	8000d34 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f992 	bl	8000d34 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e09a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	4b40      	ldr	r3, [pc, #256]	@ (8001b30 <HAL_RCC_OscConfig+0x784>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a44:	0212      	lsls	r2, r2, #8
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0552      	lsls	r2, r2, #21
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0652      	lsls	r2, r2, #25
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a64:	0912      	lsrs	r2, r2, #4
 8001a66:	0452      	lsls	r2, r2, #17
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	4930      	ldr	r1, [pc, #192]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a88:	f7ff f954 	bl	8000d34 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f950 	bl	8000d34 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aae:	e050      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d148      	bne.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a16      	ldr	r2, [pc, #88]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad8:	f7ff f92c 	bl	8000d34 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f928 	bl	8000d34 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e030      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x734>
 8001afe:	e028      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d023      	beq.n	8001b4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f90f 	bl	8000d34 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f90b 	bl	8000d34 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d905      	bls.n	8001b34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e013      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ec      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4905      	ldr	r1, [pc, #20]	@ (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_RCC_OscConfig+0x7b4>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e001      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	feeefffc 	.word	0xfeeefffc

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0e7      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b75      	ldr	r3, [pc, #468]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4970      	ldr	r1, [pc, #448]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b6e      	ldr	r3, [pc, #440]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cf      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d908      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b63      	ldr	r3, [pc, #396]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4960      	ldr	r1, [pc, #384]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d04c      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b5a      	ldr	r3, [pc, #360]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0a6      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e08e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e086      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4943      	ldr	r1, [pc, #268]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f872 	bl	8000d34 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f86e 	bl	8000d34 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	492b      	ldr	r1, [pc, #172]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d210      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 0207 	bic.w	r2, r3, #7
 8001cc0:	4923      	ldr	r1, [pc, #140]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e036      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4918      	ldr	r1, [pc, #96]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4910      	ldr	r1, [pc, #64]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d18:	f000 f824 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	490b      	ldr	r1, [pc, #44]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ffa9 	bl	8000c94 <HAL_InitTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08005028 	.word	0x08005028
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d72:	4b3e      	ldr	r3, [pc, #248]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d121      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11e      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e004      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d134      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d003      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0xac>
 8001e08:	e005      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0c:	617b      	str	r3, [r7, #20]
      break;
 8001e0e:	e005      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e002      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	3301      	adds	r3, #1
 8001e28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0e5b      	lsrs	r3, r3, #25
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08005038 	.word	0x08005038
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e88:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff fa26 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
 8001e9a:	e014      	b.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	4b25      	ldr	r3, [pc, #148]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea8:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb4:	f7ff fa16 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001eb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ecc:	d10b      	bne.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b80      	cmp	r3, #128	@ 0x80
 8001ed2:	d919      	bls.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ed8:	d902      	bls.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eda:	2302      	movs	r3, #2
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e013      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e010      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b80      	cmp	r3, #128	@ 0x80
 8001eea:	d902      	bls.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001eec:	2303      	movs	r3, #3
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e00a      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d102      	bne.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef8:	2302      	movs	r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e004      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b70      	cmp	r3, #112	@ 0x70
 8001f02:	d101      	bne.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f04:	2301      	movs	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 0207 	bic.w	r2, r3, #7
 8001f10:	4909      	ldr	r1, [pc, #36]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07c      	b.n	8002048 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7fe fdcd 	bl	8000b08 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f84:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f8e:	d902      	bls.n	8001f96 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e002      	b.n	8001f9c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001fa4:	d007      	beq.n	8001fb6 <HAL_SPI_Init+0x7a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fae:	d002      	beq.n	8001fb6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fc6:	d903      	bls.n	8001fd0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fce:	e002      	b.n	8001fd6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	ea42 0103 	orr.w	r1, r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	0c1b      	lsrs	r3, r3, #16
 8002016:	f003 0204 	and.w	r2, r3, #4
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	ea42 0103 	orr.w	r1, r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_SPI_Transmit+0x26>
 8002072:	2302      	movs	r3, #2
 8002074:	e13e      	b.n	80022f4 <HAL_SPI_Transmit+0x2a4>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800207e:	f7fe fe59 	bl	8000d34 <HAL_GetTick>
 8002082:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d002      	beq.n	8002096 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002090:	2302      	movs	r3, #2
 8002092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002094:	e125      	b.n	80022e2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_SPI_Transmit+0x52>
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020a6:	e11c      	b.n	80022e2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	88fa      	ldrh	r2, [r7, #6]
 80020c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	88fa      	ldrh	r2, [r7, #6]
 80020c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020f2:	d107      	bne.n	8002104 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	2b40      	cmp	r3, #64	@ 0x40
 8002110:	d007      	beq.n	8002122 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800212a:	d947      	bls.n	80021bc <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_SPI_Transmit+0xee>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d138      	bne.n	80021b0 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3302      	adds	r3, #2
 800214c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800215c:	e028      	b.n	80021b0 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d10f      	bne.n	800218c <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3302      	adds	r3, #2
 800217a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800218a:	e011      	b.n	80021b0 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_SPI_Transmit+0x15a>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d00a      	beq.n	80021b0 <HAL_SPI_Transmit+0x160>
 800219a:	f7fe fdcb 	bl	8000d34 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d802      	bhi.n	80021b0 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021ae:	e098      	b.n	80022e2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1d1      	bne.n	800215e <HAL_SPI_Transmit+0x10e>
 80021ba:	e070      	b.n	800229e <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_SPI_Transmit+0x17e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d162      	bne.n	8002294 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d90f      	bls.n	80021f8 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	881a      	ldrh	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3302      	adds	r3, #2
 80021e6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b02      	subs	r3, #2
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021f6:	e04d      	b.n	8002294 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	320c      	adds	r2, #12
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002216:	e03d      	b.n	8002294 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d124      	bne.n	8002270 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d90f      	bls.n	8002250 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3302      	adds	r3, #2
 800223e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b02      	subs	r3, #2
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800224e:	e021      	b.n	8002294 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	60ba      	str	r2, [r7, #8]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	320c      	adds	r2, #12
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800226e:	e011      	b.n	8002294 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_SPI_Transmit+0x23e>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d00a      	beq.n	8002294 <HAL_SPI_Transmit+0x244>
 800227e:	f7fe fd59 	bl	8000d34 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d802      	bhi.n	8002294 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002292:	e026      	b.n	80022e2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1bc      	bne.n	8002218 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fb02 	bl	80028ac <SPI_EndRxTxTransaction>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	77fb      	strb	r3, [r7, #31]
 80022de:	e000      	b.n	80022e2 <HAL_SPI_Transmit+0x292>
  }

error:
 80022e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	@ 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002316:	2301      	movs	r3, #1
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_SPI_TransmitReceive+0x32>
 800232a:	2302      	movs	r3, #2
 800232c:	e1e2      	b.n	80026f4 <HAL_SPI_TransmitReceive+0x3f8>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002336:	f7fe fcfd 	bl	8000d34 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d00e      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x74>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002358:	d106      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x6c>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d003      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800236e:	e1b7      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x86>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x86>
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002388:	e1aa      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b04      	cmp	r3, #4
 8002394:	d003      	beq.n	800239e <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	887a      	ldrh	r2, [r7, #2]
 80023ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023e0:	d805      	bhi.n	80023ee <HAL_SPI_TransmitReceive+0xf2>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d908      	bls.n	8002400 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	e007      	b.n	8002410 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800240e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241a:	2b40      	cmp	r3, #64	@ 0x40
 800241c:	d007      	beq.n	800242e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002436:	d975      	bls.n	8002524 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_SPI_TransmitReceive+0x14e>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d160      	bne.n	800250c <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3302      	adds	r3, #2
 8002458:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002468:	e050      	b.n	800250c <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01c      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x1ae>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d017      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x1ae>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d110      	bne.n	80024aa <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3302      	adds	r3, #2
 8002496:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01a      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x1f0>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d113      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3302      	adds	r3, #2
 80024d4:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024e8:	2301      	movs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f2:	d00b      	beq.n	800250c <HAL_SPI_TransmitReceive+0x210>
 80024f4:	f7fe fc1e 	bl	8000d34 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002500:	429a      	cmp	r2, r3
 8002502:	d803      	bhi.n	800250c <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800250a:	e0e9      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1a9      	bne.n	800246a <HAL_SPI_TransmitReceive+0x16e>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1a3      	bne.n	800246a <HAL_SPI_TransmitReceive+0x16e>
 8002522:	e0c9      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_SPI_TransmitReceive+0x23c>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	f040 80b3 	bne.w	800269e <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d90f      	bls.n	8002562 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3302      	adds	r3, #2
 8002550:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b02      	subs	r3, #2
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002560:	e09d      	b.n	800269e <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	60ba      	str	r2, [r7, #8]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	320c      	adds	r2, #12
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002580:	e08d      	b.n	800269e <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	d031      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x2f0>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d02c      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x2f0>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b02      	cmp	r3, #2
 800259e:	d125      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d90f      	bls.n	80025ca <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3302      	adds	r3, #2
 80025b8:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b02      	subs	r3, #2
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025c8:	e00e      	b.n	80025e8 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	60ba      	str	r2, [r7, #8]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	320c      	adds	r2, #12
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d042      	beq.n	800267e <HAL_SPI_TransmitReceive+0x382>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d13b      	bne.n	800267e <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d920      	bls.n	8002654 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3302      	adds	r3, #2
 8002622:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b02      	subs	r3, #2
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d81b      	bhi.n	800267a <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e012      	b.n	800267a <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f103 020c 	add.w	r2, r3, #12
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	6079      	str	r1, [r7, #4]
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800267a:	2301      	movs	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d00b      	beq.n	800269e <HAL_SPI_TransmitReceive+0x3a2>
 8002686:	f7fe fb55 	bl	8000d34 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002692:	429a      	cmp	r2, r3
 8002694:	d803      	bhi.n	800269e <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800269c:	e020      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f af6c 	bne.w	8002582 <HAL_SPI_TransmitReceive+0x286>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f47f af65 	bne.w	8002582 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f8f5 	bl	80028ac <SPI_EndRxTxTransaction>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026dc:	e000      	b.n	80026e0 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80026de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80026f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3728      	adds	r7, #40	@ 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800270a:	e04c      	b.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d048      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800271a:	f7fe fb0b 	bl	8000d34 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d83d      	bhi.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002742:	d111      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800274c:	d004      	beq.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002756:	d107      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002770:	d10f      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e00e      	b.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d101      	bne.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xbe>
 80027b6:	2201      	movs	r2, #1
 80027b8:	e000      	b.n	80027bc <SPI_WaitFlagStateUntilTimeout+0xc0>
 80027ba:	2200      	movs	r2, #0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d1a4      	bne.n	800270c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80027da:	e05a      	b.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80027e2:	d109      	bne.n	80027f8 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d048      	beq.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002806:	f7fe fa95 	bl	8000d34 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d83d      	bhi.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282e:	d111      	bne.n	8002854 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002838:	d004      	beq.n	8002844 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002842:	d107      	bne.n	8002854 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800285c:	d10f      	bne.n	800287e <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800287c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e008      	b.n	80028a4 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d19c      	bne.n	80027dc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2200      	movs	r2, #0
 80028c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff ff81 	bl	80027cc <SPI_WaitFifoStateUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e027      	b.n	8002930 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2180      	movs	r1, #128	@ 0x80
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff ff06 	bl	80026fc <SPI_WaitFlagStateUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fa:	f043 0220 	orr.w	r2, r3, #32
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e014      	b.n	8002930 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ff5a 	bl	80027cc <SPI_WaitFifoStateUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e000      	b.n	8002930 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800293c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
	switch(pdrv){
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <disk_status+0x22>
	case DEV_MMC:
		if(is_SD_card_initialized())
 8002958:	f7fe f868 	bl	8000a2c <is_SD_card_initialized>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <disk_status+0x1e>
			return 0;
 8002962:	2300      	movs	r3, #0
 8002964:	e002      	b.n	800296c <disk_status+0x24>
		else
			return STA_NOINIT;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <disk_status+0x24>
	default:
		return STA_NOINIT;
 800296a:	2301      	movs	r3, #1
	}
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat = STA_NOINIT;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <disk_initialize+0x24>
	case DEV_MMC:
		if(initialize_SD_card() == 1)
 8002988:	f7fd ffac 	bl	80008e4 <initialize_SD_card>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <disk_initialize+0x28>
			stat = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
		break;
 8002996:	e001      	b.n	800299c <disk_initialize+0x28>
	default:
		return STA_NOINIT;
 8002998:	2301      	movs	r3, #1
 800299a:	e001      	b.n	80029a0 <disk_initialize+0x2c>
		break;
 800299c:	bf00      	nop
	}
	return stat;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
  switch(pdrv){
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d127      	bne.n	8002a0e <disk_read+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 80029be:	f7fe f835 	bl	8000a2c <is_SD_card_initialized>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f083 0301 	eor.w	r3, r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <disk_read+0x2a>
			return RES_NOTRDY;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e01e      	b.n	8002a10 <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e014      	b.n	8002a02 <disk_read+0x5a>
			if(!read_block(sector+i, buff+(i*512)))
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	18d0      	adds	r0, r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	025b      	lsls	r3, r3, #9
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4413      	add	r3, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fd fdd4 	bl	8000594 <read_block>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <disk_read+0x54>
				return RES_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e009      	b.n	8002a10 <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d3e6      	bcc.n	80029d8 <disk_read+0x30>
		}
		return RES_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <disk_read+0x68>
	default:
		return RES_PARERR;
 8002a0e:	2304      	movs	r3, #4
	}
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d127      	bne.n	8002a7e <disk_write+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 8002a2e:	f7fd fffd 	bl	8000a2c <is_SD_card_initialized>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <disk_write+0x2a>
			return RES_NOTRDY;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e01e      	b.n	8002a80 <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e014      	b.n	8002a72 <disk_write+0x5a>
			if(!write_block(sector+i, buff+(i*512)))
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	18d0      	adds	r0, r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	025b      	lsls	r3, r3, #9
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	4413      	add	r3, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fd fe70 	bl	800073c <write_block>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f083 0301 	eor.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <disk_write+0x54>
				return RES_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e009      	b.n	8002a80 <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d3e6      	bcc.n	8002a48 <disk_write+0x30>
		}
		return RES_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <disk_write+0x68>
	default:
		return RES_PARERR;
 8002a7e:	2304      	movs	r3, #4
	}
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	603a      	str	r2, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
 8002a94:	460b      	mov	r3, r1
 8002a96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]

  switch(cmd){
 8002a9c:	79bb      	ldrb	r3, [r7, #6]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d825      	bhi.n	8002aee <disk_ioctl+0x66>
 8002aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <disk_ioctl+0x20>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002abd 	.word	0x08002abd
 8002aac:	08002ac3 	.word	0x08002ac3
 8002ab0:	08002acf 	.word	0x08002acf
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	08002ae9 	.word	0x08002ae9
  case CTRL_SYNC:
	  res = RES_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
	  break;
 8002ac0:	e018      	b.n	8002af4 <disk_ioctl+0x6c>
  case GET_SECTOR_COUNT:
	  *(DWORD*)buff = 67,108,864;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2243      	movs	r2, #67	@ 0x43
 8002ac6:	601a      	str	r2, [r3, #0]
	  res = RES_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
	  break;
 8002acc:	e012      	b.n	8002af4 <disk_ioctl+0x6c>
  case GET_SECTOR_SIZE:
	  *(WORD*)buff = 512;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ad4:	801a      	strh	r2, [r3, #0]
	  res = RES_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
	  break;
 8002ada:	e00b      	b.n	8002af4 <disk_ioctl+0x6c>
  case GET_BLOCK_SIZE:
	  *(DWORD*)buff = 32;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	601a      	str	r2, [r3, #0]
	  res = RES_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
	  break;
 8002ae6:	e005      	b.n	8002af4 <disk_ioctl+0x6c>
  case CTRL_TRIM:
	  res = RES_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
	  break;
 8002aec:	e002      	b.n	8002af4 <disk_ioctl+0x6c>
  default:
	  res = RES_PARERR;
 8002aee:	2304      	movs	r3, #4
 8002af0:	73fb      	strb	r3, [r7, #15]
	  break;
 8002af2:	bf00      	nop
  }
}
 8002af4:	bf00      	nop
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	b21a      	sxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b21b      	sxth	r3, r3
 8002b24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002b26:	89fb      	ldrh	r3, [r7, #14]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3303      	adds	r3, #3
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	3202      	adds	r2, #2
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	3201      	adds	r2, #1
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	1c53      	adds	r3, r2, #1
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	1c59      	adds	r1, r3, #1
 8002c2c:	6179      	str	r1, [r7, #20]
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f1      	bne.n	8002c22 <mem_cpy+0x1a>
	}
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002c4a:	b480      	push	{r7}
 8002c4c:	b087      	sub	sp, #28
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	617a      	str	r2, [r7, #20]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f3      	bne.n	8002c5a <mem_set+0x10>
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	@ 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	61fa      	str	r2, [r7, #28]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	61ba      	str	r2, [r7, #24]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	1acb      	subs	r3, r1, r3
 8002cac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <mem_cmp+0x40>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0eb      	beq.n	8002c98 <mem_cmp+0x18>

	return r;
 8002cc0:	697b      	ldr	r3, [r7, #20]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	@ 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002cd8:	e002      	b.n	8002ce0 <chk_chr+0x12>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <chk_chr+0x26>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d1f2      	bne.n	8002cda <chk_chr+0xc>
	return *str;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	e029      	b.n	8002d6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002d18:	4a27      	ldr	r2, [pc, #156]	@ (8002db8 <chk_lock+0xb4>)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4413      	add	r3, r2
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01d      	beq.n	8002d62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002d26:	4a24      	ldr	r2, [pc, #144]	@ (8002db8 <chk_lock+0xb4>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d116      	bne.n	8002d66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002d38:	4a1f      	ldr	r2, [pc, #124]	@ (8002db8 <chk_lock+0xb4>)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d10c      	bne.n	8002d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002db8 <chk_lock+0xb4>)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4413      	add	r3, r2
 8002d54:	3308      	adds	r3, #8
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d102      	bne.n	8002d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002d60:	e007      	b.n	8002d72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d9d2      	bls.n	8002d18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d109      	bne.n	8002d8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <chk_lock+0x80>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d101      	bne.n	8002d88 <chk_lock+0x84>
 8002d84:	2300      	movs	r3, #0
 8002d86:	e010      	b.n	8002daa <chk_lock+0xa6>
 8002d88:	2312      	movs	r3, #18
 8002d8a:	e00e      	b.n	8002daa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <chk_lock+0xa0>
 8002d92:	4a09      	ldr	r2, [pc, #36]	@ (8002db8 <chk_lock+0xb4>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	4413      	add	r3, r2
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da2:	d101      	bne.n	8002da8 <chk_lock+0xa4>
 8002da4:	2310      	movs	r3, #16
 8002da6:	e000      	b.n	8002daa <chk_lock+0xa6>
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200004fc 	.word	0x200004fc

08002dbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	e002      	b.n	8002dce <enq_lock+0x12>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d806      	bhi.n	8002de2 <enq_lock+0x26>
 8002dd4:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <enq_lock+0x40>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4413      	add	r3, r2
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f2      	bne.n	8002dc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	200004fc 	.word	0x200004fc

08002e00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e01f      	b.n	8002e50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002e10:	4a41      	ldr	r2, [pc, #260]	@ (8002f18 <inc_lock+0x118>)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	4413      	add	r3, r2
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d113      	bne.n	8002e4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002e22:	4a3d      	ldr	r2, [pc, #244]	@ (8002f18 <inc_lock+0x118>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d109      	bne.n	8002e4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002e36:	4a38      	ldr	r2, [pc, #224]	@ (8002f18 <inc_lock+0x118>)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3308      	adds	r3, #8
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d006      	beq.n	8002e58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d9dc      	bls.n	8002e10 <inc_lock+0x10>
 8002e56:	e000      	b.n	8002e5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002e58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d132      	bne.n	8002ec6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e002      	b.n	8002e6c <inc_lock+0x6c>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d806      	bhi.n	8002e80 <inc_lock+0x80>
 8002e72:	4a29      	ldr	r2, [pc, #164]	@ (8002f18 <inc_lock+0x118>)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	4413      	add	r3, r2
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f2      	bne.n	8002e66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d101      	bne.n	8002e8a <inc_lock+0x8a>
 8002e86:	2300      	movs	r3, #0
 8002e88:	e040      	b.n	8002f0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4922      	ldr	r1, [pc, #136]	@ (8002f18 <inc_lock+0x118>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	440b      	add	r3, r1
 8002e96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	491e      	ldr	r1, [pc, #120]	@ (8002f18 <inc_lock+0x118>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	491a      	ldr	r1, [pc, #104]	@ (8002f18 <inc_lock+0x118>)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002eb8:	4a17      	ldr	r2, [pc, #92]	@ (8002f18 <inc_lock+0x118>)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <inc_lock+0xe0>
 8002ecc:	4a12      	ldr	r2, [pc, #72]	@ (8002f18 <inc_lock+0x118>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	4413      	add	r3, r2
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <inc_lock+0xe0>
 8002edc:	2300      	movs	r3, #0
 8002ede:	e015      	b.n	8002f0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d108      	bne.n	8002ef8 <inc_lock+0xf8>
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8002f18 <inc_lock+0x118>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	330c      	adds	r3, #12
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	e001      	b.n	8002efc <inc_lock+0xfc>
 8002ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002efc:	4906      	ldr	r1, [pc, #24]	@ (8002f18 <inc_lock+0x118>)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	440b      	add	r3, r1
 8002f04:	330c      	adds	r3, #12
 8002f06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	200004fc 	.word	0x200004fc

08002f1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d825      	bhi.n	8002f7c <dec_lock+0x60>
		n = Files[i].ctr;
 8002f30:	4a17      	ldr	r2, [pc, #92]	@ (8002f90 <dec_lock+0x74>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	330c      	adds	r3, #12
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f44:	d101      	bne.n	8002f4a <dec_lock+0x2e>
 8002f46:	2300      	movs	r3, #0
 8002f48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002f4a:	89fb      	ldrh	r3, [r7, #14]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <dec_lock+0x3a>
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002f56:	4a0e      	ldr	r2, [pc, #56]	@ (8002f90 <dec_lock+0x74>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	4413      	add	r3, r2
 8002f5e:	330c      	adds	r3, #12
 8002f60:	89fa      	ldrh	r2, [r7, #14]
 8002f62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <dec_lock+0x5a>
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <dec_lock+0x74>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	4413      	add	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	737b      	strb	r3, [r7, #13]
 8002f7a:	e001      	b.n	8002f80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002f80:	7b7b      	ldrb	r3, [r7, #13]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	200004fc 	.word	0x200004fc

08002f94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e010      	b.n	8002fc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd8 <clear_lock+0x44>)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4413      	add	r3, r2
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d105      	bne.n	8002fbe <clear_lock+0x2a>
 8002fb2:	4a09      	ldr	r2, [pc, #36]	@ (8002fd8 <clear_lock+0x44>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	4413      	add	r3, r2
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d9eb      	bls.n	8002fa2 <clear_lock+0xe>
	}
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200004fc 	.word	0x200004fc

08002fdc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	78db      	ldrb	r3, [r3, #3]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d034      	beq.n	800305a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7858      	ldrb	r0, [r3, #1]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003000:	2301      	movs	r3, #1
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	f7ff fd08 	bl	8002a18 <disk_write>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <sync_window+0x38>
			res = FR_DISK_ERR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	e022      	b.n	800305a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	1ad2      	subs	r2, r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	429a      	cmp	r2, r3
 8003028:	d217      	bcs.n	800305a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	789b      	ldrb	r3, [r3, #2]
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e010      	b.n	8003054 <sync_window+0x78>
					wsect += fs->fsize;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4413      	add	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7858      	ldrb	r0, [r3, #1]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003046:	2301      	movs	r3, #1
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	f7ff fce5 	bl	8002a18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3b01      	subs	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d8eb      	bhi.n	8003032 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d01b      	beq.n	80030b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ffad 	bl	8002fdc <sync_window>
 8003082:	4603      	mov	r3, r0
 8003084:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d113      	bne.n	80030b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7858      	ldrb	r0, [r3, #1]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003096:	2301      	movs	r3, #1
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	f7ff fc85 	bl	80029a8 <disk_read>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
 80030a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff87 	bl	8002fdc <sync_window>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d158      	bne.n	800318a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d148      	bne.n	8003172 <sync_fs+0xb2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	791b      	ldrb	r3, [r3, #4]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d144      	bne.n	8003172 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3330      	adds	r3, #48	@ 0x30
 80030ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fda9 	bl	8002c4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3330      	adds	r3, #48	@ 0x30
 80030fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003100:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fd38 	bl	8002b7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3330      	adds	r3, #48	@ 0x30
 800310e:	4921      	ldr	r1, [pc, #132]	@ (8003194 <sync_fs+0xd4>)
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fd4d 	bl	8002bb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3330      	adds	r3, #48	@ 0x30
 800311a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800311e:	491e      	ldr	r1, [pc, #120]	@ (8003198 <sync_fs+0xd8>)
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fd45 	bl	8002bb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3330      	adds	r3, #48	@ 0x30
 800312a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f7ff fd3b 	bl	8002bb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3330      	adds	r3, #48	@ 0x30
 800313e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f7ff fd31 	bl	8002bb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7858      	ldrb	r0, [r3, #1]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003166:	2301      	movs	r3, #1
 8003168:	f7ff fc56 	bl	8002a18 <disk_write>
			fs->fsi_flag = 0;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fc84 	bl	8002a88 <disk_ioctl>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <sync_fs+0xca>
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	41615252 	.word	0x41615252
 8003198:	61417272 	.word	0x61417272

0800319c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3b02      	subs	r3, #2
 80031aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	3b02      	subs	r3, #2
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d301      	bcc.n	80031bc <clust2sect+0x20>
 80031b8:	2300      	movs	r3, #0
 80031ba:	e008      	b.n	80031ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	895b      	ldrh	r3, [r3, #10]
 80031c0:	461a      	mov	r2, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	fb03 f202 	mul.w	r2, r3, r2
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	4413      	add	r3, r2
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d904      	bls.n	80031fa <get_fat+0x20>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <get_fat+0x26>
		val = 1;	/* Internal error */
 80031fa:	2301      	movs	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e08e      	b.n	800331e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d061      	beq.n	80032d2 <get_fat+0xf8>
 800320e:	2b03      	cmp	r3, #3
 8003210:	dc7b      	bgt.n	800330a <get_fat+0x130>
 8003212:	2b01      	cmp	r3, #1
 8003214:	d002      	beq.n	800321c <get_fat+0x42>
 8003216:	2b02      	cmp	r3, #2
 8003218:	d041      	beq.n	800329e <get_fat+0xc4>
 800321a:	e076      	b.n	800330a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	0a5b      	lsrs	r3, r3, #9
 8003232:	4413      	add	r3, r2
 8003234:	4619      	mov	r1, r3
 8003236:	6938      	ldr	r0, [r7, #16]
 8003238:	f7ff ff14 	bl	8003064 <move_window>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d166      	bne.n	8003310 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	60fa      	str	r2, [r7, #12]
 8003248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003254:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0a5b      	lsrs	r3, r3, #9
 800325e:	4413      	add	r3, r2
 8003260:	4619      	mov	r1, r3
 8003262:	6938      	ldr	r0, [r7, #16]
 8003264:	f7ff fefe 	bl	8003064 <move_window>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d152      	bne.n	8003314 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4313      	orrs	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <get_fat+0xba>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	e002      	b.n	800329a <get_fat+0xc0>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329a:	617b      	str	r3, [r7, #20]
			break;
 800329c:	e03f      	b.n	800331e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	4413      	add	r3, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	6938      	ldr	r0, [r7, #16]
 80032ac:	f7ff feda 	bl	8003064 <move_window>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d130      	bne.n	8003318 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80032c4:	4413      	add	r3, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fc1c 	bl	8002b04 <ld_word>
 80032cc:	4603      	mov	r3, r0
 80032ce:	617b      	str	r3, [r7, #20]
			break;
 80032d0:	e025      	b.n	800331e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	09db      	lsrs	r3, r3, #7
 80032da:	4413      	add	r3, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	6938      	ldr	r0, [r7, #16]
 80032e0:	f7ff fec0 	bl	8003064 <move_window>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d118      	bne.n	800331c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80032f8:	4413      	add	r3, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fc1a 	bl	8002b34 <ld_dword>
 8003300:	4603      	mov	r3, r0
 8003302:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003306:	617b      	str	r3, [r7, #20]
			break;
 8003308:	e009      	b.n	800331e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800330a:	2301      	movs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e006      	b.n	800331e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003310:	bf00      	nop
 8003312:	e004      	b.n	800331e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800331c:	bf00      	nop
		}
	}

	return val;
 800331e:	697b      	ldr	r3, [r7, #20]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	@ 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003334:	2302      	movs	r3, #2
 8003336:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b01      	cmp	r3, #1
 800333c:	f240 80d9 	bls.w	80034f2 <put_fat+0x1ca>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	f080 80d3 	bcs.w	80034f2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b03      	cmp	r3, #3
 8003352:	f000 8096 	beq.w	8003482 <put_fat+0x15a>
 8003356:	2b03      	cmp	r3, #3
 8003358:	f300 80cb 	bgt.w	80034f2 <put_fat+0x1ca>
 800335c:	2b01      	cmp	r3, #1
 800335e:	d002      	beq.n	8003366 <put_fat+0x3e>
 8003360:	2b02      	cmp	r3, #2
 8003362:	d06e      	beq.n	8003442 <put_fat+0x11a>
 8003364:	e0c5      	b.n	80034f2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4413      	add	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1a      	ldr	r2, [r3, #32]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	0a5b      	lsrs	r3, r3, #9
 800337c:	4413      	add	r3, r2
 800337e:	4619      	mov	r1, r3
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fe6f 	bl	8003064 <move_window>
 8003386:	4603      	mov	r3, r0
 8003388:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 80a9 	bne.w	80034e4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	61b9      	str	r1, [r7, #24]
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	4413      	add	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <put_fat+0xa4>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	b25a      	sxtb	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	4313      	orrs	r3, r2
 80033c6:	b25b      	sxtb	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e001      	b.n	80033d0 <put_fat+0xa8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	0a5b      	lsrs	r3, r3, #9
 80033e2:	4413      	add	r3, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff fe3c 	bl	8003064 <move_window>
 80033ec:	4603      	mov	r3, r0
 80033ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d178      	bne.n	80034e8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	4413      	add	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <put_fat+0xf0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e00e      	b.n	8003436 <put_fat+0x10e>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b25b      	sxtb	r3, r3
 800341e:	f023 030f 	bic.w	r3, r3, #15
 8003422:	b25a      	sxtb	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	b25b      	sxtb	r3, r3
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	b25b      	sxtb	r3, r3
 8003430:	4313      	orrs	r3, r2
 8003432:	b25b      	sxtb	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	70da      	strb	r2, [r3, #3]
			break;
 8003440:	e057      	b.n	80034f2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	4413      	add	r3, r2
 800344c:	4619      	mov	r1, r3
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff fe08 	bl	8003064 <move_window>
 8003454:	4603      	mov	r3, r0
 8003456:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d146      	bne.n	80034ec <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800346c:	4413      	add	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	b292      	uxth	r2, r2
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fb80 	bl	8002b7a <st_word>
			fs->wflag = 1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	70da      	strb	r2, [r3, #3]
			break;
 8003480:	e037      	b.n	80034f2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	09db      	lsrs	r3, r3, #7
 800348a:	4413      	add	r3, r2
 800348c:	4619      	mov	r1, r3
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff fde8 	bl	8003064 <move_window>
 8003494:	4603      	mov	r3, r0
 8003496:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d128      	bne.n	80034f0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80034b2:	4413      	add	r3, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fb3d 	bl	8002b34 <ld_dword>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034c0:	4323      	orrs	r3, r4
 80034c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80034d2:	4413      	add	r3, r2
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fb6a 	bl	8002bb0 <st_dword>
			fs->wflag = 1;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	70da      	strb	r2, [r3, #3]
			break;
 80034e2:	e006      	b.n	80034f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80034e4:	bf00      	nop
 80034e6:	e004      	b.n	80034f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80034e8:	bf00      	nop
 80034ea:	e002      	b.n	80034f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80034f0:	bf00      	nop
		}
	}
	return res;
 80034f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3724      	adds	r7, #36	@ 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}

080034fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d904      	bls.n	8003522 <remove_chain+0x26>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d301      	bcc.n	8003526 <remove_chain+0x2a>
 8003522:	2302      	movs	r3, #2
 8003524:	e04b      	b.n	80035be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69b8      	ldr	r0, [r7, #24]
 8003534:	f7ff fef8 	bl	8003328 <put_fat>
 8003538:	4603      	mov	r3, r0
 800353a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <remove_chain+0x4a>
 8003542:	7ffb      	ldrb	r3, [r7, #31]
 8003544:	e03b      	b.n	80035be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fe46 	bl	80031da <get_fat>
 800354e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d031      	beq.n	80035ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <remove_chain+0x64>
 800355c:	2302      	movs	r3, #2
 800355e:	e02e      	b.n	80035be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d101      	bne.n	800356c <remove_chain+0x70>
 8003568:	2301      	movs	r3, #1
 800356a:	e028      	b.n	80035be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800356c:	2200      	movs	r2, #0
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	69b8      	ldr	r0, [r7, #24]
 8003572:	f7ff fed9 	bl	8003328 <put_fat>
 8003576:	4603      	mov	r3, r0
 8003578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800357a:	7ffb      	ldrb	r3, [r7, #31]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <remove_chain+0x88>
 8003580:	7ffb      	ldrb	r3, [r7, #31]
 8003582:	e01c      	b.n	80035be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	3b02      	subs	r3, #2
 800358e:	429a      	cmp	r2, r3
 8003590:	d20b      	bcs.n	80035aa <remove_chain+0xae>
			fs->free_clst++;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	791b      	ldrb	r3, [r3, #4]
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3c6      	bcc.n	8003546 <remove_chain+0x4a>
 80035b8:	e000      	b.n	80035bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80035ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b088      	sub	sp, #32
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10d      	bne.n	80035f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <create_chain+0x2c>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d31b      	bcc.n	800362a <create_chain+0x64>
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e018      	b.n	800362a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fded 	bl	80031da <get_fat>
 8003600:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d801      	bhi.n	800360c <create_chain+0x46>
 8003608:	2301      	movs	r3, #1
 800360a:	e070      	b.n	80036ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d101      	bne.n	8003618 <create_chain+0x52>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	e06a      	b.n	80036ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	429a      	cmp	r2, r3
 8003620:	d201      	bcs.n	8003626 <create_chain+0x60>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	e063      	b.n	80036ee <create_chain+0x128>
		scl = clst;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3301      	adds	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	429a      	cmp	r2, r3
 800363c:	d307      	bcc.n	800364e <create_chain+0x88>
				ncl = 2;
 800363e:	2302      	movs	r3, #2
 8003640:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	429a      	cmp	r2, r3
 8003648:	d901      	bls.n	800364e <create_chain+0x88>
 800364a:	2300      	movs	r3, #0
 800364c:	e04f      	b.n	80036ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800364e:	69f9      	ldr	r1, [r7, #28]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fdc2 	bl	80031da <get_fat>
 8003656:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d003      	beq.n	800366c <create_chain+0xa6>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366a:	d101      	bne.n	8003670 <create_chain+0xaa>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	e03e      	b.n	80036ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	429a      	cmp	r2, r3
 8003676:	d1da      	bne.n	800362e <create_chain+0x68>
 8003678:	2300      	movs	r3, #0
 800367a:	e038      	b.n	80036ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800367c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800367e:	f04f 32ff 	mov.w	r2, #4294967295
 8003682:	69f9      	ldr	r1, [r7, #28]
 8003684:	6938      	ldr	r0, [r7, #16]
 8003686:	f7ff fe4f 	bl	8003328 <put_fat>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <create_chain+0xe2>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	6938      	ldr	r0, [r7, #16]
 80036a0:	f7ff fe42 	bl	8003328 <put_fat>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <create_chain+0x116>
		fs->last_clst = ncl;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	3b02      	subs	r3, #2
 80036be:	429a      	cmp	r2, r3
 80036c0:	d804      	bhi.n	80036cc <create_chain+0x106>
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	1e5a      	subs	r2, r3, #1
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	791b      	ldrb	r3, [r3, #4]
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	711a      	strb	r2, [r3, #4]
 80036da:	e007      	b.n	80036ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <create_chain+0x122>
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	e000      	b.n	80036ea <create_chain+0x124>
 80036e8:	2301      	movs	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80036ec:	69fb      	ldr	r3, [r7, #28]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	3304      	adds	r3, #4
 800370c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	0a5b      	lsrs	r3, r3, #9
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	8952      	ldrh	r2, [r2, #10]
 8003716:	fbb3 f3f2 	udiv	r3, r3, r2
 800371a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	613a      	str	r2, [r7, #16]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <clmt_clust+0x3a>
 800372c:	2300      	movs	r3, #0
 800372e:	e010      	b.n	8003752 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d307      	bcc.n	8003748 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3304      	adds	r3, #4
 8003744:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003746:	e7e9      	b.n	800371c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003748:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	4413      	add	r3, r2
}
 8003752:	4618      	mov	r0, r3
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003774:	d204      	bcs.n	8003780 <dir_sdi+0x22>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003780:	2302      	movs	r3, #2
 8003782:	e063      	b.n	800384c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <dir_sdi+0x46>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	8912      	ldrh	r2, [r2, #8]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d301      	bcc.n	80037ba <dir_sdi+0x5c>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e048      	b.n	800384c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	61da      	str	r2, [r3, #28]
 80037c2:	e029      	b.n	8003818 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	895b      	ldrh	r3, [r3, #10]
 80037c8:	025b      	lsls	r3, r3, #9
 80037ca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80037cc:	e019      	b.n	8003802 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fd01 	bl	80031da <get_fat>
 80037d8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d101      	bne.n	80037e6 <dir_sdi+0x88>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e032      	b.n	800384c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d904      	bls.n	80037f6 <dir_sdi+0x98>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d301      	bcc.n	80037fa <dir_sdi+0x9c>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e028      	b.n	800384c <dir_sdi+0xee>
			ofs -= csz;
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	429a      	cmp	r2, r3
 8003808:	d2e1      	bcs.n	80037ce <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	6938      	ldr	r0, [r7, #16]
 800380e:	f7ff fcc5 	bl	800319c <clust2sect>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <dir_sdi+0xcc>
 8003826:	2302      	movs	r3, #2
 8003828:	e010      	b.n	800384c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	0a5b      	lsrs	r3, r3, #9
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003844:	441a      	add	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	3320      	adds	r3, #32
 800386a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <dir_next+0x28>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800387a:	d301      	bcc.n	8003880 <dir_next+0x2c>
 800387c:	2304      	movs	r3, #4
 800387e:	e0aa      	b.n	80039d6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003886:	2b00      	cmp	r3, #0
 8003888:	f040 8098 	bne.w	80039bc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	8912      	ldrh	r2, [r2, #8]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	f0c0 8088 	bcc.w	80039bc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
 80038b2:	2304      	movs	r3, #4
 80038b4:	e08f      	b.n	80039d6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	0a5b      	lsrs	r3, r3, #9
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	8952      	ldrh	r2, [r2, #10]
 80038be:	3a01      	subs	r2, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d17a      	bne.n	80039bc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f7ff fc83 	bl	80031da <get_fat>
 80038d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d801      	bhi.n	80038e0 <dir_next+0x8c>
 80038dc:	2302      	movs	r3, #2
 80038de:	e07a      	b.n	80039d6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d101      	bne.n	80038ec <dir_next+0x98>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e074      	b.n	80039d6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d358      	bcc.n	80039a8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
 8003902:	2304      	movs	r3, #4
 8003904:	e067      	b.n	80039d6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f7ff fe59 	bl	80035c6 <create_chain>
 8003914:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <dir_next+0xcc>
 800391c:	2307      	movs	r3, #7
 800391e:	e05a      	b.n	80039d6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <dir_next+0xd6>
 8003926:	2302      	movs	r3, #2
 8003928:	e055      	b.n	80039d6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d101      	bne.n	8003936 <dir_next+0xe2>
 8003932:	2301      	movs	r3, #1
 8003934:	e04f      	b.n	80039d6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fb50 	bl	8002fdc <sync_window>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <dir_next+0xf2>
 8003942:	2301      	movs	r3, #1
 8003944:	e047      	b.n	80039d6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3330      	adds	r3, #48	@ 0x30
 800394a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f97a 	bl	8002c4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff fc1d 	bl	800319c <clust2sect>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003968:	e012      	b.n	8003990 <dir_next+0x13c>
						fs->wflag = 1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff fb33 	bl	8002fdc <sync_window>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <dir_next+0x12c>
 800397c:	2301      	movs	r3, #1
 800397e:	e02a      	b.n	80039d6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	3301      	adds	r3, #1
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	895b      	ldrh	r3, [r3, #10]
 8003994:	461a      	mov	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4293      	cmp	r3, r2
 800399a:	d3e6      	bcc.n	800396a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff fbf3 	bl	800319c <clust2sect>
 80039b6:	4602      	mov	r2, r0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ce:	441a      	add	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80039ee:	2100      	movs	r1, #0
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff feb4 	bl	800375e <dir_sdi>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d12b      	bne.n	8003a58 <dir_alloc+0x7a>
		n = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fb2a 	bl	8003064 <move_window>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11d      	bne.n	8003a56 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2be5      	cmp	r3, #229	@ 0xe5
 8003a22:	d004      	beq.n	8003a2e <dir_alloc+0x50>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3301      	adds	r3, #1
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d102      	bne.n	8003a42 <dir_alloc+0x64>
 8003a3c:	e00c      	b.n	8003a58 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003a42:	2101      	movs	r1, #1
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff05 	bl	8003854 <dir_next>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0d7      	beq.n	8003a04 <dir_alloc+0x26>
 8003a54:	e000      	b.n	8003a58 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003a56:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d101      	bne.n	8003a62 <dir_alloc+0x84>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	75fb      	strb	r3, [r7, #23]
	return res;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	331a      	adds	r3, #26
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f842 	bl	8002b04 <ld_word>
 8003a80:	4603      	mov	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d109      	bne.n	8003aa0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff f837 	bl	8002b04 <ld_word>
 8003a96:	4603      	mov	r3, r0
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	331a      	adds	r3, #26
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	b292      	uxth	r2, r2
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff f85a 	bl	8002b7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d109      	bne.n	8003ae2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f103 0214 	add.w	r2, r3, #20
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f7ff f84c 	bl	8002b7a <st_word>
	}
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003af8:	2100      	movs	r1, #0
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe2f 	bl	800375e <dir_sdi>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <dir_find+0x24>
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	e03e      	b.n	8003b8c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4619      	mov	r1, r3
 8003b14:	6938      	ldr	r0, [r7, #16]
 8003b16:	f7ff faa5 	bl	8003064 <move_window>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d12f      	bne.n	8003b84 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <dir_find+0x4e>
 8003b32:	2304      	movs	r3, #4
 8003b34:	75fb      	strb	r3, [r7, #23]
 8003b36:	e028      	b.n	8003b8a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	330b      	adds	r3, #11
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	330b      	adds	r3, #11
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <dir_find+0x86>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a18      	ldr	r0, [r3, #32]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3324      	adds	r3, #36	@ 0x24
 8003b62:	220b      	movs	r2, #11
 8003b64:	4619      	mov	r1, r3
 8003b66:	f7ff f88b 	bl	8002c80 <mem_cmp>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003b70:	2100      	movs	r1, #0
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fe6e 	bl	8003854 <dir_next>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0c5      	beq.n	8003b0e <dir_find+0x24>
 8003b82:	e002      	b.n	8003b8a <dir_find+0xa0>
		if (res != FR_OK) break;
 8003b84:	bf00      	nop
 8003b86:	e000      	b.n	8003b8a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003b88:	bf00      	nop

	return res;
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff1a 	bl	80039de <dir_alloc>
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11c      	bne.n	8003bee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68b8      	ldr	r0, [r7, #8]
 8003bbc:	f7ff fa52 	bl	8003064 <move_window>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d111      	bne.n	8003bee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff f839 	bl	8002c4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a18      	ldr	r0, [r3, #32]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3324      	adds	r3, #36	@ 0x24
 8003be0:	220b      	movs	r2, #11
 8003be2:	4619      	mov	r1, r3
 8003be4:	f7ff f810 	bl	8002c08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2201      	movs	r2, #1
 8003bec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3324      	adds	r3, #36	@ 0x24
 8003c0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003c0e:	220b      	movs	r2, #11
 8003c10:	2120      	movs	r1, #32
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f7ff f819 	bl	8002c4a <mem_set>
	si = i = 0; ni = 8;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	2308      	movs	r3, #8
 8003c22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003c32:	7efb      	ldrb	r3, [r7, #27]
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d94e      	bls.n	8003cd6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003c38:	7efb      	ldrb	r3, [r7, #27]
 8003c3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c3c:	d006      	beq.n	8003c4c <create_name+0x54>
 8003c3e:	7efb      	ldrb	r3, [r7, #27]
 8003c40:	2b5c      	cmp	r3, #92	@ 0x5c
 8003c42:	d110      	bne.n	8003c66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003c44:	e002      	b.n	8003c4c <create_name+0x54>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c56:	d0f6      	beq.n	8003c46 <create_name+0x4e>
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b5c      	cmp	r3, #92	@ 0x5c
 8003c62:	d0f0      	beq.n	8003c46 <create_name+0x4e>
			break;
 8003c64:	e038      	b.n	8003cd8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003c66:	7efb      	ldrb	r3, [r7, #27]
 8003c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c6a:	d003      	beq.n	8003c74 <create_name+0x7c>
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d30c      	bcc.n	8003c8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b0b      	cmp	r3, #11
 8003c78:	d002      	beq.n	8003c80 <create_name+0x88>
 8003c7a:	7efb      	ldrb	r3, [r7, #27]
 8003c7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c7e:	d001      	beq.n	8003c84 <create_name+0x8c>
 8003c80:	2306      	movs	r3, #6
 8003c82:	e044      	b.n	8003d0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003c84:	2308      	movs	r3, #8
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	230b      	movs	r3, #11
 8003c8a:	617b      	str	r3, [r7, #20]
			continue;
 8003c8c:	e022      	b.n	8003cd4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003c8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da04      	bge.n	8003ca0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003c96:	7efb      	ldrb	r3, [r7, #27]
 8003c98:	3b80      	subs	r3, #128	@ 0x80
 8003c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d18 <create_name+0x120>)
 8003c9c:	5cd3      	ldrb	r3, [r2, r3]
 8003c9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003ca0:	7efb      	ldrb	r3, [r7, #27]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	481d      	ldr	r0, [pc, #116]	@ (8003d1c <create_name+0x124>)
 8003ca6:	f7ff f812 	bl	8002cce <chk_chr>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <create_name+0xbc>
 8003cb0:	2306      	movs	r3, #6
 8003cb2:	e02c      	b.n	8003d0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003cb4:	7efb      	ldrb	r3, [r7, #27]
 8003cb6:	2b60      	cmp	r3, #96	@ 0x60
 8003cb8:	d905      	bls.n	8003cc6 <create_name+0xce>
 8003cba:	7efb      	ldrb	r3, [r7, #27]
 8003cbc:	2b7a      	cmp	r3, #122	@ 0x7a
 8003cbe:	d802      	bhi.n	8003cc6 <create_name+0xce>
 8003cc0:	7efb      	ldrb	r3, [r7, #27]
 8003cc2:	3b20      	subs	r3, #32
 8003cc4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	613a      	str	r2, [r7, #16]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4413      	add	r3, r2
 8003cd0:	7efa      	ldrb	r2, [r7, #27]
 8003cd2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003cd4:	e7a6      	b.n	8003c24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003cd6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	441a      	add	r2, r3
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <create_name+0xf4>
 8003ce8:	2306      	movs	r3, #6
 8003cea:	e010      	b.n	8003d0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2be5      	cmp	r3, #229	@ 0xe5
 8003cf2:	d102      	bne.n	8003cfa <create_name+0x102>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003cfa:	7efb      	ldrb	r3, [r7, #27]
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d801      	bhi.n	8003d04 <create_name+0x10c>
 8003d00:	2204      	movs	r2, #4
 8003d02:	e000      	b.n	8003d06 <create_name+0x10e>
 8003d04:	2200      	movs	r2, #0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	330b      	adds	r3, #11
 8003d0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003d0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	08005068 	.word	0x08005068
 8003d1c:	08004fe4 	.word	0x08004fe4

08003d20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003d34:	e002      	b.n	8003d3c <follow_path+0x1c>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b2f      	cmp	r3, #47	@ 0x2f
 8003d42:	d0f8      	beq.n	8003d36 <follow_path+0x16>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b5c      	cmp	r3, #92	@ 0x5c
 8003d4a:	d0f4      	beq.n	8003d36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b1f      	cmp	r3, #31
 8003d58:	d80a      	bhi.n	8003d70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8003d62:	2100      	movs	r1, #0
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fcfa 	bl	800375e <dir_sdi>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]
 8003d6e:	e043      	b.n	8003df8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003d70:	463b      	mov	r3, r7
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff3f 	bl	8003bf8 <create_name>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d134      	bne.n	8003dee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff feb0 	bl	8003aea <dir_find>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003d94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d127      	bne.n	8003df2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d122      	bne.n	8003df2 <follow_path+0xd2>
 8003dac:	2305      	movs	r3, #5
 8003dae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003db0:	e01f      	b.n	8003df2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d11c      	bne.n	8003df6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	799b      	ldrb	r3, [r3, #6]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003dc8:	2305      	movs	r3, #5
 8003dca:	75fb      	strb	r3, [r7, #23]
 8003dcc:	e014      	b.n	8003df8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ddc:	4413      	add	r3, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff fe43 	bl	8003a6c <ld_clust>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003dec:	e7c0      	b.n	8003d70 <follow_path+0x50>
			if (res != FR_OK) break;
 8003dee:	bf00      	nop
 8003df0:	e002      	b.n	8003df8 <follow_path+0xd8>
				break;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003df6:	bf00      	nop
			}
		}
	}

	return res;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d031      	beq.n	8003e7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e002      	b.n	8003e26 <get_ldnumber+0x24>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3301      	adds	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d903      	bls.n	8003e36 <get_ldnumber+0x34>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b3a      	cmp	r3, #58	@ 0x3a
 8003e34:	d1f4      	bne.n	8003e20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b3a      	cmp	r3, #58	@ 0x3a
 8003e3c:	d11c      	bne.n	8003e78 <get_ldnumber+0x76>
			tp = *path;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	60fa      	str	r2, [r7, #12]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	3b30      	subs	r3, #48	@ 0x30
 8003e4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	d80e      	bhi.n	8003e74 <get_ldnumber+0x72>
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d10a      	bne.n	8003e74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <get_ldnumber+0x72>
					vol = (int)i;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	e002      	b.n	8003e7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003e7c:	693b      	ldr	r3, [r7, #16]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	70da      	strb	r2, [r3, #3]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff f8dc 	bl	8003064 <move_window>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <check_fs+0x2a>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e038      	b.n	8003f28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3330      	adds	r3, #48	@ 0x30
 8003eba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fe20 	bl	8002b04 <ld_word>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <check_fs+0x48>
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e029      	b.n	8003f28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003eda:	2be9      	cmp	r3, #233	@ 0xe9
 8003edc:	d009      	beq.n	8003ef2 <check_fs+0x66>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ee4:	2beb      	cmp	r3, #235	@ 0xeb
 8003ee6:	d11e      	bne.n	8003f26 <check_fs+0x9a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003eee:	2b90      	cmp	r3, #144	@ 0x90
 8003ef0:	d119      	bne.n	8003f26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3330      	adds	r3, #48	@ 0x30
 8003ef6:	3336      	adds	r3, #54	@ 0x36
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fe1b 	bl	8002b34 <ld_dword>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f04:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <check_fs+0xa4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <check_fs+0x82>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e00c      	b.n	8003f28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3330      	adds	r3, #48	@ 0x30
 8003f12:	3352      	adds	r3, #82	@ 0x52
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fe0d 	bl	8002b34 <ld_dword>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a05      	ldr	r2, [pc, #20]	@ (8003f34 <check_fs+0xa8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <check_fs+0x9a>
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003f26:	2302      	movs	r3, #2
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	00544146 	.word	0x00544146
 8003f34:	33544146 	.word	0x33544146

08003f38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b096      	sub	sp, #88	@ 0x58
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ff58 	bl	8003e02 <get_ldnumber>
 8003f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da01      	bge.n	8003f5e <find_volume+0x26>
 8003f5a:	230b      	movs	r3, #11
 8003f5c:	e22d      	b.n	80043ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003f5e:	4aa1      	ldr	r2, [pc, #644]	@ (80041e4 <find_volume+0x2ac>)
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <find_volume+0x3a>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	e223      	b.n	80043ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01a      	beq.n	8003fbe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe fcdb 	bl	8002948 <disk_status>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003f98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10c      	bne.n	8003fbe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <find_volume+0x82>
 8003faa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003fb6:	230a      	movs	r3, #10
 8003fb8:	e1ff      	b.n	80043ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e1fd      	b.n	80043ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fccf 	bl	8002974 <disk_initialize>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1e6      	b.n	80043ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <find_volume+0xca>
 8003ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003ffe:	230a      	movs	r3, #10
 8004000:	e1db      	b.n	80043ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004008:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800400a:	f7ff ff3f 	bl	8003e8c <check_fs>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004014:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004018:	2b02      	cmp	r3, #2
 800401a:	d149      	bne.n	80040b0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800401c:	2300      	movs	r3, #0
 800401e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004020:	e01e      	b.n	8004060 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004030:	4413      	add	r3, r2
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	3304      	adds	r3, #4
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <find_volume+0x114>
 800403e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004040:	3308      	adds	r3, #8
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fd76 	bl	8002b34 <ld_dword>
 8004048:	4602      	mov	r2, r0
 800404a:	e000      	b.n	800404e <find_volume+0x116>
 800404c:	2200      	movs	r2, #0
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	3358      	adds	r3, #88	@ 0x58
 8004054:	443b      	add	r3, r7
 8004056:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800405a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800405c:	3301      	adds	r3, #1
 800405e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004062:	2b03      	cmp	r3, #3
 8004064:	d9dd      	bls.n	8004022 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004066:	2300      	movs	r3, #0
 8004068:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800406a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <find_volume+0x13e>
 8004070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004072:	3b01      	subs	r3, #1
 8004074:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	3358      	adds	r3, #88	@ 0x58
 800407c:	443b      	add	r3, r7
 800407e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004082:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <find_volume+0x15e>
 800408a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800408c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800408e:	f7ff fefd 	bl	8003e8c <check_fs>
 8004092:	4603      	mov	r3, r0
 8004094:	e000      	b.n	8004098 <find_volume+0x160>
 8004096:	2303      	movs	r3, #3
 8004098:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800409c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d905      	bls.n	80040b0 <find_volume+0x178>
 80040a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a6:	3301      	adds	r3, #1
 80040a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d9e2      	bls.n	8004076 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80040b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d101      	bne.n	80040bc <find_volume+0x184>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e17e      	b.n	80043ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80040bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d901      	bls.n	80040c8 <find_volume+0x190>
 80040c4:	230d      	movs	r3, #13
 80040c6:	e178      	b.n	80043ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80040c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ca:	3330      	adds	r3, #48	@ 0x30
 80040cc:	330b      	adds	r3, #11
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fd18 	bl	8002b04 <ld_word>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040da:	d001      	beq.n	80040e0 <find_volume+0x1a8>
 80040dc:	230d      	movs	r3, #13
 80040de:	e16c      	b.n	80043ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80040e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e2:	3330      	adds	r3, #48	@ 0x30
 80040e4:	3316      	adds	r3, #22
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fd0c 	bl	8002b04 <ld_word>
 80040ec:	4603      	mov	r3, r0
 80040ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80040f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <find_volume+0x1cc>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	3330      	adds	r3, #48	@ 0x30
 80040fa:	3324      	adds	r3, #36	@ 0x24
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fd19 	bl	8002b34 <ld_dword>
 8004102:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004108:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	789b      	ldrb	r3, [r3, #2]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d005      	beq.n	8004128 <find_volume+0x1f0>
 800411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411e:	789b      	ldrb	r3, [r3, #2]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d001      	beq.n	8004128 <find_volume+0x1f0>
 8004124:	230d      	movs	r3, #13
 8004126:	e148      	b.n	80043ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412a:	789b      	ldrb	r3, [r3, #2]
 800412c:	461a      	mov	r2, r3
 800412e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413c:	461a      	mov	r2, r3
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004144:	895b      	ldrh	r3, [r3, #10]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <find_volume+0x224>
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	895b      	ldrh	r3, [r3, #10]
 800414e:	461a      	mov	r2, r3
 8004150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004152:	895b      	ldrh	r3, [r3, #10]
 8004154:	3b01      	subs	r3, #1
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <find_volume+0x228>
 800415c:	230d      	movs	r3, #13
 800415e:	e12c      	b.n	80043ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	3330      	adds	r3, #48	@ 0x30
 8004164:	3311      	adds	r3, #17
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fccc 	bl	8002b04 <ld_word>
 800416c:	4603      	mov	r3, r0
 800416e:	461a      	mov	r2, r3
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004176:	891b      	ldrh	r3, [r3, #8]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <find_volume+0x24e>
 8004182:	230d      	movs	r3, #13
 8004184:	e119      	b.n	80043ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	3330      	adds	r3, #48	@ 0x30
 800418a:	3313      	adds	r3, #19
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fcb9 	bl	8002b04 <ld_word>
 8004192:	4603      	mov	r3, r0
 8004194:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <find_volume+0x272>
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	3330      	adds	r3, #48	@ 0x30
 80041a0:	3320      	adds	r3, #32
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fcc6 	bl	8002b34 <ld_dword>
 80041a8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	3330      	adds	r3, #48	@ 0x30
 80041ae:	330e      	adds	r3, #14
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fca7 	bl	8002b04 <ld_word>
 80041b6:	4603      	mov	r3, r0
 80041b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80041ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <find_volume+0x28c>
 80041c0:	230d      	movs	r3, #13
 80041c2:	e0fa      	b.n	80043ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80041c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80041c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c8:	4413      	add	r3, r2
 80041ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041cc:	8912      	ldrh	r2, [r2, #8]
 80041ce:	0912      	lsrs	r2, r2, #4
 80041d0:	b292      	uxth	r2, r2
 80041d2:	4413      	add	r3, r2
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80041d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	429a      	cmp	r2, r3
 80041dc:	d204      	bcs.n	80041e8 <find_volume+0x2b0>
 80041de:	230d      	movs	r3, #13
 80041e0:	e0eb      	b.n	80043ba <find_volume+0x482>
 80041e2:	bf00      	nop
 80041e4:	200004f4 	.word	0x200004f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80041e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041f0:	8952      	ldrh	r2, [r2, #10]
 80041f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <find_volume+0x2ca>
 80041fe:	230d      	movs	r3, #13
 8004200:	e0db      	b.n	80043ba <find_volume+0x482>
		fmt = FS_FAT32;
 8004202:	2303      	movs	r3, #3
 8004204:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800420e:	4293      	cmp	r3, r2
 8004210:	d802      	bhi.n	8004218 <find_volume+0x2e0>
 8004212:	2302      	movs	r3, #2
 8004214:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800421e:	4293      	cmp	r3, r2
 8004220:	d802      	bhi.n	8004228 <find_volume+0x2f0>
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004234:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004236:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800423a:	441a      	add	r2, r3
 800423c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004240:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	441a      	add	r2, r3
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800424a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800424e:	2b03      	cmp	r3, #3
 8004250:	d11e      	bne.n	8004290 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	3330      	adds	r3, #48	@ 0x30
 8004256:	332a      	adds	r3, #42	@ 0x2a
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe fc53 	bl	8002b04 <ld_word>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <find_volume+0x330>
 8004264:	230d      	movs	r3, #13
 8004266:	e0a8      	b.n	80043ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426a:	891b      	ldrh	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <find_volume+0x33c>
 8004270:	230d      	movs	r3, #13
 8004272:	e0a2      	b.n	80043ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004276:	3330      	adds	r3, #48	@ 0x30
 8004278:	332c      	adds	r3, #44	@ 0x2c
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fc5a 	bl	8002b34 <ld_dword>
 8004280:	4602      	mov	r2, r0
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	647b      	str	r3, [r7, #68]	@ 0x44
 800428e:	e01f      	b.n	80042d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004292:	891b      	ldrh	r3, [r3, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <find_volume+0x364>
 8004298:	230d      	movs	r3, #13
 800429a:	e08e      	b.n	80043ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a2:	441a      	add	r2, r3
 80042a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80042a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d103      	bne.n	80042b8 <find_volume+0x380>
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	e00a      	b.n	80042ce <find_volume+0x396>
 80042b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	085a      	lsrs	r2, r3, #1
 80042c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80042ce:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80042d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80042da:	0a5b      	lsrs	r3, r3, #9
 80042dc:	429a      	cmp	r2, r3
 80042de:	d201      	bcs.n	80042e4 <find_volume+0x3ac>
 80042e0:	230d      	movs	r3, #13
 80042e2:	e06a      	b.n	80043ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80042e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ea:	611a      	str	r2, [r3, #16]
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80042f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f6:	2280      	movs	r2, #128	@ 0x80
 80042f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80042fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d149      	bne.n	8004396 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	3330      	adds	r3, #48	@ 0x30
 8004306:	3330      	adds	r3, #48	@ 0x30
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fbfb 	bl	8002b04 <ld_word>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d140      	bne.n	8004396 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004316:	3301      	adds	r3, #1
 8004318:	4619      	mov	r1, r3
 800431a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800431c:	f7fe fea2 	bl	8003064 <move_window>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d137      	bne.n	8004396 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	2200      	movs	r2, #0
 800432a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800432c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432e:	3330      	adds	r3, #48	@ 0x30
 8004330:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fbe5 	bl	8002b04 <ld_word>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004342:	429a      	cmp	r2, r3
 8004344:	d127      	bne.n	8004396 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004348:	3330      	adds	r3, #48	@ 0x30
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fbf2 	bl	8002b34 <ld_dword>
 8004350:	4603      	mov	r3, r0
 8004352:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <find_volume+0x48c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d11e      	bne.n	8004396 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435a:	3330      	adds	r3, #48	@ 0x30
 800435c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fbe7 	bl	8002b34 <ld_dword>
 8004366:	4603      	mov	r3, r0
 8004368:	4a17      	ldr	r2, [pc, #92]	@ (80043c8 <find_volume+0x490>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d113      	bne.n	8004396 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004370:	3330      	adds	r3, #48	@ 0x30
 8004372:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fbdc 	bl	8002b34 <ld_dword>
 800437c:	4602      	mov	r2, r0
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	3330      	adds	r3, #48	@ 0x30
 8004386:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fbd2 	bl	8002b34 <ld_dword>
 8004390:	4602      	mov	r2, r0
 8004392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004394:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004398:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800439c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <find_volume+0x494>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <find_volume+0x494>)
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <find_volume+0x494>)
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80043b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043b4:	f7fe fdee 	bl	8002f94 <clear_lock>
#endif
	return FR_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3758      	adds	r7, #88	@ 0x58
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	41615252 	.word	0x41615252
 80043c8:	61417272 	.word	0x61417272
 80043cc:	200004f8 	.word	0x200004f8

080043d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80043da:	2309      	movs	r3, #9
 80043dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01c      	beq.n	800441e <validate+0x4e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <validate+0x4e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d013      	beq.n	800441e <validate+0x4e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	889a      	ldrh	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	88db      	ldrh	r3, [r3, #6]
 8004400:	429a      	cmp	r2, r3
 8004402:	d10c      	bne.n	800441e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fa9c 	bl	8002948 <disk_status>
 8004410:	4603      	mov	r3, r0
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <validate+0x4e>
			res = FR_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <validate+0x5a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	e000      	b.n	800442c <validate+0x5c>
 800442a:	2300      	movs	r3, #0
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	6013      	str	r3, [r2, #0]
	return res;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800444e:	f107 0310 	add.w	r3, r7, #16
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fcd5 	bl	8003e02 <get_ldnumber>
 8004458:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	da01      	bge.n	8004464 <f_mount+0x28>
 8004460:	230b      	movs	r3, #11
 8004462:	e02b      	b.n	80044bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004464:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <f_mount+0x88>)
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004474:	69b8      	ldr	r0, [r7, #24]
 8004476:	f7fe fd8d 	bl	8002f94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	490d      	ldr	r1, [pc, #52]	@ (80044c4 <f_mount+0x88>)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <f_mount+0x66>
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <f_mount+0x6a>
 80044a2:	2300      	movs	r3, #0
 80044a4:	e00a      	b.n	80044bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80044a6:	f107 010c 	add.w	r1, r7, #12
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	2200      	movs	r2, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fd41 	bl	8003f38 <find_volume>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200004f4 	.word	0x200004f4

080044c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b098      	sub	sp, #96	@ 0x60
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <f_open+0x18>
 80044dc:	2309      	movs	r3, #9
 80044de:	e1a9      	b.n	8004834 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80044e8:	79fa      	ldrb	r2, [r7, #7]
 80044ea:	f107 0110 	add.w	r1, r7, #16
 80044ee:	f107 0308 	add.w	r3, r7, #8
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fd20 	bl	8003f38 <find_volume>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80044fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 818d 	bne.w	8004822 <f_open+0x35a>
		dj.obj.fs = fs;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fc03 	bl	8003d20 <follow_path>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004520:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004524:	2b00      	cmp	r3, #0
 8004526:	d118      	bne.n	800455a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004528:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800452c:	b25b      	sxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	da03      	bge.n	800453a <f_open+0x72>
				res = FR_INVALID_NAME;
 8004532:	2306      	movs	r3, #6
 8004534:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004538:	e00f      	b.n	800455a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf8c      	ite	hi
 8004540:	2301      	movhi	r3, #1
 8004542:	2300      	movls	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fbd8 	bl	8002d04 <chk_lock>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	f003 031c 	and.w	r3, r3, #28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d07f      	beq.n	8004664 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8004564:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004568:	2b00      	cmp	r3, #0
 800456a:	d017      	beq.n	800459c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800456c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004570:	2b04      	cmp	r3, #4
 8004572:	d10e      	bne.n	8004592 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004574:	f7fe fc22 	bl	8002dbc <enq_lock>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d006      	beq.n	800458c <f_open+0xc4>
 800457e:	f107 0314 	add.w	r3, r7, #20
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fb06 	bl	8003b94 <dir_register>
 8004588:	4603      	mov	r3, r0
 800458a:	e000      	b.n	800458e <f_open+0xc6>
 800458c:	2312      	movs	r3, #18
 800458e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	f043 0308 	orr.w	r3, r3, #8
 8004598:	71fb      	strb	r3, [r7, #7]
 800459a:	e010      	b.n	80045be <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800459c:	7ebb      	ldrb	r3, [r7, #26]
 800459e:	f003 0311 	and.w	r3, r3, #17
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <f_open+0xe6>
					res = FR_DENIED;
 80045a6:	2307      	movs	r3, #7
 80045a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80045ac:	e007      	b.n	80045be <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <f_open+0xf6>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80045be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d168      	bne.n	8004698 <f_open+0x1d0>
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d063      	beq.n	8004698 <f_open+0x1d0>
				dw = GET_FATTIME();
 80045d0:	f7fe f9b2 	bl	8002938 <get_fattime>
 80045d4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80045d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d8:	330e      	adds	r3, #14
 80045da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fae7 	bl	8002bb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80045e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e4:	3316      	adds	r3, #22
 80045e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fae1 	bl	8002bb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80045ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f0:	330b      	adds	r3, #11
 80045f2:	2220      	movs	r2, #32
 80045f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fa35 	bl	8003a6c <ld_clust>
 8004602:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004608:	2200      	movs	r2, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fa4d 	bl	8003aaa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004612:	331c      	adds	r3, #28
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe faca 	bl	8002bb0 <st_dword>
					fs->wflag = 1;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2201      	movs	r2, #1
 8004620:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d037      	beq.n	8004698 <f_open+0x1d0>
						dw = fs->winsect;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	2200      	movs	r2, #0
 8004634:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe ff60 	bl	80034fc <remove_chain>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8004642:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004646:	2b00      	cmp	r3, #0
 8004648:	d126      	bne.n	8004698 <f_open+0x1d0>
							res = move_window(fs, dw);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe fd08 	bl	8003064 <move_window>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800465e:	3a01      	subs	r2, #1
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	e019      	b.n	8004698 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004664:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004668:	2b00      	cmp	r3, #0
 800466a:	d115      	bne.n	8004698 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800466c:	7ebb      	ldrb	r3, [r7, #26]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <f_open+0x1b6>
					res = FR_NO_FILE;
 8004676:	2304      	movs	r3, #4
 8004678:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800467c:	e00c      	b.n	8004698 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <f_open+0x1d0>
 8004688:	7ebb      	ldrb	r3, [r7, #26]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <f_open+0x1d0>
						res = FR_DENIED;
 8004692:	2307      	movs	r3, #7
 8004694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004698:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800469c:	2b00      	cmp	r3, #0
 800469e:	d126      	bne.n	80046ee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80046ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	bf8c      	ite	hi
 80046c6:	2301      	movhi	r3, #1
 80046c8:	2300      	movls	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe fb93 	bl	8002e00 <inc_lock>
 80046da:	4602      	mov	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <f_open+0x226>
 80046e8:	2302      	movs	r3, #2
 80046ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80046ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f040 8095 	bne.w	8004822 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff f9b4 	bl	8003a6c <ld_clust>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	331c      	adds	r3, #28
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fa10 	bl	8002b34 <ld_dword>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	88da      	ldrh	r2, [r3, #6]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	79fa      	ldrb	r2, [r7, #7]
 8004732:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3330      	adds	r3, #48	@ 0x30
 800474a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fa7a 	bl	8002c4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d060      	beq.n	8004822 <f_open+0x35a>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05c      	beq.n	8004822 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	895b      	ldrh	r3, [r3, #10]
 8004774:	025b      	lsls	r3, r3, #9
 8004776:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	657b      	str	r3, [r7, #84]	@ 0x54
 8004784:	e016      	b.n	80047b4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe fd25 	bl	80031da <get_fat>
 8004790:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004794:	2b01      	cmp	r3, #1
 8004796:	d802      	bhi.n	800479e <f_open+0x2d6>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800479e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d102      	bne.n	80047ac <f_open+0x2e4>
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80047ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <f_open+0x2fc>
 80047bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d8e0      	bhi.n	8004786 <f_open+0x2be>
				}
				fp->clust = clst;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80047ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d127      	bne.n	8004822 <f_open+0x35a>
 80047d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d022      	beq.n	8004822 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe fcdb 	bl	800319c <clust2sect>
 80047e6:	6478      	str	r0, [r7, #68]	@ 0x44
 80047e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <f_open+0x32e>
						res = FR_INT_ERR;
 80047ee:	2302      	movs	r3, #2
 80047f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80047f4:	e015      	b.n	8004822 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80047f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f8:	0a5a      	lsrs	r2, r3, #9
 80047fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	7858      	ldrb	r0, [r3, #1]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	2301      	movs	r3, #1
 8004812:	f7fe f8c9 	bl	80029a8 <disk_read>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <f_open+0x35a>
 800481c:	2301      	movs	r3, #1
 800481e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004822:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <f_open+0x368>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004830:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8004834:	4618      	mov	r0, r3
 8004836:	3760      	adds	r7, #96	@ 0x60
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	@ 0x38
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f107 0214 	add.w	r2, r7, #20
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fdb7 	bl	80043d0 <validate>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004868:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <f_read+0x44>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	7d5b      	ldrb	r3, [r3, #21]
 8004874:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004878:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <f_read+0x4a>
 8004880:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004884:	e115      	b.n	8004ab2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	7d1b      	ldrb	r3, [r3, #20]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <f_read+0x5a>
 8004892:	2307      	movs	r3, #7
 8004894:	e10d      	b.n	8004ab2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	f240 80fe 	bls.w	8004aa8 <f_read+0x26c>
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80048b0:	e0fa      	b.n	8004aa8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 80c6 	bne.w	8004a4c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	8952      	ldrh	r2, [r2, #10]
 80048ca:	3a01      	subs	r2, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d12f      	bne.n	8004936 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e4:	e013      	b.n	800490e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	4619      	mov	r1, r3
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7fe fefe 	bl	80036f6 <clmt_clust>
 80048fa:	6338      	str	r0, [r7, #48]	@ 0x30
 80048fc:	e007      	b.n	800490e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fe fc67 	bl	80031da <get_fat>
 800490c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2b01      	cmp	r3, #1
 8004912:	d804      	bhi.n	800491e <f_read+0xe2>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2202      	movs	r2, #2
 8004918:	755a      	strb	r2, [r3, #21]
 800491a:	2302      	movs	r3, #2
 800491c:	e0c9      	b.n	8004ab2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d104      	bne.n	8004930 <f_read+0xf4>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	755a      	strb	r2, [r3, #21]
 800492c:	2301      	movs	r3, #1
 800492e:	e0c0      	b.n	8004ab2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004934:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fc2c 	bl	800319c <clust2sect>
 8004944:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <f_read+0x11a>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2202      	movs	r2, #2
 8004950:	755a      	strb	r2, [r3, #21]
 8004952:	2302      	movs	r3, #2
 8004954:	e0ad      	b.n	8004ab2 <f_read+0x276>
			sect += csect;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0a5b      	lsrs	r3, r3, #9
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	2b00      	cmp	r3, #0
 8004968:	d039      	beq.n	80049de <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	4413      	add	r3, r2
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	8952      	ldrh	r2, [r2, #10]
 8004974:	4293      	cmp	r3, r2
 8004976:	d905      	bls.n	8004984 <f_read+0x148>
					cc = fs->csize - csect;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	895b      	ldrh	r3, [r3, #10]
 800497c:	461a      	mov	r2, r3
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	7858      	ldrb	r0, [r3, #1]
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800498e:	f7fe f80b 	bl	80029a8 <disk_read>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <f_read+0x166>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	755a      	strb	r2, [r3, #21]
 800499e:	2301      	movs	r3, #1
 80049a0:	e087      	b.n	8004ab2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	7d1b      	ldrb	r3, [r3, #20]
 80049a6:	b25b      	sxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da14      	bge.n	80049d6 <f_read+0x19a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d90d      	bls.n	80049d6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1a      	ldr	r2, [r3, #32]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	025b      	lsls	r3, r3, #9
 80049c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c6:	18d0      	adds	r0, r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3330      	adds	r3, #48	@ 0x30
 80049cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d0:	4619      	mov	r1, r3
 80049d2:	f7fe f919 	bl	8002c08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	025b      	lsls	r3, r3, #9
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80049dc:	e050      	b.n	8004a80 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d02e      	beq.n	8004a46 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	7d1b      	ldrb	r3, [r3, #20]
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da18      	bge.n	8004a24 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	7858      	ldrb	r0, [r3, #1]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	2301      	movs	r3, #1
 8004a02:	f7fe f809 	bl	8002a18 <disk_write>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <f_read+0x1da>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	755a      	strb	r2, [r3, #21]
 8004a12:	2301      	movs	r3, #1
 8004a14:	e04d      	b.n	8004ab2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	7d1b      	ldrb	r3, [r3, #20]
 8004a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	7858      	ldrb	r0, [r3, #1]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004a2e:	2301      	movs	r3, #1
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	f7fd ffb9 	bl	80029a8 <disk_read>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <f_read+0x20a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	755a      	strb	r2, [r3, #21]
 8004a42:	2301      	movs	r3, #1
 8004a44:	e035      	b.n	8004ab2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a54:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d901      	bls.n	8004a66 <f_read+0x22a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a74:	4413      	add	r3, r2
 8004a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a7c:	f7fe f8c4 	bl	8002c08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a84:	4413      	add	r3, r2
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	441a      	add	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	619a      	str	r2, [r3, #24]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9a:	441a      	add	r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f47f af01 	bne.w	80048b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3738      	adds	r7, #56	@ 0x38
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b08c      	sub	sp, #48	@ 0x30
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f107 0210 	add.w	r2, r7, #16
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fc78 	bl	80043d0 <validate>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <f_write+0x44>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	7d5b      	ldrb	r3, [r3, #21]
 8004af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <f_write+0x4a>
 8004afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b02:	e14b      	b.n	8004d9c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	7d1b      	ldrb	r3, [r3, #20]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <f_write+0x5a>
 8004b10:	2307      	movs	r3, #7
 8004b12:	e143      	b.n	8004d9c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	f080 812d 	bcs.w	8004d80 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004b2e:	e127      	b.n	8004d80 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 80e3 	bne.w	8004d04 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	0a5b      	lsrs	r3, r3, #9
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	8952      	ldrh	r2, [r2, #10]
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d143      	bne.n	8004bdc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10c      	bne.n	8004b76 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11a      	bne.n	8004b9e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fd2a 	bl	80035c6 <create_chain>
 8004b72:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004b74:	e013      	b.n	8004b9e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	4619      	mov	r1, r3
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7fe fdb6 	bl	80036f6 <clmt_clust>
 8004b8a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004b8c:	e007      	b.n	8004b9e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7fe fd15 	bl	80035c6 <create_chain>
 8004b9c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80f2 	beq.w	8004d8a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d104      	bne.n	8004bb6 <f_write+0xfc>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	755a      	strb	r2, [r3, #21]
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e0f2      	b.n	8004d9c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d104      	bne.n	8004bc8 <f_write+0x10e>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	755a      	strb	r2, [r3, #21]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0e9      	b.n	8004d9c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bcc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <f_write+0x122>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bda:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	7d1b      	ldrb	r3, [r3, #20]
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da18      	bge.n	8004c18 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	7858      	ldrb	r0, [r3, #1]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a1a      	ldr	r2, [r3, #32]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f7fd ff0f 	bl	8002a18 <disk_write>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <f_write+0x150>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	755a      	strb	r2, [r3, #21]
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0c8      	b.n	8004d9c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	7d1b      	ldrb	r3, [r3, #20]
 8004c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f7fe fabb 	bl	800319c <clust2sect>
 8004c26:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <f_write+0x17e>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2202      	movs	r2, #2
 8004c32:	755a      	strb	r2, [r3, #21]
 8004c34:	2302      	movs	r3, #2
 8004c36:	e0b1      	b.n	8004d9c <f_write+0x2e2>
			sect += csect;
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0a5b      	lsrs	r3, r3, #9
 8004c44:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d03c      	beq.n	8004cc6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	4413      	add	r3, r2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	8952      	ldrh	r2, [r2, #10]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d905      	bls.n	8004c66 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	895b      	ldrh	r3, [r3, #10]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	7858      	ldrb	r0, [r3, #1]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	69f9      	ldr	r1, [r7, #28]
 8004c70:	f7fd fed2 	bl	8002a18 <disk_write>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d004      	beq.n	8004c84 <f_write+0x1ca>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	755a      	strb	r2, [r3, #21]
 8004c80:	2301      	movs	r3, #1
 8004c82:	e08b      	b.n	8004d9c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1a      	ldr	r2, [r3, #32]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d915      	bls.n	8004cbe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	025b      	lsls	r3, r3, #9
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004caa:	4619      	mov	r1, r3
 8004cac:	f7fd ffac 	bl	8002c08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	7d1b      	ldrb	r3, [r3, #20]
 8004cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	025b      	lsls	r3, r3, #9
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8004cc4:	e03f      	b.n	8004d46 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d016      	beq.n	8004cfe <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d210      	bcs.n	8004cfe <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	7858      	ldrb	r0, [r3, #1]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	f7fd fe5d 	bl	80029a8 <disk_read>
 8004cee:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	755a      	strb	r2, [r3, #21]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e04e      	b.n	8004d9c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d901      	bls.n	8004d1e <f_write+0x264>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	4413      	add	r3, r2
 8004d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd ff68 	bl	8002c08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	7d1b      	ldrb	r3, [r3, #20]
 8004d3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	4413      	add	r3, r2
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	619a      	str	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf38      	it	cc
 8004d66:	461a      	movcc	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	441a      	add	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f47f aed4 	bne.w	8004b30 <f_write+0x76>
 8004d88:	e000      	b.n	8004d8c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d8a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	7d1b      	ldrb	r3, [r3, #20]
 8004d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3730      	adds	r7, #48	@ 0x30
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f107 0208 	add.w	r2, r7, #8
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fb0b 	bl	80043d0 <validate>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d168      	bne.n	8004e96 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	7d1b      	ldrb	r3, [r3, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d062      	beq.n	8004e96 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7d1b      	ldrb	r3, [r3, #20]
 8004dd4:	b25b      	sxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da15      	bge.n	8004e06 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	7858      	ldrb	r0, [r3, #1]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	2301      	movs	r3, #1
 8004dea:	f7fd fe15 	bl	8002a18 <disk_write>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <f_sync+0x54>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e04f      	b.n	8004e98 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7d1b      	ldrb	r3, [r3, #20]
 8004dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004e06:	f7fd fd97 	bl	8002938 <get_fattime>
 8004e0a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f7fe f925 	bl	8003064 <move_window>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d138      	bne.n	8004e96 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	330b      	adds	r3, #11
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	330b      	adds	r3, #11
 8004e34:	f042 0220 	orr.w	r2, r2, #32
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	461a      	mov	r2, r3
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	f7fe fe2f 	bl	8003aaa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f103 021c 	add.w	r2, r3, #28
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f7fd fea9 	bl	8002bb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3316      	adds	r3, #22
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fd fea3 	bl	8002bb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3312      	adds	r3, #18
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fd fe82 	bl	8002b7a <st_word>
					fs->wflag = 1;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe f91e 	bl	80030c0 <sync_fs>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	7d1b      	ldrb	r3, [r3, #20]
 8004e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff7b 	bl	8004da4 <f_sync>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d118      	bne.n	8004eea <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f107 0208 	add.w	r2, r7, #8
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fa85 	bl	80043d0 <validate>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe f821 	bl	8002f1c <dec_lock>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <memset>:
 8004ef4:	4402      	add	r2, r0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d100      	bne.n	8004efe <memset+0xa>
 8004efc:	4770      	bx	lr
 8004efe:	f803 1b01 	strb.w	r1, [r3], #1
 8004f02:	e7f9      	b.n	8004ef8 <memset+0x4>

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4d0d      	ldr	r5, [pc, #52]	@ (8004f3c <__libc_init_array+0x38>)
 8004f08:	4c0d      	ldr	r4, [pc, #52]	@ (8004f40 <__libc_init_array+0x3c>)
 8004f0a:	1b64      	subs	r4, r4, r5
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	2600      	movs	r6, #0
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	4d0b      	ldr	r5, [pc, #44]	@ (8004f44 <__libc_init_array+0x40>)
 8004f16:	4c0c      	ldr	r4, [pc, #48]	@ (8004f48 <__libc_init_array+0x44>)
 8004f18:	f000 f818 	bl	8004f4c <_init>
 8004f1c:	1b64      	subs	r4, r4, r5
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	2600      	movs	r6, #0
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	080050f0 	.word	0x080050f0
 8004f40:	080050f0 	.word	0x080050f0
 8004f44:	080050f0 	.word	0x080050f0
 8004f48:	080050f4 	.word	0x080050f4

08004f4c <_init>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr

08004f58 <_fini>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	bf00      	nop
 8004f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5e:	bc08      	pop	{r3}
 8004f60:	469e      	mov	lr, r3
 8004f62:	4770      	bx	lr
