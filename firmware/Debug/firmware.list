
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080073c0  080073c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007544  08007544  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007544  08007544  00008544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800754c  0800754c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800754c  0800754c  0000854c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007550  08007550  00008550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007554  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  2000005c  080075b0  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  080075b0  0000973c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f462  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b14  00000000  00000000  000184ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5f  00000000  00000000  0001bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cb7  00000000  00000000  0001ca57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001555d  00000000  00000000  0002070e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95d0  00000000  00000000  00035c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f23b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb8  00000000  00000000  0011f280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00123238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073a8 	.word	0x080073a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080073a8 	.word	0x080073a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <readRegister>:
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 2);
	while(!sensorReady);
	sensorReady = 0;
}

void readRegister(uint8_t addr, uint8_t regAddr, uint8_t *result, uint16_t size){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af02      	add	r7, sp, #8
 80001de:	603a      	str	r2, [r7, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	460b      	mov	r3, r1
 80001e8:	71bb      	strb	r3, [r7, #6]
 80001ea:	4613      	mov	r3, r2
 80001ec:	80bb      	strh	r3, [r7, #4]
	uint8_t data[1] = {regAddr};
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Sequential_Transmit_DMA(&hI2C, (addr << 1), data, 1, I2C_FIRST_FRAME);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	005b      	lsls	r3, r3, #1
 80001f8:	b299      	uxth	r1, r3
 80001fa:	f107 020c 	add.w	r2, r7, #12
 80001fe:	2300      	movs	r3, #0
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	4815      	ldr	r0, [pc, #84]	@ (800025c <readRegister+0x84>)
 8000206:	f001 fa9d 	bl	8001744 <HAL_I2C_Master_Seq_Transmit_DMA>
	while(!sensorReady);
 800020a:	bf00      	nop
 800020c:	4b14      	ldr	r3, [pc, #80]	@ (8000260 <readRegister+0x88>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	f083 0301 	eor.w	r3, r3, #1
 8000214:	b2db      	uxtb	r3, r3
 8000216:	2b00      	cmp	r3, #0
 8000218:	d1f8      	bne.n	800020c <readRegister+0x34>
	sensorReady = 0;
 800021a:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <readRegister+0x88>)
 800021c:	2200      	movs	r2, #0
 800021e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Sequential_Receive_DMA(&hI2C, (addr << 1) | (0x01), result, size, I2C_LAST_FRAME);
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	b21b      	sxth	r3, r3
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	b21b      	sxth	r3, r3
 800022c:	b299      	uxth	r1, r3
 800022e:	88bb      	ldrh	r3, [r7, #4]
 8000230:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000234:	9200      	str	r2, [sp, #0]
 8000236:	683a      	ldr	r2, [r7, #0]
 8000238:	4808      	ldr	r0, [pc, #32]	@ (800025c <readRegister+0x84>)
 800023a:	f001 fbd3 	bl	80019e4 <HAL_I2C_Master_Seq_Receive_DMA>
	while(!transmitterReady);
 800023e:	bf00      	nop
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <readRegister+0x8c>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	f083 0301 	eor.w	r3, r3, #1
 8000248:	b2db      	uxtb	r3, r3
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1f8      	bne.n	8000240 <readRegister+0x68>
	transmitterReady = 0;
 800024e:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <readRegister+0x8c>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000007c 	.word	0x2000007c
 8000260:	20000079 	.word	0x20000079
 8000264:	2000007a 	.word	0x2000007a

08000268 <HAL_I2C_ErrorCallback>:
FATFS fs;
FIL file;
FRESULT res;
#define BUFFERSIZE 100
#define DS3231ADDR 0b1101000
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2CHandle){
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d102      	bne.n	8000294 <HAL_I2C_MasterTxCpltCallback+0x18>
		sensorReady = 1;
 800028e:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000290:	2201      	movs	r2, #1
 8000292:	701a      	strb	r2, [r3, #0]
	}
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40005400 	.word	0x40005400
 80002a4:	20000079 	.word	0x20000079

080002a8 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2CHandle){
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a05      	ldr	r2, [pc, #20]	@ (80002cc <HAL_I2C_MasterRxCpltCallback+0x24>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d102      	bne.n	80002c0 <HAL_I2C_MasterRxCpltCallback+0x18>
		transmitterReady = 1;
 80002ba:	4b05      	ldr	r3, [pc, #20]	@ (80002d0 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
	}
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40005400 	.word	0x40005400
 80002d0:	2000007a 	.word	0x2000007a

080002d4 <main>:
int main(void)
{
 80002d4:	b5b0      	push	{r4, r5, r7, lr}
 80002d6:	b09e      	sub	sp, #120	@ 0x78
 80002d8:	af00      	add	r7, sp, #0
 HAL_Init();
 80002da:	f000 fe14 	bl	8000f06 <HAL_Init>
 SystemClock_Config();
 80002de:	f000 f8b7 	bl	8000450 <SystemClock_Config>
 GPIO_Init();
 80002e2:	f000 f8fb 	bl	80004dc <GPIO_Init>
 //DMA_Init();
 //I2C_Init();
 SPI_Init();
 80002e6:	f000 fcc9 	bl	8000c7c <SPI_Init>
 uint8_t arr[] = {30, 0, 11, 28, 7, 12};
 80002ea:	4a4f      	ldr	r2, [pc, #316]	@ (8000428 <main+0x154>)
 80002ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80002f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f4:	6018      	str	r0, [r3, #0]
 80002f6:	3304      	adds	r3, #4
 80002f8:	8019      	strh	r1, [r3, #0]
 //initDS3231(2024, arr, 1, 12);
 //get_bmp_t();
 //initMPU6050(0);
 uint8_t timeData[6] = {30, 14, 4, 3, 24, 12};
 80002fa:	4a4c      	ldr	r2, [pc, #304]	@ (800042c <main+0x158>)
 80002fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000304:	6018      	str	r0, [r3, #0]
 8000306:	3304      	adds	r3, #4
 8000308:	8019      	strh	r1, [r3, #0]
 char header[] = "Time,Acceleration";
 800030a:	4b49      	ldr	r3, [pc, #292]	@ (8000430 <main+0x15c>)
 800030c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000310:	461d      	mov	r5, r3
 8000312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000316:	682b      	ldr	r3, [r5, #0]
 8000318:	8023      	strh	r3, [r4, #0]
 bool result = initialize_SD_card();
 800031a:	f000 fbff 	bl	8000b1c <initialize_SD_card>
 800031e:	4603      	mov	r3, r0
 8000320:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 if(!result)
 8000324:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000328:	f083 0301 	eor.w	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <main+0x62>
	  while(1);
 8000332:	bf00      	nop
 8000334:	e7fd      	b.n	8000332 <main+0x5e>
 result = is_SD_card_initialized();
 8000336:	f000 fc95 	bl	8000c64 <is_SD_card_initialized>
 800033a:	4603      	mov	r3, r0
 800033c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 if(!result)
 8000340:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <main+0x7e>
	  while(1);
 800034e:	bf00      	nop
 8000350:	e7fd      	b.n	800034e <main+0x7a>
 res = f_mount(&fs, "", 1);
 8000352:	2201      	movs	r2, #1
 8000354:	4937      	ldr	r1, [pc, #220]	@ (8000434 <main+0x160>)
 8000356:	4838      	ldr	r0, [pc, #224]	@ (8000438 <main+0x164>)
 8000358:	f006 f942 	bl	80065e0 <f_mount>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b36      	ldr	r3, [pc, #216]	@ (800043c <main+0x168>)
 8000362:	701a      	strb	r2, [r3, #0]
 if(res != FR_OK)
 8000364:	4b35      	ldr	r3, [pc, #212]	@ (800043c <main+0x168>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <main+0x9c>
	  while(1);
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <main+0x98>
 res = f_open(&file, "text.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000370:	220a      	movs	r2, #10
 8000372:	4933      	ldr	r1, [pc, #204]	@ (8000440 <main+0x16c>)
 8000374:	4833      	ldr	r0, [pc, #204]	@ (8000444 <main+0x170>)
 8000376:	f006 f979 	bl	800666c <f_open>
 800037a:	4603      	mov	r3, r0
 800037c:	461a      	mov	r2, r3
 800037e:	4b2f      	ldr	r3, [pc, #188]	@ (800043c <main+0x168>)
 8000380:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 8000382:	4b2e      	ldr	r3, [pc, #184]	@ (800043c <main+0x168>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d126      	bne.n	80003d8 <main+0x104>
	  const char* text = "Hello, SD card!\n";
 800038a:	4b2f      	ldr	r3, [pc, #188]	@ (8000448 <main+0x174>)
 800038c:	673b      	str	r3, [r7, #112]	@ 0x70
	  UINT bytesWritten;
	  res = f_write(&file, text, strlen(text), &bytesWritten);
 800038e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000390:	f7ff ff1a 	bl	80001c8 <strlen>
 8000394:	4602      	mov	r2, r0
 8000396:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800039a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800039c:	4829      	ldr	r0, [pc, #164]	@ (8000444 <main+0x170>)
 800039e:	f006 fc5e 	bl	8006c5e <f_write>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b25      	ldr	r3, [pc, #148]	@ (800043c <main+0x168>)
 80003a8:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 80003aa:	4b24      	ldr	r3, [pc, #144]	@ (800043c <main+0x168>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <main+0xe2>
		  while(1);
 80003b2:	bf00      	nop
 80003b4:	e7fd      	b.n	80003b2 <main+0xde>
	  f_close(&file);
 80003b6:	4823      	ldr	r0, [pc, #140]	@ (8000444 <main+0x170>)
 80003b8:	f006 fe44 	bl	8007044 <f_close>
 }
 else
	  while(1);
 res = f_open(&file, "text.txt", FA_READ);
 80003bc:	2201      	movs	r2, #1
 80003be:	4920      	ldr	r1, [pc, #128]	@ (8000440 <main+0x16c>)
 80003c0:	4820      	ldr	r0, [pc, #128]	@ (8000444 <main+0x170>)
 80003c2:	f006 f953 	bl	800666c <f_open>
 80003c6:	4603      	mov	r3, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <main+0x168>)
 80003cc:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 80003ce:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <main+0x168>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d11c      	bne.n	8000410 <main+0x13c>
 80003d6:	e000      	b.n	80003da <main+0x106>
	  while(1);
 80003d8:	e7fe      	b.n	80003d8 <main+0x104>
	  char buffer[64];
	  UINT bytesRead;
	  res = f_read(&file, buffer, sizeof(buffer) - 1, &bytesRead);
 80003da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003de:	4639      	mov	r1, r7
 80003e0:	223f      	movs	r2, #63	@ 0x3f
 80003e2:	4818      	ldr	r0, [pc, #96]	@ (8000444 <main+0x170>)
 80003e4:	f006 fafc 	bl	80069e0 <f_read>
 80003e8:	4603      	mov	r3, r0
 80003ea:	461a      	mov	r2, r3
 80003ec:	4b13      	ldr	r3, [pc, #76]	@ (800043c <main+0x168>)
 80003ee:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <main+0x168>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <main+0x128>
		  while(1);
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <main+0x124>
	  buffer[bytesRead] = '\0';
 80003fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80003fe:	3378      	adds	r3, #120	@ 0x78
 8000400:	443b      	add	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	f803 2c78 	strb.w	r2, [r3, #-120]
	  f_close(&file);
 8000408:	480e      	ldr	r0, [pc, #56]	@ (8000444 <main+0x170>)
 800040a:	f006 fe1b 	bl	8007044 <f_close>
 800040e:	e000      	b.n	8000412 <main+0x13e>
 }
 else
	  while(1);
 8000410:	e7fe      	b.n	8000410 <main+0x13c>
 while (1)
 {
	  //getDateAndTime();
	  getAccelMPU6050(second);
 8000412:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <main+0x178>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f898 	bl	800054c <getAccelMPU6050>
	  //getAltitudeBMP180(second);
	  int x = 21;
 800041c:	2315      	movs	r3, #21
 800041e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  x+=1;
 8000420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000422:	3301      	adds	r3, #1
 8000424:	66fb      	str	r3, [r7, #108]	@ 0x6c
 {
 8000426:	e7f4      	b.n	8000412 <main+0x13e>
 8000428:	080073e4 	.word	0x080073e4
 800042c:	080073ec 	.word	0x080073ec
 8000430:	080073f4 	.word	0x080073f4
 8000434:	080073c0 	.word	0x080073c0
 8000438:	200000d0 	.word	0x200000d0
 800043c:	20000530 	.word	0x20000530
 8000440:	080073c4 	.word	0x080073c4
 8000444:	20000300 	.word	0x20000300
 8000448:	080073d0 	.word	0x080073d0
 800044c:	20000078 	.word	0x20000078

08000450 <SystemClock_Config>:
 }
}
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b096      	sub	sp, #88	@ 0x58
 8000454:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	2244      	movs	r2, #68	@ 0x44
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f006 fefe 	bl	8007260 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	463b      	mov	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000472:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000476:	f003 f835 	bl	80034e4 <HAL_PWREx_ControlVoltageScaling>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0x34>
 {
   Error_Handler();
 8000480:	f000 f85e 	bl	8000540 <Error_Handler>
 }
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000484:	2310      	movs	r3, #16
 8000486:	617b      	str	r3, [r7, #20]
 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.MSICalibrationValue = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000490:	2360      	movs	r3, #96	@ 0x60
 8000492:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4618      	mov	r0, r3
 800049e:	f003 f877 	bl	8003590 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x5c>
 {
   Error_Handler();
 80004a8:	f000 f84a 	bl	8000540 <Error_Handler>
 }
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	603b      	str	r3, [r7, #0]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c0:	463b      	mov	r3, r7
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f003 fc3f 	bl	8003d48 <HAL_RCC_ClockConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x84>
 {
   Error_Handler();
 80004d0:	f000 f836 	bl	8000540 <Error_Handler>
 }
}
 80004d4:	bf00      	nop
 80004d6:	3758      	adds	r7, #88	@ 0x58
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <GPIO_Init>:
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
}
void GPIO_Init(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */
	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <GPIO_Init+0x60>)
 80004f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f4:	4a11      	ldr	r2, [pc, #68]	@ (800053c <GPIO_Init+0x60>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <GPIO_Init+0x60>)
 80004fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]
	 /*Configure GPIO pin Output Level */
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000512:	f001 f8ff 	bl	8001714 <HAL_GPIO_WritePin>
	 /*Configure GPIO pin : PA9 */
	 GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800051a:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4619      	mov	r1, r3
 800052c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000530:	f000 ff46 	bl	80013c0 <HAL_GPIO_Init>
	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000

08000540 <Error_Handler>:
 {
   Error_Handler();
 }*/
}
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
 __disable_irq();
 while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <Error_Handler+0x8>

0800054c <getAccelMPU6050>:
	accel_idx = 0;
	velocity_idx = 0;
	altitude_idx = 0;
}

void getAccelMPU6050(int s){
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b08b      	sub	sp, #44	@ 0x2c
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	uint8_t accelReg[6];
	readRegister(MPU6050ADDR,ACCEL_XOUT_H, accelReg, 6);
 8000554:	f107 021c 	add.w	r2, r7, #28
 8000558:	2306      	movs	r3, #6
 800055a:	213b      	movs	r1, #59	@ 0x3b
 800055c:	2068      	movs	r0, #104	@ 0x68
 800055e:	f7ff fe3b 	bl	80001d8 <readRegister>

	int16_t X = (accelReg[0] << 8) | (accelReg[1]);
 8000562:	7f3b      	ldrb	r3, [r7, #28]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	b21a      	sxth	r2, r3
 8000568:	7f7b      	ldrb	r3, [r7, #29]
 800056a:	b21b      	sxth	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t Y = (accelReg[2] << 8) | (accelReg[3]);
 8000570:	7fbb      	ldrb	r3, [r7, #30]
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	b21a      	sxth	r2, r3
 8000576:	7ffb      	ldrb	r3, [r7, #31]
 8000578:	b21b      	sxth	r3, r3
 800057a:	4313      	orrs	r3, r2
 800057c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t Z = (accelReg[4] << 8) | (accelReg[5]);
 800057e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000582:	021b      	lsls	r3, r3, #8
 8000584:	b21a      	sxth	r2, r3
 8000586:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	847b      	strh	r3, [r7, #34]	@ 0x22

	accelMPU6050 a;
	a.accelX = X*step;
 8000590:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000594:	ee07 3a90 	vmov	s15, r3
 8000598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800059c:	4b33      	ldr	r3, [pc, #204]	@ (800066c <getAccelMPU6050+0x120>)
 800059e:	edd3 7a00 	vldr	s15, [r3]
 80005a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005a6:	edc7 7a03 	vstr	s15, [r7, #12]
	a.accelY = Y*step;
 80005aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80005ae:	ee07 3a90 	vmov	s15, r3
 80005b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005b6:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <getAccelMPU6050+0x120>)
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005c0:	edc7 7a04 	vstr	s15, [r7, #16]
	a.accelZ = Z*step;
 80005c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80005c8:	ee07 3a90 	vmov	s15, r3
 80005cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d0:	4b26      	ldr	r3, [pc, #152]	@ (800066c <getAccelMPU6050+0x120>)
 80005d2:	edd3 7a00 	vldr	s15, [r3]
 80005d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005da:	edc7 7a05 	vstr	s15, [r7, #20]
	a.seconds = s;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	763b      	strb	r3, [r7, #24]

	if(curr_buffer_size + 1 >= total_buffer_size){
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <getAccelMPU6050+0x124>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <getAccelMPU6050+0x128>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d328      	bcc.n	8000644 <getAccelMPU6050+0xf8>
		total_buffer_size*=2;
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <getAccelMPU6050+0x128>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <getAccelMPU6050+0x128>)
 80005fa:	6013      	str	r3, [r2, #0]
		accel_buffer_MPU6050 = (accelMPU6050*)realloc(accel_buffer_MPU6050, total_buffer_size*sizeof(accelMPU6050));
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <getAccelMPU6050+0x12c>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <getAccelMPU6050+0x128>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4619      	mov	r1, r3
 8000608:	4610      	mov	r0, r2
 800060a:	f006 fdf3 	bl	80071f4 <realloc>
 800060e:	4603      	mov	r3, r0
 8000610:	4a19      	ldr	r2, [pc, #100]	@ (8000678 <getAccelMPU6050+0x12c>)
 8000612:	6013      	str	r3, [r2, #0]
		velocity_buffer_MPU6050 = (velocityMPU6050*)realloc(velocity_buffer_MPU6050, total_buffer_size*sizeof(velocityMPU6050));
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <getAccelMPU6050+0x130>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <getAccelMPU6050+0x128>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4610      	mov	r0, r2
 8000622:	f006 fde7 	bl	80071f4 <realloc>
 8000626:	4603      	mov	r3, r0
 8000628:	4a14      	ldr	r2, [pc, #80]	@ (800067c <getAccelMPU6050+0x130>)
 800062a:	6013      	str	r3, [r2, #0]
		altitude_buffer_MPU6050 = (altitudeMPU6050*)realloc(altitude_buffer_MPU6050, total_buffer_size*sizeof(altitudeMPU6050));
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <getAccelMPU6050+0x134>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <getAccelMPU6050+0x128>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f006 fddb 	bl	80071f4 <realloc>
 800063e:	4603      	mov	r3, r0
 8000640:	4a0f      	ldr	r2, [pc, #60]	@ (8000680 <getAccelMPU6050+0x134>)
 8000642:	6013      	str	r3, [r2, #0]
	}

	accel_buffer_MPU6050[accel_idx++] = a;
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <getAccelMPU6050+0x12c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <getAccelMPU6050+0x138>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1c59      	adds	r1, r3, #1
 800064e:	480d      	ldr	r0, [pc, #52]	@ (8000684 <getAccelMPU6050+0x138>)
 8000650:	6001      	str	r1, [r0, #0]
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	4413      	add	r3, r2
 8000656:	461c      	mov	r4, r3
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000662:	bf00      	nop
 8000664:	372c      	adds	r7, #44	@ 0x2c
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	20000534 	.word	0x20000534
 8000670:	20000548 	.word	0x20000548
 8000674:	20000544 	.word	0x20000544
 8000678:	20000538 	.word	0x20000538
 800067c:	2000053c 	.word	0x2000053c
 8000680:	20000540 	.word	0x20000540
 8000684:	2000054c 	.word	0x2000054c

08000688 <send_command>:
#include "sd.h"


static bool is_initialized = 0;

bool send_command(uint8_t* cmd, uint8_t response){
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	bool success = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f001 f837 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 6, HAL_MAX_DELAY);
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	2206      	movs	r2, #6
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	4836      	ldr	r0, [pc, #216]	@ (8000788 <send_command+0x100>)
 80006b0:	f003 fdc0 	bl	8004234 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f001 f829 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fc94 	bl	8000ff0 <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	e053      	b.n	8000776 <send_command+0xee>
		uint8_t result[1];
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d8:	f001 f81c 	bl	8001714 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, result, 1, HAL_MAX_DELAY);
 80006dc:	23ff      	movs	r3, #255	@ 0xff
 80006de:	743b      	strb	r3, [r7, #16]
 80006e0:	f107 0214 	add.w	r2, r7, #20
 80006e4:	f107 0110 	add.w	r1, r7, #16
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	4825      	ldr	r0, [pc, #148]	@ (8000788 <send_command+0x100>)
 80006f2:	f003 fef5 	bl	80044e0 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000700:	f001 f808 	bl	8001714 <HAL_GPIO_WritePin>
		if(result[0] == response){
 8000704:	7d3b      	ldrb	r3, [r7, #20]
 8000706:	78fa      	ldrb	r2, [r7, #3]
 8000708:	429a      	cmp	r2, r3
 800070a:	d12e      	bne.n	800076a <send_command+0xe2>
			if(cmd[0] == 0x48){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b48      	cmp	r3, #72	@ 0x48
 8000712:	d127      	bne.n	8000764 <send_command+0xdc>
				uint8_t result_cmd8[4];
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800071a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071e:	f000 fff9 	bl	8001714 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF, 0xFF, 0xFF}, result_cmd8, 4, HAL_MAX_DELAY);
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <send_command+0x104>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	f107 020c 	add.w	r2, r7, #12
 800072c:	f107 0108 	add.w	r1, r7, #8
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2304      	movs	r3, #4
 8000738:	4813      	ldr	r0, [pc, #76]	@ (8000788 <send_command+0x100>)
 800073a:	f003 fed1 	bl	80044e0 <HAL_SPI_TransmitReceive>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000748:	f000 ffe4 	bl	8001714 <HAL_GPIO_WritePin>
				if(result_cmd8[0] != 0x00 || result_cmd8[1] != 0x00 || result_cmd8[2] != 0x01 || result_cmd8[3] != 0xAA)
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10e      	bne.n	8000770 <send_command+0xe8>
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10b      	bne.n	8000770 <send_command+0xe8>
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d108      	bne.n	8000770 <send_command+0xe8>
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2baa      	cmp	r3, #170	@ 0xaa
 8000762:	d105      	bne.n	8000770 <send_command+0xe8>
					continue;
			}
			success = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	77fb      	strb	r3, [r7, #31]
 8000768:	e009      	b.n	800077e <send_command+0xf6>
			break;
		}
		HAL_Delay(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f000 fc40 	bl	8000ff0 <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	3301      	adds	r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800077c:	dba7      	blt.n	80006ce <send_command+0x46>
	}
	return success;
 800077e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000554 	.word	0x20000554
 800078c:	08007408 	.word	0x08007408

08000790 <initialize_SPI_mode>:

void initialize_SPI_mode(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f000 ffb8 	bl	8001714 <HAL_GPIO_WritePin>
	uint8_t dummy[10];
	memset(dummy, 0xFF, sizeof(dummy));
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	220a      	movs	r2, #10
 80007a8:	21ff      	movs	r1, #255	@ 0xff
 80007aa:	4618      	mov	r0, r3
 80007ac:	f006 fd58 	bl	8007260 <memset>
	HAL_SPI_Transmit(&hspi1, dummy, sizeof(dummy), HAL_MAX_DELAY);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	220a      	movs	r2, #10
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <initialize_SPI_mode+0x38>)
 80007ba:	f003 fd3b 	bl	8004234 <HAL_SPI_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000554 	.word	0x20000554

080007cc <read_block>:

bool read_block(uint32_t block, uint8_t* data){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 80007d2:	af02      	add	r7, sp, #8
 80007d4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80007d8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80007dc:	6018      	str	r0, [r3, #0]
 80007de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80007e2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80007e6:	6019      	str	r1, [r3, #0]
	uint8_t cmd17[6];
	cmd17[0] = 0x51;
 80007e8:	2351      	movs	r3, #81	@ 0x51
 80007ea:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
	cmd17[1] = (block >> 24)&0xFF;
 80007ee:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80007f2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	0e1b      	lsrs	r3, r3, #24
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	cmd17[2] = (block >> 16)&0xFF;
 8000800:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000804:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	cmd17[3] = (block >> 8) & 0xFF;
 8000812:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000816:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
	cmd17[4] = (block)&0xFF;
 8000824:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000828:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
	cmd17[5] = 0xFF;
 8000834:	23ff      	movs	r3, #255	@ 0xff
 8000836:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
	bool result = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	result = send_command(cmd17, 0x00);
 8000840:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff1e 	bl	8000688 <send_command>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	if(!result)
 8000852:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8000856:	f083 0301 	eor.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <read_block+0x98>
		return 0;
 8000860:	2300      	movs	r3, #0
 8000862:	e07e      	b.n	8000962 <read_block+0x196>
	uint8_t response[1];
	for(int i = 0; i < 1000; i++){
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 800086a:	e027      	b.n	80008bc <read_block+0xf0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f000 ff4d 	bl	8001714 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 800087a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800087e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000882:	22ff      	movs	r2, #255	@ 0xff
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800088a:	f107 010c 	add.w	r1, r7, #12
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	4835      	ldr	r0, [pc, #212]	@ (800096c <read_block+0x1a0>)
 8000898:	f003 fe22 	bl	80044e0 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f000 ff35 	bl	8001714 <HAL_GPIO_WritePin>
		if(response[0] == 0xFE){
 80008aa:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 80008ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80008b0:	d00a      	beq.n	80008c8 <read_block+0xfc>
	for(int i = 0; i < 1000; i++){
 80008b2:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80008b6:	3301      	adds	r3, #1
 80008b8:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80008bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80008c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008c4:	dbd2      	blt.n	800086c <read_block+0xa0>
 80008c6:	e000      	b.n	80008ca <read_block+0xfe>
			break;
 80008c8:	bf00      	nop
		}
	}

	if(response[0] != 0xFE)
 80008ca:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 80008ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80008d0:	d001      	beq.n	80008d6 <read_block+0x10a>
		return 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e045      	b.n	8000962 <read_block+0x196>

	uint8_t send[512];
	memset(send, 0xFF,512);
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008de:	21ff      	movs	r1, #255	@ 0xff
 80008e0:	4618      	mov	r0, r3
 80008e2:	f006 fcbd 	bl	8007260 <memset>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f0:	f000 ff10 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send, data, 512, HAL_MAX_DELAY);
 80008f4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80008f8:	f5a3 720a 	sub.w	r2, r3, #552	@ 0x228
 80008fc:	f107 0118 	add.w	r1, r7, #24
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	4817      	ldr	r0, [pc, #92]	@ (800096c <read_block+0x1a0>)
 800090e:	f003 fde7 	bl	80044e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 fefa 	bl	8001714 <HAL_GPIO_WritePin>

	uint8_t crc[2];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f000 fef3 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF}, crc, 2, HAL_MAX_DELAY);
 800092e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000932:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <read_block+0x1a4>)
 8000938:	8812      	ldrh	r2, [r2, #0]
 800093a:	801a      	strh	r2, [r3, #0]
 800093c:	f107 0214 	add.w	r2, r7, #20
 8000940:	f107 0110 	add.w	r1, r7, #16
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2302      	movs	r3, #2
 800094c:	4807      	ldr	r0, [pc, #28]	@ (800096c <read_block+0x1a0>)
 800094e:	f003 fdc7 	bl	80044e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095c:	f000 feda 	bl	8001714 <HAL_GPIO_WritePin>
	return 1;
 8000960:	2301      	movs	r3, #1
}
 8000962:	4618      	mov	r0, r3
 8000964:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000554 	.word	0x20000554
 8000970:	0800740c 	.word	0x0800740c

08000974 <write_block>:

bool write_block(uint32_t block, uint8_t* data){
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af02      	add	r7, sp, #8
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	uint8_t cmd24[6];
	cmd24[0] = 0x58;
 800097e:	2358      	movs	r3, #88	@ 0x58
 8000980:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	cmd24[1] = (block >> 24)&0xFF;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0e1b      	lsrs	r3, r3, #24
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	cmd24[2] = (block >> 16)&0xFF;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	0c1b      	lsrs	r3, r3, #16
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	cmd24[3] = (block >> 8) & 0xFF;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	0a1b      	lsrs	r3, r3, #8
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	cmd24[4] = (block)&0xFF;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	cmd24[5] = 0xFF;
 80009aa:	23ff      	movs	r3, #255	@ 0xff
 80009ac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	bool result = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	result = send_command(cmd24, 0x00);
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe63 	bl	8000688 <send_command>
 80009c2:	4603      	mov	r3, r0
 80009c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if(!result)
 80009c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80009cc:	f083 0301 	eor.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <write_block+0x66>
		return 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e097      	b.n	8000b0a <write_block+0x196>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e4:	f000 fe96 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFE}, 1, HAL_MAX_DELAY);
 80009e8:	23fe      	movs	r3, #254	@ 0xfe
 80009ea:	f887 3020 	strb.w	r3, [r7, #32]
 80009ee:	f107 0120 	add.w	r1, r7, #32
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	2201      	movs	r2, #1
 80009f8:	4846      	ldr	r0, [pc, #280]	@ (8000b14 <write_block+0x1a0>)
 80009fa:	f003 fc1b 	bl	8004234 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f000 fe84 	bl	8001714 <HAL_GPIO_WritePin>

	for(int i = 0; i < 512; i++){
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a10:	e01d      	b.n	8000a4e <write_block+0xda>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1c:	f000 fe7a 	bl	8001714 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t[]){data[i]}, 1, HAL_MAX_DELAY);
 8000a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	743b      	strb	r3, [r7, #16]
 8000a2a:	f107 0110 	add.w	r1, r7, #16
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	2201      	movs	r2, #1
 8000a34:	4837      	ldr	r0, [pc, #220]	@ (8000b14 <write_block+0x1a0>)
 8000a36:	f003 fbfd 	bl	8004234 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a44:	f000 fe66 	bl	8001714 <HAL_GPIO_WritePin>
	for(int i = 0; i < 512; i++){
 8000a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a54:	dbdd      	blt.n	8000a12 <write_block+0x9e>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a60:	f000 fe58 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFF, 0xFF}, 2, HAL_MAX_DELAY);
 8000a64:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <write_block+0x1a4>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	83bb      	strh	r3, [r7, #28]
 8000a6a:	f107 011c 	add.w	r1, r7, #28
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	2202      	movs	r2, #2
 8000a74:	4827      	ldr	r0, [pc, #156]	@ (8000b14 <write_block+0x1a0>)
 8000a76:	f003 fbdd 	bl	8004234 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f000 fe46 	bl	8001714 <HAL_GPIO_WritePin>

	uint8_t response[1];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f000 fe3f 	bl	8001714 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 8000a96:	23ff      	movs	r3, #255	@ 0xff
 8000a98:	753b      	strb	r3, [r7, #20]
 8000a9a:	f107 0218 	add.w	r2, r7, #24
 8000a9e:	f107 0114 	add.w	r1, r7, #20
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <write_block+0x1a0>)
 8000aac:	f003 fd18 	bl	80044e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aba:	f000 fe2b 	bl	8001714 <HAL_GPIO_WritePin>
	if((uint8_t)(response[0]&0x1F) != 0x05)
 8000abe:	7e3b      	ldrb	r3, [r7, #24]
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	2b05      	cmp	r3, #5
 8000ac6:	d001      	beq.n	8000acc <write_block+0x158>
		return 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e01e      	b.n	8000b0a <write_block+0x196>

	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f000 fe1d 	bl	8001714 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 8000ada:	23ff      	movs	r3, #255	@ 0xff
 8000adc:	733b      	strb	r3, [r7, #12]
 8000ade:	f107 0218 	add.w	r2, r7, #24
 8000ae2:	f107 010c 	add.w	r1, r7, #12
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2301      	movs	r3, #1
 8000aee:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <write_block+0x1a0>)
 8000af0:	f003 fcf6 	bl	80044e0 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f000 fe09 	bl	8001714 <HAL_GPIO_WritePin>
		if(response[0] != 0x00)
 8000b02:	7e3b      	ldrb	r3, [r7, #24]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0e1      	beq.n	8000acc <write_block+0x158>
			break;
	}

	return 1;
 8000b08:	2301      	movs	r3, #1
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3730      	adds	r7, #48	@ 0x30
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000554 	.word	0x20000554
 8000b18:	0800740c 	.word	0x0800740c

08000b1c <initialize_SD_card>:

bool initialize_SD_card(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0
	uint8_t cmd0[6] = {0x40, 0x00, 0x00, 0x00, 0x00, 0x95};
 8000b22:	4a4a      	ldr	r2, [pc, #296]	@ (8000c4c <initialize_SD_card+0x130>)
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2c:	6018      	str	r0, [r3, #0]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd8[6] = {0x48, 0x00, 0x00, 0x01, 0xAA, 0x87};
 8000b32:	4a47      	ldr	r2, [pc, #284]	@ (8000c50 <initialize_SD_card+0x134>)
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3c:	6018      	str	r0, [r3, #0]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd55[6] = {0x77, 0x00, 0x00, 0x00, 0x00, 0xFF};
 8000b42:	4a44      	ldr	r2, [pc, #272]	@ (8000c54 <initialize_SD_card+0x138>)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	6018      	str	r0, [r3, #0]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	8019      	strh	r1, [r3, #0]
		  uint8_t acdm41[6] = {0x69, 0x40,0x00, 0x00, 0x00, 0xFF};
 8000b52:	4a41      	ldr	r2, [pc, #260]	@ (8000c58 <initialize_SD_card+0x13c>)
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5c:	6018      	str	r0, [r3, #0]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd16[6] = {0x50, 0x00, 0x00, 0x02, 0x00, 0xFF};
 8000b62:	4a3e      	ldr	r2, [pc, #248]	@ (8000c5c <initialize_SD_card+0x140>)
 8000b64:	463b      	mov	r3, r7
 8000b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b6a:	6018      	str	r0, [r3, #0]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	8019      	strh	r1, [r3, #0]
		  bool result = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		  initialize_SPI_mode();
 8000b76:	f7ff fe0b 	bl	8000790 <initialize_SPI_mode>
		  while(result == 0)
 8000b7a:	e008      	b.n	8000b8e <initialize_SD_card+0x72>
			  result = send_command(cmd0, 0x01);
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fd80 	bl	8000688 <send_command>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b92:	f083 0301 	eor.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1ef      	bne.n	8000b7c <initialize_SD_card+0x60>
		  result = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000ba2:	e008      	b.n	8000bb6 <initialize_SD_card+0x9a>
			  result = send_command(cmd8, 0x01);
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd6c 	bl	8000688 <send_command>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000bba:	f083 0301 	eor.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1ef      	bne.n	8000ba4 <initialize_SD_card+0x88>
		  result = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000bca:	e01a      	b.n	8000c02 <initialize_SD_card+0xe6>
			  bool temp = send_command(cmd55, 0x01);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fd58 	bl	8000688 <send_command>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			  if(!temp)
 8000bde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000be2:	f083 0301 	eor.w	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <initialize_SD_card+0xe4>
				  continue;
			  result = send_command(acdm41, 0x00);
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fd48 	bl	8000688 <send_command>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000bfe:	e000      	b.n	8000c02 <initialize_SD_card+0xe6>
				  continue;
 8000c00:	bf00      	nop
		  while(result == 0){
 8000c02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1dd      	bne.n	8000bcc <initialize_SD_card+0xb0>
		  }
		  result = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000c16:	e007      	b.n	8000c28 <initialize_SD_card+0x10c>
			  result = send_command(cmd16, 0x00);
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fd33 	bl	8000688 <send_command>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f0      	bne.n	8000c18 <initialize_SD_card+0xfc>
		  }
		  result = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  is_initialized = 1;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <initialize_SD_card+0x144>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	08007410 	.word	0x08007410
 8000c50:	08007418 	.word	0x08007418
 8000c54:	08007420 	.word	0x08007420
 8000c58:	08007428 	.word	0x08007428
 8000c5c:	08007430 	.word	0x08007430
 8000c60:	20000550 	.word	0x20000550

08000c64 <is_SD_card_initialized>:

bool is_SD_card_initialized(){
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	return is_initialized;
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <is_SD_card_initialized+0x14>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000550 	.word	0x20000550

08000c7c <SPI_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;
//PA5 = SCK, PA6 = MISO, PA7 = MOSI, PA9 = CS
void SPI_Init(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	 /* USER CODE END SPI1_Init 0 */
	 /* USER CODE BEGIN SPI1_Init 1 */
	 /* USER CODE END SPI1_Init 1 */
	 /* SPI1 parameter configuration*/
	 hspi1.Instance = SPI1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <SPI_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <SPI_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
	 hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <SPI_Init+0x74>)
 8000c88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
	 hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <SPI_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
	 hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <SPI_Init+0x74>)
 8000c96:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c9a:	60da      	str	r2, [r3, #12]
	 hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <SPI_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
	 hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <SPI_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
	 hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <SPI_Init+0x74>)
 8000caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cae:	619a      	str	r2, [r3, #24]
	 hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <SPI_Init+0x74>)
 8000cb2:	2230      	movs	r2, #48	@ 0x30
 8000cb4:	61da      	str	r2, [r3, #28]
	 hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <SPI_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
	 hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <SPI_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
	 hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <SPI_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	@ 0x28
	 hspi1.Init.CRCPolynomial = 7;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <SPI_Init+0x74>)
 8000cca:	2207      	movs	r2, #7
 8000ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <SPI_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	631a      	str	r2, [r3, #48]	@ 0x30
	 hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SPI_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
	 if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <SPI_Init+0x74>)
 8000cdc:	f003 fa20 	bl	8004120 <HAL_SPI_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SPI_Init+0x6e>
	 {
	   Error_Handler();
 8000ce6:	f7ff fc2b 	bl	8000540 <Error_Handler>
	 }
	 /* USER CODE BEGIN SPI1_Init 2 */
	 /* USER CODE END SPI1_Init 2 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000554 	.word	0x20000554
 8000cf4:	40013000 	.word	0x40013000

08000cf8 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d02:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <HAL_SPI_MspInit+0x7c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d128      	bne.n	8000db4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_SPI_MspInit+0x80>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d66:	4a16      	ldr	r2, [pc, #88]	@ (8000dc0 <HAL_SPI_MspInit+0x80>)
 8000d68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_SPI_MspInit+0x80>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_SPI_MspInit+0x80>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a10      	ldr	r2, [pc, #64]	@ (8000dc0 <HAL_SPI_MspInit+0x80>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_SPI_MspInit+0x80>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d92:	23e0      	movs	r3, #224	@ 0xe0
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da2:	2305      	movs	r3, #5
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db0:	f000 fb06 	bl	80013c0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013000 	.word	0x40013000
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <NMI_Handler+0x4>

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <MemManage_Handler+0x4>

08000ddc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1a:	f000 f8c9 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f006 fa1c 	bl	8007290 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20018000 	.word	0x20018000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	200005b8 	.word	0x200005b8
 8000e8c:	20000740 	.word	0x20000740

08000e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f006 f9db 	bl	800729c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff f9f5 	bl	80002d4 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ef8:	08007554 	.word	0x08007554
  ldr r2, =_sbss
 8000efc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f00:	2000073c 	.word	0x2000073c

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>

08000f06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f943 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f16:	200f      	movs	r0, #15
 8000f18:	f000 f80e 	bl	8000f38 <HAL_InitTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	e001      	b.n	8000f2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f28:	f7ff fee6 	bl	8000cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_InitTick+0x6c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d023      	beq.n	8000f94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_InitTick+0x70>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_InitTick+0x6c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f941 	bl	80011ea <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10f      	bne.n	8000f8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d809      	bhi.n	8000f88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f919 	bl	80011b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_InitTick+0x74>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e007      	b.n	8000f98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e004      	b.n	8000f98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e001      	b.n	8000f98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200005bc 	.word	0x200005bc

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200005bc 	.word	0x200005bc

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	@ (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	@ 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff47 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff5c 	bl	8001080 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff8e 	bl	80010f0 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffb0 	bl	8001158 <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_DMA_Start_IT+0x20>
 800121e:	2302      	movs	r3, #2
 8001220:	e04b      	b.n	80012ba <HAL_DMA_Start_IT+0xb8>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d13a      	bne.n	80012ac <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 f880 	bl	8001360 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 020e 	orr.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e00f      	b.n	800129a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0204 	bic.w	r2, r2, #4
 8001288:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 020a 	orr.w	r2, r2, #10
 8001298:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e005      	b.n	80012b8 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012b4:	2302      	movs	r3, #2
 80012b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d005      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2204      	movs	r2, #4
 80012de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e029      	b.n	800133a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020e 	bic.w	r2, r2, #14
 80012f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f003 021c 	and.w	r2, r3, #28
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	4798      	blx	r3
    }
  }
  return status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001352:	b2db      	uxtb	r3, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f003 021c 	and.w	r2, r3, #28
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d108      	bne.n	80013a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013a2:	e007      	b.n	80013b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e17f      	b.n	80016d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8171 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d005      	beq.n	8001400 <HAL_GPIO_Init+0x40>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d130      	bne.n	8001462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001436:	2201      	movs	r2, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 0201 	and.w	r2, r3, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b03      	cmp	r3, #3
 800146c:	d118      	bne.n	80014a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001474:	2201      	movs	r2, #1
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	f003 0201 	and.w	r2, r3, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d017      	beq.n	80014dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	6939      	ldr	r1, [r7, #16]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80ac 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b5f      	ldr	r3, [pc, #380]	@ (80016f0 <HAL_GPIO_Init+0x330>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001576:	4a5e      	ldr	r2, [pc, #376]	@ (80016f0 <HAL_GPIO_Init+0x330>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6613      	str	r3, [r2, #96]	@ 0x60
 800157e:	4b5c      	ldr	r3, [pc, #368]	@ (80016f0 <HAL_GPIO_Init+0x330>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158a:	4a5a      	ldr	r2, [pc, #360]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015b4:	d025      	beq.n	8001602 <HAL_GPIO_Init+0x242>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4f      	ldr	r2, [pc, #316]	@ (80016f8 <HAL_GPIO_Init+0x338>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01f      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4e      	ldr	r2, [pc, #312]	@ (80016fc <HAL_GPIO_Init+0x33c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001700 <HAL_GPIO_Init+0x340>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001704 <HAL_GPIO_Init+0x344>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001708 <HAL_GPIO_Init+0x348>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	@ (800170c <HAL_GPIO_Init+0x34c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x22a>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x244>
 8001602:	2300      	movs	r3, #0
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001614:	4937      	ldr	r1, [pc, #220]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001622:	4b3b      	ldr	r3, [pc, #236]	@ (8001710 <HAL_GPIO_Init+0x350>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001646:	4a32      	ldr	r2, [pc, #200]	@ (8001710 <HAL_GPIO_Init+0x350>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800164c:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <HAL_GPIO_Init+0x350>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001670:	4a27      	ldr	r2, [pc, #156]	@ (8001710 <HAL_GPIO_Init+0x350>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001676:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <HAL_GPIO_Init+0x350>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <HAL_GPIO_Init+0x350>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_GPIO_Init+0x350>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c4:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <HAL_GPIO_Init+0x350>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae78 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000c00 	.word	0x48000c00
 8001704:	48001000 	.word	0x48001000
 8001708:	48001400 	.word	0x48001400
 800170c:	48001800 	.word	0x48001800
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001730:	e002      	b.n	8001738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	461a      	mov	r2, r3
 8001750:	460b      	mov	r3, r1
 8001752:	817b      	strh	r3, [r7, #10]
 8001754:	4613      	mov	r3, r2
 8001756:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8001758:	4b90      	ldr	r3, [pc, #576]	@ (800199c <HAL_I2C_Master_Seq_Transmit_DMA+0x258>)
 800175a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b20      	cmp	r3, #32
 800176a:	f040 8135 	bne.w	80019d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x294>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2C_Master_Seq_Transmit_DMA+0x38>
 8001778:	2302      	movs	r3, #2
 800177a:	e12e      	b.n	80019da <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2221      	movs	r2, #33	@ 0x21
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2210      	movs	r2, #16
 8001790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	893a      	ldrh	r2, [r7, #8]
 80017a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4a7c      	ldr	r2, [pc, #496]	@ (80019a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x25c>)
 80017b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2bff      	cmp	r3, #255	@ 0xff
 80017ba:	d906      	bls.n	80017ca <HAL_I2C_Master_Seq_Transmit_DMA+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	22ff      	movs	r2, #255	@ 0xff
 80017c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80017c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	e007      	b.n	80017da <HAL_I2C_Master_Seq_Transmit_DMA+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d021      	beq.n	8001826 <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
 80017e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
 80017e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017ee:	d11a      	bne.n	8001826 <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180a:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	2b11      	cmp	r3, #17
 800182c:	d10e      	bne.n	800184c <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800182e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001830:	2baa      	cmp	r3, #170	@ 0xaa
 8001832:	d003      	beq.n	800183c <HAL_I2C_Master_Seq_Transmit_DMA+0xf8>
 8001834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001836:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 800183a:	d101      	bne.n	8001840 <HAL_I2C_Master_Seq_Transmit_DMA+0xfc>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_I2C_Master_Seq_Transmit_DMA+0xfe>
 8001840:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	e00a      	b.n	8001862 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f001 fe1f 	bl	8003490 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2bff      	cmp	r3, #255	@ 0xff
 800185a:	d802      	bhi.n	8001862 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
      {
        xfermode = hi2c->XferOptions;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001860:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8084 	beq.w	8001974 <HAL_I2C_Master_Seq_Transmit_DMA+0x230>
    {
      if (hi2c->hdmatx != NULL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001870:	2b00      	cmp	r3, #0
 8001872:	d022      	beq.n	80018ba <HAL_I2C_Master_Seq_Transmit_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001878:	4a4a      	ldr	r2, [pc, #296]	@ (80019a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x260>)
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001880:	4a49      	ldr	r2, [pc, #292]	@ (80019a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x264>)
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001890:	2200      	movs	r2, #0
 8001892:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80018a4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80018aa:	f7ff fcaa 	bl	8001202 <HAL_DMA_Start_IT>
 80018ae:	4603      	mov	r3, r0
 80018b0:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80018b2:	7cfb      	ldrb	r3, [r7, #19]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d149      	bne.n	800194c <HAL_I2C_Master_Seq_Transmit_DMA+0x208>
 80018b8:	e013      	b.n	80018e2 <HAL_I2C_Master_Seq_Transmit_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e07b      	b.n	80019da <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      {
        /* Send Slave Address and set NBYTES to write */
        if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ac>
 80018e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80018ee:	d109      	bne.n	8001904 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	8979      	ldrh	r1, [r7, #10]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f001 fcb3 	bl	8003268 <I2C_TransferConfig>
 8001902:	e009      	b.n	8001918 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
        }
        else
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	b2da      	uxtb	r2, r3
 800190a:	8979      	ldrh	r1, [r7, #10]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f001 fca8 	bl	8003268 <I2C_TransferConfig>
        }

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001932:	2110      	movs	r1, #16
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f001 fcc9 	bl	80032cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e043      	b.n	80019d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001960:	f043 0210 	orr.w	r2, r3, #16
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <HAL_I2C_Master_Seq_Transmit_DMA+0x268>)
 8001978:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 800197a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_I2C_Master_Seq_Transmit_DMA+0x244>
 8001980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001986:	d113      	bne.n	80019b0 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	8979      	ldrh	r1, [r7, #10]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f001 fc67 	bl	8003268 <I2C_TransferConfig>
 800199a:	e013      	b.n	80019c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x280>
 800199c:	80002000 	.word	0x80002000
 80019a0:	080020dd 	.word	0x080020dd
 80019a4:	080030b7 	.word	0x080030b7
 80019a8:	080031ff 	.word	0x080031ff
 80019ac:	08001c81 	.word	0x08001c81
      }
      else
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f001 fc52 	bl	8003268 <I2C_TransferConfig>
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019cc:	2101      	movs	r1, #1
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f001 fc7c 	bl	80032cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop

080019e4 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	461a      	mov	r2, r3
 80019f0:	460b      	mov	r3, r1
 80019f2:	817b      	strh	r3, [r7, #10]
 80019f4:	4613      	mov	r3, r2
 80019f6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 80019f8:	4b77      	ldr	r3, [pc, #476]	@ (8001bd8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 80019fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	f040 80e1 	bne.w	8001bcc <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e0da      	b.n	8001bce <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2222      	movs	r2, #34	@ 0x22
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	893a      	ldrh	r2, [r7, #8]
 8001a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a64      	ldr	r2, [pc, #400]	@ (8001bdc <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
 8001a4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2bff      	cmp	r3, #255	@ 0xff
 8001a56:	d906      	bls.n	8001a66 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	22ff      	movs	r2, #255	@ 0xff
 8001a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	e007      	b.n	8001a76 <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a74:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d10e      	bne.n	8001a9c <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8001a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a80:	2baa      	cmp	r3, #170	@ 0xaa
 8001a82:	d003      	beq.n	8001a8c <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
 8001a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a86:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
 8001a90:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e00a      	b.n	8001ab2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f001 fcf7 	bl	8003490 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2bff      	cmp	r3, #255	@ 0xff
 8001aaa:	d802      	bhi.n	8001ab2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d070      	beq.n	8001b9c <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d020      	beq.n	8001b04 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac6:	4a46      	ldr	r2, [pc, #280]	@ (8001be0 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
 8001ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ace:	4a45      	ldr	r2, [pc, #276]	@ (8001be4 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ade:	2200      	movs	r2, #0
 8001ae0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3324      	adds	r3, #36	@ 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001af4:	f7ff fb85 	bl	8001202 <HAL_DMA_Start_IT>
 8001af8:	4603      	mov	r3, r0
 8001afa:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d138      	bne.n	8001b74 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
 8001b02:	e013      	b.n	8001b2c <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e050      	b.n	8001bce <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	8979      	ldrh	r1, [r7, #10]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f001 fb94 	bl	8003268 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f001 fbb5 	bl	80032cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e029      	b.n	8001bc8 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b88:	f043 0210 	orr.w	r2, r3, #16
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e018      	b.n	8001bce <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	8979      	ldrh	r1, [r7, #10]
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f001 fb58 	bl	8003268 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f001 fb82 	bl	80032cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	80002400 	.word	0x80002400
 8001bdc:	080020dd 	.word	0x080020dd
 8001be0:	0800314d 	.word	0x0800314d
 8001be4:	080031ff 	.word	0x080031ff
 8001be8:	08001c81 	.word	0x08001c81

08001bec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
 8001c20:	4613      	mov	r3, r2
 8001c22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <I2C_Master_ISR_IT+0x1e>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e121      	b.n	8001ee2 <I2C_Master_ISR_IT+0x262>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d012      	beq.n	8001cd6 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00d      	beq.n	8001cd6 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f043 0204 	orr.w	r2, r3, #4
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f001 f9cd 	bl	800306e <I2C_Flush_TXDR>
 8001cd4:	e0f2      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d022      	beq.n	8001d26 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01d      	beq.n	8001d26 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d24:	e0ca      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d128      	bne.n	8001d82 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d023      	beq.n	8001d82 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01e      	beq.n	8001d82 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80b6 	beq.w	8001ebc <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8001d80:	e09c      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d06a      	beq.n	8001e62 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d065      	beq.n	8001e62 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d04e      	beq.n	8001e3e <I2C_Master_ISR_IT+0x1be>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d14a      	bne.n	8001e3e <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2bff      	cmp	r3, #255	@ 0xff
 8001dbe:	d91c      	bls.n	8001dfa <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d103      	bne.n	8001ddc <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001dda:	e002      	b.n	8001de2 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	22ff      	movs	r2, #255	@ 0xff
 8001de0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	8a79      	ldrh	r1, [r7, #18]
 8001dea:	2300      	movs	r3, #0
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f001 fa38 	bl	8003268 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df8:	e032      	b.n	8001e60 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e0c:	d00b      	beq.n	8001e26 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e12:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001e18:	8a79      	ldrh	r1, [r7, #18]
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	9000      	str	r0, [sp, #0]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f001 fa22 	bl	8003268 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e24:	e01c      	b.n	8001e60 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	8a79      	ldrh	r1, [r7, #18]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f001 fa16 	bl	8003268 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3c:	e010      	b.n	8001e60 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e4c:	d003      	beq.n	8001e56 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fcdd 	bl	800280e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e54:	e032      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e56:	2140      	movs	r1, #64	@ 0x40
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fff1 	bl	8002e40 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e5e:	e02d      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
 8001e60:	e02c      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d027      	beq.n	8001ebc <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d022      	beq.n	8001ebc <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d119      	bne.n	8001eb4 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e8e:	d015      	beq.n	8001ebc <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e98:	d108      	bne.n	8001eac <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e007      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fcae 	bl	800280e <I2C_ITMasterSeqCplt>
 8001eb2:	e003      	b.n	8001ebc <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001eb4:	2140      	movs	r1, #64	@ 0x40
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 ffc2 	bl	8002e40 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fd34 	bl	8002940 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <I2C_Slave_ISR_IT+0x24>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0e2      	b.n	80020d4 <I2C_Slave_ISR_IT+0x1ea>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001f2a:	6939      	ldr	r1, [r7, #16]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fdcf 	bl	8002ad0 <I2C_ITSlaveCplt>
 8001f32:	e0ca      	b.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04b      	beq.n	8001fd6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d046      	beq.n	8001fd6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d128      	bne.n	8001fa4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b28      	cmp	r3, #40	@ 0x28
 8001f5c:	d108      	bne.n	8001f70 <I2C_Slave_ISR_IT+0x86>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f64:	d104      	bne.n	8001f70 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 ff15 	bl	8002d98 <I2C_ITListenCplt>
 8001f6e:	e031      	b.n	8001fd4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b29      	cmp	r3, #41	@ 0x29
 8001f7a:	d10e      	bne.n	8001f9a <I2C_Slave_ISR_IT+0xb0>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f82:	d00a      	beq.n	8001f9a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2210      	movs	r2, #16
 8001f8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f001 f86e 	bl	800306e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fc78 	bl	8002888 <I2C_ITSlaveSeqCplt>
 8001f98:	e01c      	b.n	8001fd4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001fa2:	e08f      	b.n	80020c4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2210      	movs	r2, #16
 8001faa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	f043 0204 	orr.w	r2, r3, #4
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <I2C_Slave_ISR_IT+0xdc>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc4:	d17e      	bne.n	80020c4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4619      	mov	r1, r3
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 ff37 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001fd2:	e077      	b.n	80020c4 <I2C_Slave_ISR_IT+0x1da>
 8001fd4:	e076      	b.n	80020c4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d02f      	beq.n	8002040 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d02a      	beq.n	8002040 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d14b      	bne.n	80020c8 <I2C_Slave_ISR_IT+0x1de>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002036:	d047      	beq.n	80020c8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fc25 	bl	8002888 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800203e:	e043      	b.n	80020c8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002054:	6939      	ldr	r1, [r7, #16]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fb55 	bl	8002706 <I2C_ITAddrCplt>
 800205c:	e035      	b.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d030      	beq.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800206e:	2b00      	cmp	r3, #0
 8002070:	d02b      	beq.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d018      	beq.n	80020ae <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80020ac:	e00d      	b.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b4:	d002      	beq.n	80020bc <I2C_Slave_ISR_IT+0x1d2>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fbe3 	bl	8002888 <I2C_ITSlaveSeqCplt>
 80020c2:	e002      	b.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80020c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <I2C_Master_ISR_DMA+0x1a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e0e7      	b.n	80022c6 <I2C_Master_ISR_DMA+0x1ea>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d016      	beq.n	8002136 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800210e:	2b00      	cmp	r3, #0
 8002110:	d011      	beq.n	8002136 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2210      	movs	r2, #16
 8002118:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f043 0204 	orr.w	r2, r3, #4
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002126:	2120      	movs	r1, #32
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f001 f8cf 	bl	80032cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 ff9d 	bl	800306e <I2C_Flush_TXDR>
 8002134:	e0c2      	b.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213c:	2b00      	cmp	r3, #0
 800213e:	d07f      	beq.n	8002240 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002146:	2b00      	cmp	r3, #0
 8002148:	d07a      	beq.n	8002240 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002158:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d05c      	beq.n	800221e <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002170:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	2bff      	cmp	r3, #255	@ 0xff
 800217a:	d914      	bls.n	80021a6 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d103      	bne.n	8002198 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002196:	e002      	b.n	800219e <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	22ff      	movs	r2, #255	@ 0xff
 800219c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800219e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e010      	b.n	80021c8 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021b8:	d003      	beq.n	80021c2 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e002      	b.n	80021c8 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80021c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021c6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	8a79      	ldrh	r1, [r7, #18]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f001 f846 	bl	8003268 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b22      	cmp	r3, #34	@ 0x22
 80021f8:	d108      	bne.n	800220c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002208:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800220a:	e057      	b.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800221a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800221c:	e04e      	b.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002228:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800222c:	d003      	beq.n	8002236 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 faed 	bl	800280e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002234:	e042      	b.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002236:	2140      	movs	r1, #64	@ 0x40
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fe01 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800223e:	e03d      	b.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d028      	beq.n	800229c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002250:	2b00      	cmp	r3, #0
 8002252:	d023      	beq.n	800229c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d119      	bne.n	8002292 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800226c:	d025      	beq.n	80022ba <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002276:	d108      	bne.n	800228a <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002286:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002288:	e017      	b.n	80022ba <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fabf 	bl	800280e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002290:	e013      	b.n	80022ba <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002292:	2140      	movs	r1, #64	@ 0x40
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fdd3 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800229a:	e00e      	b.n	80022ba <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fb44 	bl	8002940 <I2C_ITMasterCplt>
 80022b8:	e000      	b.n	80022bc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80022ba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80022dc:	4b90      	ldr	r3, [pc, #576]	@ (8002520 <I2C_Mem_ISR_DMA+0x250>)
 80022de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <I2C_Mem_ISR_DMA+0x1e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e12f      	b.n	800254e <I2C_Mem_ISR_DMA+0x27e>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d016      	beq.n	800232e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002306:	2b00      	cmp	r3, #0
 8002308:	d011      	beq.n	800232e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2210      	movs	r2, #16
 8002310:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f043 0204 	orr.w	r2, r3, #4
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800231e:	2120      	movs	r1, #32
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 ffd3 	bl	80032cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fea1 	bl	800306e <I2C_Flush_TXDR>
 800232c:	e10a      	b.n	8002544 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f04f 32ff 	mov.w	r2, #4294967295
 8002352:	651a      	str	r2, [r3, #80]	@ 0x50
 8002354:	e0f6      	b.n	8002544 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d06d      	beq.n	800243c <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002366:	2b00      	cmp	r3, #0
 8002368:	d068      	beq.n	800243c <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800236a:	2101      	movs	r1, #1
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f001 f831 	bl	80033d4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002372:	2110      	movs	r1, #16
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 ffa9 	bl	80032cc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d056      	beq.n	8002432 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2bff      	cmp	r3, #255	@ 0xff
 800238c:	d91e      	bls.n	80023cc <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d103      	bne.n	80023aa <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80023a8:	e002      	b.n	80023b0 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	22ff      	movs	r2, #255	@ 0xff
 80023ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b4:	b299      	uxth	r1, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 ff4f 	bl	8003268 <I2C_TransferConfig>
 80023ca:	e011      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	b299      	uxth	r1, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	2300      	movs	r3, #0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 ff3c 	bl	8003268 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b22      	cmp	r3, #34	@ 0x22
 800240c:	d108      	bne.n	8002420 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800241c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800241e:	e091      	b.n	8002544 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800242e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002430:	e088      	b.n	8002544 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002432:	2140      	movs	r1, #64	@ 0x40
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fd03 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800243a:	e083      	b.n	8002544 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d070      	beq.n	8002528 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800244c:	2b00      	cmp	r3, #0
 800244e:	d06b      	beq.n	8002528 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002450:	2101      	movs	r1, #1
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 ffbe 	bl	80033d4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002458:	2110      	movs	r1, #16
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 ff36 	bl	80032cc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b22      	cmp	r3, #34	@ 0x22
 800246a:	d101      	bne.n	8002470 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 800246c:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <I2C_Mem_ISR_DMA+0x254>)
 800246e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	2bff      	cmp	r3, #255	@ 0xff
 8002478:	d91e      	bls.n	80024b8 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d103      	bne.n	8002496 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002494:	e002      	b.n	800249c <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	22ff      	movs	r2, #255	@ 0xff
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a0:	b299      	uxth	r1, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fed9 	bl	8003268 <I2C_TransferConfig>
 80024b6:	e011      	b.n	80024dc <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	b299      	uxth	r1, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fec6 	bl	8003268 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b22      	cmp	r3, #34	@ 0x22
 80024f8:	d108      	bne.n	800250c <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002508:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800250a:	e01b      	b.n	8002544 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800251a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800251c:	e012      	b.n	8002544 <I2C_Mem_ISR_DMA+0x274>
 800251e:	bf00      	nop
 8002520:	80002000 	.word	0x80002000
 8002524:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f9fe 	bl	8002940 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop

08002558 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <I2C_Slave_ISR_DMA+0x24>
 8002578:	2302      	movs	r3, #2
 800257a:	e0c0      	b.n	80026fe <I2C_Slave_ISR_DMA+0x1a6>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fa98 	bl	8002ad0 <I2C_ITSlaveCplt>
 80025a0:	e0a8      	b.n	80026f4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8095 	beq.w	80026d8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 808f 	beq.w	80026d8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07d      	beq.n	80026ca <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800260e:	2301      	movs	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d128      	bne.n	800266a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b28      	cmp	r3, #40	@ 0x28
 8002622:	d108      	bne.n	8002636 <I2C_Slave_ISR_DMA+0xde>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800262a:	d104      	bne.n	8002636 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fbb2 	bl	8002d98 <I2C_ITListenCplt>
 8002634:	e048      	b.n	80026c8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b29      	cmp	r3, #41	@ 0x29
 8002640:	d10e      	bne.n	8002660 <I2C_Slave_ISR_DMA+0x108>
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002648:	d00a      	beq.n	8002660 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2210      	movs	r2, #16
 8002650:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fd0b 	bl	800306e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f915 	bl	8002888 <I2C_ITSlaveSeqCplt>
 800265e:	e033      	b.n	80026c8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002668:	e034      	b.n	80026d4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2210      	movs	r2, #16
 8002670:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f043 0204 	orr.w	r2, r3, #4
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002684:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <I2C_Slave_ISR_DMA+0x13c>
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002692:	d11f      	bne.n	80026d4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b21      	cmp	r3, #33	@ 0x21
 8002698:	d002      	beq.n	80026a0 <I2C_Slave_ISR_DMA+0x148>
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b29      	cmp	r3, #41	@ 0x29
 800269e:	d103      	bne.n	80026a8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2221      	movs	r2, #33	@ 0x21
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a6:	e008      	b.n	80026ba <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b22      	cmp	r3, #34	@ 0x22
 80026ac:	d002      	beq.n	80026b4 <I2C_Slave_ISR_DMA+0x15c>
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80026b2:	d102      	bne.n	80026ba <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2222      	movs	r2, #34	@ 0x22
 80026b8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	4619      	mov	r1, r3
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fbbd 	bl	8002e40 <I2C_ITError>
      if (treatdmanack == 1U)
 80026c6:	e005      	b.n	80026d4 <I2C_Slave_ISR_DMA+0x17c>
 80026c8:	e004      	b.n	80026d4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2210      	movs	r2, #16
 80026d0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026d2:	e00f      	b.n	80026f4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80026d4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026d6:	e00d      	b.n	80026f4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f809 	bl	8002706 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800271c:	2b28      	cmp	r3, #40	@ 0x28
 800271e:	d16a      	bne.n	80027f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	0c1b      	lsrs	r3, r3, #16
 8002738:	b29b      	uxth	r3, r3
 800273a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800273e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	b29b      	uxth	r3, r3
 8002756:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800275a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d138      	bne.n	80027d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002764:	897b      	ldrh	r3, [r7, #10]
 8002766:	09db      	lsrs	r3, r3, #7
 8002768:	b29a      	uxth	r2, r3
 800276a:	89bb      	ldrh	r3, [r7, #12]
 800276c:	4053      	eors	r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	f003 0306 	and.w	r3, r3, #6
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11c      	bne.n	80027b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002778:	897b      	ldrh	r3, [r7, #10]
 800277a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278a:	2b02      	cmp	r3, #2
 800278c:	d13b      	bne.n	8002806 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2208      	movs	r2, #8
 800279a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027a4:	89ba      	ldrh	r2, [r7, #12]
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fa32 	bl	8001c14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027b0:	e029      	b.n	8002806 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80027b2:	893b      	ldrh	r3, [r7, #8]
 80027b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fe0a 	bl	80033d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027c8:	89ba      	ldrh	r2, [r7, #12]
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fa20 	bl	8001c14 <HAL_I2C_AddrCallback>
}
 80027d4:	e017      	b.n	8002806 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fdfa 	bl	80033d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027e8:	89ba      	ldrh	r2, [r7, #12]
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fa10 	bl	8001c14 <HAL_I2C_AddrCallback>
}
 80027f4:	e007      	b.n	8002806 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2208      	movs	r2, #8
 80027fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b21      	cmp	r3, #33	@ 0x21
 8002828:	d115      	bne.n	8002856 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2211      	movs	r2, #17
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800283e:	2101      	movs	r1, #1
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fdc7 	bl	80033d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fd fd14 	bl	800027c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002854:	e014      	b.n	8002880 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2212      	movs	r2, #18
 8002862:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800286a:	2102      	movs	r1, #2
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fdb1 	bl	80033d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fd fd14 	bl	80002a8 <HAL_I2C_MasterRxCpltCallback>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e00c      	b.n	80028d6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b29      	cmp	r3, #41	@ 0x29
 80028e0:	d112      	bne.n	8002908 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2228      	movs	r2, #40	@ 0x28
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2221      	movs	r2, #33	@ 0x21
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028f0:	2101      	movs	r1, #1
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fd6e 	bl	80033d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff f973 	bl	8001bec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002906:	e017      	b.n	8002938 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b2a      	cmp	r3, #42	@ 0x2a
 8002912:	d111      	bne.n	8002938 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2228      	movs	r2, #40	@ 0x28
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2222      	movs	r2, #34	@ 0x22
 8002920:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002922:	2102      	movs	r1, #2
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fd55 	bl	80033d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff f964 	bl	8001c00 <HAL_I2C_SlaveRxCpltCallback>
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2220      	movs	r2, #32
 8002954:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b21      	cmp	r3, #33	@ 0x21
 8002960:	d107      	bne.n	8002972 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002962:	2101      	movs	r1, #1
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fd35 	bl	80033d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2211      	movs	r2, #17
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002970:	e00c      	b.n	800298c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b22      	cmp	r3, #34	@ 0x22
 800297c:	d106      	bne.n	800298c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800297e:	2102      	movs	r1, #2
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fd27 	bl	80033d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2212      	movs	r2, #18
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b4c      	ldr	r3, [pc, #304]	@ (8002ac8 <I2C_ITMasterCplt+0x188>)
 8002998:	400b      	ands	r3, r1
 800299a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a49      	ldr	r2, [pc, #292]	@ (8002acc <I2C_ITMasterCplt+0x18c>)
 80029a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2210      	movs	r2, #16
 80029b8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b60      	cmp	r3, #96	@ 0x60
 80029d0:	d10a      	bne.n	80029e8 <I2C_ITMasterCplt+0xa8>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80029e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb40 	bl	800306e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b60      	cmp	r3, #96	@ 0x60
 80029fe:	d002      	beq.n	8002a06 <I2C_ITMasterCplt+0xc6>
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa17 	bl	8002e40 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a12:	e054      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b21      	cmp	r3, #33	@ 0x21
 8002a1e:	d124      	bne.n	8002a6a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b40      	cmp	r3, #64	@ 0x40
 8002a38:	d10b      	bne.n	8002a52 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff f8fa 	bl	8001c44 <HAL_I2C_MemTxCpltCallback>
}
 8002a50:	e035      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd fc0a 	bl	800027c <HAL_I2C_MasterTxCpltCallback>
}
 8002a68:	e029      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b22      	cmp	r3, #34	@ 0x22
 8002a74:	d123      	bne.n	8002abe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b40      	cmp	r3, #64	@ 0x40
 8002a8e:	d10b      	bne.n	8002aa8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff f8d9 	bl	8001c58 <HAL_I2C_MemRxCpltCallback>
}
 8002aa6:	e00a      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fd fbf5 	bl	80002a8 <HAL_I2C_MasterRxCpltCallback>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	fe00e800 	.word	0xfe00e800
 8002acc:	ffff0000 	.word	0xffff0000

08002ad0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2220      	movs	r2, #32
 8002afa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	2b21      	cmp	r3, #33	@ 0x21
 8002b00:	d002      	beq.n	8002b08 <I2C_ITSlaveCplt+0x38>
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	2b29      	cmp	r3, #41	@ 0x29
 8002b06:	d108      	bne.n	8002b1a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b08:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fc61 	bl	80033d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2221      	movs	r2, #33	@ 0x21
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b18:	e019      	b.n	8002b4e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	2b22      	cmp	r3, #34	@ 0x22
 8002b1e:	d002      	beq.n	8002b26 <I2C_ITSlaveCplt+0x56>
 8002b20:	7afb      	ldrb	r3, [r7, #11]
 8002b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b24:	d108      	bne.n	8002b38 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b26:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fc52 	bl	80033d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2222      	movs	r2, #34	@ 0x22
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b36:	e00a      	b.n	8002b4e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	2b28      	cmp	r3, #40	@ 0x28
 8002b3c:	d107      	bne.n	8002b4e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002b3e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fc46 	bl	80033d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b89      	ldr	r3, [pc, #548]	@ (8002d90 <I2C_ITSlaveCplt+0x2c0>)
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa7d 	bl	800306e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01f      	beq.n	8002bd6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ba4:	e017      	b.n	8002bd6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00c      	beq.n	8002c22 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d049      	beq.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d044      	beq.n	8002cd6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d128      	bne.n	8002ca8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b28      	cmp	r3, #40	@ 0x28
 8002c60:	d108      	bne.n	8002c74 <I2C_ITSlaveCplt+0x1a4>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c68:	d104      	bne.n	8002c74 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f893 	bl	8002d98 <I2C_ITListenCplt>
 8002c72:	e030      	b.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b29      	cmp	r3, #41	@ 0x29
 8002c7e:	d10e      	bne.n	8002c9e <I2C_ITSlaveCplt+0x1ce>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c86:	d00a      	beq.n	8002c9e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f9ec 	bl	800306e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fdf6 	bl	8002888 <I2C_ITSlaveSeqCplt>
 8002c9c:	e01b      	b.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	61da      	str	r2, [r3, #28]
 8002ca6:	e016      	b.n	8002cd6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <I2C_ITSlaveCplt+0x1fa>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc8:	d105      	bne.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8b5 	bl	8002e40 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8a4 	bl	8002e40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b28      	cmp	r3, #40	@ 0x28
 8002d02:	d141      	bne.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d04:	6979      	ldr	r1, [r7, #20]
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f846 	bl	8002d98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d0c:	e03c      	b.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d16:	d014      	beq.n	8002d42 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fdb5 	bl	8002888 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <I2C_ITSlaveCplt+0x2c4>)
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe ff78 	bl	8001c30 <HAL_I2C_ListenCpltCallback>
}
 8002d40:	e022      	b.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b22      	cmp	r3, #34	@ 0x22
 8002d4c:	d10e      	bne.n	8002d6c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe ff4b 	bl	8001c00 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d6a:	e00d      	b.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe ff32 	bl	8001bec <HAL_I2C_SlaveTxCpltCallback>
}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	fe00e800 	.word	0xfe00e800
 8002d94:	ffff0000 	.word	0xffff0000

08002d98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a25      	ldr	r2, [pc, #148]	@ (8002e3c <I2C_ITListenCplt+0xa4>)
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d022      	beq.n	8002e14 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0c:	f043 0204 	orr.w	r2, r3, #4
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e14:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fadb 	bl	80033d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fefe 	bl	8001c30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	ffff0000 	.word	0xffff0000

08002e40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e50:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a6d      	ldr	r2, [pc, #436]	@ (8003014 <I2C_ITError+0x1d4>)
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b28      	cmp	r3, #40	@ 0x28
 8002e76:	d005      	beq.n	8002e84 <I2C_ITError+0x44>
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b29      	cmp	r3, #41	@ 0x29
 8002e7c:	d002      	beq.n	8002e84 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e82:	d10b      	bne.n	8002e9c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e84:	2103      	movs	r1, #3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 faa4 	bl	80033d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2228      	movs	r2, #40	@ 0x28
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a60      	ldr	r2, [pc, #384]	@ (8003018 <I2C_ITError+0x1d8>)
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9a:	e030      	b.n	8002efe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e9c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa97 	bl	80033d4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8e1 	bl	800306e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b60      	cmp	r3, #96	@ 0x60
 8002eb6:	d01f      	beq.n	8002ef8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d114      	bne.n	8002ef8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d109      	bne.n	8002ef0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d039      	beq.n	8002f80 <I2C_ITError+0x140>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b11      	cmp	r3, #17
 8002f10:	d002      	beq.n	8002f18 <I2C_ITError+0xd8>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b21      	cmp	r3, #33	@ 0x21
 8002f16:	d133      	bne.n	8002f80 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f26:	d107      	bne.n	8002f38 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fa01 	bl	8001344 <HAL_DMA_GetState>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d017      	beq.n	8002f78 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	4a33      	ldr	r2, [pc, #204]	@ (800301c <I2C_ITError+0x1dc>)
 8002f4e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe f9b0 	bl	80012c2 <HAL_DMA_Abort_IT>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d04d      	beq.n	8003004 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f72:	4610      	mov	r0, r2
 8002f74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f76:	e045      	b.n	8003004 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f851 	bl	8003020 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f7e:	e041      	b.n	8003004 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d039      	beq.n	8002ffc <I2C_ITError+0x1bc>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b12      	cmp	r3, #18
 8002f8c:	d002      	beq.n	8002f94 <I2C_ITError+0x154>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b22      	cmp	r3, #34	@ 0x22
 8002f92:	d133      	bne.n	8002ffc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa2:	d107      	bne.n	8002fb4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fb2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f9c3 	bl	8001344 <HAL_DMA_GetState>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d017      	beq.n	8002ff4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <I2C_ITError+0x1dc>)
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe f972 	bl	80012c2 <HAL_DMA_Abort_IT>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d011      	beq.n	8003008 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff2:	e009      	b.n	8003008 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f813 	bl	8003020 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ffa:	e005      	b.n	8003008 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f80f 	bl	8003020 <I2C_TreatErrorCallback>
  }
}
 8003002:	e002      	b.n	800300a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003008:	bf00      	nop
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	ffff0000 	.word	0xffff0000
 8003018:	08001eeb 	.word	0x08001eeb
 800301c:	0800322d 	.word	0x0800322d

08003020 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b60      	cmp	r3, #96	@ 0x60
 8003032:	d10e      	bne.n	8003052 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe fe0e 	bl	8001c6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003050:	e009      	b.n	8003066 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fd f901 	bl	8000268 <HAL_I2C_ErrorCallback>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d103      	bne.n	800308c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d007      	beq.n	80030aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	619a      	str	r2, [r3, #24]
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030d2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80030de:	2120      	movs	r1, #32
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f8f3 	bl	80032cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80030e6:	e02d      	b.n	8003144 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80030f0:	441a      	add	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2bff      	cmp	r3, #255	@ 0xff
 80030fe:	d903      	bls.n	8003108 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	22ff      	movs	r2, #255	@ 0xff
 8003104:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003106:	e004      	b.n	8003112 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	4619      	mov	r1, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3328      	adds	r3, #40	@ 0x28
 8003122:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003128:	f7fe f86b 	bl	8001202 <HAL_DMA_Start_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003132:	2110      	movs	r1, #16
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff fe83 	bl	8002e40 <I2C_ITError>
}
 800313a:	e003      	b.n	8003144 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800313c:	2140      	movs	r1, #64	@ 0x40
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f8c4 	bl	80032cc <I2C_Enable_IRQ>
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003168:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003174:	2120      	movs	r1, #32
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8a8 	bl	80032cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800317c:	e03b      	b.n	80031f6 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003186:	441a      	add	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2bff      	cmp	r3, #255	@ 0xff
 8003194:	d911      	bls.n	80031ba <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d103      	bne.n	80031b2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80031b0:	e008      	b.n	80031c4 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22ff      	movs	r2, #255	@ 0xff
 80031b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80031b8:	e004      	b.n	80031c4 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3324      	adds	r3, #36	@ 0x24
 80031ce:	4619      	mov	r1, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80031da:	f7fe f812 	bl	8001202 <HAL_DMA_Start_IT>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80031e4:	2110      	movs	r1, #16
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff fe2a 	bl	8002e40 <I2C_ITError>
}
 80031ec:	e003      	b.n	80031f6 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80031ee:	2140      	movs	r1, #64	@ 0x40
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f86b 	bl	80032cc <I2C_Enable_IRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800321a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800321c:	2110      	movs	r1, #16
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff fe0e 	bl	8002e40 <I2C_ITError>
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	2200      	movs	r2, #0
 8003248:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003256:	2200      	movs	r2, #0
 8003258:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff fee0 	bl	8003020 <I2C_TreatErrorCallback>
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	4613      	mov	r3, r2
 8003278:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003280:	7a7b      	ldrb	r3, [r7, #9]
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003288:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	4313      	orrs	r3, r2
 8003292:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003296:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	0d5b      	lsrs	r3, r3, #21
 80032a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <I2C_TransferConfig+0x60>)
 80032a8:	430b      	orrs	r3, r1
 80032aa:	43db      	mvns	r3, r3
 80032ac:	ea02 0103 	and.w	r1, r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	03ff63ff 	.word	0x03ff63ff

080032cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	4a39      	ldr	r2, [pc, #228]	@ (80033c8 <I2C_Enable_IRQ+0xfc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d032      	beq.n	800334c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80032ea:	4a38      	ldr	r2, [pc, #224]	@ (80033cc <I2C_Enable_IRQ+0x100>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d02d      	beq.n	800334c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80032f4:	4a36      	ldr	r2, [pc, #216]	@ (80033d0 <I2C_Enable_IRQ+0x104>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d028      	beq.n	800334c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da03      	bge.n	800330a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003308:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800331a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800332c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	2b10      	cmp	r3, #16
 8003332:	d103      	bne.n	800333c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800333a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	2b20      	cmp	r3, #32
 8003340:	d133      	bne.n	80033aa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f043 0320 	orr.w	r3, r3, #32
 8003348:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800334a:	e02e      	b.n	80033aa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800334c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003350:	2b00      	cmp	r3, #0
 8003352:	da03      	bge.n	800335c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800335a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800336c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800337e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	2b10      	cmp	r3, #16
 8003384:	d103      	bne.n	800338e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800338c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	2b20      	cmp	r3, #32
 8003392:	d103      	bne.n	800339c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800339a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d103      	bne.n	80033aa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	080020dd 	.word	0x080020dd
 80033cc:	08002559 	.word	0x08002559
 80033d0:	080022d1 	.word	0x080022d1

080033d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00f      	beq.n	800340e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80033f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003402:	2b28      	cmp	r3, #40	@ 0x28
 8003404:	d003      	beq.n	800340e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800340c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800341e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800342c:	2b28      	cmp	r3, #40	@ 0x28
 800342e:	d003      	beq.n	8003438 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003436:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da03      	bge.n	8003448 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003446:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003448:	887b      	ldrh	r3, [r7, #2]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d103      	bne.n	8003456 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003454:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	2b20      	cmp	r3, #32
 800345a:	d103      	bne.n	8003464 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f043 0320 	orr.w	r3, r3, #32
 8003462:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	2b40      	cmp	r3, #64	@ 0x40
 8003468:	d103      	bne.n	8003472 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003470:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	43da      	mvns	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	400a      	ands	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	2baa      	cmp	r3, #170	@ 0xaa
 800349e:	d103      	bne.n	80034a8 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034a6:	e008      	b.n	80034ba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 80034b0:	d103      	bne.n	80034ba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034cc:	4b04      	ldr	r3, [pc, #16]	@ (80034e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000

080034e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f2:	d130      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f4:	4b23      	ldr	r3, [pc, #140]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003500:	d038      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003502:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800350a:	4a1e      	ldr	r2, [pc, #120]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003512:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2232      	movs	r2, #50	@ 0x32
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003528:	e002      	b.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b01      	subs	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003530:	4b14      	ldr	r3, [pc, #80]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353c:	d102      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x60>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f2      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003544:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003550:	d110      	bne.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003556:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003562:	d007      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003564:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800356c:	4a05      	ldr	r2, [pc, #20]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003572:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40007000 	.word	0x40007000
 8003588:	20000000 	.word	0x20000000
 800358c:	431bde83 	.word	0x431bde83

08003590 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e3ca      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	4b97      	ldr	r3, [pc, #604]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ac:	4b94      	ldr	r3, [pc, #592]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80e4 	beq.w	800378c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_RCC_OscConfig+0x4a>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	f040 808b 	bne.w	80036e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f040 8087 	bne.w	80036e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035da:	4b89      	ldr	r3, [pc, #548]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e3a2      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	4b82      	ldr	r3, [pc, #520]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_RCC_OscConfig+0x7c>
 8003602:	4b7f      	ldr	r3, [pc, #508]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800360a:	e005      	b.n	8003618 <HAL_RCC_OscConfig+0x88>
 800360c:	4b7c      	ldr	r3, [pc, #496]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003618:	4293      	cmp	r3, r2
 800361a:	d223      	bcs.n	8003664 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fd1d 	bl	8004060 <RCC_SetFlashLatencyFromMSIRange>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e383      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003630:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a72      	ldr	r2, [pc, #456]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003636:	f043 0308 	orr.w	r3, r3, #8
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b70      	ldr	r3, [pc, #448]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	496d      	ldr	r1, [pc, #436]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800364e:	4b6c      	ldr	r3, [pc, #432]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	4968      	ldr	r1, [pc, #416]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
 8003662:	e025      	b.n	80036b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003664:	4b66      	ldr	r3, [pc, #408]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a65      	ldr	r2, [pc, #404]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b63      	ldr	r3, [pc, #396]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4960      	ldr	r1, [pc, #384]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003682:	4b5f      	ldr	r3, [pc, #380]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	495b      	ldr	r1, [pc, #364]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fcdd 	bl	8004060 <RCC_SetFlashLatencyFromMSIRange>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e343      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036b0:	f000 fc4a 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b52      	ldr	r3, [pc, #328]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	4950      	ldr	r1, [pc, #320]	@ (8003804 <HAL_RCC_OscConfig+0x274>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003808 <HAL_RCC_OscConfig+0x278>)
 80036ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036d0:	4b4e      	ldr	r3, [pc, #312]	@ (800380c <HAL_RCC_OscConfig+0x27c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fc2f 	bl	8000f38 <HAL_InitTick>
 80036da:	4603      	mov	r3, r0
 80036dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d052      	beq.n	800378a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	e327      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d032      	beq.n	8003756 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036f0:	4b43      	ldr	r3, [pc, #268]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a42      	ldr	r2, [pc, #264]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036fc:	f7fd fc6c 	bl	8000fd8 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003704:	f7fd fc68 	bl	8000fd8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e310      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003716:	4b3a      	ldr	r3, [pc, #232]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003722:	4b37      	ldr	r3, [pc, #220]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a36      	ldr	r2, [pc, #216]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4931      	ldr	r1, [pc, #196]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003740:	4b2f      	ldr	r3, [pc, #188]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	492c      	ldr	r1, [pc, #176]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	e01a      	b.n	800378c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003756:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a29      	ldr	r2, [pc, #164]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003762:	f7fd fc39 	bl	8000fd8 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376a:	f7fd fc35 	bl	8000fd8 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e2dd      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800377c:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x1da>
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800378a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d074      	beq.n	8003882 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b08      	cmp	r3, #8
 800379c:	d005      	beq.n	80037aa <HAL_RCC_OscConfig+0x21a>
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	d10e      	bne.n	80037c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d064      	beq.n	8003880 <HAL_RCC_OscConfig+0x2f0>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d160      	bne.n	8003880 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e2ba      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x24a>
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e026      	b.n	8003828 <HAL_RCC_OscConfig+0x298>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e2:	d115      	bne.n	8003810 <HAL_RCC_OscConfig+0x280>
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a05      	ldr	r2, [pc, #20]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80037ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a02      	ldr	r2, [pc, #8]	@ (8003800 <HAL_RCC_OscConfig+0x270>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x298>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	08007484 	.word	0x08007484
 8003808:	20000000 	.word	0x20000000
 800380c:	20000004 	.word	0x20000004
 8003810:	4ba0      	ldr	r3, [pc, #640]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a9f      	ldr	r2, [pc, #636]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b9d      	ldr	r3, [pc, #628]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a9c      	ldr	r2, [pc, #624]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd fbd2 	bl	8000fd8 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fd fbce 	bl	8000fd8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	@ 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e276      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384a:	4b92      	ldr	r3, [pc, #584]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x2a8>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd fbbe 	bl	8000fd8 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fd fbba 	bl	8000fd8 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	@ 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e262      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003872:	4b88      	ldr	r3, [pc, #544]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x2d0>
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d060      	beq.n	8003950 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_OscConfig+0x310>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d119      	bne.n	80038ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d116      	bne.n	80038ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_OscConfig+0x328>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e23f      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b76      	ldr	r3, [pc, #472]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	4973      	ldr	r1, [pc, #460]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038cc:	e040      	b.n	8003950 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d023      	beq.n	800391e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6e      	ldr	r2, [pc, #440]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fd fb79 	bl	8000fd8 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fd fb75 	bl	8000fd8 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e21d      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fc:	4b65      	ldr	r3, [pc, #404]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b62      	ldr	r3, [pc, #392]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	495f      	ldr	r1, [pc, #380]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
 800391c:	e018      	b.n	8003950 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5c      	ldr	r2, [pc, #368]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fd fb55 	bl	8000fd8 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003932:	f7fd fb51 	bl	8000fd8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e1f9      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003944:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d03c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01c      	beq.n	800399e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003964:	4b4b      	ldr	r3, [pc, #300]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800396a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fb30 	bl	8000fd8 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fd fb2c 	bl	8000fd8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1d4      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800398e:	4b41      	ldr	r3, [pc, #260]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCC_OscConfig+0x3ec>
 800399c:	e01b      	b.n	80039d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd fb13 	bl	8000fd8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fd fb0f 	bl	8000fd8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1b7      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c8:	4b32      	ldr	r3, [pc, #200]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ef      	bne.n	80039b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80a6 	beq.w	8003b30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	4a26      	ldr	r2, [pc, #152]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a00:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a10:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d118      	bne.n	8003a4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a28:	f7fd fad6 	bl	8000fd8 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a30:	f7fd fad2 	bl	8000fd8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e17a      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a42:	4b15      	ldr	r3, [pc, #84]	@ (8003a98 <HAL_RCC_OscConfig+0x508>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d108      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4d8>
 8003a56:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a66:	e029      	b.n	8003abc <HAL_RCC_OscConfig+0x52c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d115      	bne.n	8003a9c <HAL_RCC_OscConfig+0x50c>
 8003a70:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a76:	4a07      	ldr	r2, [pc, #28]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a80:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	4a03      	ldr	r2, [pc, #12]	@ (8003a94 <HAL_RCC_OscConfig+0x504>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a90:	e014      	b.n	8003abc <HAL_RCC_OscConfig+0x52c>
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	4a9b      	ldr	r2, [pc, #620]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003aac:	4b98      	ldr	r3, [pc, #608]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab2:	4a97      	ldr	r2, [pc, #604]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d016      	beq.n	8003af2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fa88 	bl	8000fd8 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fd fa84 	bl	8000fd8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e12a      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ed      	beq.n	8003acc <HAL_RCC_OscConfig+0x53c>
 8003af0:	e015      	b.n	8003b1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fd fa71 	bl	8000fd8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd fa6d 	bl	8000fd8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e113      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b10:	4b7f      	ldr	r3, [pc, #508]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ed      	bne.n	8003afa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b24:	4b7a      	ldr	r3, [pc, #488]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b28:	4a79      	ldr	r2, [pc, #484]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80fe 	beq.w	8003d36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 80d0 	bne.w	8003ce4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b44:	4b72      	ldr	r3, [pc, #456]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d130      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	3b01      	subs	r3, #1
 8003b64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d127      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d11f      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b84:	2a07      	cmp	r2, #7
 8003b86:	bf14      	ite	ne
 8003b88:	2201      	movne	r2, #1
 8003b8a:	2200      	moveq	r2, #0
 8003b8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d113      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d109      	bne.n	8003bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d06e      	beq.n	8003c98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d069      	beq.n	8003c94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bc0:	4b53      	ldr	r3, [pc, #332]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bcc:	4b50      	ldr	r3, [pc, #320]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0ad      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a4b      	ldr	r2, [pc, #300]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be8:	f7fd f9f6 	bl	8000fd8 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fd f9f2 	bl	8000fd8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e09a      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c02:	4b43      	ldr	r3, [pc, #268]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c0e:	4b40      	ldr	r3, [pc, #256]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	4b40      	ldr	r3, [pc, #256]	@ (8003d14 <HAL_RCC_OscConfig+0x784>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c28:	0212      	lsls	r2, r2, #8
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c30:	0852      	lsrs	r2, r2, #1
 8003c32:	3a01      	subs	r2, #1
 8003c34:	0552      	lsls	r2, r2, #21
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c3c:	0852      	lsrs	r2, r2, #1
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0652      	lsls	r2, r2, #25
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c48:	0912      	lsrs	r2, r2, #4
 8003c4a:	0452      	lsls	r2, r2, #17
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	4930      	ldr	r1, [pc, #192]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c54:	4b2e      	ldr	r3, [pc, #184]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2d      	ldr	r2, [pc, #180]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c60:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c6c:	f7fd f9b4 	bl	8000fd8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd f9b0 	bl	8000fd8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e058      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	4b22      	ldr	r3, [pc, #136]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c92:	e050      	b.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e04f      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c98:	4b1d      	ldr	r3, [pc, #116]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d148      	bne.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb0:	4b17      	ldr	r3, [pc, #92]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cbc:	f7fd f98c 	bl	8000fd8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fd f988 	bl	8000fd8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e030      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x734>
 8003ce2:	e028      	b.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d023      	beq.n	8003d32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a08      	ldr	r2, [pc, #32]	@ (8003d10 <HAL_RCC_OscConfig+0x780>)
 8003cf0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fd f96f 	bl	8000fd8 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfc:	e00c      	b.n	8003d18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fd f96b 	bl	8000fd8 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d905      	bls.n	8003d18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e013      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_RCC_OscConfig+0x7b0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ec      	bne.n	8003cfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_OscConfig+0x7b0>)
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4905      	ldr	r1, [pc, #20]	@ (8003d40 <HAL_RCC_OscConfig+0x7b0>)
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_OscConfig+0x7b4>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60cb      	str	r3, [r1, #12]
 8003d30:	e001      	b.n	8003d36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	feeefffc 	.word	0xfeeefffc

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0e7      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b75      	ldr	r3, [pc, #468]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b72      	ldr	r3, [pc, #456]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	4970      	ldr	r1, [pc, #448]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0cf      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b66      	ldr	r3, [pc, #408]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d908      	bls.n	8003dba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b63      	ldr	r3, [pc, #396]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4960      	ldr	r1, [pc, #384]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04c      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dce:	4b5a      	ldr	r3, [pc, #360]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d121      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0a6      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de6:	4b54      	ldr	r3, [pc, #336]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d115      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e09a      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e08e      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e086      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e1e:	4b46      	ldr	r3, [pc, #280]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4943      	ldr	r1, [pc, #268]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e30:	f7fd f8d2 	bl	8000fd8 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fd f8ce 	bl	8000fd8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e06e      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 020c 	and.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d1eb      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	4b31      	ldr	r3, [pc, #196]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d208      	bcs.n	8003e8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	492b      	ldr	r1, [pc, #172]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e8e:	4b29      	ldr	r3, [pc, #164]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d210      	bcs.n	8003ebe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9c:	4b25      	ldr	r3, [pc, #148]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 0207 	bic.w	r2, r3, #7
 8003ea4:	4923      	ldr	r1, [pc, #140]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eac:	4b21      	ldr	r3, [pc, #132]	@ (8003f34 <HAL_RCC_ClockConfig+0x1ec>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e036      	b.n	8003f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eca:	4b1b      	ldr	r3, [pc, #108]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4918      	ldr	r1, [pc, #96]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4910      	ldr	r1, [pc, #64]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003efc:	f000 f824 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	490b      	ldr	r1, [pc, #44]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f4>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <HAL_RCC_ClockConfig+0x1f8>)
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f1c:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HAL_RCC_ClockConfig+0x1fc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd f809 	bl	8000f38 <HAL_InitTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40022000 	.word	0x40022000
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08007484 	.word	0x08007484
 8003f40:	20000000 	.word	0x20000000
 8003f44:	20000004 	.word	0x20000004

08003f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b089      	sub	sp, #36	@ 0x24
 8003f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f56:	4b3e      	ldr	r3, [pc, #248]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f60:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x34>
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d121      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d11e      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f7c:	4b34      	ldr	r3, [pc, #208]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f88:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	e005      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f98:	4b2d      	ldr	r3, [pc, #180]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d102      	bne.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fc0:	4b25      	ldr	r3, [pc, #148]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e004      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fcc:	4b23      	ldr	r3, [pc, #140]	@ (800405c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d134      	bne.n	8004040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0xa6>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8003fec:	e005      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fee:	4b1a      	ldr	r3, [pc, #104]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff0:	617b      	str	r3, [r7, #20]
      break;
 8003ff2:	e005      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ff4:	4b19      	ldr	r3, [pc, #100]	@ (800405c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ff6:	617b      	str	r3, [r7, #20]
      break;
 8003ff8:	e002      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	617b      	str	r3, [r7, #20]
      break;
 8003ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004000:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	3301      	adds	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800400e:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	fb03 f202 	mul.w	r2, r3, r2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004026:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x108>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	0e5b      	lsrs	r3, r3, #25
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	3301      	adds	r3, #1
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004040:	69bb      	ldr	r3, [r7, #24]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3724      	adds	r7, #36	@ 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	08007494 	.word	0x08007494
 8004058:	00f42400 	.word	0x00f42400
 800405c:	007a1200 	.word	0x007a1200

08004060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800406c:	4b2a      	ldr	r3, [pc, #168]	@ (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004078:	f7ff fa26 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 800407c:	6178      	str	r0, [r7, #20]
 800407e:	e014      	b.n	80040aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	4b25      	ldr	r3, [pc, #148]	@ (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800408a:	6593      	str	r3, [r2, #88]	@ 0x58
 800408c:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004098:	f7ff fa16 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 800409c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b1e      	ldr	r3, [pc, #120]	@ (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b0:	d10b      	bne.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b80      	cmp	r3, #128	@ 0x80
 80040b6:	d919      	bls.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80040bc:	d902      	bls.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040be:	2302      	movs	r3, #2
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	e013      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040c4:	2301      	movs	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e010      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b80      	cmp	r3, #128	@ 0x80
 80040ce:	d902      	bls.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040d0:	2303      	movs	r3, #3
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e00a      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b80      	cmp	r3, #128	@ 0x80
 80040da:	d102      	bne.n	80040e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040dc:	2302      	movs	r3, #2
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	e004      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b70      	cmp	r3, #112	@ 0x70
 80040e6:	d101      	bne.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040e8:	2301      	movs	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 0207 	bic.w	r2, r3, #7
 80040f4:	4909      	ldr	r1, [pc, #36]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040fc:	4b07      	ldr	r3, [pc, #28]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d001      	beq.n	800410e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	40022000 	.word	0x40022000

08004120 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07c      	b.n	800422c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fc fdf7 	bl	8000d40 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004168:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004172:	d902      	bls.n	800417a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e002      	b.n	8004180 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800417a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004188:	d007      	beq.n	800419a <HAL_SPI_Init+0x7a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004192:	d002      	beq.n	800419a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041aa:	d903      	bls.n	80041b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80041b2:	e002      	b.n	80041ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0204 	and.w	r2, r3, #4
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	ea42 0103 	orr.w	r1, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_SPI_Transmit+0x26>
 8004256:	2302      	movs	r3, #2
 8004258:	e13e      	b.n	80044d8 <HAL_SPI_Transmit+0x2a4>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004262:	f7fc feb9 	bl	8000fd8 <HAL_GetTick>
 8004266:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d002      	beq.n	800427a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004274:	2302      	movs	r3, #2
 8004276:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004278:	e125      	b.n	80044c6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_SPI_Transmit+0x52>
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	77fb      	strb	r3, [r7, #31]
    goto error;
 800428a:	e11c      	b.n	80044c6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2203      	movs	r2, #3
 8004290:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d6:	d107      	bne.n	80042e8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d007      	beq.n	8004306 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800430e:	d947      	bls.n	80043a0 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <HAL_SPI_Transmit+0xee>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d138      	bne.n	8004394 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3302      	adds	r3, #2
 8004330:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004340:	e028      	b.n	8004394 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d10f      	bne.n	8004370 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3302      	adds	r3, #2
 800435e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800436e:	e011      	b.n	8004394 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_SPI_Transmit+0x15a>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d00a      	beq.n	8004394 <HAL_SPI_Transmit+0x160>
 800437e:	f7fc fe2b 	bl	8000fd8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d802      	bhi.n	8004394 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004392:	e098      	b.n	80044c6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1d1      	bne.n	8004342 <HAL_SPI_Transmit+0x10e>
 800439e:	e070      	b.n	8004482 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_SPI_Transmit+0x17e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d162      	bne.n	8004478 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d90f      	bls.n	80043dc <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	3302      	adds	r3, #2
 80043ca:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b02      	subs	r3, #2
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043da:	e04d      	b.n	8004478 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	60ba      	str	r2, [r7, #8]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	320c      	adds	r2, #12
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043fa:	e03d      	b.n	8004478 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d124      	bne.n	8004454 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d90f      	bls.n	8004434 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	881a      	ldrh	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	3302      	adds	r3, #2
 8004422:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b02      	subs	r3, #2
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004432:	e021      	b.n	8004478 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	60ba      	str	r2, [r7, #8]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	320c      	adds	r2, #12
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004452:	e011      	b.n	8004478 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_SPI_Transmit+0x23e>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d00a      	beq.n	8004478 <HAL_SPI_Transmit+0x244>
 8004462:	f7fc fdb9 	bl	8000fd8 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d802      	bhi.n	8004478 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004476:	e026      	b.n	80044c6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1bc      	bne.n	80043fc <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fb02 	bl	8004a90 <SPI_EndRxTxTransaction>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e000      	b.n	80044c6 <HAL_SPI_Transmit+0x292>
  }

error:
 80044c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80044d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80044fa:	2301      	movs	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x32>
 800450e:	2302      	movs	r3, #2
 8004510:	e1e2      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x3f8>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800451a:	f7fc fd5d 	bl	8000fd8 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d00e      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x74>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800453c:	d106      	bne.n	800454c <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <HAL_SPI_TransmitReceive+0x6c>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d003      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004552:	e1b7      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x86>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x86>
 8004560:	887b      	ldrh	r3, [r7, #2]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800456c:	e1aa      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b04      	cmp	r3, #4
 8004578:	d003      	beq.n	8004582 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2205      	movs	r2, #5
 800457e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	887a      	ldrh	r2, [r7, #2]
 8004592:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	887a      	ldrh	r2, [r7, #2]
 800459a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	887a      	ldrh	r2, [r7, #2]
 80045ae:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045c4:	d805      	bhi.n	80045d2 <HAL_SPI_TransmitReceive+0xf2>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d908      	bls.n	80045e4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	e007      	b.n	80045f4 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fe:	2b40      	cmp	r3, #64	@ 0x40
 8004600:	d007      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004610:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800461a:	d975      	bls.n	8004708 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_SPI_TransmitReceive+0x14e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d160      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3302      	adds	r3, #2
 800463c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464c:	e050      	b.n	80046f0 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <HAL_SPI_TransmitReceive+0x1ae>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d017      	beq.n	800468e <HAL_SPI_TransmitReceive+0x1ae>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d110      	bne.n	800468e <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	3302      	adds	r3, #2
 800467a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01a      	beq.n	80046d0 <HAL_SPI_TransmitReceive+0x1f0>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d113      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3302      	adds	r3, #2
 80046b8:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046cc:	2301      	movs	r3, #1
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80046d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d00b      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x210>
 80046d8:	f7fc fc7e 	bl	8000fd8 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d803      	bhi.n	80046f0 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80046ee:	e0e9      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1a9      	bne.n	800464e <HAL_SPI_TransmitReceive+0x16e>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1a3      	bne.n	800464e <HAL_SPI_TransmitReceive+0x16e>
 8004706:	e0c9      	b.n	800489c <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_SPI_TransmitReceive+0x23c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	f040 80b3 	bne.w	8004882 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d90f      	bls.n	8004746 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	3302      	adds	r3, #2
 8004734:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b02      	subs	r3, #2
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004744:	e09d      	b.n	8004882 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	60ba      	str	r2, [r7, #8]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	320c      	adds	r2, #12
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004764:	e08d      	b.n	8004882 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d031      	beq.n	80047d0 <HAL_SPI_TransmitReceive+0x2f0>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02c      	beq.n	80047d0 <HAL_SPI_TransmitReceive+0x2f0>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d125      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d90f      	bls.n	80047ae <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	881a      	ldrh	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	3302      	adds	r3, #2
 800479c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b02      	subs	r3, #2
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ac:	e00e      	b.n	80047cc <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	60ba      	str	r2, [r7, #8]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	320c      	adds	r2, #12
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d042      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x382>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d13b      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d920      	bls.n	8004838 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3302      	adds	r3, #2
 8004806:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b02      	subs	r3, #2
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d81b      	bhi.n	800485e <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	e012      	b.n	800485e <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f103 020c 	add.w	r2, r3, #12
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	6079      	str	r1, [r7, #4]
 8004846:	7812      	ldrb	r2, [r2, #0]
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800485e:	2301      	movs	r3, #1
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d00b      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x3a2>
 800486a:	f7fc fbb5 	bl	8000fd8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004876:	429a      	cmp	r2, r3
 8004878:	d803      	bhi.n	8004882 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8004880:	e020      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f af6c 	bne.w	8004766 <HAL_SPI_TransmitReceive+0x286>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	f47f af65 	bne.w	8004766 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f8f5 	bl	8004a90 <SPI_EndRxTxTransaction>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c0:	e000      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 80048c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80048d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ee:	e04c      	b.n	800498a <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d048      	beq.n	800498a <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <SPI_WaitFlagStateUntilTimeout+0x2e>
 80048fe:	f7fc fb6b 	bl	8000fd8 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d83d      	bhi.n	800498a <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800491c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004926:	d111      	bne.n	800494c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004930:	d004      	beq.n	800493c <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d107      	bne.n	800494c <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800494a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004954:	d10f      	bne.n	8004976 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00e      	b.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	d101      	bne.n	800499e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800499a:	2201      	movs	r2, #1
 800499c:	e000      	b.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800499e:	2200      	movs	r2, #0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d1a4      	bne.n	80048f0 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80049be:	e05a      	b.n	8004a76 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049c6:	d109      	bne.n	80049dc <SPI_WaitFifoStateUntilTimeout+0x2c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80049da:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d048      	beq.n	8004a76 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <SPI_WaitFifoStateUntilTimeout+0x4a>
 80049ea:	f7fc faf5 	bl	8000fd8 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d83d      	bhi.n	8004a76 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a12:	d111      	bne.n	8004a38 <SPI_WaitFifoStateUntilTimeout+0x88>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a1c:	d004      	beq.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d107      	bne.n	8004a38 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a40:	d10f      	bne.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e008      	b.n	8004a88 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d19c      	bne.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff ff81 	bl	80049b0 <SPI_WaitFifoStateUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e027      	b.n	8004b14 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2180      	movs	r1, #128	@ 0x80
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff06 	bl	80048e0 <SPI_WaitFlagStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e014      	b.n	8004b14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ff5a 	bl	80049b0 <SPI_WaitFifoStateUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e000      	b.n	8004b14 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004b20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
	switch(pdrv){
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d108      	bne.n	8004b4e <disk_status+0x22>
	case DEV_MMC:
		if(is_SD_card_initialized())
 8004b3c:	f7fc f892 	bl	8000c64 <is_SD_card_initialized>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <disk_status+0x1e>
			return 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e002      	b.n	8004b50 <disk_status+0x24>
		else
			return STA_NOINIT;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <disk_status+0x24>
	default:
		return STA_NOINIT;
 8004b4e:	2301      	movs	r3, #1
	}
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat = STA_NOINIT;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <disk_initialize+0x24>
	case DEV_MMC:
		if(initialize_SD_card() == 1)
 8004b6c:	f7fb ffd6 	bl	8000b1c <initialize_SD_card>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <disk_initialize+0x28>
			stat = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
		break;
 8004b7a:	e001      	b.n	8004b80 <disk_initialize+0x28>
	default:
		return STA_NOINIT;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e001      	b.n	8004b84 <disk_initialize+0x2c>
		break;
 8004b80:	bf00      	nop
	}
	return stat;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  switch(pdrv){
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d127      	bne.n	8004bf2 <disk_read+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 8004ba2:	f7fc f85f 	bl	8000c64 <is_SD_card_initialized>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f083 0301 	eor.w	r3, r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <disk_read+0x2a>
			return RES_NOTRDY;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e01e      	b.n	8004bf4 <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e014      	b.n	8004be6 <disk_read+0x5a>
			if(!read_block(sector+i, buff+(i*512)))
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	18d0      	adds	r0, r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	025b      	lsls	r3, r3, #9
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7fb fdfe 	bl	80007cc <read_block>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f083 0301 	eor.w	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <disk_read+0x54>
				return RES_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e009      	b.n	8004bf4 <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3301      	adds	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d3e6      	bcc.n	8004bbc <disk_read+0x30>
		}
		return RES_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <disk_read+0x68>
	default:
		return RES_PARERR;
 8004bf2:	2304      	movs	r3, #4
	}
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d127      	bne.n	8004c62 <disk_write+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 8004c12:	f7fc f827 	bl	8000c64 <is_SD_card_initialized>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f083 0301 	eor.w	r3, r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <disk_write+0x2a>
			return RES_NOTRDY;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e01e      	b.n	8004c64 <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e014      	b.n	8004c56 <disk_write+0x5a>
			if(!write_block(sector+i, buff+(i*512)))
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	18d0      	adds	r0, r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	025b      	lsls	r3, r3, #9
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4413      	add	r3, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f7fb fe9a 	bl	8000974 <write_block>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f083 0301 	eor.w	r3, r3, #1
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <disk_write+0x54>
				return RES_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e009      	b.n	8004c64 <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	3301      	adds	r3, #1
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d3e6      	bcc.n	8004c2c <disk_write+0x30>
		}
		return RES_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <disk_write+0x68>
	default:
		return RES_PARERR;
 8004c62:	2304      	movs	r3, #4
	}
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	603a      	str	r2, [r7, #0]
 8004c76:	71fb      	strb	r3, [r7, #7]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <disk_ioctl+0x38>)
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	79fa      	ldrb	r2, [r7, #7]
 8004c8a:	4906      	ldr	r1, [pc, #24]	@ (8004ca4 <disk_ioctl+0x38>)
 8004c8c:	440a      	add	r2, r1
 8004c8e:	7a10      	ldrb	r0, [r2, #8]
 8004c90:	79b9      	ldrb	r1, [r7, #6]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	4798      	blx	r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200005e8 	.word	0x200005e8

08004ca8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	b21a      	sxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b21b      	sxth	r3, r3
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	b21b      	sxth	r3, r3
 8004cc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004cca:	89fb      	ldrh	r3, [r7, #14]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3303      	adds	r3, #3
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	3202      	adds	r2, #2
 8004cf0:	7812      	ldrb	r2, [r2, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	3201      	adds	r2, #1
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004d10:	68fb      	ldr	r3, [r7, #12]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	887a      	ldrh	r2, [r7, #2]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	1c53      	adds	r3, r2, #1
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	6179      	str	r1, [r7, #20]
 8004dd2:	7812      	ldrb	r2, [r2, #0]
 8004dd4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f1      	bne.n	8004dc6 <mem_cpy+0x1a>
	}
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004dee:	b480      	push	{r7}
 8004df0:	b087      	sub	sp, #28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	617a      	str	r2, [r7, #20]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f3      	bne.n	8004dfe <mem_set+0x10>
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	61fa      	str	r2, [r7, #28]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	61ba      	str	r2, [r7, #24]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	1acb      	subs	r3, r1, r3
 8004e50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <mem_cmp+0x40>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0eb      	beq.n	8004e3c <mem_cmp+0x18>

	return r;
 8004e64:	697b      	ldr	r3, [r7, #20]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	@ 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e7c:	e002      	b.n	8004e84 <chk_chr+0x12>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3301      	adds	r3, #1
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <chk_chr+0x26>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d1f2      	bne.n	8004e7e <chk_chr+0xc>
	return *str;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	e029      	b.n	8004f10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004ebc:	4a27      	ldr	r2, [pc, #156]	@ (8004f5c <chk_lock+0xb4>)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	4413      	add	r3, r2
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01d      	beq.n	8004f06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004eca:	4a24      	ldr	r2, [pc, #144]	@ (8004f5c <chk_lock+0xb4>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	4413      	add	r3, r2
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d116      	bne.n	8004f0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004edc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f5c <chk_lock+0xb4>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d10c      	bne.n	8004f0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f5c <chk_lock+0xb4>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3308      	adds	r3, #8
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d102      	bne.n	8004f0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f04:	e007      	b.n	8004f16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d9d2      	bls.n	8004ebc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d109      	bne.n	8004f30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <chk_lock+0x80>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d101      	bne.n	8004f2c <chk_lock+0x84>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e010      	b.n	8004f4e <chk_lock+0xa6>
 8004f2c:	2312      	movs	r3, #18
 8004f2e:	e00e      	b.n	8004f4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d108      	bne.n	8004f48 <chk_lock+0xa0>
 8004f36:	4a09      	ldr	r2, [pc, #36]	@ (8004f5c <chk_lock+0xb4>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	4413      	add	r3, r2
 8004f3e:	330c      	adds	r3, #12
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f46:	d101      	bne.n	8004f4c <chk_lock+0xa4>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	e000      	b.n	8004f4e <chk_lock+0xa6>
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	200005c8 	.word	0x200005c8

08004f60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f66:	2300      	movs	r3, #0
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	e002      	b.n	8004f72 <enq_lock+0x12>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d806      	bhi.n	8004f86 <enq_lock+0x26>
 8004f78:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <enq_lock+0x40>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	4413      	add	r3, r2
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f2      	bne.n	8004f6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	200005c8 	.word	0x200005c8

08004fa4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e01f      	b.n	8004ff4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004fb4:	4a41      	ldr	r2, [pc, #260]	@ (80050bc <inc_lock+0x118>)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	4413      	add	r3, r2
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d113      	bne.n	8004fee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80050bc <inc_lock+0x118>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	4413      	add	r3, r2
 8004fce:	3304      	adds	r3, #4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d109      	bne.n	8004fee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004fda:	4a38      	ldr	r2, [pc, #224]	@ (80050bc <inc_lock+0x118>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d006      	beq.n	8004ffc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d9dc      	bls.n	8004fb4 <inc_lock+0x10>
 8004ffa:	e000      	b.n	8004ffe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004ffc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d132      	bne.n	800506a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <inc_lock+0x6c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d806      	bhi.n	8005024 <inc_lock+0x80>
 8005016:	4a29      	ldr	r2, [pc, #164]	@ (80050bc <inc_lock+0x118>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	4413      	add	r3, r2
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f2      	bne.n	800500a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d101      	bne.n	800502e <inc_lock+0x8a>
 800502a:	2300      	movs	r3, #0
 800502c:	e040      	b.n	80050b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4922      	ldr	r1, [pc, #136]	@ (80050bc <inc_lock+0x118>)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	440b      	add	r3, r1
 800503a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	491e      	ldr	r1, [pc, #120]	@ (80050bc <inc_lock+0x118>)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	440b      	add	r3, r1
 8005048:	3304      	adds	r3, #4
 800504a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695a      	ldr	r2, [r3, #20]
 8005050:	491a      	ldr	r1, [pc, #104]	@ (80050bc <inc_lock+0x118>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	440b      	add	r3, r1
 8005058:	3308      	adds	r3, #8
 800505a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800505c:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <inc_lock+0x118>)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	4413      	add	r3, r2
 8005064:	330c      	adds	r3, #12
 8005066:	2200      	movs	r2, #0
 8005068:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <inc_lock+0xe0>
 8005070:	4a12      	ldr	r2, [pc, #72]	@ (80050bc <inc_lock+0x118>)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4413      	add	r3, r2
 8005078:	330c      	adds	r3, #12
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <inc_lock+0xe0>
 8005080:	2300      	movs	r3, #0
 8005082:	e015      	b.n	80050b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d108      	bne.n	800509c <inc_lock+0xf8>
 800508a:	4a0c      	ldr	r2, [pc, #48]	@ (80050bc <inc_lock+0x118>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	4413      	add	r3, r2
 8005092:	330c      	adds	r3, #12
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	3301      	adds	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	e001      	b.n	80050a0 <inc_lock+0xfc>
 800509c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050a0:	4906      	ldr	r1, [pc, #24]	@ (80050bc <inc_lock+0x118>)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	440b      	add	r3, r1
 80050a8:	330c      	adds	r3, #12
 80050aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3301      	adds	r3, #1
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	200005c8 	.word	0x200005c8

080050c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d825      	bhi.n	8005120 <dec_lock+0x60>
		n = Files[i].ctr;
 80050d4:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <dec_lock+0x74>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	4413      	add	r3, r2
 80050dc:	330c      	adds	r3, #12
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050e2:	89fb      	ldrh	r3, [r7, #14]
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e8:	d101      	bne.n	80050ee <dec_lock+0x2e>
 80050ea:	2300      	movs	r3, #0
 80050ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <dec_lock+0x3a>
 80050f4:	89fb      	ldrh	r3, [r7, #14]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005134 <dec_lock+0x74>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	330c      	adds	r3, #12
 8005104:	89fa      	ldrh	r2, [r7, #14]
 8005106:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005108:	89fb      	ldrh	r3, [r7, #14]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <dec_lock+0x5a>
 800510e:	4a09      	ldr	r2, [pc, #36]	@ (8005134 <dec_lock+0x74>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	4413      	add	r3, r2
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	737b      	strb	r3, [r7, #13]
 800511e:	e001      	b.n	8005124 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005120:	2302      	movs	r3, #2
 8005122:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005124:	7b7b      	ldrb	r3, [r7, #13]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	200005c8 	.word	0x200005c8

08005138 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e010      	b.n	8005168 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005146:	4a0d      	ldr	r2, [pc, #52]	@ (800517c <clear_lock+0x44>)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	4413      	add	r3, r2
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d105      	bne.n	8005162 <clear_lock+0x2a>
 8005156:	4a09      	ldr	r2, [pc, #36]	@ (800517c <clear_lock+0x44>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	4413      	add	r3, r2
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d9eb      	bls.n	8005146 <clear_lock+0xe>
	}
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	200005c8 	.word	0x200005c8

08005180 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	78db      	ldrb	r3, [r3, #3]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d034      	beq.n	80051fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	7858      	ldrb	r0, [r3, #1]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80051a4:	2301      	movs	r3, #1
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	f7ff fd28 	bl	8004bfc <disk_write>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
 80051b6:	e022      	b.n	80051fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	1ad2      	subs	r2, r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d217      	bcs.n	80051fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	789b      	ldrb	r3, [r3, #2]
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	e010      	b.n	80051f8 <sync_window+0x78>
					wsect += fs->fsize;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	7858      	ldrb	r0, [r3, #1]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80051ea:	2301      	movs	r3, #1
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	f7ff fd05 	bl	8004bfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d8eb      	bhi.n	80051d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d01b      	beq.n	8005258 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ffad 	bl	8005180 <sync_window>
 8005226:	4603      	mov	r3, r0
 8005228:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d113      	bne.n	8005258 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7858      	ldrb	r0, [r3, #1]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800523a:	2301      	movs	r3, #1
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	f7ff fca5 	bl	8004b8c <disk_read>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005248:	f04f 33ff 	mov.w	r3, #4294967295
 800524c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff ff87 	bl	8005180 <sync_window>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d158      	bne.n	800532e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d148      	bne.n	8005316 <sync_fs+0xb2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	791b      	ldrb	r3, [r3, #4]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d144      	bne.n	8005316 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3330      	adds	r3, #48	@ 0x30
 8005290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fda9 	bl	8004dee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3330      	adds	r3, #48	@ 0x30
 80052a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80052a4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fd38 	bl	8004d1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3330      	adds	r3, #48	@ 0x30
 80052b2:	4921      	ldr	r1, [pc, #132]	@ (8005338 <sync_fs+0xd4>)
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fd4d 	bl	8004d54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3330      	adds	r3, #48	@ 0x30
 80052be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80052c2:	491e      	ldr	r1, [pc, #120]	@ (800533c <sync_fs+0xd8>)
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fd45 	bl	8004d54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3330      	adds	r3, #48	@ 0x30
 80052ce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7ff fd3b 	bl	8004d54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3330      	adds	r3, #48	@ 0x30
 80052e2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7ff fd31 	bl	8004d54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	7858      	ldrb	r0, [r3, #1]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530a:	2301      	movs	r3, #1
 800530c:	f7ff fc76 	bl	8004bfc <disk_write>
			fs->fsi_flag = 0;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2200      	movs	r2, #0
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fca4 	bl	8004c6c <disk_ioctl>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <sync_fs+0xca>
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	41615252 	.word	0x41615252
 800533c:	61417272 	.word	0x61417272

08005340 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	3b02      	subs	r3, #2
 800534e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	3b02      	subs	r3, #2
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d301      	bcc.n	8005360 <clust2sect+0x20>
 800535c:	2300      	movs	r3, #0
 800535e:	e008      	b.n	8005372 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	895b      	ldrh	r3, [r3, #10]
 8005364:	461a      	mov	r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	fb03 f202 	mul.w	r2, r3, r2
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	4413      	add	r3, r2
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b086      	sub	sp, #24
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d904      	bls.n	800539e <get_fat+0x20>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800539e:	2301      	movs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e08e      	b.n	80054c2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d061      	beq.n	8005476 <get_fat+0xf8>
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	dc7b      	bgt.n	80054ae <get_fat+0x130>
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d002      	beq.n	80053c0 <get_fat+0x42>
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d041      	beq.n	8005442 <get_fat+0xc4>
 80053be:	e076      	b.n	80054ae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	0a5b      	lsrs	r3, r3, #9
 80053d6:	4413      	add	r3, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	6938      	ldr	r0, [r7, #16]
 80053dc:	f7ff ff14 	bl	8005208 <move_window>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d166      	bne.n	80054b4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	60fa      	str	r2, [r7, #12]
 80053ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6a1a      	ldr	r2, [r3, #32]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	0a5b      	lsrs	r3, r3, #9
 8005402:	4413      	add	r3, r2
 8005404:	4619      	mov	r1, r3
 8005406:	6938      	ldr	r0, [r7, #16]
 8005408:	f7ff fefe 	bl	8005208 <move_window>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d152      	bne.n	80054b8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <get_fat+0xba>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	e002      	b.n	800543e <get_fat+0xc0>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543e:	617b      	str	r3, [r7, #20]
			break;
 8005440:	e03f      	b.n	80054c2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6a1a      	ldr	r2, [r3, #32]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	4413      	add	r3, r2
 800544c:	4619      	mov	r1, r3
 800544e:	6938      	ldr	r0, [r7, #16]
 8005450:	f7ff feda 	bl	8005208 <move_window>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d130      	bne.n	80054bc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005468:	4413      	add	r3, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fc1c 	bl	8004ca8 <ld_word>
 8005470:	4603      	mov	r3, r0
 8005472:	617b      	str	r3, [r7, #20]
			break;
 8005474:	e025      	b.n	80054c2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	4413      	add	r3, r2
 8005480:	4619      	mov	r1, r3
 8005482:	6938      	ldr	r0, [r7, #16]
 8005484:	f7ff fec0 	bl	8005208 <move_window>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d118      	bne.n	80054c0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800549c:	4413      	add	r3, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fc1a 	bl	8004cd8 <ld_dword>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054aa:	617b      	str	r3, [r7, #20]
			break;
 80054ac:	e009      	b.n	80054c2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80054ae:	2301      	movs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e006      	b.n	80054c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054c0:	bf00      	nop
		}
	}

	return val;
 80054c2:	697b      	ldr	r3, [r7, #20]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b089      	sub	sp, #36	@ 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80054d8:	2302      	movs	r3, #2
 80054da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	f240 80d9 	bls.w	8005696 <put_fat+0x1ca>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	f080 80d3 	bcs.w	8005696 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	f000 8096 	beq.w	8005626 <put_fat+0x15a>
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	f300 80cb 	bgt.w	8005696 <put_fat+0x1ca>
 8005500:	2b01      	cmp	r3, #1
 8005502:	d002      	beq.n	800550a <put_fat+0x3e>
 8005504:	2b02      	cmp	r3, #2
 8005506:	d06e      	beq.n	80055e6 <put_fat+0x11a>
 8005508:	e0c5      	b.n	8005696 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4413      	add	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1a      	ldr	r2, [r3, #32]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	0a5b      	lsrs	r3, r3, #9
 8005520:	4413      	add	r3, r2
 8005522:	4619      	mov	r1, r3
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff fe6f 	bl	8005208 <move_window>
 800552a:	4603      	mov	r3, r0
 800552c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800552e:	7ffb      	ldrb	r3, [r7, #31]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f040 80a9 	bne.w	8005688 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	61b9      	str	r1, [r7, #24]
 8005542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005546:	4413      	add	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <put_fat+0xa4>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b25b      	sxtb	r3, r3
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	b25a      	sxtb	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	b25b      	sxtb	r3, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	b25b      	sxtb	r3, r3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e001      	b.n	8005574 <put_fat+0xa8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	0a5b      	lsrs	r3, r3, #9
 8005586:	4413      	add	r3, r2
 8005588:	4619      	mov	r1, r3
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff fe3c 	bl	8005208 <move_window>
 8005590:	4603      	mov	r3, r0
 8005592:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005594:	7ffb      	ldrb	r3, [r7, #31]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d178      	bne.n	800568c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	4413      	add	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <put_fat+0xf0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e00e      	b.n	80055da <put_fat+0x10e>
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	b25b      	sxtb	r3, r3
 80055c2:	f023 030f 	bic.w	r3, r3, #15
 80055c6:	b25a      	sxtb	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	4313      	orrs	r3, r2
 80055d6:	b25b      	sxtb	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	70da      	strb	r2, [r3, #3]
			break;
 80055e4:	e057      	b.n	8005696 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	4413      	add	r3, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fe08 	bl	8005208 <move_window>
 80055f8:	4603      	mov	r3, r0
 80055fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055fc:	7ffb      	ldrb	r3, [r7, #31]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d146      	bne.n	8005690 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005610:	4413      	add	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	b292      	uxth	r2, r2
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fb80 	bl	8004d1e <st_word>
			fs->wflag = 1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	70da      	strb	r2, [r3, #3]
			break;
 8005624:	e037      	b.n	8005696 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	09db      	lsrs	r3, r3, #7
 800562e:	4413      	add	r3, r2
 8005630:	4619      	mov	r1, r3
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fde8 	bl	8005208 <move_window>
 8005638:	4603      	mov	r3, r0
 800563a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800563c:	7ffb      	ldrb	r3, [r7, #31]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d128      	bne.n	8005694 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005656:	4413      	add	r3, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fb3d 	bl	8004cd8 <ld_dword>
 800565e:	4603      	mov	r3, r0
 8005660:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005664:	4323      	orrs	r3, r4
 8005666:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005676:	4413      	add	r3, r2
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fb6a 	bl	8004d54 <st_dword>
			fs->wflag = 1;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	70da      	strb	r2, [r3, #3]
			break;
 8005686:	e006      	b.n	8005696 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005688:	bf00      	nop
 800568a:	e004      	b.n	8005696 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800568c:	bf00      	nop
 800568e:	e002      	b.n	8005696 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005694:	bf00      	nop
		}
	}
	return res;
 8005696:	7ffb      	ldrb	r3, [r7, #31]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3724      	adds	r7, #36	@ 0x24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd90      	pop	{r4, r7, pc}

080056a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d904      	bls.n	80056c6 <remove_chain+0x26>
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d301      	bcc.n	80056ca <remove_chain+0x2a>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e04b      	b.n	8005762 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00c      	beq.n	80056ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	69b8      	ldr	r0, [r7, #24]
 80056d8:	f7ff fef8 	bl	80054cc <put_fat>
 80056dc:	4603      	mov	r3, r0
 80056de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80056e0:	7ffb      	ldrb	r3, [r7, #31]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <remove_chain+0x4a>
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
 80056e8:	e03b      	b.n	8005762 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff fe46 	bl	800537e <get_fat>
 80056f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d031      	beq.n	800575e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <remove_chain+0x64>
 8005700:	2302      	movs	r3, #2
 8005702:	e02e      	b.n	8005762 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d101      	bne.n	8005710 <remove_chain+0x70>
 800570c:	2301      	movs	r3, #1
 800570e:	e028      	b.n	8005762 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005710:	2200      	movs	r2, #0
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	69b8      	ldr	r0, [r7, #24]
 8005716:	f7ff fed9 	bl	80054cc <put_fat>
 800571a:	4603      	mov	r3, r0
 800571c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800571e:	7ffb      	ldrb	r3, [r7, #31]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <remove_chain+0x88>
 8005724:	7ffb      	ldrb	r3, [r7, #31]
 8005726:	e01c      	b.n	8005762 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	3b02      	subs	r3, #2
 8005732:	429a      	cmp	r2, r3
 8005734:	d20b      	bcs.n	800574e <remove_chain+0xae>
			fs->free_clst++;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	791b      	ldrb	r3, [r3, #4]
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	b2da      	uxtb	r2, r3
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3c6      	bcc.n	80056ea <remove_chain+0x4a>
 800575c:	e000      	b.n	8005760 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800575e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10d      	bne.n	800579c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <create_chain+0x2c>
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	429a      	cmp	r2, r3
 8005794:	d31b      	bcc.n	80057ce <create_chain+0x64>
 8005796:	2301      	movs	r3, #1
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e018      	b.n	80057ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fded 	bl	800537e <get_fat>
 80057a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d801      	bhi.n	80057b0 <create_chain+0x46>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e070      	b.n	8005892 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d101      	bne.n	80057bc <create_chain+0x52>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	e06a      	b.n	8005892 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d201      	bcs.n	80057ca <create_chain+0x60>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	e063      	b.n	8005892 <create_chain+0x128>
		scl = clst;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d307      	bcc.n	80057f2 <create_chain+0x88>
				ncl = 2;
 80057e2:	2302      	movs	r3, #2
 80057e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d901      	bls.n	80057f2 <create_chain+0x88>
 80057ee:	2300      	movs	r3, #0
 80057f0:	e04f      	b.n	8005892 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80057f2:	69f9      	ldr	r1, [r7, #28]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fdc2 	bl	800537e <get_fat>
 80057fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00e      	beq.n	8005820 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d003      	beq.n	8005810 <create_chain+0xa6>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d101      	bne.n	8005814 <create_chain+0xaa>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	e03e      	b.n	8005892 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	429a      	cmp	r2, r3
 800581a:	d1da      	bne.n	80057d2 <create_chain+0x68>
 800581c:	2300      	movs	r3, #0
 800581e:	e038      	b.n	8005892 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005820:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005822:	f04f 32ff 	mov.w	r2, #4294967295
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	6938      	ldr	r0, [r7, #16]
 800582a:	f7ff fe4f 	bl	80054cc <put_fat>
 800582e:	4603      	mov	r3, r0
 8005830:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <create_chain+0xe2>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d006      	beq.n	800584c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6938      	ldr	r0, [r7, #16]
 8005844:	f7ff fe42 	bl	80054cc <put_fat>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d116      	bne.n	8005880 <create_chain+0x116>
		fs->last_clst = ncl;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	3b02      	subs	r3, #2
 8005862:	429a      	cmp	r2, r3
 8005864:	d804      	bhi.n	8005870 <create_chain+0x106>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	1e5a      	subs	r2, r3, #1
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	791b      	ldrb	r3, [r3, #4]
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	b2da      	uxtb	r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	711a      	strb	r2, [r3, #4]
 800587e:	e007      	b.n	8005890 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d102      	bne.n	800588c <create_chain+0x122>
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	e000      	b.n	800588e <create_chain+0x124>
 800588c:	2301      	movs	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005890:	69fb      	ldr	r3, [r7, #28]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800589a:	b480      	push	{r7}
 800589c:	b087      	sub	sp, #28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	3304      	adds	r3, #4
 80058b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	0a5b      	lsrs	r3, r3, #9
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	8952      	ldrh	r2, [r2, #10]
 80058ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80058be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1d1a      	adds	r2, r3, #4
 80058c4:	613a      	str	r2, [r7, #16]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <clmt_clust+0x3a>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e010      	b.n	80058f6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d307      	bcc.n	80058ec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	3304      	adds	r3, #4
 80058e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058ea:	e7e9      	b.n	80058c0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80058ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4413      	add	r3, r2
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005918:	d204      	bcs.n	8005924 <dir_sdi+0x22>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005924:	2302      	movs	r3, #2
 8005926:	e063      	b.n	80059f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <dir_sdi+0x46>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d902      	bls.n	8005948 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	8912      	ldrh	r2, [r2, #8]
 8005956:	4293      	cmp	r3, r2
 8005958:	d301      	bcc.n	800595e <dir_sdi+0x5c>
 800595a:	2302      	movs	r3, #2
 800595c:	e048      	b.n	80059f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	61da      	str	r2, [r3, #28]
 8005966:	e029      	b.n	80059bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	895b      	ldrh	r3, [r3, #10]
 800596c:	025b      	lsls	r3, r3, #9
 800596e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005970:	e019      	b.n	80059a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6979      	ldr	r1, [r7, #20]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fd01 	bl	800537e <get_fat>
 800597c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d101      	bne.n	800598a <dir_sdi+0x88>
 8005986:	2301      	movs	r3, #1
 8005988:	e032      	b.n	80059f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d904      	bls.n	800599a <dir_sdi+0x98>
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	429a      	cmp	r2, r3
 8005998:	d301      	bcc.n	800599e <dir_sdi+0x9c>
 800599a:	2302      	movs	r3, #2
 800599c:	e028      	b.n	80059f0 <dir_sdi+0xee>
			ofs -= csz;
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d2e1      	bcs.n	8005972 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80059ae:	6979      	ldr	r1, [r7, #20]
 80059b0:	6938      	ldr	r0, [r7, #16]
 80059b2:	f7ff fcc5 	bl	8005340 <clust2sect>
 80059b6:	4602      	mov	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <dir_sdi+0xcc>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e010      	b.n	80059f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	0a5b      	lsrs	r3, r3, #9
 80059d6:	441a      	add	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e8:	441a      	add	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	3320      	adds	r3, #32
 8005a0e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <dir_next+0x28>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a1e:	d301      	bcc.n	8005a24 <dir_next+0x2c>
 8005a20:	2304      	movs	r3, #4
 8005a22:	e0aa      	b.n	8005b7a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 8098 	bne.w	8005b60 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	8912      	ldrh	r2, [r2, #8]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	f0c0 8088 	bcc.w	8005b60 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	61da      	str	r2, [r3, #28]
 8005a56:	2304      	movs	r3, #4
 8005a58:	e08f      	b.n	8005b7a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0a5b      	lsrs	r3, r3, #9
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	8952      	ldrh	r2, [r2, #10]
 8005a62:	3a01      	subs	r2, #1
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d17a      	bne.n	8005b60 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f7ff fc83 	bl	800537e <get_fat>
 8005a78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d801      	bhi.n	8005a84 <dir_next+0x8c>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e07a      	b.n	8005b7a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	d101      	bne.n	8005a90 <dir_next+0x98>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e074      	b.n	8005b7a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d358      	bcc.n	8005b4c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	61da      	str	r2, [r3, #28]
 8005aa6:	2304      	movs	r3, #4
 8005aa8:	e067      	b.n	8005b7a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7ff fe59 	bl	800576a <create_chain>
 8005ab8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <dir_next+0xcc>
 8005ac0:	2307      	movs	r3, #7
 8005ac2:	e05a      	b.n	8005b7a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <dir_next+0xd6>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e055      	b.n	8005b7a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d101      	bne.n	8005ada <dir_next+0xe2>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e04f      	b.n	8005b7a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff fb50 	bl	8005180 <sync_window>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <dir_next+0xf2>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e047      	b.n	8005b7a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3330      	adds	r3, #48	@ 0x30
 8005aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff f97a 	bl	8004dee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005afa:	2300      	movs	r3, #0
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7ff fc1d 	bl	8005340 <clust2sect>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b0c:	e012      	b.n	8005b34 <dir_next+0x13c>
						fs->wflag = 1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff fb33 	bl	8005180 <sync_window>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <dir_next+0x12c>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e02a      	b.n	8005b7a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3301      	adds	r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	895b      	ldrh	r3, [r3, #10]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d3e6      	bcc.n	8005b0e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b52:	6979      	ldr	r1, [r7, #20]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff fbf3 	bl	8005340 <clust2sect>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b72:	441a      	add	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b92:	2100      	movs	r1, #0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff feb4 	bl	8005902 <dir_sdi>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d12b      	bne.n	8005bfc <dir_alloc+0x7a>
		n = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4619      	mov	r1, r3
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fb2a 	bl	8005208 <move_window>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11d      	bne.n	8005bfa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2be5      	cmp	r3, #229	@ 0xe5
 8005bc6:	d004      	beq.n	8005bd2 <dir_alloc+0x50>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d107      	bne.n	8005be2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d102      	bne.n	8005be6 <dir_alloc+0x64>
 8005be0:	e00c      	b.n	8005bfc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005be6:	2101      	movs	r1, #1
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff ff05 	bl	80059f8 <dir_next>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0d7      	beq.n	8005ba8 <dir_alloc+0x26>
 8005bf8:	e000      	b.n	8005bfc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005bfa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d101      	bne.n	8005c06 <dir_alloc+0x84>
 8005c02:	2307      	movs	r3, #7
 8005c04:	75fb      	strb	r3, [r7, #23]
	return res;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	331a      	adds	r3, #26
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff f842 	bl	8004ca8 <ld_word>
 8005c24:	4603      	mov	r3, r0
 8005c26:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d109      	bne.n	8005c44 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff f837 	bl	8004ca8 <ld_word>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c44:	68fb      	ldr	r3, [r7, #12]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	331a      	adds	r3, #26
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	b292      	uxth	r2, r2
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff f85a 	bl	8004d1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d109      	bne.n	8005c86 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f103 0214 	add.w	r2, r3, #20
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7ff f84c 	bl	8004d1e <st_word>
	}
}
 8005c86:	bf00      	nop
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fe2f 	bl	8005902 <dir_sdi>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <dir_find+0x24>
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	e03e      	b.n	8005d30 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6938      	ldr	r0, [r7, #16]
 8005cba:	f7ff faa5 	bl	8005208 <move_window>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d12f      	bne.n	8005d28 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <dir_find+0x4e>
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	75fb      	strb	r3, [r7, #23]
 8005cda:	e028      	b.n	8005d2e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	330b      	adds	r3, #11
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	330b      	adds	r3, #11
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <dir_find+0x86>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a18      	ldr	r0, [r3, #32]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3324      	adds	r3, #36	@ 0x24
 8005d06:	220b      	movs	r2, #11
 8005d08:	4619      	mov	r1, r3
 8005d0a:	f7ff f88b 	bl	8004e24 <mem_cmp>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005d14:	2100      	movs	r1, #0
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fe6e 	bl	80059f8 <dir_next>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0c5      	beq.n	8005cb2 <dir_find+0x24>
 8005d26:	e002      	b.n	8005d2e <dir_find+0xa0>
		if (res != FR_OK) break;
 8005d28:	bf00      	nop
 8005d2a:	e000      	b.n	8005d2e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d2c:	bf00      	nop

	return res;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005d46:	2101      	movs	r1, #1
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff ff1a 	bl	8005b82 <dir_alloc>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11c      	bne.n	8005d92 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f7ff fa52 	bl	8005208 <move_window>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d111      	bne.n	8005d92 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	2220      	movs	r2, #32
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff f839 	bl	8004dee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a18      	ldr	r0, [r3, #32]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3324      	adds	r3, #36	@ 0x24
 8005d84:	220b      	movs	r2, #11
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7ff f810 	bl	8004dac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3324      	adds	r3, #36	@ 0x24
 8005db0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005db2:	220b      	movs	r2, #11
 8005db4:	2120      	movs	r1, #32
 8005db6:	68b8      	ldr	r0, [r7, #8]
 8005db8:	f7ff f819 	bl	8004dee <mem_set>
	si = i = 0; ni = 8;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	61fa      	str	r2, [r7, #28]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005dd6:	7efb      	ldrb	r3, [r7, #27]
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d94e      	bls.n	8005e7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005ddc:	7efb      	ldrb	r3, [r7, #27]
 8005dde:	2b2f      	cmp	r3, #47	@ 0x2f
 8005de0:	d006      	beq.n	8005df0 <create_name+0x54>
 8005de2:	7efb      	ldrb	r3, [r7, #27]
 8005de4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005de6:	d110      	bne.n	8005e0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005de8:	e002      	b.n	8005df0 <create_name+0x54>
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005dfa:	d0f6      	beq.n	8005dea <create_name+0x4e>
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e06:	d0f0      	beq.n	8005dea <create_name+0x4e>
			break;
 8005e08:	e038      	b.n	8005e7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005e0a:	7efb      	ldrb	r3, [r7, #27]
 8005e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e0e:	d003      	beq.n	8005e18 <create_name+0x7c>
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d30c      	bcc.n	8005e32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b0b      	cmp	r3, #11
 8005e1c:	d002      	beq.n	8005e24 <create_name+0x88>
 8005e1e:	7efb      	ldrb	r3, [r7, #27]
 8005e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e22:	d001      	beq.n	8005e28 <create_name+0x8c>
 8005e24:	2306      	movs	r3, #6
 8005e26:	e044      	b.n	8005eb2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005e28:	2308      	movs	r3, #8
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	230b      	movs	r3, #11
 8005e2e:	617b      	str	r3, [r7, #20]
			continue;
 8005e30:	e022      	b.n	8005e78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005e32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da04      	bge.n	8005e44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005e3a:	7efb      	ldrb	r3, [r7, #27]
 8005e3c:	3b80      	subs	r3, #128	@ 0x80
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ebc <create_name+0x120>)
 8005e40:	5cd3      	ldrb	r3, [r2, r3]
 8005e42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005e44:	7efb      	ldrb	r3, [r7, #27]
 8005e46:	4619      	mov	r1, r3
 8005e48:	481d      	ldr	r0, [pc, #116]	@ (8005ec0 <create_name+0x124>)
 8005e4a:	f7ff f812 	bl	8004e72 <chk_chr>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <create_name+0xbc>
 8005e54:	2306      	movs	r3, #6
 8005e56:	e02c      	b.n	8005eb2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005e58:	7efb      	ldrb	r3, [r7, #27]
 8005e5a:	2b60      	cmp	r3, #96	@ 0x60
 8005e5c:	d905      	bls.n	8005e6a <create_name+0xce>
 8005e5e:	7efb      	ldrb	r3, [r7, #27]
 8005e60:	2b7a      	cmp	r3, #122	@ 0x7a
 8005e62:	d802      	bhi.n	8005e6a <create_name+0xce>
 8005e64:	7efb      	ldrb	r3, [r7, #27]
 8005e66:	3b20      	subs	r3, #32
 8005e68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	613a      	str	r2, [r7, #16]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4413      	add	r3, r2
 8005e74:	7efa      	ldrb	r2, [r7, #27]
 8005e76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005e78:	e7a6      	b.n	8005dc8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	441a      	add	r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <create_name+0xf4>
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	e010      	b.n	8005eb2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2be5      	cmp	r3, #229	@ 0xe5
 8005e96:	d102      	bne.n	8005e9e <create_name+0x102>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2205      	movs	r2, #5
 8005e9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e9e:	7efb      	ldrb	r3, [r7, #27]
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d801      	bhi.n	8005ea8 <create_name+0x10c>
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	e000      	b.n	8005eaa <create_name+0x10e>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	330b      	adds	r3, #11
 8005eae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005eb0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	080074c4 	.word	0x080074c4
 8005ec0:	08007440 	.word	0x08007440

08005ec4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ed8:	e002      	b.n	8005ee0 <follow_path+0x1c>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ee6:	d0f8      	beq.n	8005eda <follow_path+0x16>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b5c      	cmp	r3, #92	@ 0x5c
 8005eee:	d0f4      	beq.n	8005eda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b1f      	cmp	r3, #31
 8005efc:	d80a      	bhi.n	8005f14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2280      	movs	r2, #128	@ 0x80
 8005f02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005f06:	2100      	movs	r1, #0
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fcfa 	bl	8005902 <dir_sdi>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]
 8005f12:	e043      	b.n	8005f9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f14:	463b      	mov	r3, r7
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff3f 	bl	8005d9c <create_name>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d134      	bne.n	8005f92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff feb0 	bl	8005c8e <dir_find>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d127      	bne.n	8005f96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d122      	bne.n	8005f96 <follow_path+0xd2>
 8005f50:	2305      	movs	r3, #5
 8005f52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005f54:	e01f      	b.n	8005f96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f56:	7afb      	ldrb	r3, [r7, #11]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11c      	bne.n	8005f9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	799b      	ldrb	r3, [r3, #6]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005f6c:	2305      	movs	r3, #5
 8005f6e:	75fb      	strb	r3, [r7, #23]
 8005f70:	e014      	b.n	8005f9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f80:	4413      	add	r3, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fe43 	bl	8005c10 <ld_clust>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f90:	e7c0      	b.n	8005f14 <follow_path+0x50>
			if (res != FR_OK) break;
 8005f92:	bf00      	nop
 8005f94:	e002      	b.n	8005f9c <follow_path+0xd8>
				break;
 8005f96:	bf00      	nop
 8005f98:	e000      	b.n	8005f9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f9a:	bf00      	nop
			}
		}
	}

	return res;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d031      	beq.n	8006020 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e002      	b.n	8005fca <get_ldnumber+0x24>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d903      	bls.n	8005fda <get_ldnumber+0x34>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fd8:	d1f4      	bne.n	8005fc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fe0:	d11c      	bne.n	800601c <get_ldnumber+0x76>
			tp = *path;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	60fa      	str	r2, [r7, #12]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	3b30      	subs	r3, #48	@ 0x30
 8005ff2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b09      	cmp	r3, #9
 8005ff8:	d80e      	bhi.n	8006018 <get_ldnumber+0x72>
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d10a      	bne.n	8006018 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d107      	bne.n	8006018 <get_ldnumber+0x72>
					vol = (int)i;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3301      	adds	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	e002      	b.n	8006022 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006020:	693b      	ldr	r3, [r7, #16]
}
 8006022:	4618      	mov	r0, r3
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	70da      	strb	r2, [r3, #3]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f04f 32ff 	mov.w	r2, #4294967295
 8006046:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff f8dc 	bl	8005208 <move_window>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <check_fs+0x2a>
 8006056:	2304      	movs	r3, #4
 8006058:	e038      	b.n	80060cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3330      	adds	r3, #48	@ 0x30
 800605e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fe20 	bl	8004ca8 <ld_word>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006070:	429a      	cmp	r2, r3
 8006072:	d001      	beq.n	8006078 <check_fs+0x48>
 8006074:	2303      	movs	r3, #3
 8006076:	e029      	b.n	80060cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800607e:	2be9      	cmp	r3, #233	@ 0xe9
 8006080:	d009      	beq.n	8006096 <check_fs+0x66>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006088:	2beb      	cmp	r3, #235	@ 0xeb
 800608a:	d11e      	bne.n	80060ca <check_fs+0x9a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006092:	2b90      	cmp	r3, #144	@ 0x90
 8006094:	d119      	bne.n	80060ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3330      	adds	r3, #48	@ 0x30
 800609a:	3336      	adds	r3, #54	@ 0x36
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fe1b 	bl	8004cd8 <ld_dword>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060a8:	4a0a      	ldr	r2, [pc, #40]	@ (80060d4 <check_fs+0xa4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <check_fs+0x82>
 80060ae:	2300      	movs	r3, #0
 80060b0:	e00c      	b.n	80060cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3330      	adds	r3, #48	@ 0x30
 80060b6:	3352      	adds	r3, #82	@ 0x52
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe fe0d 	bl	8004cd8 <ld_dword>
 80060be:	4603      	mov	r3, r0
 80060c0:	4a05      	ldr	r2, [pc, #20]	@ (80060d8 <check_fs+0xa8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <check_fs+0x9a>
 80060c6:	2300      	movs	r3, #0
 80060c8:	e000      	b.n	80060cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80060ca:	2302      	movs	r3, #2
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	00544146 	.word	0x00544146
 80060d8:	33544146 	.word	0x33544146

080060dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b096      	sub	sp, #88	@ 0x58
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff ff58 	bl	8005fa6 <get_ldnumber>
 80060f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80060f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da01      	bge.n	8006102 <find_volume+0x26>
 80060fe:	230b      	movs	r3, #11
 8006100:	e22d      	b.n	800655e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006102:	4aa1      	ldr	r2, [pc, #644]	@ (8006388 <find_volume+0x2ac>)
 8006104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <find_volume+0x3a>
 8006112:	230c      	movs	r3, #12
 8006114:	e223      	b.n	800655e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800611a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01a      	beq.n	8006162 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fcfb 	bl	8004b2c <disk_status>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800613c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10c      	bne.n	8006162 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <find_volume+0x82>
 800614e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800615a:	230a      	movs	r3, #10
 800615c:	e1ff      	b.n	800655e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800615e:	2300      	movs	r3, #0
 8006160:	e1fd      	b.n	800655e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fcef 	bl	8004b58 <disk_initialize>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006180:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800618c:	2303      	movs	r3, #3
 800618e:	e1e6      	b.n	800655e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <find_volume+0xca>
 8006196:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80061a2:	230a      	movs	r3, #10
 80061a4:	e1db      	b.n	800655e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80061aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061ae:	f7ff ff3f 	bl	8006030 <check_fs>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80061b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d149      	bne.n	8006254 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061c0:	2300      	movs	r3, #0
 80061c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80061c4:	e01e      	b.n	8006204 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80061d4:	4413      	add	r3, r2
 80061d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	3304      	adds	r3, #4
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <find_volume+0x114>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	3308      	adds	r3, #8
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fd76 	bl	8004cd8 <ld_dword>
 80061ec:	4602      	mov	r2, r0
 80061ee:	e000      	b.n	80061f2 <find_volume+0x116>
 80061f0:	2200      	movs	r2, #0
 80061f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	3358      	adds	r3, #88	@ 0x58
 80061f8:	443b      	add	r3, r7
 80061fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006200:	3301      	adds	r3, #1
 8006202:	643b      	str	r3, [r7, #64]	@ 0x40
 8006204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006206:	2b03      	cmp	r3, #3
 8006208:	d9dd      	bls.n	80061c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800620a:	2300      	movs	r3, #0
 800620c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800620e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <find_volume+0x13e>
 8006214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006216:	3b01      	subs	r3, #1
 8006218:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800621a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	3358      	adds	r3, #88	@ 0x58
 8006220:	443b      	add	r3, r7
 8006222:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006226:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <find_volume+0x15e>
 800622e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006230:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006232:	f7ff fefd 	bl	8006030 <check_fs>
 8006236:	4603      	mov	r3, r0
 8006238:	e000      	b.n	800623c <find_volume+0x160>
 800623a:	2303      	movs	r3, #3
 800623c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006240:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006244:	2b01      	cmp	r3, #1
 8006246:	d905      	bls.n	8006254 <find_volume+0x178>
 8006248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624a:	3301      	adds	r3, #1
 800624c:	643b      	str	r3, [r7, #64]	@ 0x40
 800624e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006250:	2b03      	cmp	r3, #3
 8006252:	d9e2      	bls.n	800621a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006254:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006258:	2b04      	cmp	r3, #4
 800625a:	d101      	bne.n	8006260 <find_volume+0x184>
 800625c:	2301      	movs	r3, #1
 800625e:	e17e      	b.n	800655e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006260:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006264:	2b01      	cmp	r3, #1
 8006266:	d901      	bls.n	800626c <find_volume+0x190>
 8006268:	230d      	movs	r3, #13
 800626a:	e178      	b.n	800655e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	3330      	adds	r3, #48	@ 0x30
 8006270:	330b      	adds	r3, #11
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fd18 	bl	8004ca8 <ld_word>
 8006278:	4603      	mov	r3, r0
 800627a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800627e:	d001      	beq.n	8006284 <find_volume+0x1a8>
 8006280:	230d      	movs	r3, #13
 8006282:	e16c      	b.n	800655e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	3330      	adds	r3, #48	@ 0x30
 8006288:	3316      	adds	r3, #22
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe fd0c 	bl	8004ca8 <ld_word>
 8006290:	4603      	mov	r3, r0
 8006292:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <find_volume+0x1cc>
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	3330      	adds	r3, #48	@ 0x30
 800629e:	3324      	adds	r3, #36	@ 0x24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fe fd19 	bl	8004cd8 <ld_dword>
 80062a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80062ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80062b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ba:	789b      	ldrb	r3, [r3, #2]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d005      	beq.n	80062cc <find_volume+0x1f0>
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	789b      	ldrb	r3, [r3, #2]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d001      	beq.n	80062cc <find_volume+0x1f0>
 80062c8:	230d      	movs	r3, #13
 80062ca:	e148      	b.n	800655e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	789b      	ldrb	r3, [r3, #2]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062e0:	461a      	mov	r2, r3
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	895b      	ldrh	r3, [r3, #10]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <find_volume+0x224>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f0:	895b      	ldrh	r3, [r3, #10]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	895b      	ldrh	r3, [r3, #10]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <find_volume+0x228>
 8006300:	230d      	movs	r3, #13
 8006302:	e12c      	b.n	800655e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	3330      	adds	r3, #48	@ 0x30
 8006308:	3311      	adds	r3, #17
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe fccc 	bl	8004ca8 <ld_word>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	891b      	ldrh	r3, [r3, #8]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <find_volume+0x24e>
 8006326:	230d      	movs	r3, #13
 8006328:	e119      	b.n	800655e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	3330      	adds	r3, #48	@ 0x30
 800632e:	3313      	adds	r3, #19
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fcb9 	bl	8004ca8 <ld_word>
 8006336:	4603      	mov	r3, r0
 8006338:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800633a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <find_volume+0x272>
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	3330      	adds	r3, #48	@ 0x30
 8006344:	3320      	adds	r3, #32
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fcc6 	bl	8004cd8 <ld_dword>
 800634c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	3330      	adds	r3, #48	@ 0x30
 8006352:	330e      	adds	r3, #14
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fca7 	bl	8004ca8 <ld_word>
 800635a:	4603      	mov	r3, r0
 800635c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800635e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <find_volume+0x28c>
 8006364:	230d      	movs	r3, #13
 8006366:	e0fa      	b.n	800655e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006368:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800636a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636c:	4413      	add	r3, r2
 800636e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006370:	8912      	ldrh	r2, [r2, #8]
 8006372:	0912      	lsrs	r2, r2, #4
 8006374:	b292      	uxth	r2, r2
 8006376:	4413      	add	r3, r2
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800637a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637e:	429a      	cmp	r2, r3
 8006380:	d204      	bcs.n	800638c <find_volume+0x2b0>
 8006382:	230d      	movs	r3, #13
 8006384:	e0eb      	b.n	800655e <find_volume+0x482>
 8006386:	bf00      	nop
 8006388:	200005c0 	.word	0x200005c0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800638c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006394:	8952      	ldrh	r2, [r2, #10]
 8006396:	fbb3 f3f2 	udiv	r3, r3, r2
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <find_volume+0x2ca>
 80063a2:	230d      	movs	r3, #13
 80063a4:	e0db      	b.n	800655e <find_volume+0x482>
		fmt = FS_FAT32;
 80063a6:	2303      	movs	r3, #3
 80063a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d802      	bhi.n	80063bc <find_volume+0x2e0>
 80063b6:	2302      	movs	r3, #2
 80063b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d802      	bhi.n	80063cc <find_volume+0x2f0>
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	1c9a      	adds	r2, r3, #2
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80063d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063d8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80063da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80063dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063de:	441a      	add	r2, r3
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80063e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	441a      	add	r2, r3
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80063ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d11e      	bne.n	8006434 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	3330      	adds	r3, #48	@ 0x30
 80063fa:	332a      	adds	r3, #42	@ 0x2a
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe fc53 	bl	8004ca8 <ld_word>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <find_volume+0x330>
 8006408:	230d      	movs	r3, #13
 800640a:	e0a8      	b.n	800655e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	891b      	ldrh	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <find_volume+0x33c>
 8006414:	230d      	movs	r3, #13
 8006416:	e0a2      	b.n	800655e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	3330      	adds	r3, #48	@ 0x30
 800641c:	332c      	adds	r3, #44	@ 0x2c
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fc5a 	bl	8004cd8 <ld_dword>
 8006424:	4602      	mov	r2, r0
 8006426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006428:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
 8006432:	e01f      	b.n	8006474 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	891b      	ldrh	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <find_volume+0x364>
 800643c:	230d      	movs	r3, #13
 800643e:	e08e      	b.n	800655e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006446:	441a      	add	r2, r3
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800644c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006450:	2b02      	cmp	r3, #2
 8006452:	d103      	bne.n	800645c <find_volume+0x380>
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	e00a      	b.n	8006472 <find_volume+0x396>
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	4613      	mov	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4413      	add	r3, r2
 8006466:	085a      	lsrs	r2, r3, #1
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006472:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800647e:	0a5b      	lsrs	r3, r3, #9
 8006480:	429a      	cmp	r2, r3
 8006482:	d201      	bcs.n	8006488 <find_volume+0x3ac>
 8006484:	230d      	movs	r3, #13
 8006486:	e06a      	b.n	800655e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	611a      	str	r2, [r3, #16]
 8006490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	2280      	movs	r2, #128	@ 0x80
 800649c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800649e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d149      	bne.n	800653a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	3330      	adds	r3, #48	@ 0x30
 80064aa:	3330      	adds	r3, #48	@ 0x30
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe fbfb 	bl	8004ca8 <ld_word>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d140      	bne.n	800653a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80064b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ba:	3301      	adds	r3, #1
 80064bc:	4619      	mov	r1, r3
 80064be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064c0:	f7fe fea2 	bl	8005208 <move_window>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d137      	bne.n	800653a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	2200      	movs	r2, #0
 80064ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80064d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d2:	3330      	adds	r3, #48	@ 0x30
 80064d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fbe5 	bl	8004ca8 <ld_word>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d127      	bne.n	800653a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ec:	3330      	adds	r3, #48	@ 0x30
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fbf2 	bl	8004cd8 <ld_dword>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <find_volume+0x48c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d11e      	bne.n	800653a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	3330      	adds	r3, #48	@ 0x30
 8006500:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe fbe7 	bl	8004cd8 <ld_dword>
 800650a:	4603      	mov	r3, r0
 800650c:	4a17      	ldr	r2, [pc, #92]	@ (800656c <find_volume+0x490>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d113      	bne.n	800653a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	3330      	adds	r3, #48	@ 0x30
 8006516:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fbdc 	bl	8004cd8 <ld_dword>
 8006520:	4602      	mov	r2, r0
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	3330      	adds	r3, #48	@ 0x30
 800652a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fbd2 	bl	8004cd8 <ld_dword>
 8006534:	4602      	mov	r2, r0
 8006536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006538:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006540:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <find_volume+0x494>)
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	4b09      	ldr	r3, [pc, #36]	@ (8006570 <find_volume+0x494>)
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <find_volume+0x494>)
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006554:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006556:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006558:	f7fe fdee 	bl	8005138 <clear_lock>
#endif
	return FR_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3758      	adds	r7, #88	@ 0x58
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	41615252 	.word	0x41615252
 800656c:	61417272 	.word	0x61417272
 8006570:	200005c4 	.word	0x200005c4

08006574 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800657e:	2309      	movs	r3, #9
 8006580:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01c      	beq.n	80065c2 <validate+0x4e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d018      	beq.n	80065c2 <validate+0x4e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d013      	beq.n	80065c2 <validate+0x4e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	889a      	ldrh	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	88db      	ldrh	r3, [r3, #6]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d10c      	bne.n	80065c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fabc 	bl	8004b2c <disk_status>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <validate+0x4e>
			res = FR_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <validate+0x5a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	e000      	b.n	80065d0 <validate+0x5c>
 80065ce:	2300      	movs	r3, #0
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	6013      	str	r3, [r2, #0]
	return res;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80065f2:	f107 0310 	add.w	r3, r7, #16
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fcd5 	bl	8005fa6 <get_ldnumber>
 80065fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	2b00      	cmp	r3, #0
 8006602:	da01      	bge.n	8006608 <f_mount+0x28>
 8006604:	230b      	movs	r3, #11
 8006606:	e02b      	b.n	8006660 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006608:	4a17      	ldr	r2, [pc, #92]	@ (8006668 <f_mount+0x88>)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006610:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006618:	69b8      	ldr	r0, [r7, #24]
 800661a:	f7fe fd8d 	bl	8005138 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	490d      	ldr	r1, [pc, #52]	@ (8006668 <f_mount+0x88>)
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <f_mount+0x66>
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d001      	beq.n	800664a <f_mount+0x6a>
 8006646:	2300      	movs	r3, #0
 8006648:	e00a      	b.n	8006660 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800664a:	f107 010c 	add.w	r1, r7, #12
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	2200      	movs	r2, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fd41 	bl	80060dc <find_volume>
 800665a:	4603      	mov	r3, r0
 800665c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800665e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	200005c0 	.word	0x200005c0

0800666c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b098      	sub	sp, #96	@ 0x60
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <f_open+0x18>
 8006680:	2309      	movs	r3, #9
 8006682:	e1a9      	b.n	80069d8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800668a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800668c:	79fa      	ldrb	r2, [r7, #7]
 800668e:	f107 0110 	add.w	r1, r7, #16
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fd20 	bl	80060dc <find_volume>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80066a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f040 818d 	bne.w	80069c6 <f_open+0x35a>
		dj.obj.fs = fs;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fc03 	bl	8005ec4 <follow_path>
 80066be:	4603      	mov	r3, r0
 80066c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80066c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d118      	bne.n	80066fe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80066cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da03      	bge.n	80066de <f_open+0x72>
				res = FR_INVALID_NAME;
 80066d6:	2306      	movs	r3, #6
 80066d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80066dc:	e00f      	b.n	80066fe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	bf8c      	ite	hi
 80066e4:	2301      	movhi	r3, #1
 80066e6:	2300      	movls	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	4611      	mov	r1, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fbd8 	bl	8004ea8 <chk_lock>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	f003 031c 	and.w	r3, r3, #28
 8006704:	2b00      	cmp	r3, #0
 8006706:	d07f      	beq.n	8006808 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006708:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800670c:	2b00      	cmp	r3, #0
 800670e:	d017      	beq.n	8006740 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006710:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006714:	2b04      	cmp	r3, #4
 8006716:	d10e      	bne.n	8006736 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006718:	f7fe fc22 	bl	8004f60 <enq_lock>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d006      	beq.n	8006730 <f_open+0xc4>
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fb06 	bl	8005d38 <dir_register>
 800672c:	4603      	mov	r3, r0
 800672e:	e000      	b.n	8006732 <f_open+0xc6>
 8006730:	2312      	movs	r3, #18
 8006732:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	f043 0308 	orr.w	r3, r3, #8
 800673c:	71fb      	strb	r3, [r7, #7]
 800673e:	e010      	b.n	8006762 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006740:	7ebb      	ldrb	r3, [r7, #26]
 8006742:	f003 0311 	and.w	r3, r3, #17
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <f_open+0xe6>
					res = FR_DENIED;
 800674a:	2307      	movs	r3, #7
 800674c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006750:	e007      	b.n	8006762 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <f_open+0xf6>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006762:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006766:	2b00      	cmp	r3, #0
 8006768:	d168      	bne.n	800683c <f_open+0x1d0>
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d063      	beq.n	800683c <f_open+0x1d0>
				dw = GET_FATTIME();
 8006774:	f7fe f9d2 	bl	8004b1c <get_fattime>
 8006778:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677c:	330e      	adds	r3, #14
 800677e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe fae7 	bl	8004d54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006788:	3316      	adds	r3, #22
 800678a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fae1 	bl	8004d54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006794:	330b      	adds	r3, #11
 8006796:	2220      	movs	r2, #32
 8006798:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fa35 	bl	8005c10 <ld_clust>
 80067a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80067ac:	2200      	movs	r2, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fa4d 	bl	8005c4e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80067b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b6:	331c      	adds	r3, #28
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe faca 	bl	8004d54 <st_dword>
					fs->wflag = 1;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2201      	movs	r2, #1
 80067c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80067c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d037      	beq.n	800683c <f_open+0x1d0>
						dw = fs->winsect;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80067d2:	f107 0314 	add.w	r3, r7, #20
 80067d6:	2200      	movs	r2, #0
 80067d8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe ff60 	bl	80056a0 <remove_chain>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80067e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d126      	bne.n	800683c <f_open+0x1d0>
							res = move_window(fs, dw);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fd08 	bl	8005208 <move_window>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006802:	3a01      	subs	r2, #1
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e019      	b.n	800683c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006808:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800680c:	2b00      	cmp	r3, #0
 800680e:	d115      	bne.n	800683c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006810:	7ebb      	ldrb	r3, [r7, #26]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <f_open+0x1b6>
					res = FR_NO_FILE;
 800681a:	2304      	movs	r3, #4
 800681c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006820:	e00c      	b.n	800683c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <f_open+0x1d0>
 800682c:	7ebb      	ldrb	r3, [r7, #26]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <f_open+0x1d0>
						res = FR_DENIED;
 8006836:	2307      	movs	r3, #7
 8006838:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800683c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006840:	2b00      	cmp	r3, #0
 8006842:	d126      	bne.n	8006892 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006854:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800685e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b01      	cmp	r3, #1
 8006868:	bf8c      	ite	hi
 800686a:	2301      	movhi	r3, #1
 800686c:	2300      	movls	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	f107 0314 	add.w	r3, r7, #20
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fb93 	bl	8004fa4 <inc_lock>
 800687e:	4602      	mov	r2, r0
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <f_open+0x226>
 800688c:	2302      	movs	r3, #2
 800688e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006892:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 8095 	bne.w	80069c6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff f9b4 	bl	8005c10 <ld_clust>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80068ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b0:	331c      	adds	r3, #28
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fa10 	bl	8004cd8 <ld_dword>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	88da      	ldrh	r2, [r3, #6]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	79fa      	ldrb	r2, [r7, #7]
 80068d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3330      	adds	r3, #48	@ 0x30
 80068ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe fa7a 	bl	8004dee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d060      	beq.n	80069c6 <f_open+0x35a>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05c      	beq.n	80069c6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	895b      	ldrh	r3, [r3, #10]
 8006918:	025b      	lsls	r3, r3, #9
 800691a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	657b      	str	r3, [r7, #84]	@ 0x54
 8006928:	e016      	b.n	8006958 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fd25 	bl	800537e <get_fat>
 8006934:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006936:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006938:	2b01      	cmp	r3, #1
 800693a:	d802      	bhi.n	8006942 <f_open+0x2d6>
 800693c:	2302      	movs	r3, #2
 800693e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d102      	bne.n	8006950 <f_open+0x2e4>
 800694a:	2301      	movs	r3, #1
 800694c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006950:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	657b      	str	r3, [r7, #84]	@ 0x54
 8006958:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800695c:	2b00      	cmp	r3, #0
 800695e:	d103      	bne.n	8006968 <f_open+0x2fc>
 8006960:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006964:	429a      	cmp	r2, r3
 8006966:	d8e0      	bhi.n	800692a <f_open+0x2be>
				}
				fp->clust = clst;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800696c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800696e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006972:	2b00      	cmp	r3, #0
 8006974:	d127      	bne.n	80069c6 <f_open+0x35a>
 8006976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697c:	2b00      	cmp	r3, #0
 800697e:	d022      	beq.n	80069c6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fcdb 	bl	8005340 <clust2sect>
 800698a:	6478      	str	r0, [r7, #68]	@ 0x44
 800698c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <f_open+0x32e>
						res = FR_INT_ERR;
 8006992:	2302      	movs	r3, #2
 8006994:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006998:	e015      	b.n	80069c6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800699a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800699c:	0a5a      	lsrs	r2, r3, #9
 800699e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	7858      	ldrb	r0, [r3, #1]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1a      	ldr	r2, [r3, #32]
 80069b4:	2301      	movs	r3, #1
 80069b6:	f7fe f8e9 	bl	8004b8c <disk_read>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <f_open+0x35a>
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80069c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <f_open+0x368>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80069d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3760      	adds	r7, #96	@ 0x60
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08e      	sub	sp, #56	@ 0x38
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f107 0214 	add.w	r2, r7, #20
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fdb7 	bl	8006574 <validate>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <f_read+0x44>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	7d5b      	ldrb	r3, [r3, #21]
 8006a18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <f_read+0x4a>
 8006a24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a28:	e115      	b.n	8006c56 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	7d1b      	ldrb	r3, [r3, #20]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <f_read+0x5a>
 8006a36:	2307      	movs	r3, #7
 8006a38:	e10d      	b.n	8006c56 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	f240 80fe 	bls.w	8006c4c <f_read+0x26c>
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006a54:	e0fa      	b.n	8006c4c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 80c6 	bne.w	8006bf0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	0a5b      	lsrs	r3, r3, #9
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	8952      	ldrh	r2, [r2, #10]
 8006a6e:	3a01      	subs	r2, #1
 8006a70:	4013      	ands	r3, r2
 8006a72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d12f      	bne.n	8006ada <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a88:	e013      	b.n	8006ab2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	4619      	mov	r1, r3
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7fe fefe 	bl	800589a <clmt_clust>
 8006a9e:	6338      	str	r0, [r7, #48]	@ 0x30
 8006aa0:	e007      	b.n	8006ab2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4610      	mov	r0, r2
 8006aac:	f7fe fc67 	bl	800537e <get_fat>
 8006ab0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d804      	bhi.n	8006ac2 <f_read+0xe2>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2202      	movs	r2, #2
 8006abc:	755a      	strb	r2, [r3, #21]
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e0c9      	b.n	8006c56 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d104      	bne.n	8006ad4 <f_read+0xf4>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	755a      	strb	r2, [r3, #21]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0c0      	b.n	8006c56 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7fe fc2c 	bl	8005340 <clust2sect>
 8006ae8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <f_read+0x11a>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2202      	movs	r2, #2
 8006af4:	755a      	strb	r2, [r3, #21]
 8006af6:	2302      	movs	r3, #2
 8006af8:	e0ad      	b.n	8006c56 <f_read+0x276>
			sect += csect;
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0a5b      	lsrs	r3, r3, #9
 8006b06:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d039      	beq.n	8006b82 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	4413      	add	r3, r2
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	8952      	ldrh	r2, [r2, #10]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d905      	bls.n	8006b28 <f_read+0x148>
					cc = fs->csize - csect;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	895b      	ldrh	r3, [r3, #10]
 8006b20:	461a      	mov	r2, r3
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	7858      	ldrb	r0, [r3, #1]
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b32:	f7fe f82b 	bl	8004b8c <disk_read>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <f_read+0x166>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	755a      	strb	r2, [r3, #21]
 8006b42:	2301      	movs	r3, #1
 8006b44:	e087      	b.n	8006c56 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	7d1b      	ldrb	r3, [r3, #20]
 8006b4a:	b25b      	sxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da14      	bge.n	8006b7a <f_read+0x19a>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1a      	ldr	r2, [r3, #32]
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d90d      	bls.n	8006b7a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	025b      	lsls	r3, r3, #9
 8006b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6a:	18d0      	adds	r0, r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3330      	adds	r3, #48	@ 0x30
 8006b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b74:	4619      	mov	r1, r3
 8006b76:	f7fe f919 	bl	8004dac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	025b      	lsls	r3, r3, #9
 8006b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006b80:	e050      	b.n	8006c24 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d02e      	beq.n	8006bea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	7d1b      	ldrb	r3, [r3, #20]
 8006b90:	b25b      	sxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da18      	bge.n	8006bc8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	7858      	ldrb	r0, [r3, #1]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1a      	ldr	r2, [r3, #32]
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f7fe f829 	bl	8004bfc <disk_write>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <f_read+0x1da>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	755a      	strb	r2, [r3, #21]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e04d      	b.n	8006c56 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	7d1b      	ldrb	r3, [r3, #20]
 8006bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	7858      	ldrb	r0, [r3, #1]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	f7fd ffd9 	bl	8004b8c <disk_read>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <f_read+0x20a>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	755a      	strb	r2, [r3, #21]
 8006be6:	2301      	movs	r3, #1
 8006be8:	e035      	b.n	8006c56 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d901      	bls.n	8006c0a <f_read+0x22a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c18:	4413      	add	r3, r2
 8006c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c20:	f7fe f8c4 	bl	8004dac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c28:	4413      	add	r3, r2
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c32:	441a      	add	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	619a      	str	r2, [r3, #24]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	441a      	add	r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f47f af01 	bne.w	8006a56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3738      	adds	r7, #56	@ 0x38
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b08c      	sub	sp, #48	@ 0x30
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f107 0210 	add.w	r2, r7, #16
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fc78 	bl	8006574 <validate>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d107      	bne.n	8006ca2 <f_write+0x44>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	7d5b      	ldrb	r3, [r3, #21]
 8006c96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <f_write+0x4a>
 8006ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ca6:	e14b      	b.n	8006f40 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	7d1b      	ldrb	r3, [r3, #20]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <f_write+0x5a>
 8006cb4:	2307      	movs	r3, #7
 8006cb6:	e143      	b.n	8006f40 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	441a      	add	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	f080 812d 	bcs.w	8006f24 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006cd2:	e127      	b.n	8006f24 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 80e3 	bne.w	8006ea8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	0a5b      	lsrs	r3, r3, #9
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	8952      	ldrh	r2, [r2, #10]
 8006cec:	3a01      	subs	r2, #1
 8006cee:	4013      	ands	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d143      	bne.n	8006d80 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10c      	bne.n	8006d1a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d11a      	bne.n	8006d42 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fd2a 	bl	800576a <create_chain>
 8006d16:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006d18:	e013      	b.n	8006d42 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	4619      	mov	r1, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7fe fdb6 	bl	800589a <clmt_clust>
 8006d2e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006d30:	e007      	b.n	8006d42 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fe fd15 	bl	800576a <create_chain>
 8006d40:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 80f2 	beq.w	8006f2e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d104      	bne.n	8006d5a <f_write+0xfc>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2202      	movs	r2, #2
 8006d54:	755a      	strb	r2, [r3, #21]
 8006d56:	2302      	movs	r3, #2
 8006d58:	e0f2      	b.n	8006f40 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d104      	bne.n	8006d6c <f_write+0x10e>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	755a      	strb	r2, [r3, #21]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0e9      	b.n	8006f40 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d70:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <f_write+0x122>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d7e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	7d1b      	ldrb	r3, [r3, #20]
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da18      	bge.n	8006dbc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	7858      	ldrb	r0, [r3, #1]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f7fd ff2f 	bl	8004bfc <disk_write>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <f_write+0x150>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	755a      	strb	r2, [r3, #21]
 8006daa:	2301      	movs	r3, #1
 8006dac:	e0c8      	b.n	8006f40 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	7d1b      	ldrb	r3, [r3, #20]
 8006db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7fe fabb 	bl	8005340 <clust2sect>
 8006dca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <f_write+0x17e>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	755a      	strb	r2, [r3, #21]
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e0b1      	b.n	8006f40 <f_write+0x2e2>
			sect += csect;
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	4413      	add	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	0a5b      	lsrs	r3, r3, #9
 8006de8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d03c      	beq.n	8006e6a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	4413      	add	r3, r2
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	8952      	ldrh	r2, [r2, #10]
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d905      	bls.n	8006e0a <f_write+0x1ac>
					cc = fs->csize - csect;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	895b      	ldrh	r3, [r3, #10]
 8006e02:	461a      	mov	r2, r3
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	7858      	ldrb	r0, [r3, #1]
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	69f9      	ldr	r1, [r7, #28]
 8006e14:	f7fd fef2 	bl	8004bfc <disk_write>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <f_write+0x1ca>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	755a      	strb	r2, [r3, #21]
 8006e24:	2301      	movs	r3, #1
 8006e26:	e08b      	b.n	8006f40 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1a      	ldr	r2, [r3, #32]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	6a3a      	ldr	r2, [r7, #32]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d915      	bls.n	8006e62 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1a      	ldr	r2, [r3, #32]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	025b      	lsls	r3, r3, #9
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f7fd ffac 	bl	8004dac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	7d1b      	ldrb	r3, [r3, #20]
 8006e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	025b      	lsls	r3, r3, #9
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006e68:	e03f      	b.n	8006eea <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d016      	beq.n	8006ea2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d210      	bcs.n	8006ea2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	7858      	ldrb	r0, [r3, #1]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	f7fd fe7d 	bl	8004b8c <disk_read>
 8006e92:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	755a      	strb	r2, [r3, #21]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e04e      	b.n	8006f40 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d901      	bls.n	8006ec2 <f_write+0x264>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed0:	4413      	add	r3, r2
 8006ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed4:	69f9      	ldr	r1, [r7, #28]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fd ff68 	bl	8004dac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	7d1b      	ldrb	r3, [r3, #20]
 8006ee0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	4413      	add	r3, r2
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	441a      	add	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	619a      	str	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	bf38      	it	cc
 8006f0a:	461a      	movcc	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	60da      	str	r2, [r3, #12]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	441a      	add	r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f47f aed4 	bne.w	8006cd4 <f_write+0x76>
 8006f2c:	e000      	b.n	8006f30 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f2e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	7d1b      	ldrb	r3, [r3, #20]
 8006f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3730      	adds	r7, #48	@ 0x30
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f107 0208 	add.w	r2, r7, #8
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fb0b 	bl	8006574 <validate>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d168      	bne.n	800703a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	7d1b      	ldrb	r3, [r3, #20]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d062      	beq.n	800703a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7d1b      	ldrb	r3, [r3, #20]
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da15      	bge.n	8006faa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	7858      	ldrb	r0, [r3, #1]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f7fd fe35 	bl	8004bfc <disk_write>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <f_sync+0x54>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e04f      	b.n	800703c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7d1b      	ldrb	r3, [r3, #20]
 8006fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006faa:	f7fd fdb7 	bl	8004b1c <get_fattime>
 8006fae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fe f925 	bl	8005208 <move_window>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d138      	bne.n	800703a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	330b      	adds	r3, #11
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	330b      	adds	r3, #11
 8006fd8:	f042 0220 	orr.w	r2, r2, #32
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	f7fe fe2f 	bl	8005c4e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f103 021c 	add.w	r2, r3, #28
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f7fd fea9 	bl	8004d54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3316      	adds	r3, #22
 8007006:	6939      	ldr	r1, [r7, #16]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fd fea3 	bl	8004d54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3312      	adds	r3, #18
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd fe82 	bl	8004d1e <st_word>
					fs->wflag = 1;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2201      	movs	r2, #1
 800701e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe f91e 	bl	8005264 <sync_fs>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	7d1b      	ldrb	r3, [r3, #20]
 8007030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007034:	b2da      	uxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800703a:	7dfb      	ldrb	r3, [r7, #23]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff ff7b 	bl	8006f48 <f_sync>
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d118      	bne.n	800708e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f107 0208 	add.w	r2, r7, #8
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fa85 	bl	8006574 <validate>
 800706a:	4603      	mov	r3, r0
 800706c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10c      	bne.n	800708e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe f821 	bl	80050c0 <dec_lock>
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <sbrk_aligned>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0f      	ldr	r6, [pc, #60]	@ (80070d8 <sbrk_aligned+0x40>)
 800709c:	460c      	mov	r4, r1
 800709e:	6831      	ldr	r1, [r6, #0]
 80070a0:	4605      	mov	r5, r0
 80070a2:	b911      	cbnz	r1, 80070aa <sbrk_aligned+0x12>
 80070a4:	f000 f8e4 	bl	8007270 <_sbrk_r>
 80070a8:	6030      	str	r0, [r6, #0]
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f8df 	bl	8007270 <_sbrk_r>
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d103      	bne.n	80070be <sbrk_aligned+0x26>
 80070b6:	f04f 34ff 	mov.w	r4, #4294967295
 80070ba:	4620      	mov	r0, r4
 80070bc:	bd70      	pop	{r4, r5, r6, pc}
 80070be:	1cc4      	adds	r4, r0, #3
 80070c0:	f024 0403 	bic.w	r4, r4, #3
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d0f8      	beq.n	80070ba <sbrk_aligned+0x22>
 80070c8:	1a21      	subs	r1, r4, r0
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 f8d0 	bl	8007270 <_sbrk_r>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1f2      	bne.n	80070ba <sbrk_aligned+0x22>
 80070d4:	e7ef      	b.n	80070b6 <sbrk_aligned+0x1e>
 80070d6:	bf00      	nop
 80070d8:	200005f4 	.word	0x200005f4

080070dc <_malloc_r>:
 80070dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e0:	1ccd      	adds	r5, r1, #3
 80070e2:	f025 0503 	bic.w	r5, r5, #3
 80070e6:	3508      	adds	r5, #8
 80070e8:	2d0c      	cmp	r5, #12
 80070ea:	bf38      	it	cc
 80070ec:	250c      	movcc	r5, #12
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	4606      	mov	r6, r0
 80070f2:	db01      	blt.n	80070f8 <_malloc_r+0x1c>
 80070f4:	42a9      	cmp	r1, r5
 80070f6:	d904      	bls.n	8007102 <_malloc_r+0x26>
 80070f8:	230c      	movs	r3, #12
 80070fa:	6033      	str	r3, [r6, #0]
 80070fc:	2000      	movs	r0, #0
 80070fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071d8 <_malloc_r+0xfc>
 8007106:	f000 f869 	bl	80071dc <__malloc_lock>
 800710a:	f8d8 3000 	ldr.w	r3, [r8]
 800710e:	461c      	mov	r4, r3
 8007110:	bb44      	cbnz	r4, 8007164 <_malloc_r+0x88>
 8007112:	4629      	mov	r1, r5
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ffbf 	bl	8007098 <sbrk_aligned>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	4604      	mov	r4, r0
 800711e:	d158      	bne.n	80071d2 <_malloc_r+0xf6>
 8007120:	f8d8 4000 	ldr.w	r4, [r8]
 8007124:	4627      	mov	r7, r4
 8007126:	2f00      	cmp	r7, #0
 8007128:	d143      	bne.n	80071b2 <_malloc_r+0xd6>
 800712a:	2c00      	cmp	r4, #0
 800712c:	d04b      	beq.n	80071c6 <_malloc_r+0xea>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	4639      	mov	r1, r7
 8007132:	4630      	mov	r0, r6
 8007134:	eb04 0903 	add.w	r9, r4, r3
 8007138:	f000 f89a 	bl	8007270 <_sbrk_r>
 800713c:	4581      	cmp	r9, r0
 800713e:	d142      	bne.n	80071c6 <_malloc_r+0xea>
 8007140:	6821      	ldr	r1, [r4, #0]
 8007142:	1a6d      	subs	r5, r5, r1
 8007144:	4629      	mov	r1, r5
 8007146:	4630      	mov	r0, r6
 8007148:	f7ff ffa6 	bl	8007098 <sbrk_aligned>
 800714c:	3001      	adds	r0, #1
 800714e:	d03a      	beq.n	80071c6 <_malloc_r+0xea>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	442b      	add	r3, r5
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	f8d8 3000 	ldr.w	r3, [r8]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	bb62      	cbnz	r2, 80071b8 <_malloc_r+0xdc>
 800715e:	f8c8 7000 	str.w	r7, [r8]
 8007162:	e00f      	b.n	8007184 <_malloc_r+0xa8>
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	1b52      	subs	r2, r2, r5
 8007168:	d420      	bmi.n	80071ac <_malloc_r+0xd0>
 800716a:	2a0b      	cmp	r2, #11
 800716c:	d917      	bls.n	800719e <_malloc_r+0xc2>
 800716e:	1961      	adds	r1, r4, r5
 8007170:	42a3      	cmp	r3, r4
 8007172:	6025      	str	r5, [r4, #0]
 8007174:	bf18      	it	ne
 8007176:	6059      	strne	r1, [r3, #4]
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	bf08      	it	eq
 800717c:	f8c8 1000 	streq.w	r1, [r8]
 8007180:	5162      	str	r2, [r4, r5]
 8007182:	604b      	str	r3, [r1, #4]
 8007184:	4630      	mov	r0, r6
 8007186:	f000 f82f 	bl	80071e8 <__malloc_unlock>
 800718a:	f104 000b 	add.w	r0, r4, #11
 800718e:	1d23      	adds	r3, r4, #4
 8007190:	f020 0007 	bic.w	r0, r0, #7
 8007194:	1ac2      	subs	r2, r0, r3
 8007196:	bf1c      	itt	ne
 8007198:	1a1b      	subne	r3, r3, r0
 800719a:	50a3      	strne	r3, [r4, r2]
 800719c:	e7af      	b.n	80070fe <_malloc_r+0x22>
 800719e:	6862      	ldr	r2, [r4, #4]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	bf0c      	ite	eq
 80071a4:	f8c8 2000 	streq.w	r2, [r8]
 80071a8:	605a      	strne	r2, [r3, #4]
 80071aa:	e7eb      	b.n	8007184 <_malloc_r+0xa8>
 80071ac:	4623      	mov	r3, r4
 80071ae:	6864      	ldr	r4, [r4, #4]
 80071b0:	e7ae      	b.n	8007110 <_malloc_r+0x34>
 80071b2:	463c      	mov	r4, r7
 80071b4:	687f      	ldr	r7, [r7, #4]
 80071b6:	e7b6      	b.n	8007126 <_malloc_r+0x4a>
 80071b8:	461a      	mov	r2, r3
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	42a3      	cmp	r3, r4
 80071be:	d1fb      	bne.n	80071b8 <_malloc_r+0xdc>
 80071c0:	2300      	movs	r3, #0
 80071c2:	6053      	str	r3, [r2, #4]
 80071c4:	e7de      	b.n	8007184 <_malloc_r+0xa8>
 80071c6:	230c      	movs	r3, #12
 80071c8:	6033      	str	r3, [r6, #0]
 80071ca:	4630      	mov	r0, r6
 80071cc:	f000 f80c 	bl	80071e8 <__malloc_unlock>
 80071d0:	e794      	b.n	80070fc <_malloc_r+0x20>
 80071d2:	6005      	str	r5, [r0, #0]
 80071d4:	e7d6      	b.n	8007184 <_malloc_r+0xa8>
 80071d6:	bf00      	nop
 80071d8:	200005f8 	.word	0x200005f8

080071dc <__malloc_lock>:
 80071dc:	4801      	ldr	r0, [pc, #4]	@ (80071e4 <__malloc_lock+0x8>)
 80071de:	f000 b881 	b.w	80072e4 <__retarget_lock_acquire_recursive>
 80071e2:	bf00      	nop
 80071e4:	20000738 	.word	0x20000738

080071e8 <__malloc_unlock>:
 80071e8:	4801      	ldr	r0, [pc, #4]	@ (80071f0 <__malloc_unlock+0x8>)
 80071ea:	f000 b87c 	b.w	80072e6 <__retarget_lock_release_recursive>
 80071ee:	bf00      	nop
 80071f0:	20000738 	.word	0x20000738

080071f4 <realloc>:
 80071f4:	4b02      	ldr	r3, [pc, #8]	@ (8007200 <realloc+0xc>)
 80071f6:	460a      	mov	r2, r1
 80071f8:	4601      	mov	r1, r0
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	f000 b802 	b.w	8007204 <_realloc_r>
 8007200:	2000000c 	.word	0x2000000c

08007204 <_realloc_r>:
 8007204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007208:	4680      	mov	r8, r0
 800720a:	4615      	mov	r5, r2
 800720c:	460c      	mov	r4, r1
 800720e:	b921      	cbnz	r1, 800721a <_realloc_r+0x16>
 8007210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007214:	4611      	mov	r1, r2
 8007216:	f7ff bf61 	b.w	80070dc <_malloc_r>
 800721a:	b92a      	cbnz	r2, 8007228 <_realloc_r+0x24>
 800721c:	f000 f872 	bl	8007304 <_free_r>
 8007220:	2400      	movs	r4, #0
 8007222:	4620      	mov	r0, r4
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	f000 f8b6 	bl	8007398 <_malloc_usable_size_r>
 800722c:	4285      	cmp	r5, r0
 800722e:	4606      	mov	r6, r0
 8007230:	d802      	bhi.n	8007238 <_realloc_r+0x34>
 8007232:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007236:	d8f4      	bhi.n	8007222 <_realloc_r+0x1e>
 8007238:	4629      	mov	r1, r5
 800723a:	4640      	mov	r0, r8
 800723c:	f7ff ff4e 	bl	80070dc <_malloc_r>
 8007240:	4607      	mov	r7, r0
 8007242:	2800      	cmp	r0, #0
 8007244:	d0ec      	beq.n	8007220 <_realloc_r+0x1c>
 8007246:	42b5      	cmp	r5, r6
 8007248:	462a      	mov	r2, r5
 800724a:	4621      	mov	r1, r4
 800724c:	bf28      	it	cs
 800724e:	4632      	movcs	r2, r6
 8007250:	f000 f84a 	bl	80072e8 <memcpy>
 8007254:	4621      	mov	r1, r4
 8007256:	4640      	mov	r0, r8
 8007258:	f000 f854 	bl	8007304 <_free_r>
 800725c:	463c      	mov	r4, r7
 800725e:	e7e0      	b.n	8007222 <_realloc_r+0x1e>

08007260 <memset>:
 8007260:	4402      	add	r2, r0
 8007262:	4603      	mov	r3, r0
 8007264:	4293      	cmp	r3, r2
 8007266:	d100      	bne.n	800726a <memset+0xa>
 8007268:	4770      	bx	lr
 800726a:	f803 1b01 	strb.w	r1, [r3], #1
 800726e:	e7f9      	b.n	8007264 <memset+0x4>

08007270 <_sbrk_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d06      	ldr	r5, [pc, #24]	@ (800728c <_sbrk_r+0x1c>)
 8007274:	2300      	movs	r3, #0
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	602b      	str	r3, [r5, #0]
 800727c:	f7f9 fdd2 	bl	8000e24 <_sbrk>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_sbrk_r+0x1a>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_sbrk_r+0x1a>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	20000734 	.word	0x20000734

08007290 <__errno>:
 8007290:	4b01      	ldr	r3, [pc, #4]	@ (8007298 <__errno+0x8>)
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	2000000c 	.word	0x2000000c

0800729c <__libc_init_array>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4d0d      	ldr	r5, [pc, #52]	@ (80072d4 <__libc_init_array+0x38>)
 80072a0:	4c0d      	ldr	r4, [pc, #52]	@ (80072d8 <__libc_init_array+0x3c>)
 80072a2:	1b64      	subs	r4, r4, r5
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	2600      	movs	r6, #0
 80072a8:	42a6      	cmp	r6, r4
 80072aa:	d109      	bne.n	80072c0 <__libc_init_array+0x24>
 80072ac:	4d0b      	ldr	r5, [pc, #44]	@ (80072dc <__libc_init_array+0x40>)
 80072ae:	4c0c      	ldr	r4, [pc, #48]	@ (80072e0 <__libc_init_array+0x44>)
 80072b0:	f000 f87a 	bl	80073a8 <_init>
 80072b4:	1b64      	subs	r4, r4, r5
 80072b6:	10a4      	asrs	r4, r4, #2
 80072b8:	2600      	movs	r6, #0
 80072ba:	42a6      	cmp	r6, r4
 80072bc:	d105      	bne.n	80072ca <__libc_init_array+0x2e>
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c4:	4798      	blx	r3
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7ee      	b.n	80072a8 <__libc_init_array+0xc>
 80072ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ce:	4798      	blx	r3
 80072d0:	3601      	adds	r6, #1
 80072d2:	e7f2      	b.n	80072ba <__libc_init_array+0x1e>
 80072d4:	0800754c 	.word	0x0800754c
 80072d8:	0800754c 	.word	0x0800754c
 80072dc:	0800754c 	.word	0x0800754c
 80072e0:	08007550 	.word	0x08007550

080072e4 <__retarget_lock_acquire_recursive>:
 80072e4:	4770      	bx	lr

080072e6 <__retarget_lock_release_recursive>:
 80072e6:	4770      	bx	lr

080072e8 <memcpy>:
 80072e8:	440a      	add	r2, r1
 80072ea:	4291      	cmp	r1, r2
 80072ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f0:	d100      	bne.n	80072f4 <memcpy+0xc>
 80072f2:	4770      	bx	lr
 80072f4:	b510      	push	{r4, lr}
 80072f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072fe:	4291      	cmp	r1, r2
 8007300:	d1f9      	bne.n	80072f6 <memcpy+0xe>
 8007302:	bd10      	pop	{r4, pc}

08007304 <_free_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4605      	mov	r5, r0
 8007308:	2900      	cmp	r1, #0
 800730a:	d041      	beq.n	8007390 <_free_r+0x8c>
 800730c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007310:	1f0c      	subs	r4, r1, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfb8      	it	lt
 8007316:	18e4      	addlt	r4, r4, r3
 8007318:	f7ff ff60 	bl	80071dc <__malloc_lock>
 800731c:	4a1d      	ldr	r2, [pc, #116]	@ (8007394 <_free_r+0x90>)
 800731e:	6813      	ldr	r3, [r2, #0]
 8007320:	b933      	cbnz	r3, 8007330 <_free_r+0x2c>
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	6014      	str	r4, [r2, #0]
 8007326:	4628      	mov	r0, r5
 8007328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800732c:	f7ff bf5c 	b.w	80071e8 <__malloc_unlock>
 8007330:	42a3      	cmp	r3, r4
 8007332:	d908      	bls.n	8007346 <_free_r+0x42>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	1821      	adds	r1, r4, r0
 8007338:	428b      	cmp	r3, r1
 800733a:	bf01      	itttt	eq
 800733c:	6819      	ldreq	r1, [r3, #0]
 800733e:	685b      	ldreq	r3, [r3, #4]
 8007340:	1809      	addeq	r1, r1, r0
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	e7ed      	b.n	8007322 <_free_r+0x1e>
 8007346:	461a      	mov	r2, r3
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b10b      	cbz	r3, 8007350 <_free_r+0x4c>
 800734c:	42a3      	cmp	r3, r4
 800734e:	d9fa      	bls.n	8007346 <_free_r+0x42>
 8007350:	6811      	ldr	r1, [r2, #0]
 8007352:	1850      	adds	r0, r2, r1
 8007354:	42a0      	cmp	r0, r4
 8007356:	d10b      	bne.n	8007370 <_free_r+0x6c>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	4401      	add	r1, r0
 800735c:	1850      	adds	r0, r2, r1
 800735e:	4283      	cmp	r3, r0
 8007360:	6011      	str	r1, [r2, #0]
 8007362:	d1e0      	bne.n	8007326 <_free_r+0x22>
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	6053      	str	r3, [r2, #4]
 800736a:	4408      	add	r0, r1
 800736c:	6010      	str	r0, [r2, #0]
 800736e:	e7da      	b.n	8007326 <_free_r+0x22>
 8007370:	d902      	bls.n	8007378 <_free_r+0x74>
 8007372:	230c      	movs	r3, #12
 8007374:	602b      	str	r3, [r5, #0]
 8007376:	e7d6      	b.n	8007326 <_free_r+0x22>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	1821      	adds	r1, r4, r0
 800737c:	428b      	cmp	r3, r1
 800737e:	bf04      	itt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	6063      	str	r3, [r4, #4]
 8007386:	bf04      	itt	eq
 8007388:	1809      	addeq	r1, r1, r0
 800738a:	6021      	streq	r1, [r4, #0]
 800738c:	6054      	str	r4, [r2, #4]
 800738e:	e7ca      	b.n	8007326 <_free_r+0x22>
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	bf00      	nop
 8007394:	200005f8 	.word	0x200005f8

08007398 <_malloc_usable_size_r>:
 8007398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739c:	1f18      	subs	r0, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfbc      	itt	lt
 80073a2:	580b      	ldrlt	r3, [r1, r0]
 80073a4:	18c0      	addlt	r0, r0, r3
 80073a6:	4770      	bx	lr

080073a8 <_init>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr

080073b4 <_fini>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr
