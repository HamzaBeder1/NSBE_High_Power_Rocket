
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004704  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800488c  0800488c  0000588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048cc  080048cc  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080048cc  080048cc  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048cc  080048cc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048cc  080048cc  000058cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048d0  080048d0  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  080048e4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080048e4  00006178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f52  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd6  00000000  00000000  0000ff92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00011b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ac  00000000  00000000  00012580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d51  00000000  00000000  00012d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c64e  00000000  00000000  00037a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b5e  00000000  00000000  000440cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125c29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002830  00000000  00000000  00125c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0012849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004874 	.word	0x08004874

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004874 	.word	0x08004874

080001c8 <main>:

}
*/

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  HAL_Init();
 80001cc:	f000 fa91 	bl	80006f2 <HAL_Init>
  SystemClock_Config();
 80001d0:	f000 f840 	bl	8000254 <SystemClock_Config>
  MX_GPIO_Init();
 80001d4:	f000 f8ec 	bl	80003b0 <MX_GPIO_Init>
  DMA_Init();
 80001d8:	f000 f8c4 	bl	8000364 <DMA_Init>
  I2C_Init();
 80001dc:	f000 f880 	bl	80002e0 <I2C_Init>
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);
  while (1)
  {
	  if(HAL_I2C_Master_Transmit_DMA(&hI2C, MPU6050ADDR, WHO_AM_I, 1) != HAL_OK)
 80001e0:	2301      	movs	r3, #1
 80001e2:	4a19      	ldr	r2, [pc, #100]	@ (8000248 <main+0x80>)
 80001e4:	21d2      	movs	r1, #210	@ 0xd2
 80001e6:	4819      	ldr	r0, [pc, #100]	@ (800024c <main+0x84>)
 80001e8:	f001 f896 	bl	8001318 <HAL_I2C_Master_Transmit_DMA>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <main+0x2e>
	    		  Error_Handler();
 80001f2:	f000 f901 	bl	80003f8 <Error_Handler>
	  while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY);
 80001f6:	bf00      	nop
 80001f8:	4814      	ldr	r0, [pc, #80]	@ (800024c <main+0x84>)
 80001fa:	f001 fb6e 	bl	80018da <HAL_I2C_GetState>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b20      	cmp	r3, #32
 8000202:	d1f9      	bne.n	80001f8 <main+0x30>
	  while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);
 8000204:	bf00      	nop
 8000206:	4811      	ldr	r0, [pc, #68]	@ (800024c <main+0x84>)
 8000208:	f001 fb75 	bl	80018f6 <HAL_I2C_GetError>
 800020c:	4603      	mov	r3, r0
 800020e:	2b04      	cmp	r3, #4
 8000210:	d0f9      	beq.n	8000206 <main+0x3e>
	  if(HAL_I2C_Master_Receive_DMA(&hI2C, MPU6050ADDR, Buffer_Dest,1) != HAL_OK)
 8000212:	2301      	movs	r3, #1
 8000214:	4a0e      	ldr	r2, [pc, #56]	@ (8000250 <main+0x88>)
 8000216:	21d2      	movs	r1, #210	@ 0xd2
 8000218:	480c      	ldr	r0, [pc, #48]	@ (800024c <main+0x84>)
 800021a:	f001 f991 	bl	8001540 <HAL_I2C_Master_Receive_DMA>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <main+0x60>
	  		    	  		Error_Handler();
 8000224:	f000 f8e8 	bl	80003f8 <Error_Handler>
	  	while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY);
 8000228:	bf00      	nop
 800022a:	4808      	ldr	r0, [pc, #32]	@ (800024c <main+0x84>)
 800022c:	f001 fb55 	bl	80018da <HAL_I2C_GetState>
 8000230:	4603      	mov	r3, r0
 8000232:	2b20      	cmp	r3, #32
 8000234:	d1f9      	bne.n	800022a <main+0x62>
	    while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);
 8000236:	bf00      	nop
 8000238:	4804      	ldr	r0, [pc, #16]	@ (800024c <main+0x84>)
 800023a:	f001 fb5c 	bl	80018f6 <HAL_I2C_GetError>
 800023e:	4603      	mov	r3, r0
 8000240:	2b04      	cmp	r3, #4
 8000242:	d0f9      	beq.n	8000238 <main+0x70>
	  if(HAL_I2C_Master_Transmit_DMA(&hI2C, MPU6050ADDR, WHO_AM_I, 1) != HAL_OK)
 8000244:	e7cc      	b.n	80001e0 <main+0x18>
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000
 800024c:	2000002c 	.word	0x2000002c
 8000250:	20000110 	.word	0x20000110

08000254 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b096      	sub	sp, #88	@ 0x58
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	2244      	movs	r2, #68	@ 0x44
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 fada 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	463b      	mov	r3, r7
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000276:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800027a:	f002 fff5 	bl	8003268 <HAL_PWREx_ControlVoltageScaling>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000284:	f000 f8b8 	bl	80003f8 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000288:	2310      	movs	r3, #16
 800028a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000294:	2360      	movs	r3, #96	@ 0x60
 8000296:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	2300      	movs	r3, #0
 800029a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4618      	mov	r0, r3
 80002a2:	f003 f837 	bl	8003314 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002ac:	f000 f8a4 	bl	80003f8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	463b      	mov	r3, r7
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fbff 	bl	8003acc <HAL_RCC_ClockConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002d4:	f000 f890 	bl	80003f8 <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3758      	adds	r7, #88	@ 0x58
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <I2C_Init>:


//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 80002e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <I2C_Init+0x78>)
 80002e6:	4a1d      	ldr	r2, [pc, #116]	@ (800035c <I2C_Init+0x7c>)
 80002e8:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 80002ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <I2C_Init+0x78>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f0:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <I2C_Init+0x78>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <I2C_Init+0x78>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002fc:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <I2C_Init+0x78>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <I2C_Init+0x78>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000308:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <I2C_Init+0x78>)
 800030a:	2200      	movs	r2, #0
 800030c:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030e:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <I2C_Init+0x78>)
 8000310:	2200      	movs	r2, #0
 8000312:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <I2C_Init+0x78>)
 8000316:	2200      	movs	r2, #0
 8000318:	621a      	str	r2, [r3, #32]
	hI2C.Init.Timing = 0x00100D19;
 800031a:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <I2C_Init+0x78>)
 800031c:	4a10      	ldr	r2, [pc, #64]	@ (8000360 <I2C_Init+0x80>)
 800031e:	605a      	str	r2, [r3, #4]

	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000320:	480d      	ldr	r0, [pc, #52]	@ (8000358 <I2C_Init+0x78>)
 8000322:	f000 ff5d 	bl	80011e0 <HAL_I2C_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <I2C_Init+0x50>
	{
		Error_Handler();
 800032c:	f000 f864 	bl	80003f8 <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000330:	2100      	movs	r1, #0
 8000332:	4809      	ldr	r0, [pc, #36]	@ (8000358 <I2C_Init+0x78>)
 8000334:	f002 fef2 	bl	800311c <HAL_I2CEx_ConfigAnalogFilter>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <I2C_Init+0x62>
	{
		Error_Handler();
 800033e:	f000 f85b 	bl	80003f8 <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 8000342:	2100      	movs	r1, #0
 8000344:	4804      	ldr	r0, [pc, #16]	@ (8000358 <I2C_Init+0x78>)
 8000346:	f002 ff34 	bl	80031b2 <HAL_I2CEx_ConfigDigitalFilter>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <I2C_Init+0x74>
    {
    	Error_Handler();
 8000350:	f000 f852 	bl	80003f8 <Error_Handler>
    }
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000002c 	.word	0x2000002c
 800035c:	40005400 	.word	0x40005400
 8000360:	00100d19 	.word	0x00100d19

08000364 <DMA_Init>:

void DMA_Init(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800036a:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <DMA_Init+0x48>)
 800036c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800036e:	4a0f      	ldr	r2, [pc, #60]	@ (80003ac <DMA_Init+0x48>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6493      	str	r3, [r2, #72]	@ 0x48
 8000376:	4b0d      	ldr	r3, [pc, #52]	@ (80003ac <DMA_Init+0x48>)
 8000378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 8000382:	2200      	movs	r2, #0
 8000384:	2100      	movs	r1, #0
 8000386:	2010      	movs	r0, #16
 8000388:	f000 fb03 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800038c:	2010      	movs	r0, #16
 800038e:	f000 fb1c 	bl	80009ca <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	2011      	movs	r0, #17
 8000398:	f000 fafb 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800039c:	2011      	movs	r0, #17
 800039e:	f000 fb14 	bl	80009ca <HAL_NVIC_EnableIRQ>
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <MX_GPIO_Init>:
    Error_Handler();
  }*/
}

static void MX_GPIO_Init(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	4a0e      	ldr	r2, [pc, #56]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003d4:	f043 0302 	orr.w	r3, r3, #2
 80003d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <Error_Handler>:


void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  __disable_irq();
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <Error_Handler+0x8>

08000404 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <HAL_MspInit+0x44>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040e:	4a0e      	ldr	r2, [pc, #56]	@ (8000448 <HAL_MspInit+0x44>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6613      	str	r3, [r2, #96]	@ 0x60
 8000416:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <HAL_MspInit+0x44>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <HAL_MspInit+0x44>)
 8000424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000426:	4a08      	ldr	r2, [pc, #32]	@ (8000448 <HAL_MspInit+0x44>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800042c:	6593      	str	r3, [r2, #88]	@ 0x58
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <HAL_MspInit+0x44>)
 8000430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000

0800044c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 800044c:	b580      	push	{r7, lr}
 800044e:	b0ac      	sub	sp, #176	@ 0xb0
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000454:	4b57      	ldr	r3, [pc, #348]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 8000456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000458:	4a56      	ldr	r2, [pc, #344]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 800045a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800045e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000460:	4b54      	ldr	r3, [pc, #336]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 8000462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000468:	613b      	str	r3, [r7, #16]
 800046a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b51      	ldr	r3, [pc, #324]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 800046e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000470:	4a50      	ldr	r2, [pc, #320]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 8000472:	f043 0302 	orr.w	r3, r3, #2
 8000476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000478:	4b4e      	ldr	r3, [pc, #312]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 800047a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047c:	f003 0302 	and.w	r3, r3, #2
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000484:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000488:	2288      	movs	r2, #136	@ 0x88
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f004 f9c5 	bl	800481c <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000492:	2340      	movs	r3, #64	@ 0x40
 8000494:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000496:	2300      	movs	r3, #0
 8000498:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fd00 	bl	8003ea4 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 80004aa:	f7ff ffa5 	bl	80003f8 <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80004ae:	23c0      	movs	r3, #192	@ 0xc0
 80004b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b2:	2312      	movs	r3, #18
 80004b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80004ba:	2302      	movs	r3, #2
 80004bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004be:	2304      	movs	r3, #4
 80004c0:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 80004c2:	4b3c      	ldr	r3, [pc, #240]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c6:	4a3b      	ldr	r2, [pc, #236]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ce:	4b39      	ldr	r3, [pc, #228]	@ (80005b4 <HAL_I2C_MspInit+0x168>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	4835      	ldr	r0, [pc, #212]	@ (80005b8 <HAL_I2C_MspInit+0x16c>)
 80004e2:	f000 fcd3 	bl	8000e8c <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 80004e6:	4b35      	ldr	r3, [pc, #212]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 80004e8:	4a35      	ldr	r2, [pc, #212]	@ (80005c0 <HAL_I2C_MspInit+0x174>)
 80004ea:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80004ec:	4b33      	ldr	r3, [pc, #204]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 80004ee:	2203      	movs	r2, #3
 80004f0:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004f2:	4b32      	ldr	r3, [pc, #200]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 80004f4:	2210      	movs	r2, #16
 80004f6:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f8:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004fe:	4b2f      	ldr	r3, [pc, #188]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000504:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800050a:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000510:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000516:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 800051c:	4827      	ldr	r0, [pc, #156]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 800051e:	f000 fa6f 	bl	8000a00 <HAL_DMA_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000528:	f7ff ff66 	bl	80003f8 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a23      	ldr	r2, [pc, #140]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 8000530:	639a      	str	r2, [r3, #56]	@ 0x38
 8000532:	4a22      	ldr	r2, [pc, #136]	@ (80005bc <HAL_I2C_MspInit+0x170>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000538:	4b22      	ldr	r3, [pc, #136]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 800053a:	4a23      	ldr	r2, [pc, #140]	@ (80005c8 <HAL_I2C_MspInit+0x17c>)
 800053c:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000540:	2203      	movs	r2, #3
 8000542:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000544:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800054a:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000550:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800055c:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 800056e:	4815      	ldr	r0, [pc, #84]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000570:	f000 fa46 	bl	8000a00 <HAL_DMA_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <HAL_I2C_MspInit+0x132>
		Error_Handler();
 800057a:	f7ff ff3d 	bl	80003f8 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a10      	ldr	r2, [pc, #64]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000582:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000584:	4a0f      	ldr	r2, [pc, #60]	@ (80005c4 <HAL_I2C_MspInit+0x178>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	201f      	movs	r0, #31
 8000590:	f000 f9ff 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000594:	201f      	movs	r0, #31
 8000596:	f000 fa18 	bl	80009ca <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2020      	movs	r0, #32
 80005a0:	f000 f9f7 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80005a4:	2020      	movs	r0, #32
 80005a6:	f000 fa10 	bl	80009ca <HAL_NVIC_EnableIRQ>
}
 80005aa:	bf00      	nop
 80005ac:	37b0      	adds	r7, #176	@ 0xb0
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000400 	.word	0x48000400
 80005bc:	20000080 	.word	0x20000080
 80005c0:	4002006c 	.word	0x4002006c
 80005c4:	200000c8 	.word	0x200000c8
 80005c8:	40020080 	.word	0x40020080

080005cc <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
   while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <NMI_Handler+0x4>

080005d4 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <MemManage_Handler+0x4>

080005e4 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f4 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <SysTick_Handler>:


void SysTick_Handler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000622:	f000 f8bb 	bl	800079c <HAL_IncTick>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000630:	4802      	ldr	r0, [pc, #8]	@ (800063c <DMA1_Channel6_IRQHandler+0x10>)
 8000632:	f000 fb3e 	bl	8000cb2 <HAL_DMA_IRQHandler>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000080 	.word	0x20000080

08000640 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <DMA1_Channel7_IRQHandler+0x10>)
 8000646:	f000 fb34 	bl	8000cb2 <HAL_DMA_IRQHandler>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000c8 	.word	0x200000c8

08000654 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 8000658:	4802      	ldr	r0, [pc, #8]	@ (8000664 <I2C1_EV_IRQHandler+0x10>)
 800065a:	f001 f861 	bl	8001720 <HAL_I2C_EV_IRQHandler>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000002c 	.word	0x2000002c

08000668 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 800066c:	4802      	ldr	r0, [pc, #8]	@ (8000678 <I2C1_ER_IRQHandler+0x10>)
 800066e:	f001 f871 	bl	8001754 <HAL_I2C_ER_IRQHandler>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ffea 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f004 f8ad 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fd79 	bl	80001c8 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006e4:	080048d4 	.word	0x080048d4
  ldr r2, =_sbss
 80006e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006ec:	20000178 	.word	0x20000178

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>

080006f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f93d 	bl	800097c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f80e 	bl	8000724 <HAL_InitTick>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	e001      	b.n	8000718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000714:	f7ff fe76 	bl	8000404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000718:	79fb      	ldrb	r3, [r7, #7]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <HAL_InitTick+0x6c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d023      	beq.n	8000780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <HAL_InitTick+0x70>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <HAL_InitTick+0x6c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f949 	bl	80009e6 <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10f      	bne.n	800077a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d809      	bhi.n	8000774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f000 f913 	bl	8000992 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800076c:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <HAL_InitTick+0x74>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	e007      	b.n	8000784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e004      	b.n	8000784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e001      	b.n	8000784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000000c 	.word	0x2000000c
 8000794:	20000004 	.word	0x20000004
 8000798:	20000008 	.word	0x20000008

0800079c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_IncTick+0x20>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_IncTick+0x24>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <HAL_IncTick+0x24>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	2000000c 	.word	0x2000000c
 80007c0:	20000174 	.word	0x20000174

080007c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <HAL_GetTick+0x14>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000174 	.word	0x20000174

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	db0b      	blt.n	800086a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 021f 	and.w	r2, r3, #31
 8000858:	4907      	ldr	r1, [pc, #28]	@ (8000878 <__NVIC_EnableIRQ+0x38>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	095b      	lsrs	r3, r3, #5
 8000860:	2001      	movs	r0, #1
 8000862:	fa00 f202 	lsl.w	r2, r0, r2
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000e100 	.word	0xe000e100

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	db0a      	blt.n	80008a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b2da      	uxtb	r2, r3
 8000894:	490c      	ldr	r1, [pc, #48]	@ (80008c8 <__NVIC_SetPriority+0x4c>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	440b      	add	r3, r1
 80008a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a4:	e00a      	b.n	80008bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4908      	ldr	r1, [pc, #32]	@ (80008cc <__NVIC_SetPriority+0x50>)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	3b04      	subs	r3, #4
 80008b4:	0112      	lsls	r2, r2, #4
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	761a      	strb	r2, [r3, #24]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	@ 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	f1c3 0307 	rsb	r3, r3, #7
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	bf28      	it	cs
 80008ee:	2304      	movcs	r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d902      	bls.n	8000900 <NVIC_EncodePriority+0x30>
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3b03      	subs	r3, #3
 80008fe:	e000      	b.n	8000902 <NVIC_EncodePriority+0x32>
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43da      	mvns	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	401a      	ands	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	43d9      	mvns	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	4313      	orrs	r3, r2
         );
}
 800092a:	4618      	mov	r0, r3
 800092c:	3724      	adds	r7, #36	@ 0x24
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000948:	d301      	bcc.n	800094e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094a:	2301      	movs	r3, #1
 800094c:	e00f      	b.n	800096e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <SysTick_Config+0x40>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000956:	210f      	movs	r1, #15
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f7ff ff8e 	bl	800087c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <SysTick_Config+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <SysTick_Config+0x40>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff29 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff3e 	bl	8000824 <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ff8e 	bl	80008d0 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5d 	bl	800087c <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff31 	bl	8000840 <__NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffa2 	bl	8000938 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e098      	b.n	8000b44 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b4d      	ldr	r3, [pc, #308]	@ (8000b50 <HAL_DMA_Init+0x150>)
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d80f      	bhi.n	8000a3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b4b      	ldr	r3, [pc, #300]	@ (8000b54 <HAL_DMA_Init+0x154>)
 8000a26:	4413      	add	r3, r2
 8000a28:	4a4b      	ldr	r2, [pc, #300]	@ (8000b58 <HAL_DMA_Init+0x158>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	009a      	lsls	r2, r3, #2
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a48      	ldr	r2, [pc, #288]	@ (8000b5c <HAL_DMA_Init+0x15c>)
 8000a3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a3c:	e00e      	b.n	8000a5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b46      	ldr	r3, [pc, #280]	@ (8000b60 <HAL_DMA_Init+0x160>)
 8000a46:	4413      	add	r3, r2
 8000a48:	4a43      	ldr	r2, [pc, #268]	@ (8000b58 <HAL_DMA_Init+0x158>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	009a      	lsls	r2, r3, #2
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a42      	ldr	r2, [pc, #264]	@ (8000b64 <HAL_DMA_Init+0x164>)
 8000a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2202      	movs	r2, #2
 8000a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ab6:	d039      	beq.n	8000b2c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	4a27      	ldr	r2, [pc, #156]	@ (8000b5c <HAL_DMA_Init+0x15c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d11a      	bne.n	8000af8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <HAL_DMA_Init+0x168>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f003 031c 	and.w	r3, r3, #28
 8000ace:	210f      	movs	r1, #15
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4924      	ldr	r1, [pc, #144]	@ (8000b68 <HAL_DMA_Init+0x168>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <HAL_DMA_Init+0x168>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6859      	ldr	r1, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae8:	f003 031c 	and.w	r3, r3, #28
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	491d      	ldr	r1, [pc, #116]	@ (8000b68 <HAL_DMA_Init+0x168>)
 8000af2:	4313      	orrs	r3, r2
 8000af4:	600b      	str	r3, [r1, #0]
 8000af6:	e019      	b.n	8000b2c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000af8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <HAL_DMA_Init+0x16c>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b00:	f003 031c 	and.w	r3, r3, #28
 8000b04:	210f      	movs	r1, #15
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4917      	ldr	r1, [pc, #92]	@ (8000b6c <HAL_DMA_Init+0x16c>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_DMA_Init+0x16c>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6859      	ldr	r1, [r3, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	f003 031c 	and.w	r3, r3, #28
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	4911      	ldr	r1, [pc, #68]	@ (8000b6c <HAL_DMA_Init+0x16c>)
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2201      	movs	r2, #1
 8000b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40020407 	.word	0x40020407
 8000b54:	bffdfff8 	.word	0xbffdfff8
 8000b58:	cccccccd 	.word	0xcccccccd
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	bffdfbf8 	.word	0xbffdfbf8
 8000b64:	40020400 	.word	0x40020400
 8000b68:	400200a8 	.word	0x400200a8
 8000b6c:	400204a8 	.word	0x400204a8

08000b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d101      	bne.n	8000b90 <HAL_DMA_Start_IT+0x20>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e04b      	b.n	8000c28 <HAL_DMA_Start_IT+0xb8>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2201      	movs	r2, #1
 8000b94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d13a      	bne.n	8000c1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0201 	bic.w	r2, r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f000 f92f 	bl	8000e2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d008      	beq.n	8000be8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f042 020e 	orr.w	r2, r2, #14
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e00f      	b.n	8000c08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0204 	bic.w	r2, r2, #4
 8000bf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 020a 	orr.w	r2, r2, #10
 8000c06:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0201 	orr.w	r2, r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	e005      	b.n	8000c26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c22:	2302      	movs	r3, #2
 8000c24:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d005      	beq.n	8000c54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e029      	b.n	8000ca8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 020e 	bic.w	r2, r2, #14
 8000c62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c78:	f003 021c 	and.w	r2, r3, #28
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	2101      	movs	r1, #1
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	4798      	blx	r3
    }
  }
  return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f003 031c 	and.w	r3, r3, #28
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d026      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x7a>
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d021      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d107      	bne.n	8000d06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0204 	bic.w	r2, r2, #4
 8000d04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f003 021c 	and.w	r2, r3, #28
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	2104      	movs	r1, #4
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d071      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d2a:	e06c      	b.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d30:	f003 031c 	and.w	r3, r3, #28
 8000d34:	2202      	movs	r2, #2
 8000d36:	409a      	lsls	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d02e      	beq.n	8000d9e <HAL_DMA_IRQHandler+0xec>
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d029      	beq.n	8000d9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0320 	and.w	r3, r3, #32
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10b      	bne.n	8000d70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 020a 	bic.w	r2, r2, #10
 8000d66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d74:	f003 021c 	and.w	r2, r3, #28
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d038      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d9c:	e033      	b.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f003 031c 	and.w	r3, r3, #28
 8000da6:	2208      	movs	r2, #8
 8000da8:	409a      	lsls	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d02a      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x156>
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d025      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 020e 	bic.w	r2, r2, #14
 8000dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd0:	f003 021c 	and.w	r2, r3, #28
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
}
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e1e:	b2db      	uxtb	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	f003 021c 	and.w	r2, r3, #28
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	2b10      	cmp	r3, #16
 8000e5c:	d108      	bne.n	8000e70 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e6e:	e007      	b.n	8000e80 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	e17f      	b.n	800119c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8171 	beq.w	8001196 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d005      	beq.n	8000ecc <HAL_GPIO_Init+0x40>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d130      	bne.n	8000f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f02:	2201      	movs	r2, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	f003 0201 	and.w	r2, r3, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d118      	bne.n	8000f6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f40:	2201      	movs	r2, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d017      	beq.n	8000fa8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d123      	bne.n	8000ffc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	6939      	ldr	r1, [r7, #16]
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0203 	and.w	r2, r3, #3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80ac 	beq.w	8001196 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b5f      	ldr	r3, [pc, #380]	@ (80011bc <HAL_GPIO_Init+0x330>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	4a5e      	ldr	r2, [pc, #376]	@ (80011bc <HAL_GPIO_Init+0x330>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6613      	str	r3, [r2, #96]	@ 0x60
 800104a:	4b5c      	ldr	r3, [pc, #368]	@ (80011bc <HAL_GPIO_Init+0x330>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001056:	4a5a      	ldr	r2, [pc, #360]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001080:	d025      	beq.n	80010ce <HAL_GPIO_Init+0x242>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	@ (80011c4 <HAL_GPIO_Init+0x338>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d01f      	beq.n	80010ca <HAL_GPIO_Init+0x23e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4e      	ldr	r2, [pc, #312]	@ (80011c8 <HAL_GPIO_Init+0x33c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x23a>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4d      	ldr	r2, [pc, #308]	@ (80011cc <HAL_GPIO_Init+0x340>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x236>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <HAL_GPIO_Init+0x344>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x232>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4b      	ldr	r2, [pc, #300]	@ (80011d4 <HAL_GPIO_Init+0x348>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x22e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4a      	ldr	r2, [pc, #296]	@ (80011d8 <HAL_GPIO_Init+0x34c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x22a>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00c      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010b6:	2307      	movs	r3, #7
 80010b8:	e00a      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010be:	2304      	movs	r3, #4
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010ce:	2300      	movs	r3, #0
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e0:	4937      	ldr	r1, [pc, #220]	@ (80011c0 <HAL_GPIO_Init+0x334>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ee:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <HAL_GPIO_Init+0x350>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001112:	4a32      	ldr	r2, [pc, #200]	@ (80011dc <HAL_GPIO_Init+0x350>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <HAL_GPIO_Init+0x350>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800113c:	4a27      	ldr	r2, [pc, #156]	@ (80011dc <HAL_GPIO_Init+0x350>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_GPIO_Init+0x350>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <HAL_GPIO_Init+0x350>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <HAL_GPIO_Init+0x350>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001190:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <HAL_GPIO_Init+0x350>)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f47f ae78 	bne.w	8000e9c <HAL_GPIO_Init+0x10>
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	48000800 	.word	0x48000800
 80011cc:	48000c00 	.word	0x48000c00
 80011d0:	48001000 	.word	0x48001000
 80011d4:	48001400 	.word	0x48001400
 80011d8:	48001800 	.word	0x48001800
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e08d      	b.n	800130e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff f920 	bl	800044c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2224      	movs	r2, #36	@ 0x24
 8001210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001230:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001240:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	e006      	b.n	8001268 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001266:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d108      	bne.n	8001282 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	e007      	b.n	8001292 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001290:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69d9      	ldr	r1, [r3, #28]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2220      	movs	r2, #32
 80012fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	461a      	mov	r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	817b      	strh	r3, [r7, #10]
 8001328:	4613      	mov	r3, r2
 800132a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b20      	cmp	r3, #32
 800133a:	f040 80ef 	bne.w	800151c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800134e:	2302      	movs	r3, #2
 8001350:	e0e5      	b.n	800151e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_I2C_Master_Transmit_DMA+0x48>
 800135c:	2302      	movs	r3, #2
 800135e:	e0de      	b.n	800151e <HAL_I2C_Master_Transmit_DMA+0x206>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2221      	movs	r2, #33	@ 0x21
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2210      	movs	r2, #16
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	893a      	ldrh	r2, [r7, #8]
 8001388:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a66      	ldr	r2, [pc, #408]	@ (8001528 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800138e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a66      	ldr	r2, [pc, #408]	@ (800152c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800139a:	b29b      	uxth	r3, r3
 800139c:	2bff      	cmp	r3, #255	@ 0xff
 800139e:	d906      	bls.n	80013ae <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80013a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	e007      	b.n	80013be <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013bc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01a      	beq.n	80013fc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	d074      	beq.n	80014ee <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001408:	2b00      	cmp	r3, #0
 800140a:	d022      	beq.n	8001452 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001410:	4a47      	ldr	r2, [pc, #284]	@ (8001530 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001418:	4a46      	ldr	r2, [pc, #280]	@ (8001534 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001428:	2200      	movs	r2, #0
 800142a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800143c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001442:	f7ff fb95 	bl	8000b70 <HAL_DMA_Start_IT>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d13a      	bne.n	80014c6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8001450:	e013      	b.n	800147a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2220      	movs	r2, #32
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e051      	b.n	800151e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800147e:	b2db      	uxtb	r3, r3
 8001480:	3301      	adds	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	8979      	ldrh	r1, [r7, #10]
 8001486:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f001 fd31 	bl	8002ef4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80014ac:	2110      	movs	r1, #16
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f001 fd52 	bl	8002f58 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e028      	b.n	8001518 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2220      	movs	r2, #32
 80014ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f043 0210 	orr.w	r2, r3, #16
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e017      	b.n	800151e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80014f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	8979      	ldrh	r1, [r7, #10]
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f001 fcf6 	bl	8002ef4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001510:	2101      	movs	r1, #1
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f001 fd20 	bl	8002f58 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	e000      	b.n	800151e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800151c:	2302      	movs	r3, #2
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	ffff0000 	.word	0xffff0000
 800152c:	08001d6b 	.word	0x08001d6b
 8001530:	08002d43 	.word	0x08002d43
 8001534:	08002e8b 	.word	0x08002e8b
 8001538:	80002000 	.word	0x80002000
 800153c:	0800190f 	.word	0x0800190f

08001540 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af02      	add	r7, sp, #8
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	461a      	mov	r2, r3
 800154c:	460b      	mov	r3, r1
 800154e:	817b      	strh	r3, [r7, #10]
 8001550:	4613      	mov	r3, r2
 8001552:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b20      	cmp	r3, #32
 800155e:	f040 80cd 	bne.w	80016fc <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800156c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001570:	d101      	bne.n	8001576 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8001572:	2302      	movs	r3, #2
 8001574:	e0c3      	b.n	80016fe <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_I2C_Master_Receive_DMA+0x44>
 8001580:	2302      	movs	r3, #2
 8001582:	e0bc      	b.n	80016fe <HAL_I2C_Master_Receive_DMA+0x1be>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2222      	movs	r2, #34	@ 0x22
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2210      	movs	r2, #16
 8001598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	893a      	ldrh	r2, [r7, #8]
 80015ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a55      	ldr	r2, [pc, #340]	@ (8001708 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4a55      	ldr	r2, [pc, #340]	@ (800170c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80015b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2bff      	cmp	r3, #255	@ 0xff
 80015c2:	d906      	bls.n	80015d2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80015ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e007      	b.n	80015e2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d070      	beq.n	80016cc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d020      	beq.n	8001634 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f6:	4a46      	ldr	r2, [pc, #280]	@ (8001710 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fe:	4a45      	ldr	r2, [pc, #276]	@ (8001714 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001606:	2200      	movs	r2, #0
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800160e:	2200      	movs	r2, #0
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3324      	adds	r3, #36	@ 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001624:	f7ff faa4 	bl	8000b70 <HAL_DMA_Start_IT>
 8001628:	4603      	mov	r3, r0
 800162a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800162c:	7cfb      	ldrb	r3, [r7, #19]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d138      	bne.n	80016a4 <HAL_I2C_Master_Receive_DMA+0x164>
 8001632:	e013      	b.n	800165c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001648:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e050      	b.n	80016fe <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001660:	b2da      	uxtb	r2, r3
 8001662:	8979      	ldrh	r1, [r7, #10]
 8001664:	4b2c      	ldr	r3, [pc, #176]	@ (8001718 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f001 fc42 	bl	8002ef4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800168a:	2110      	movs	r1, #16
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f001 fc63 	bl	8002f58 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e029      	b.n	80016f8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	f043 0210 	orr.w	r2, r3, #16
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e018      	b.n	80016fe <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a13      	ldr	r2, [pc, #76]	@ (800171c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80016d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f001 fc06 	bl	8002ef4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016f0:	2102      	movs	r1, #2
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f001 fc30 	bl	8002f58 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80016fc:	2302      	movs	r3, #2
  }
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	ffff0000 	.word	0xffff0000
 800170c:	08001d6b 	.word	0x08001d6b
 8001710:	08002dd9 	.word	0x08002dd9
 8001714:	08002e8b 	.word	0x08002e8b
 8001718:	80002400 	.word	0x80002400
 800171c:	0800190f 	.word	0x0800190f

08001720 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
  }
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00f      	beq.n	8001796 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001794:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00f      	beq.n	80017c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f043 0208 	orr.w	r2, r3, #8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00f      	beq.n	80017ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00a      	beq.n	80017ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	f043 0202 	orr.w	r2, r3, #2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 030b 	and.w	r3, r3, #11
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80017fa:	68f9      	ldr	r1, [r7, #12]
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f001 f965 	bl	8002acc <I2C_ITError>
  }
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018e8:	b2db      	uxtb	r3, r3
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b088      	sub	sp, #32
 8001912:	af02      	add	r7, sp, #8
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <I2C_Master_ISR_IT+0x1e>
 8001928:	2302      	movs	r3, #2
 800192a:	e121      	b.n	8001b70 <I2C_Master_ISR_IT+0x262>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d012      	beq.n	8001964 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00d      	beq.n	8001964 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2210      	movs	r2, #16
 800194e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001954:	f043 0204 	orr.w	r2, r3, #4
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f001 f9cc 	bl	8002cfa <I2C_Flush_TXDR>
 8001962:	e0f2      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d022      	beq.n	80019b4 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01d      	beq.n	80019b4 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f023 0304 	bic.w	r3, r3, #4
 800197e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019b2:	e0ca      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d128      	bne.n	8001a10 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01e      	beq.n	8001a10 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80b6 	beq.w	8001b4a <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8001a0e:	e09c      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06a      	beq.n	8001af0 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d065      	beq.n	8001af0 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d04e      	beq.n	8001acc <I2C_Master_ISR_IT+0x1be>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d14a      	bne.n	8001acc <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a42:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2bff      	cmp	r3, #255	@ 0xff
 8001a4c:	d91c      	bls.n	8001a88 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d103      	bne.n	8001a6a <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001a68:	e002      	b.n	8001a70 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	22ff      	movs	r2, #255	@ 0xff
 8001a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	8a79      	ldrh	r1, [r7, #18]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f001 fa37 	bl	8002ef4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a86:	e032      	b.n	8001aee <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a9a:	d00b      	beq.n	8001ab4 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001aa6:	8a79      	ldrh	r1, [r7, #18]
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	9000      	str	r0, [sp, #0]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f001 fa21 	bl	8002ef4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab2:	e01c      	b.n	8001aee <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	8a79      	ldrh	r1, [r7, #18]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f001 fa15 	bl	8002ef4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aca:	e010      	b.n	8001aee <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ada:	d003      	beq.n	8001ae4 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fcdc 	bl	800249a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ae2:	e032      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ae4:	2140      	movs	r1, #64	@ 0x40
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fff0 	bl	8002acc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aec:	e02d      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
 8001aee:	e02c      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d027      	beq.n	8001b4a <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d022      	beq.n	8001b4a <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d119      	bne.n	8001b42 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b1c:	d015      	beq.n	8001b4a <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b26:	d108      	bne.n	8001b3a <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	e007      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fcad 	bl	800249a <I2C_ITMasterSeqCplt>
 8001b40:	e003      	b.n	8001b4a <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b42:	2140      	movs	r1, #64	@ 0x40
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 ffc1 	bl	8002acc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001b5e:	6979      	ldr	r1, [r7, #20]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fd33 	bl	80025cc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <I2C_Slave_ISR_IT+0x24>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e0e2      	b.n	8001d62 <I2C_Slave_ISR_IT+0x1ea>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001bb8:	6939      	ldr	r1, [r7, #16]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fdce 	bl	800275c <I2C_ITSlaveCplt>
 8001bc0:	e0ca      	b.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d04b      	beq.n	8001c64 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d046      	beq.n	8001c64 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d128      	bne.n	8001c32 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b28      	cmp	r3, #40	@ 0x28
 8001bea:	d108      	bne.n	8001bfe <I2C_Slave_ISR_IT+0x86>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bf2:	d104      	bne.n	8001bfe <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001bf4:	6939      	ldr	r1, [r7, #16]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 ff14 	bl	8002a24 <I2C_ITListenCplt>
 8001bfc:	e031      	b.n	8001c62 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b29      	cmp	r3, #41	@ 0x29
 8001c08:	d10e      	bne.n	8001c28 <I2C_Slave_ISR_IT+0xb0>
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c10:	d00a      	beq.n	8001c28 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f001 f86d 	bl	8002cfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fc77 	bl	8002514 <I2C_ITSlaveSeqCplt>
 8001c26:	e01c      	b.n	8001c62 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001c30:	e08f      	b.n	8001d52 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2210      	movs	r2, #16
 8001c38:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f043 0204 	orr.w	r2, r3, #4
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <I2C_Slave_ISR_IT+0xdc>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c52:	d17e      	bne.n	8001d52 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 ff36 	bl	8002acc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c60:	e077      	b.n	8001d52 <I2C_Slave_ISR_IT+0x1da>
 8001c62:	e076      	b.n	8001d52 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d02f      	beq.n	8001cce <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d02a      	beq.n	8001cce <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d018      	beq.n	8001cb4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d14b      	bne.n	8001d56 <I2C_Slave_ISR_IT+0x1de>
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cc4:	d047      	beq.n	8001d56 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fc24 	bl	8002514 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001ccc:	e043      	b.n	8001d56 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d009      	beq.n	8001cec <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ce2:	6939      	ldr	r1, [r7, #16]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fb54 	bl	8002392 <I2C_ITAddrCplt>
 8001cea:	e035      	b.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d030      	beq.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d02b      	beq.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d018      	beq.n	8001d3c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001d3a:	e00d      	b.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d42:	d002      	beq.n	8001d4a <I2C_Slave_ISR_IT+0x1d2>
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fbe2 	bl	8002514 <I2C_ITSlaveSeqCplt>
 8001d50:	e002      	b.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001d56:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b088      	sub	sp, #32
 8001d6e:	af02      	add	r7, sp, #8
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <I2C_Master_ISR_DMA+0x1a>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e0e7      	b.n	8001f54 <I2C_Master_ISR_DMA+0x1ea>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d016      	beq.n	8001dc4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d011      	beq.n	8001dc4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2210      	movs	r2, #16
 8001da6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	f043 0204 	orr.w	r2, r3, #4
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001db4:	2120      	movs	r1, #32
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f001 f8ce 	bl	8002f58 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 ff9c 	bl	8002cfa <I2C_Flush_TXDR>
 8001dc2:	e0c2      	b.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d07f      	beq.n	8001ece <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d07a      	beq.n	8001ece <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001de6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d05c      	beq.n	8001eac <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2bff      	cmp	r3, #255	@ 0xff
 8001e08:	d914      	bls.n	8001e34 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d103      	bne.n	8001e26 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001e24:	e002      	b.n	8001e2c <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	@ 0xff
 8001e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001e2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e010      	b.n	8001e56 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e46:	d003      	beq.n	8001e50 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e002      	b.n	8001e56 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e54:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	8a79      	ldrh	r1, [r7, #18]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f001 f845 	bl	8002ef4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b22      	cmp	r3, #34	@ 0x22
 8001e86:	d108      	bne.n	8001e9a <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e96:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e98:	e057      	b.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ea8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001eaa:	e04e      	b.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eba:	d003      	beq.n	8001ec4 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 faec 	bl	800249a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001ec2:	e042      	b.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ec4:	2140      	movs	r1, #64	@ 0x40
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fe00 	bl	8002acc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001ecc:	e03d      	b.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d028      	beq.n	8001f2a <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d023      	beq.n	8001f2a <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d119      	bne.n	8001f20 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001efa:	d025      	beq.n	8001f48 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f04:	d108      	bne.n	8001f18 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f14:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001f16:	e017      	b.n	8001f48 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fabe 	bl	800249a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001f1e:	e013      	b.n	8001f48 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f20:	2140      	movs	r1, #64	@ 0x40
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fdd2 	bl	8002acc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001f28:	e00e      	b.n	8001f48 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fb43 	bl	80025cc <I2C_ITMasterCplt>
 8001f46:	e000      	b.n	8001f4a <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001f48:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001f68:	4b90      	ldr	r3, [pc, #576]	@ (80021ac <I2C_Mem_ISR_DMA+0x250>)
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <I2C_Mem_ISR_DMA+0x1e>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e12f      	b.n	80021da <I2C_Mem_ISR_DMA+0x27e>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d016      	beq.n	8001fba <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d011      	beq.n	8001fba <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f043 0204 	orr.w	r2, r3, #4
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001faa:	2120      	movs	r1, #32
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 ffd3 	bl	8002f58 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fea1 	bl	8002cfa <I2C_Flush_TXDR>
 8001fb8:	e10a      	b.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f04f 32ff 	mov.w	r2, #4294967295
 8001fde:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fe0:	e0f6      	b.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d06d      	beq.n	80020c8 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d068      	beq.n	80020c8 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f001 f831 	bl	8003060 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001ffe:	2110      	movs	r1, #16
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 ffa9 	bl	8002f58 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d056      	beq.n	80020be <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	2bff      	cmp	r3, #255	@ 0xff
 8002018:	d91e      	bls.n	8002058 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d103      	bne.n	8002036 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002034:	e002      	b.n	800203c <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	22ff      	movs	r2, #255	@ 0xff
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002040:	b299      	uxth	r1, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002046:	b2da      	uxtb	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 ff4f 	bl	8002ef4 <I2C_TransferConfig>
 8002056:	e011      	b.n	800207c <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	b299      	uxth	r1, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206c:	b2da      	uxtb	r2, r3
 800206e:	2300      	movs	r3, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 ff3c 	bl	8002ef4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b22      	cmp	r3, #34	@ 0x22
 8002098:	d108      	bne.n	80020ac <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020aa:	e091      	b.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020ba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020bc:	e088      	b.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020be:	2140      	movs	r1, #64	@ 0x40
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fd03 	bl	8002acc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80020c6:	e083      	b.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d070      	beq.n	80021b4 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d06b      	beq.n	80021b4 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020dc:	2101      	movs	r1, #1
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 ffbe 	bl	8003060 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80020e4:	2110      	movs	r1, #16
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 ff36 	bl	8002f58 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b22      	cmp	r3, #34	@ 0x22
 80020f6:	d101      	bne.n	80020fc <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 80020f8:	4b2d      	ldr	r3, [pc, #180]	@ (80021b0 <I2C_Mem_ISR_DMA+0x254>)
 80020fa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	2bff      	cmp	r3, #255	@ 0xff
 8002104:	d91e      	bls.n	8002144 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d103      	bne.n	8002122 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002120:	e002      	b.n	8002128 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	22ff      	movs	r2, #255	@ 0xff
 8002126:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212c:	b299      	uxth	r1, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002132:	b2da      	uxtb	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fed9 	bl	8002ef4 <I2C_TransferConfig>
 8002142:	e011      	b.n	8002168 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	b299      	uxth	r1, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	b2da      	uxtb	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fec6 	bl	8002ef4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b22      	cmp	r3, #34	@ 0x22
 8002184:	d108      	bne.n	8002198 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002194:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002196:	e01b      	b.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021a8:	e012      	b.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
 80021aa:	bf00      	nop
 80021ac:	80002000 	.word	0x80002000
 80021b0:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f9fe 	bl	80025cc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop

080021e4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <I2C_Slave_ISR_DMA+0x24>
 8002204:	2302      	movs	r3, #2
 8002206:	e0c0      	b.n	800238a <I2C_Slave_ISR_DMA+0x1a6>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fa98 	bl	800275c <I2C_ITSlaveCplt>
 800222c:	e0a8      	b.n	8002380 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8095 	beq.w	8002364 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 808f 	beq.w	8002364 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07d      	beq.n	8002356 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00c      	beq.n	800227c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002278:	2301      	movs	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00c      	beq.n	800229e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800229a:	2301      	movs	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d128      	bne.n	80022f6 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b28      	cmp	r3, #40	@ 0x28
 80022ae:	d108      	bne.n	80022c2 <I2C_Slave_ISR_DMA+0xde>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022b6:	d104      	bne.n	80022c2 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fbb2 	bl	8002a24 <I2C_ITListenCplt>
 80022c0:	e048      	b.n	8002354 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b29      	cmp	r3, #41	@ 0x29
 80022cc:	d10e      	bne.n	80022ec <I2C_Slave_ISR_DMA+0x108>
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022d4:	d00a      	beq.n	80022ec <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2210      	movs	r2, #16
 80022dc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fd0b 	bl	8002cfa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f915 	bl	8002514 <I2C_ITSlaveSeqCplt>
 80022ea:	e033      	b.n	8002354 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2210      	movs	r2, #16
 80022f2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80022f4:	e034      	b.n	8002360 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2210      	movs	r2, #16
 80022fc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002310:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <I2C_Slave_ISR_DMA+0x13c>
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800231e:	d11f      	bne.n	8002360 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b21      	cmp	r3, #33	@ 0x21
 8002324:	d002      	beq.n	800232c <I2C_Slave_ISR_DMA+0x148>
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b29      	cmp	r3, #41	@ 0x29
 800232a:	d103      	bne.n	8002334 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2221      	movs	r2, #33	@ 0x21
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
 8002332:	e008      	b.n	8002346 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b22      	cmp	r3, #34	@ 0x22
 8002338:	d002      	beq.n	8002340 <I2C_Slave_ISR_DMA+0x15c>
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b2a      	cmp	r3, #42	@ 0x2a
 800233e:	d102      	bne.n	8002346 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2222      	movs	r2, #34	@ 0x22
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	4619      	mov	r1, r3
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fbbd 	bl	8002acc <I2C_ITError>
      if (treatdmanack == 1U)
 8002352:	e005      	b.n	8002360 <I2C_Slave_ISR_DMA+0x17c>
 8002354:	e004      	b.n	8002360 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2210      	movs	r2, #16
 800235c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800235e:	e00f      	b.n	8002380 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002360:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002362:	e00d      	b.n	8002380 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f809 	bl	8002392 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80023a8:	2b28      	cmp	r3, #40	@ 0x28
 80023aa:	d16a      	bne.n	8002482 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80023ca:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80023e6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d138      	bne.n	8002462 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80023f0:	897b      	ldrh	r3, [r7, #10]
 80023f2:	09db      	lsrs	r3, r3, #7
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	89bb      	ldrh	r3, [r7, #12]
 80023f8:	4053      	eors	r3, r2
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f003 0306 	and.w	r3, r3, #6
 8002400:	2b00      	cmp	r3, #0
 8002402:	d11c      	bne.n	800243e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002404:	897b      	ldrh	r3, [r7, #10]
 8002406:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002416:	2b02      	cmp	r3, #2
 8002418:	d13b      	bne.n	8002492 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2208      	movs	r2, #8
 8002426:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002430:	89ba      	ldrh	r2, [r7, #12]
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fa0f 	bl	800185a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800243c:	e029      	b.n	8002492 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800243e:	893b      	ldrh	r3, [r7, #8]
 8002440:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fe0a 	bl	8003060 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002454:	89ba      	ldrh	r2, [r7, #12]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff f9fd 	bl	800185a <HAL_I2C_AddrCallback>
}
 8002460:	e017      	b.n	8002492 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002462:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fdfa 	bl	8003060 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002474:	89ba      	ldrh	r2, [r7, #12]
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f9ed 	bl	800185a <HAL_I2C_AddrCallback>
}
 8002480:	e007      	b.n	8002492 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2208      	movs	r2, #8
 8002488:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b21      	cmp	r3, #33	@ 0x21
 80024b4:	d115      	bne.n	80024e2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2211      	movs	r2, #17
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024ca:	2101      	movs	r1, #1
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fdc7 	bl	8003060 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff f995 	bl	800180a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024e0:	e014      	b.n	800250c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2212      	movs	r2, #18
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024f6:	2102      	movs	r1, #2
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fdb1 	bl	8003060 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff f989 	bl	800181e <HAL_I2C_MasterRxCpltCallback>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e00c      	b.n	8002562 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002560:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b29      	cmp	r3, #41	@ 0x29
 800256c:	d112      	bne.n	8002594 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2228      	movs	r2, #40	@ 0x28
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2221      	movs	r2, #33	@ 0x21
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800257c:	2101      	movs	r1, #1
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fd6e 	bl	8003060 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff f950 	bl	8001832 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002592:	e017      	b.n	80025c4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b2a      	cmp	r3, #42	@ 0x2a
 800259e:	d111      	bne.n	80025c4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2228      	movs	r2, #40	@ 0x28
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2222      	movs	r2, #34	@ 0x22
 80025ac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025ae:	2102      	movs	r1, #2
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fd55 	bl	8003060 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff f941 	bl	8001846 <HAL_I2C_SlaveRxCpltCallback>
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2220      	movs	r2, #32
 80025e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b21      	cmp	r3, #33	@ 0x21
 80025ec:	d107      	bne.n	80025fe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025ee:	2101      	movs	r1, #1
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fd35 	bl	8003060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2211      	movs	r2, #17
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80025fc:	e00c      	b.n	8002618 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b22      	cmp	r3, #34	@ 0x22
 8002608:	d106      	bne.n	8002618 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800260a:	2102      	movs	r1, #2
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fd27 	bl	8003060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2212      	movs	r2, #18
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b4c      	ldr	r3, [pc, #304]	@ (8002754 <I2C_ITMasterCplt+0x188>)
 8002624:	400b      	ands	r3, r1
 8002626:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	@ (8002758 <I2C_ITMasterCplt+0x18c>)
 8002632:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2210      	movs	r2, #16
 8002644:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f043 0204 	orr.w	r2, r3, #4
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b60      	cmp	r3, #96	@ 0x60
 800265c:	d10a      	bne.n	8002674 <I2C_ITMasterCplt+0xa8>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	b2db      	uxtb	r3, r3
 8002670:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002672:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb40 	bl	8002cfa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b60      	cmp	r3, #96	@ 0x60
 800268a:	d002      	beq.n	8002692 <I2C_ITMasterCplt+0xc6>
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa17 	bl	8002acc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800269e:	e054      	b.n	800274a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b21      	cmp	r3, #33	@ 0x21
 80026aa:	d124      	bne.n	80026f6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b40      	cmp	r3, #64	@ 0x40
 80026c4:	d10b      	bne.n	80026de <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff f8d7 	bl	800188a <HAL_I2C_MemTxCpltCallback>
}
 80026dc:	e035      	b.n	800274a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff f88b 	bl	800180a <HAL_I2C_MasterTxCpltCallback>
}
 80026f4:	e029      	b.n	800274a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b22      	cmp	r3, #34	@ 0x22
 8002700:	d123      	bne.n	800274a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b40      	cmp	r3, #64	@ 0x40
 800271a:	d10b      	bne.n	8002734 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff f8b6 	bl	800189e <HAL_I2C_MemRxCpltCallback>
}
 8002732:	e00a      	b.n	800274a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff f86a 	bl	800181e <HAL_I2C_MasterRxCpltCallback>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	fe00e800 	.word	0xfe00e800
 8002758:	ffff0000 	.word	0xffff0000

0800275c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2220      	movs	r2, #32
 8002786:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	2b21      	cmp	r3, #33	@ 0x21
 800278c:	d002      	beq.n	8002794 <I2C_ITSlaveCplt+0x38>
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	2b29      	cmp	r3, #41	@ 0x29
 8002792:	d108      	bne.n	80027a6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002794:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fc61 	bl	8003060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2221      	movs	r2, #33	@ 0x21
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a4:	e019      	b.n	80027da <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	2b22      	cmp	r3, #34	@ 0x22
 80027aa:	d002      	beq.n	80027b2 <I2C_ITSlaveCplt+0x56>
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80027b0:	d108      	bne.n	80027c4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80027b2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fc52 	bl	8003060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2222      	movs	r2, #34	@ 0x22
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c2:	e00a      	b.n	80027da <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	2b28      	cmp	r3, #40	@ 0x28
 80027c8:	d107      	bne.n	80027da <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80027ca:	f248 0103 	movw	r1, #32771	@ 0x8003
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fc46 	bl	8003060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027e8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b89      	ldr	r3, [pc, #548]	@ (8002a1c <I2C_ITSlaveCplt+0x2c0>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa7d 	bl	8002cfa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002818:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01f      	beq.n	8002862 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002830:	e017      	b.n	8002862 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800284a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0304 	bic.w	r3, r3, #4
 8002872:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f043 0204 	orr.w	r2, r3, #4
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d049      	beq.n	8002962 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d044      	beq.n	8002962 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d128      	bne.n	8002934 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b28      	cmp	r3, #40	@ 0x28
 80028ec:	d108      	bne.n	8002900 <I2C_ITSlaveCplt+0x1a4>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028f4:	d104      	bne.n	8002900 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028f6:	6979      	ldr	r1, [r7, #20]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f893 	bl	8002a24 <I2C_ITListenCplt>
 80028fe:	e030      	b.n	8002962 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b29      	cmp	r3, #41	@ 0x29
 800290a:	d10e      	bne.n	800292a <I2C_ITSlaveCplt+0x1ce>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002912:	d00a      	beq.n	800292a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f9ec 	bl	8002cfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fdf6 	bl	8002514 <I2C_ITSlaveSeqCplt>
 8002928:	e01b      	b.n	8002962 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2210      	movs	r2, #16
 8002930:	61da      	str	r2, [r3, #28]
 8002932:	e016      	b.n	8002962 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2210      	movs	r2, #16
 800293a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	f043 0204 	orr.w	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <I2C_ITSlaveCplt+0x1fa>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002954:	d105      	bne.n	8002962 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8b5 	bl	8002acc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	2b00      	cmp	r3, #0
 8002976:	d010      	beq.n	800299a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8a4 	bl	8002acc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b28      	cmp	r3, #40	@ 0x28
 800298e:	d141      	bne.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f846 	bl	8002a24 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002998:	e03c      	b.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029a2:	d014      	beq.n	80029ce <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fdb5 	bl	8002514 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <I2C_ITSlaveCplt+0x2c4>)
 80029ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe ff55 	bl	8001876 <HAL_I2C_ListenCpltCallback>
}
 80029cc:	e022      	b.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b22      	cmp	r3, #34	@ 0x22
 80029d8:	d10e      	bne.n	80029f8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fe ff28 	bl	8001846 <HAL_I2C_SlaveRxCpltCallback>
}
 80029f6:	e00d      	b.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe ff0f 	bl	8001832 <HAL_I2C_SlaveTxCpltCallback>
}
 8002a14:	bf00      	nop
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	fe00e800 	.word	0xfe00e800
 8002a20:	ffff0000 	.word	0xffff0000

08002a24 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a25      	ldr	r2, [pc, #148]	@ (8002ac8 <I2C_ITListenCplt+0xa4>)
 8002a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d022      	beq.n	8002aa0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002aa0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fadb 	bl	8003060 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fedb 	bl	8001876 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	ffff0000 	.word	0xffff0000

08002acc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002adc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca0 <I2C_ITError+0x1d4>)
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b28      	cmp	r3, #40	@ 0x28
 8002b02:	d005      	beq.n	8002b10 <I2C_ITError+0x44>
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b29      	cmp	r3, #41	@ 0x29
 8002b08:	d002      	beq.n	8002b10 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b0e:	d10b      	bne.n	8002b28 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b10:	2103      	movs	r1, #3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 faa4 	bl	8003060 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2228      	movs	r2, #40	@ 0x28
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a60      	ldr	r2, [pc, #384]	@ (8002ca4 <I2C_ITError+0x1d8>)
 8002b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b26:	e030      	b.n	8002b8a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b28:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fa97 	bl	8003060 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8e1 	bl	8002cfa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b60      	cmp	r3, #96	@ 0x60
 8002b42:	d01f      	beq.n	8002b84 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d114      	bne.n	8002b84 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d109      	bne.n	8002b7c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2220      	movs	r2, #32
 8002b82:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d039      	beq.n	8002c0c <I2C_ITError+0x140>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b11      	cmp	r3, #17
 8002b9c:	d002      	beq.n	8002ba4 <I2C_ITError+0xd8>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b21      	cmp	r3, #33	@ 0x21
 8002ba2:	d133      	bne.n	8002c0c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bb2:	d107      	bne.n	8002bc4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f921 	bl	8000e10 <HAL_DMA_GetState>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d017      	beq.n	8002c04 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	4a33      	ldr	r2, [pc, #204]	@ (8002ca8 <I2C_ITError+0x1dc>)
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe f821 	bl	8000c30 <HAL_DMA_Abort_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d04d      	beq.n	8002c90 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c02:	e045      	b.n	8002c90 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f851 	bl	8002cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c0a:	e041      	b.n	8002c90 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d039      	beq.n	8002c88 <I2C_ITError+0x1bc>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b12      	cmp	r3, #18
 8002c18:	d002      	beq.n	8002c20 <I2C_ITError+0x154>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b22      	cmp	r3, #34	@ 0x22
 8002c1e:	d133      	bne.n	8002c88 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2e:	d107      	bne.n	8002c40 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe f8e3 	bl	8000e10 <HAL_DMA_GetState>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d017      	beq.n	8002c80 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <I2C_ITError+0x1dc>)
 8002c56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd ffe3 	bl	8000c30 <HAL_DMA_Abort_IT>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d011      	beq.n	8002c94 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c7e:	e009      	b.n	8002c94 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f813 	bl	8002cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c86:	e005      	b.n	8002c94 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f80f 	bl	8002cac <I2C_TreatErrorCallback>
  }
}
 8002c8e:	e002      	b.n	8002c96 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c94:	bf00      	nop
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	ffff0000 	.word	0xffff0000
 8002ca4:	08001b79 	.word	0x08001b79
 8002ca8:	08002eb9 	.word	0x08002eb9

08002cac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b60      	cmp	r3, #96	@ 0x60
 8002cbe:	d10e      	bne.n	8002cde <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fdf5 	bl	80018c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cdc:	e009      	b.n	8002cf2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7fe fde0 	bl	80018b2 <HAL_I2C_ErrorCallback>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d103      	bne.n	8002d18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d007      	beq.n	8002d36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	619a      	str	r2, [r3, #24]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d5e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d6a:	2120      	movs	r1, #32
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f8f3 	bl	8002f58 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002d72:	e02d      	b.n	8002dd0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002d7c:	441a      	add	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2bff      	cmp	r3, #255	@ 0xff
 8002d8a:	d903      	bls.n	8002d94 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	22ff      	movs	r2, #255	@ 0xff
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d92:	e004      	b.n	8002d9e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	4619      	mov	r1, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3328      	adds	r3, #40	@ 0x28
 8002dae:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002db4:	f7fd fedc 	bl	8000b70 <HAL_DMA_Start_IT>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002dbe:	2110      	movs	r1, #16
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff fe83 	bl	8002acc <I2C_ITError>
}
 8002dc6:	e003      	b.n	8002dd0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002dc8:	2140      	movs	r1, #64	@ 0x40
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f8c4 	bl	8002f58 <I2C_Enable_IRQ>
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002e00:	2120      	movs	r1, #32
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f8a8 	bl	8002f58 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002e08:	e03b      	b.n	8002e82 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2bff      	cmp	r3, #255	@ 0xff
 8002e20:	d911      	bls.n	8002e46 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d103      	bne.n	8002e3e <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e3c:	e008      	b.n	8002e50 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	@ 0xff
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e44:	e004      	b.n	8002e50 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3324      	adds	r3, #36	@ 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e66:	f7fd fe83 	bl	8000b70 <HAL_DMA_Start_IT>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002e70:	2110      	movs	r1, #16
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fe2a 	bl	8002acc <I2C_ITError>
}
 8002e78:	e003      	b.n	8002e82 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002e7a:	2140      	movs	r1, #64	@ 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f86b 	bl	8002f58 <I2C_Enable_IRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff fe0e 	bl	8002acc <I2C_ITError>
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fee0 	bl	8002cac <I2C_TreatErrorCallback>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	4613      	mov	r3, r2
 8002f04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f0c:	7a7b      	ldrb	r3, [r7, #9]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <I2C_TransferConfig+0x60>)
 8002f34:	430b      	orrs	r3, r1
 8002f36:	43db      	mvns	r3, r3
 8002f38:	ea02 0103 	and.w	r1, r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	03ff63ff 	.word	0x03ff63ff

08002f58 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6c:	4a39      	ldr	r2, [pc, #228]	@ (8003054 <I2C_Enable_IRQ+0xfc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d032      	beq.n	8002fd8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f76:	4a38      	ldr	r2, [pc, #224]	@ (8003058 <I2C_Enable_IRQ+0x100>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d02d      	beq.n	8002fd8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f80:	4a36      	ldr	r2, [pc, #216]	@ (800305c <I2C_Enable_IRQ+0x104>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d028      	beq.n	8002fd8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da03      	bge.n	8002f96 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002fa6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002fb8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d103      	bne.n	8002fc8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002fc6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d133      	bne.n	8003036 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f043 0320 	orr.w	r3, r3, #32
 8002fd4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fd6:	e02e      	b.n	8003036 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da03      	bge.n	8002fe8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002fe6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002ff8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800300a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	2b10      	cmp	r3, #16
 8003010:	d103      	bne.n	800301a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003018:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	2b20      	cmp	r3, #32
 800301e:	d103      	bne.n	8003028 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003026:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d103      	bne.n	8003036 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003034:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	08001d6b 	.word	0x08001d6b
 8003058:	080021e5 	.word	0x080021e5
 800305c:	08001f5d 	.word	0x08001f5d

08003060 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00f      	beq.n	800309a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003080:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800308e:	2b28      	cmp	r3, #40	@ 0x28
 8003090:	d003      	beq.n	800309a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003098:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80030aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030b8:	2b28      	cmp	r3, #40	@ 0x28
 80030ba:	d003      	beq.n	80030c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80030c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	da03      	bge.n	80030d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030d4:	887b      	ldrh	r3, [r7, #2]
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d103      	bne.n	80030e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030e2:	887b      	ldrh	r3, [r7, #2]
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d103      	bne.n	80030f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	2b40      	cmp	r3, #64	@ 0x40
 80030f4:	d103      	bne.n	80030fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43da      	mvns	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	400a      	ands	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b20      	cmp	r3, #32
 8003130:	d138      	bne.n	80031a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800313c:	2302      	movs	r3, #2
 800313e:	e032      	b.n	80031a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	@ 0x24
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800316e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6819      	ldr	r1, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d139      	bne.n	800323c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e033      	b.n	800323e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2224      	movs	r2, #36	@ 0x24
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003204:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <HAL_PWREx_GetVoltageRange+0x18>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003276:	d130      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003278:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003284:	d038      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800328e:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003290:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2232      	movs	r2, #50	@ 0x32
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9b      	lsrs	r3, r3, #18
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ac:	e002      	b.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b4:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c0:	d102      	bne.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f2      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d110      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e6:	d007      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032e8:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032f0:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40007000 	.word	0x40007000
 800330c:	20000004 	.word	0x20000004
 8003310:	431bde83 	.word	0x431bde83

08003314 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e3ca      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003326:	4b97      	ldr	r3, [pc, #604]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003330:	4b94      	ldr	r3, [pc, #592]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80e4 	beq.w	8003510 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_RCC_OscConfig+0x4a>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	f040 808b 	bne.w	800346c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b01      	cmp	r3, #1
 800335a:	f040 8087 	bne.w	800346c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800335e:	4b89      	ldr	r3, [pc, #548]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e3a2      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	4b82      	ldr	r3, [pc, #520]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_RCC_OscConfig+0x7c>
 8003386:	4b7f      	ldr	r3, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800338e:	e005      	b.n	800339c <HAL_RCC_OscConfig+0x88>
 8003390:	4b7c      	ldr	r3, [pc, #496]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800339c:	4293      	cmp	r3, r2
 800339e:	d223      	bcs.n	80033e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fd1d 	bl	8003de4 <RCC_SetFlashLatencyFromMSIRange>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e383      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b4:	4b73      	ldr	r3, [pc, #460]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a72      	ldr	r2, [pc, #456]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ba:	f043 0308 	orr.w	r3, r3, #8
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b70      	ldr	r3, [pc, #448]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	496d      	ldr	r1, [pc, #436]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4968      	ldr	r1, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 80033e6:	e025      	b.n	8003434 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e8:	4b66      	ldr	r3, [pc, #408]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a65      	ldr	r2, [pc, #404]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ee:	f043 0308 	orr.w	r3, r3, #8
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4960      	ldr	r1, [pc, #384]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003406:	4b5f      	ldr	r3, [pc, #380]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	495b      	ldr	r1, [pc, #364]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fcdd 	bl	8003de4 <RCC_SetFlashLatencyFromMSIRange>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e343      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003434:	f000 fc4a 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b52      	ldr	r3, [pc, #328]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	4950      	ldr	r1, [pc, #320]	@ (8003588 <HAL_RCC_OscConfig+0x274>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	4a4e      	ldr	r2, [pc, #312]	@ (800358c <HAL_RCC_OscConfig+0x278>)
 8003452:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003454:	4b4e      	ldr	r3, [pc, #312]	@ (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd f963 	bl	8000724 <HAL_InitTick>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d052      	beq.n	800350e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	e327      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d032      	beq.n	80034da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003474:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a42      	ldr	r2, [pc, #264]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003480:	f7fd f9a0 	bl	80007c4 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003488:	f7fd f99c 	bl	80007c4 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e310      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349a:	4b3a      	ldr	r3, [pc, #232]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a6:	4b37      	ldr	r3, [pc, #220]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a36      	ldr	r2, [pc, #216]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4931      	ldr	r1, [pc, #196]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	492c      	ldr	r1, [pc, #176]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
 80034d8:	e01a      	b.n	8003510 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034da:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a29      	ldr	r2, [pc, #164]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034e6:	f7fd f96d 	bl	80007c4 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ee:	f7fd f969 	bl	80007c4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e2dd      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003500:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x1da>
 800350c:	e000      	b.n	8003510 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800350e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d074      	beq.n	8003606 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x21a>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d10e      	bne.n	8003546 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d10b      	bne.n	8003546 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d064      	beq.n	8003604 <HAL_RCC_OscConfig+0x2f0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d160      	bne.n	8003604 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e2ba      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x24a>
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e026      	b.n	80035ac <HAL_RCC_OscConfig+0x298>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003566:	d115      	bne.n	8003594 <HAL_RCC_OscConfig+0x280>
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a05      	ldr	r2, [pc, #20]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800356e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a02      	ldr	r2, [pc, #8]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x298>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	0800488c 	.word	0x0800488c
 800358c:	20000004 	.word	0x20000004
 8003590:	20000008 	.word	0x20000008
 8003594:	4ba0      	ldr	r3, [pc, #640]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a9f      	ldr	r2, [pc, #636]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b9d      	ldr	r3, [pc, #628]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a9c      	ldr	r2, [pc, #624]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd f906 	bl	80007c4 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd f902 	bl	80007c4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	@ 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e276      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ce:	4b92      	ldr	r3, [pc, #584]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x2a8>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd f8f2 	bl	80007c4 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd f8ee 	bl	80007c4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e262      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f6:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2d0>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d060      	beq.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x310>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d119      	bne.n	8003652 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d116      	bne.n	8003652 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	4b7c      	ldr	r3, [pc, #496]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x328>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e23f      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b76      	ldr	r3, [pc, #472]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	4973      	ldr	r1, [pc, #460]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003650:	e040      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d023      	beq.n	80036a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365a:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd f8ad 	bl	80007c4 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd f8a9 	bl	80007c4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e21d      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003680:	4b65      	ldr	r3, [pc, #404]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b62      	ldr	r3, [pc, #392]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	495f      	ldr	r1, [pc, #380]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
 80036a0:	e018      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd f889 	bl	80007c4 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fd f885 	bl	80007c4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1f9      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c8:	4b53      	ldr	r3, [pc, #332]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03c      	beq.n	800375a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01c      	beq.n	8003722 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fd f864 	bl	80007c4 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003700:	f7fd f860 	bl	80007c4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e1d4      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003712:	4b41      	ldr	r3, [pc, #260]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <HAL_RCC_OscConfig+0x3ec>
 8003720:	e01b      	b.n	800375a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003722:	4b3d      	ldr	r3, [pc, #244]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003728:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fd f847 	bl	80007c4 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373a:	f7fd f843 	bl	80007c4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1b7      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374c:	4b32      	ldr	r3, [pc, #200]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ef      	bne.n	800373a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80a6 	beq.w	80038b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800376c:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377c:	4a26      	ldr	r2, [pc, #152]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003782:	6593      	str	r3, [r2, #88]	@ 0x58
 8003784:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003790:	2301      	movs	r3, #1
 8003792:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003794:	4b21      	ldr	r3, [pc, #132]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d118      	bne.n	80037d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a0:	4b1e      	ldr	r3, [pc, #120]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ac:	f7fd f80a 	bl	80007c4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b4:	f7fd f806 	bl	80007c4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e17a      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0x4d8>
 80037da:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ea:	e029      	b.n	8003840 <HAL_RCC_OscConfig+0x52c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d115      	bne.n	8003820 <HAL_RCC_OscConfig+0x50c>
 80037f4:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a07      	ldr	r2, [pc, #28]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	4a03      	ldr	r2, [pc, #12]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x52c>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
 8003820:	4b9c      	ldr	r3, [pc, #624]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003826:	4a9b      	ldr	r2, [pc, #620]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003830:	4b98      	ldr	r3, [pc, #608]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	4a97      	ldr	r2, [pc, #604]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fc ffbc 	bl	80007c4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fc ffb8 	bl	80007c4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e12a      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	4b8b      	ldr	r3, [pc, #556]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ed      	beq.n	8003850 <HAL_RCC_OscConfig+0x53c>
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fc ffa5 	bl	80007c4 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fc ffa1 	bl	80007c4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e113      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003894:	4b7f      	ldr	r3, [pc, #508]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ed      	bne.n	800387e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a2:	7ffb      	ldrb	r3, [r7, #31]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	4a79      	ldr	r2, [pc, #484]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80fe 	beq.w	8003aba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	f040 80d0 	bne.w	8003a68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038c8:	4b72      	ldr	r3, [pc, #456]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0203 	and.w	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d130      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	3b01      	subs	r3, #1
 80038e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d127      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d11f      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003908:	2a07      	cmp	r2, #7
 800390a:	bf14      	ite	ne
 800390c:	2201      	movne	r2, #1
 800390e:	2200      	moveq	r2, #0
 8003910:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003912:	4293      	cmp	r3, r2
 8003914:	d113      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d109      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d06e      	beq.n	8003a1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b0c      	cmp	r3, #12
 8003942:	d069      	beq.n	8003a18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003944:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0ad      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003960:	4b4c      	ldr	r3, [pc, #304]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a4b      	ldr	r2, [pc, #300]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800396a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800396c:	f7fc ff2a 	bl	80007c4 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fc ff26 	bl	80007c4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e09a      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003986:	4b43      	ldr	r3, [pc, #268]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003992:	4b40      	ldr	r3, [pc, #256]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039ac:	0212      	lsls	r2, r2, #8
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0552      	lsls	r2, r2, #21
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039c0:	0852      	lsrs	r2, r2, #1
 80039c2:	3a01      	subs	r2, #1
 80039c4:	0652      	lsls	r2, r2, #25
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039cc:	0912      	lsrs	r2, r2, #4
 80039ce:	0452      	lsls	r2, r2, #17
 80039d0:	430a      	orrs	r2, r1
 80039d2:	4930      	ldr	r1, [pc, #192]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f0:	f7fc fee8 	bl	80007c4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fc fee4 	bl	80007c4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e058      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0a:	4b22      	ldr	r3, [pc, #136]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a16:	e050      	b.n	8003aba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e04f      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d148      	bne.n	8003aba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a28:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a34:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a16      	ldr	r2, [pc, #88]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a40:	f7fc fec0 	bl	80007c4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fc febc 	bl	80007c4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e030      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x734>
 8003a66:	e028      	b.n	8003aba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d023      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fc fea3 	bl	80007c4 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a80:	e00c      	b.n	8003a9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fc fe9f 	bl	80007c4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d905      	bls.n	8003a9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e013      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
 8003a94:	40021000 	.word	0x40021000
 8003a98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_RCC_OscConfig+0x7b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ec      	bne.n	8003a82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_RCC_OscConfig+0x7b0>)
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	4905      	ldr	r1, [pc, #20]	@ (8003ac4 <HAL_RCC_OscConfig+0x7b0>)
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <HAL_RCC_OscConfig+0x7b4>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60cb      	str	r3, [r1, #12]
 8003ab4:	e001      	b.n	8003aba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	feeefffc 	.word	0xfeeefffc

08003acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0e7      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b75      	ldr	r3, [pc, #468]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d910      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b72      	ldr	r3, [pc, #456]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 0207 	bic.w	r2, r3, #7
 8003af6:	4970      	ldr	r1, [pc, #448]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b6e      	ldr	r3, [pc, #440]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0cf      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d010      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b66      	ldr	r3, [pc, #408]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d908      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b63      	ldr	r3, [pc, #396]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4960      	ldr	r1, [pc, #384]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d04c      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	4b5a      	ldr	r3, [pc, #360]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d121      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0a6      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6a:	4b54      	ldr	r3, [pc, #336]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d115      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e09a      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b82:	4b4e      	ldr	r3, [pc, #312]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e08e      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b92:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e086      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b46      	ldr	r3, [pc, #280]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4943      	ldr	r1, [pc, #268]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fc fe06 	bl	80007c4 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fc fe02 	bl	80007c4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e06e      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	4b31      	ldr	r3, [pc, #196]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d208      	bcs.n	8003c12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b2e      	ldr	r3, [pc, #184]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	492b      	ldr	r1, [pc, #172]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c12:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d210      	bcs.n	8003c42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c20:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 0207 	bic.w	r2, r3, #7
 8003c28:	4923      	ldr	r1, [pc, #140]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c30:	4b21      	ldr	r3, [pc, #132]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e036      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4918      	ldr	r1, [pc, #96]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6c:	4b13      	ldr	r3, [pc, #76]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4910      	ldr	r1, [pc, #64]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c80:	f000 f824 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	490b      	ldr	r1, [pc, #44]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9c:	4a09      	ldr	r2, [pc, #36]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ca0:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1fc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc fd3d 	bl	8000724 <HAL_InitTick>
 8003caa:	4603      	mov	r3, r0
 8003cac:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cae:	7afb      	ldrb	r3, [r7, #11]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	0800488c 	.word	0x0800488c
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	20000008 	.word	0x20000008

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	@ 0x24
 8003cd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cda:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d121      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d11e      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d00:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d0c:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d28:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d44:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e004      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d50:	4b23      	ldr	r3, [pc, #140]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d134      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0xac>
 8003d70:	e005      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d72:	4b1a      	ldr	r3, [pc, #104]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d74:	617b      	str	r3, [r7, #20]
      break;
 8003d76:	e005      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d78:	4b19      	ldr	r3, [pc, #100]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d7a:	617b      	str	r3, [r7, #20]
      break;
 8003d7c:	e002      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	617b      	str	r3, [r7, #20]
      break;
 8003d82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d84:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	fb03 f202 	mul.w	r2, r3, r2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003daa:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	0e5b      	lsrs	r3, r3, #25
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	3301      	adds	r3, #1
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	@ 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	0800489c 	.word	0x0800489c
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003df0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dfc:	f7ff fa26 	bl	800324c <HAL_PWREx_GetVoltageRange>
 8003e00:	6178      	str	r0, [r7, #20]
 8003e02:	e014      	b.n	8003e2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	4a24      	ldr	r2, [pc, #144]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e10:	4b22      	ldr	r3, [pc, #136]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e1c:	f7ff fa16 	bl	800324c <HAL_PWREx_GetVoltageRange>
 8003e20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b1e      	ldr	r3, [pc, #120]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	4a1d      	ldr	r2, [pc, #116]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e34:	d10b      	bne.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b80      	cmp	r3, #128	@ 0x80
 8003e3a:	d919      	bls.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e40:	d902      	bls.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e42:	2302      	movs	r3, #2
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e013      	b.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e48:	2301      	movs	r3, #1
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e010      	b.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b80      	cmp	r3, #128	@ 0x80
 8003e52:	d902      	bls.n	8003e5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e54:	2303      	movs	r3, #3
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	e00a      	b.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b80      	cmp	r3, #128	@ 0x80
 8003e5e:	d102      	bne.n	8003e66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e60:	2302      	movs	r3, #2
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	e004      	b.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b70      	cmp	r3, #112	@ 0x70
 8003e6a:	d101      	bne.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 0207 	bic.w	r2, r3, #7
 8003e78:	4909      	ldr	r1, [pc, #36]	@ (8003ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e80:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d001      	beq.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40022000 	.word	0x40022000

08003ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eac:	2300      	movs	r3, #0
 8003eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d041      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ec8:	d02a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ece:	d824      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ed0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ed6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eda:	d81e      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ee4:	d010      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ee6:	e018      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ee8:	4b86      	ldr	r3, [pc, #536]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a85      	ldr	r2, [pc, #532]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef4:	e015      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fabb 	bl	8004478 <RCCEx_PLLSAI1_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f06:	e00c      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3320      	adds	r3, #32
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fba6 	bl	8004660 <RCCEx_PLLSAI2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f18:	e003      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f28:	4b76      	ldr	r3, [pc, #472]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f36:	4973      	ldr	r1, [pc, #460]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f3e:	e001      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d041      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f58:	d02a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f5e:	d824      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f64:	d008      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f6a:	d81e      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f74:	d010      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f76:	e018      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f78:	4b62      	ldr	r3, [pc, #392]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a61      	ldr	r2, [pc, #388]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f84:	e015      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa73 	bl	8004478 <RCCEx_PLLSAI1_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f96:	e00c      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3320      	adds	r3, #32
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fb5e 	bl	8004660 <RCCEx_PLLSAI2_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa8:	e003      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	74fb      	strb	r3, [r7, #19]
      break;
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fb8:	4b52      	ldr	r3, [pc, #328]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fc6:	494f      	ldr	r1, [pc, #316]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fce:	e001      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a0 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fe6:	4b47      	ldr	r3, [pc, #284]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00d      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffc:	4b41      	ldr	r3, [pc, #260]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	4a40      	ldr	r2, [pc, #256]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6593      	str	r3, [r2, #88]	@ 0x58
 8004008:	4b3e      	ldr	r3, [pc, #248]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004014:	2301      	movs	r3, #1
 8004016:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004018:	4b3b      	ldr	r3, [pc, #236]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3a      	ldr	r2, [pc, #232]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004024:	f7fc fbce 	bl	80007c4 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800402a:	e009      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402c:	f7fc fbca 	bl	80007c4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d902      	bls.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	74fb      	strb	r3, [r7, #19]
        break;
 800403e:	e005      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004040:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ef      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d15c      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004052:	4b2c      	ldr	r3, [pc, #176]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	429a      	cmp	r2, r3
 800406e:	d019      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004070:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800407c:	4b21      	ldr	r3, [pc, #132]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	4a20      	ldr	r2, [pc, #128]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	4a1c      	ldr	r2, [pc, #112]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800409c:	4a19      	ldr	r2, [pc, #100]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fc fb89 	bl	80007c4 <HAL_GetTick>
 80040b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b4:	e00b      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fc fb85 	bl	80007c4 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d902      	bls.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	74fb      	strb	r3, [r7, #19]
            break;
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ec      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e2:	4b08      	ldr	r3, [pc, #32]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f2:	4904      	ldr	r1, [pc, #16]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040fa:	e009      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004110:	7c7b      	ldrb	r3, [r7, #17]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4b9e      	ldr	r3, [pc, #632]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	4a9d      	ldr	r2, [pc, #628]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004120:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800412e:	4b98      	ldr	r3, [pc, #608]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	f023 0203 	bic.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	4994      	ldr	r1, [pc, #592]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004150:	4b8f      	ldr	r3, [pc, #572]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f023 020c 	bic.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	498c      	ldr	r1, [pc, #560]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004172:	4b87      	ldr	r3, [pc, #540]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	4983      	ldr	r1, [pc, #524]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004194:	4b7e      	ldr	r3, [pc, #504]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	497b      	ldr	r1, [pc, #492]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041b6:	4b76      	ldr	r3, [pc, #472]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c4:	4972      	ldr	r1, [pc, #456]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d8:	4b6d      	ldr	r3, [pc, #436]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e6:	496a      	ldr	r1, [pc, #424]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fa:	4b65      	ldr	r3, [pc, #404]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004208:	4961      	ldr	r1, [pc, #388]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800421c:	4b5c      	ldr	r3, [pc, #368]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422a:	4959      	ldr	r1, [pc, #356]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800423e:	4b54      	ldr	r3, [pc, #336]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004244:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800424c:	4950      	ldr	r1, [pc, #320]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004260:	4b4b      	ldr	r3, [pc, #300]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004266:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426e:	4948      	ldr	r1, [pc, #288]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004282:	4b43      	ldr	r3, [pc, #268]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004288:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004290:	493f      	ldr	r1, [pc, #252]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d028      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042b2:	4937      	ldr	r1, [pc, #220]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042c2:	d106      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b32      	ldr	r3, [pc, #200]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a31      	ldr	r2, [pc, #196]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
 80042d0:	e011      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042da:	d10c      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	2101      	movs	r1, #1
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f8c8 	bl	8004478 <RCCEx_PLLSAI1_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d028      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004302:	4b23      	ldr	r3, [pc, #140]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004308:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004310:	491f      	ldr	r1, [pc, #124]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004320:	d106      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004322:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4a1a      	ldr	r2, [pc, #104]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800432c:	60d3      	str	r3, [r2, #12]
 800432e:	e011      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004338:	d10c      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3304      	adds	r3, #4
 800433e:	2101      	movs	r1, #1
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f899 	bl	8004478 <RCCEx_PLLSAI1_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800434a:	7cfb      	ldrb	r3, [r7, #19]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02b      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004360:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436e:	4908      	ldr	r1, [pc, #32]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800437e:	d109      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004380:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a02      	ldr	r2, [pc, #8]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800438a:	60d3      	str	r3, [r2, #12]
 800438c:	e014      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004398:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f867 	bl	8004478 <RCCEx_PLLSAI1_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043d2:	4928      	ldr	r1, [pc, #160]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043e2:	d10d      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f844 	bl	8004478 <RCCEx_PLLSAI1_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d014      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	74bb      	strb	r3, [r7, #18]
 80043fe:	e011      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004408:	d10c      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3320      	adds	r3, #32
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f925 	bl	8004660 <RCCEx_PLLSAI2_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004430:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004436:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800443e:	490d      	ldr	r1, [pc, #52]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004452:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004458:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004462:	4904      	ldr	r1, [pc, #16]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800446a:	7cbb      	ldrb	r3, [r7, #18]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000

08004478 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004486:	4b75      	ldr	r3, [pc, #468]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004492:	4b72      	ldr	r3, [pc, #456]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0203 	and.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d10d      	bne.n	80044be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
       ||
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044aa:	4b6c      	ldr	r3, [pc, #432]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d047      	beq.n	800454e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	e044      	b.n	800454e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d018      	beq.n	80044fe <RCCEx_PLLSAI1_Config+0x86>
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d825      	bhi.n	800451c <RCCEx_PLLSAI1_Config+0xa4>
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d002      	beq.n	80044da <RCCEx_PLLSAI1_Config+0x62>
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d009      	beq.n	80044ec <RCCEx_PLLSAI1_Config+0x74>
 80044d8:	e020      	b.n	800451c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044da:	4b60      	ldr	r3, [pc, #384]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d11d      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ea:	e01a      	b.n	8004522 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044ec:	4b5b      	ldr	r3, [pc, #364]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d116      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fc:	e013      	b.n	8004526 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044fe:	4b57      	ldr	r3, [pc, #348]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800450a:	4b54      	ldr	r3, [pc, #336]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800451a:	e006      	b.n	800452a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      break;
 8004520:	e004      	b.n	800452c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004522:	bf00      	nop
 8004524:	e002      	b.n	800452c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452a:	bf00      	nop
    }

    if(status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004532:	4b4a      	ldr	r3, [pc, #296]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	430b      	orrs	r3, r1
 8004548:	4944      	ldr	r1, [pc, #272]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d17d      	bne.n	8004650 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004554:	4b41      	ldr	r3, [pc, #260]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a40      	ldr	r2, [pc, #256]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 800455a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800455e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004560:	f7fc f930 	bl	80007c4 <HAL_GetTick>
 8004564:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004566:	e009      	b.n	800457c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004568:	f7fc f92c 	bl	80007c4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d902      	bls.n	800457c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	73fb      	strb	r3, [r7, #15]
        break;
 800457a:	e005      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800457c:	4b37      	ldr	r3, [pc, #220]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ef      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d160      	bne.n	8004650 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d111      	bne.n	80045b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004594:	4b31      	ldr	r3, [pc, #196]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800459c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6892      	ldr	r2, [r2, #8]
 80045a4:	0211      	lsls	r1, r2, #8
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68d2      	ldr	r2, [r2, #12]
 80045aa:	0912      	lsrs	r2, r2, #4
 80045ac:	0452      	lsls	r2, r2, #17
 80045ae:	430a      	orrs	r2, r1
 80045b0:	492a      	ldr	r1, [pc, #168]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	610b      	str	r3, [r1, #16]
 80045b6:	e027      	b.n	8004608 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d112      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045be:	4b27      	ldr	r3, [pc, #156]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80045c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6892      	ldr	r2, [r2, #8]
 80045ce:	0211      	lsls	r1, r2, #8
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6912      	ldr	r2, [r2, #16]
 80045d4:	0852      	lsrs	r2, r2, #1
 80045d6:	3a01      	subs	r2, #1
 80045d8:	0552      	lsls	r2, r2, #21
 80045da:	430a      	orrs	r2, r1
 80045dc:	491f      	ldr	r1, [pc, #124]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	610b      	str	r3, [r1, #16]
 80045e2:	e011      	b.n	8004608 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e4:	4b1d      	ldr	r3, [pc, #116]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6892      	ldr	r2, [r2, #8]
 80045f4:	0211      	lsls	r1, r2, #8
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6952      	ldr	r2, [r2, #20]
 80045fa:	0852      	lsrs	r2, r2, #1
 80045fc:	3a01      	subs	r2, #1
 80045fe:	0652      	lsls	r2, r2, #25
 8004600:	430a      	orrs	r2, r1
 8004602:	4916      	ldr	r1, [pc, #88]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004608:	4b14      	ldr	r3, [pc, #80]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a13      	ldr	r2, [pc, #76]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004612:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fc f8d6 	bl	80007c4 <HAL_GetTick>
 8004618:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800461a:	e009      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800461c:	f7fc f8d2 	bl	80007c4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d902      	bls.n	8004630 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	73fb      	strb	r3, [r7, #15]
          break;
 800462e:	e005      	b.n	800463c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004630:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ef      	beq.n	800461c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004642:	4b06      	ldr	r3, [pc, #24]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	4904      	ldr	r1, [pc, #16]	@ (800465c <RCCEx_PLLSAI1_Config+0x1e4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000

08004660 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800466e:	4b6a      	ldr	r3, [pc, #424]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800467a:	4b67      	ldr	r3, [pc, #412]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0203 	and.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d10d      	bne.n	80046a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
       ||
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004692:	4b61      	ldr	r3, [pc, #388]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
       ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d047      	beq.n	8004736 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	e044      	b.n	8004736 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d018      	beq.n	80046e6 <RCCEx_PLLSAI2_Config+0x86>
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d825      	bhi.n	8004704 <RCCEx_PLLSAI2_Config+0xa4>
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d002      	beq.n	80046c2 <RCCEx_PLLSAI2_Config+0x62>
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d009      	beq.n	80046d4 <RCCEx_PLLSAI2_Config+0x74>
 80046c0:	e020      	b.n	8004704 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046c2:	4b55      	ldr	r3, [pc, #340]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11d      	bne.n	800470a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d2:	e01a      	b.n	800470a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046d4:	4b50      	ldr	r3, [pc, #320]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e4:	e013      	b.n	800470e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046f2:	4b49      	ldr	r3, [pc, #292]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004702:	e006      	b.n	8004712 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      break;
 8004708:	e004      	b.n	8004714 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800470a:	bf00      	nop
 800470c:	e002      	b.n	8004714 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004712:	bf00      	nop
    }

    if(status == HAL_OK)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10d      	bne.n	8004736 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800471a:	4b3f      	ldr	r3, [pc, #252]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	3b01      	subs	r3, #1
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	430b      	orrs	r3, r1
 8004730:	4939      	ldr	r1, [pc, #228]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d167      	bne.n	800480c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800473c:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a35      	ldr	r2, [pc, #212]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004748:	f7fc f83c 	bl	80007c4 <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004750:	f7fc f838 	bl	80007c4 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
        break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004764:	4b2c      	ldr	r3, [pc, #176]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1ef      	bne.n	8004750 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d14a      	bne.n	800480c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d111      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800477c:	4b26      	ldr	r3, [pc, #152]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6892      	ldr	r2, [r2, #8]
 800478c:	0211      	lsls	r1, r2, #8
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68d2      	ldr	r2, [r2, #12]
 8004792:	0912      	lsrs	r2, r2, #4
 8004794:	0452      	lsls	r2, r2, #17
 8004796:	430a      	orrs	r2, r1
 8004798:	491f      	ldr	r1, [pc, #124]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	614b      	str	r3, [r1, #20]
 800479e:	e011      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6892      	ldr	r2, [r2, #8]
 80047b0:	0211      	lsls	r1, r2, #8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6912      	ldr	r2, [r2, #16]
 80047b6:	0852      	lsrs	r2, r2, #1
 80047b8:	3a01      	subs	r2, #1
 80047ba:	0652      	lsls	r2, r2, #25
 80047bc:	430a      	orrs	r2, r1
 80047be:	4916      	ldr	r1, [pc, #88]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047c4:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a13      	ldr	r2, [pc, #76]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fb fff8 	bl	80007c4 <HAL_GetTick>
 80047d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047d6:	e009      	b.n	80047ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047d8:	f7fb fff4 	bl	80007c4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d902      	bls.n	80047ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	73fb      	strb	r3, [r7, #15]
          break;
 80047ea:	e005      	b.n	80047f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ef      	beq.n	80047d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4904      	ldr	r1, [pc, #16]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	4d0d      	ldr	r5, [pc, #52]	@ (8004864 <__libc_init_array+0x38>)
 8004830:	4c0d      	ldr	r4, [pc, #52]	@ (8004868 <__libc_init_array+0x3c>)
 8004832:	1b64      	subs	r4, r4, r5
 8004834:	10a4      	asrs	r4, r4, #2
 8004836:	2600      	movs	r6, #0
 8004838:	42a6      	cmp	r6, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	4d0b      	ldr	r5, [pc, #44]	@ (800486c <__libc_init_array+0x40>)
 800483e:	4c0c      	ldr	r4, [pc, #48]	@ (8004870 <__libc_init_array+0x44>)
 8004840:	f000 f818 	bl	8004874 <_init>
 8004844:	1b64      	subs	r4, r4, r5
 8004846:	10a4      	asrs	r4, r4, #2
 8004848:	2600      	movs	r6, #0
 800484a:	42a6      	cmp	r6, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	f855 3b04 	ldr.w	r3, [r5], #4
 8004854:	4798      	blx	r3
 8004856:	3601      	adds	r6, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	f855 3b04 	ldr.w	r3, [r5], #4
 800485e:	4798      	blx	r3
 8004860:	3601      	adds	r6, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	080048cc 	.word	0x080048cc
 8004868:	080048cc 	.word	0x080048cc
 800486c:	080048cc 	.word	0x080048cc
 8004870:	080048d0 	.word	0x080048d0

08004874 <_init>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr

08004880 <_fini>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr
