
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004880  08004880  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004880  08004880  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004880  08004880  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004880  08004880  00005880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004888  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  08004898  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004898  00006178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f6e  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc6  00000000  00000000  0000ffae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00011b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b8  00000000  00000000  000125a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d51  00000000  00000000  00012d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c66d  00000000  00000000  00037aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b5b  00000000  00000000  00044116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125c71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  00125cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00128534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004828 	.word	0x08004828

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004828 	.word	0x08004828

080001c8 <HAL_I2C_MasterTxCpltCallback>:
uint8_t Buffer_Dest[BUFFERSIZE];
uint8_t WHO_AM_I[1] = {0x75};


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	/*if(HAL_I2C_Master_Receive_DMA(&hI2C, MPU6050ADDR, Buffer_Dest,1) != HAL_OK)
		    	  		Error_Handler();
	while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY);
    while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);*/
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001da:	4770      	bx	lr

080001dc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2cHandle){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	/*if(HAL_I2C_Master_Transmit_DMA(&hI2C, MPU6050ADDR, WHO_AM_I, 1) != HAL_OK)
		    		  Error_Handler();
	while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY);
		  while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);*/
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr

080001f0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]

}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <main>:


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  HAL_Init();
 8000208:	f000 fa6b 	bl	80006e2 <HAL_Init>
  SystemClock_Config();
 800020c:	f000 f83e 	bl	800028c <SystemClock_Config>
  DMA_Init();
 8000210:	f000 f8c4 	bl	800039c <DMA_Init>
  I2C_Init();
 8000214:	f000 f880 	bl	8000318 <I2C_Init>
  while (1)
  {
	  if(HAL_I2C_Master_Transmit_DMA(&hI2C, MPU6050ADDR, WHO_AM_I, 1) != HAL_OK)
 8000218:	2301      	movs	r3, #1
 800021a:	4a19      	ldr	r2, [pc, #100]	@ (8000280 <main+0x7c>)
 800021c:	21d2      	movs	r1, #210	@ 0xd2
 800021e:	4819      	ldr	r0, [pc, #100]	@ (8000284 <main+0x80>)
 8000220:	f001 f872 	bl	8001308 <HAL_I2C_Master_Transmit_DMA>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <main+0x2a>
	    		  Error_Handler();
 800022a:	f000 f8dd 	bl	80003e8 <Error_Handler>
	  while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY);
 800022e:	bf00      	nop
 8000230:	4814      	ldr	r0, [pc, #80]	@ (8000284 <main+0x80>)
 8000232:	f001 fb2c 	bl	800188e <HAL_I2C_GetState>
 8000236:	4603      	mov	r3, r0
 8000238:	2b20      	cmp	r3, #32
 800023a:	d1f9      	bne.n	8000230 <main+0x2c>
	  while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);
 800023c:	bf00      	nop
 800023e:	4811      	ldr	r0, [pc, #68]	@ (8000284 <main+0x80>)
 8000240:	f001 fb33 	bl	80018aa <HAL_I2C_GetError>
 8000244:	4603      	mov	r3, r0
 8000246:	2b04      	cmp	r3, #4
 8000248:	d0f9      	beq.n	800023e <main+0x3a>
	  if(HAL_I2C_Master_Receive_DMA(&hI2C, MPU6050ADDR, Buffer_Dest,1) != HAL_OK)
 800024a:	2301      	movs	r3, #1
 800024c:	4a0e      	ldr	r2, [pc, #56]	@ (8000288 <main+0x84>)
 800024e:	21d2      	movs	r1, #210	@ 0xd2
 8000250:	480c      	ldr	r0, [pc, #48]	@ (8000284 <main+0x80>)
 8000252:	f001 f96d 	bl	8001530 <HAL_I2C_Master_Receive_DMA>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <main+0x5c>
	  		    	  		Error_Handler();
 800025c:	f000 f8c4 	bl	80003e8 <Error_Handler>
	  	while (HAL_I2C_GetState(&hI2C) != HAL_I2C_STATE_READY);
 8000260:	bf00      	nop
 8000262:	4808      	ldr	r0, [pc, #32]	@ (8000284 <main+0x80>)
 8000264:	f001 fb13 	bl	800188e <HAL_I2C_GetState>
 8000268:	4603      	mov	r3, r0
 800026a:	2b20      	cmp	r3, #32
 800026c:	d1f9      	bne.n	8000262 <main+0x5e>
	    while(HAL_I2C_GetError(&hI2C) == HAL_I2C_ERROR_AF);
 800026e:	bf00      	nop
 8000270:	4804      	ldr	r0, [pc, #16]	@ (8000284 <main+0x80>)
 8000272:	f001 fb1a 	bl	80018aa <HAL_I2C_GetError>
 8000276:	4603      	mov	r3, r0
 8000278:	2b04      	cmp	r3, #4
 800027a:	d0f9      	beq.n	8000270 <main+0x6c>
	  if(HAL_I2C_Master_Transmit_DMA(&hI2C, MPU6050ADDR, WHO_AM_I, 1) != HAL_OK)
 800027c:	e7cc      	b.n	8000218 <main+0x14>
 800027e:	bf00      	nop
 8000280:	20000000 	.word	0x20000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	20000110 	.word	0x20000110

0800028c <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b096      	sub	sp, #88	@ 0x58
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	2244      	movs	r2, #68	@ 0x44
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f004 fa98 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002b2:	f002 ffb3 	bl	800321c <HAL_PWREx_ControlVoltageScaling>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002bc:	f000 f894 	bl	80003e8 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c0:	2310      	movs	r3, #16
 80002c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002cc:	2360      	movs	r3, #96	@ 0x60
 80002ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fff5 	bl	80032c8 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002e4:	f000 f880 	bl	80003e8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ec:	2300      	movs	r3, #0
 80002ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	463b      	mov	r3, r7
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f003 fbbd 	bl	8003a80 <HAL_RCC_ClockConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800030c:	f000 f86c 	bl	80003e8 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3758      	adds	r7, #88	@ 0x58
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <I2C_Init>:


//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 800031c:	4b1c      	ldr	r3, [pc, #112]	@ (8000390 <I2C_Init+0x78>)
 800031e:	4a1d      	ldr	r2, [pc, #116]	@ (8000394 <I2C_Init+0x7c>)
 8000320:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 8000322:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <I2C_Init+0x78>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000328:	4b19      	ldr	r3, [pc, #100]	@ (8000390 <I2C_Init+0x78>)
 800032a:	2200      	movs	r2, #0
 800032c:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032e:	4b18      	ldr	r3, [pc, #96]	@ (8000390 <I2C_Init+0x78>)
 8000330:	2201      	movs	r2, #1
 8000332:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000334:	4b16      	ldr	r3, [pc, #88]	@ (8000390 <I2C_Init+0x78>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 800033a:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <I2C_Init+0x78>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000340:	4b13      	ldr	r3, [pc, #76]	@ (8000390 <I2C_Init+0x78>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000346:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <I2C_Init+0x78>)
 8000348:	2200      	movs	r2, #0
 800034a:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034c:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <I2C_Init+0x78>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <I2C_Init+0x78>)
 8000354:	4a10      	ldr	r2, [pc, #64]	@ (8000398 <I2C_Init+0x80>)
 8000356:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <I2C_Init+0x78>)
 800035a:	f000 ff39 	bl	80011d0 <HAL_I2C_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <I2C_Init+0x50>
	{
		Error_Handler();
 8000364:	f000 f840 	bl	80003e8 <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000368:	2100      	movs	r1, #0
 800036a:	4809      	ldr	r0, [pc, #36]	@ (8000390 <I2C_Init+0x78>)
 800036c:	f002 feb0 	bl	80030d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <I2C_Init+0x62>
	{
		Error_Handler();
 8000376:	f000 f837 	bl	80003e8 <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 800037a:	2100      	movs	r1, #0
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <I2C_Init+0x78>)
 800037e:	f002 fef2 	bl	8003166 <HAL_I2CEx_ConfigDigitalFilter>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <I2C_Init+0x74>
    {
    	Error_Handler();
 8000388:	f000 f82e 	bl	80003e8 <Error_Handler>
    }
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000002c 	.word	0x2000002c
 8000394:	40005400 	.word	0x40005400
 8000398:	00100d14 	.word	0x00100d14

0800039c <DMA_Init>:

void DMA_Init(void){
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <DMA_Init+0x48>)
 80003a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003a6:	4a0f      	ldr	r2, [pc, #60]	@ (80003e4 <DMA_Init+0x48>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80003ae:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <DMA_Init+0x48>)
 80003b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	2010      	movs	r0, #16
 80003c0:	f000 fadf 	bl	8000982 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003c4:	2010      	movs	r0, #16
 80003c6:	f000 faf8 	bl	80009ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2011      	movs	r0, #17
 80003d0:	f000 fad7 	bl	8000982 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003d4:	2011      	movs	r0, #17
 80003d6:	f000 faf0 	bl	80009ba <HAL_NVIC_EnableIRQ>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
  }*/
}


void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  __disable_irq();
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <HAL_MspInit+0x44>)
 80003fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000438 <HAL_MspInit+0x44>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6613      	str	r3, [r2, #96]	@ 0x60
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <HAL_MspInit+0x44>)
 8000408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <HAL_MspInit+0x44>)
 8000414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000416:	4a08      	ldr	r2, [pc, #32]	@ (8000438 <HAL_MspInit+0x44>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800041c:	6593      	str	r3, [r2, #88]	@ 0x58
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <HAL_MspInit+0x44>)
 8000420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 800043c:	b580      	push	{r7, lr}
 800043e:	b0ac      	sub	sp, #176	@ 0xb0
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000444:	4b57      	ldr	r3, [pc, #348]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 8000446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000448:	4a56      	ldr	r2, [pc, #344]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800044e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000450:	4b54      	ldr	r3, [pc, #336]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 8000452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000458:	613b      	str	r3, [r7, #16]
 800045a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	4b51      	ldr	r3, [pc, #324]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 800045e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000460:	4a50      	ldr	r2, [pc, #320]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000468:	4b4e      	ldr	r3, [pc, #312]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 800046a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046c:	f003 0302 	and.w	r3, r3, #2
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000478:	2288      	movs	r2, #136	@ 0x88
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f004 f9a7 	bl	80047d0 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000482:	2340      	movs	r3, #64	@ 0x40
 8000484:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000486:	2300      	movs	r3, #0
 8000488:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800048e:	4618      	mov	r0, r3
 8000490:	f003 fce2 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 800049a:	f7ff ffa5 	bl	80003e8 <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800049e:	23c0      	movs	r3, #192	@ 0xc0
 80004a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004a2:	2312      	movs	r3, #18
 80004a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80004aa:	2302      	movs	r3, #2
 80004ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004ae:	2304      	movs	r3, #4
 80004b0:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 80004b2:	4b3c      	ldr	r3, [pc, #240]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b6:	4a3b      	ldr	r2, [pc, #236]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004be:	4b39      	ldr	r3, [pc, #228]	@ (80005a4 <HAL_I2C_MspInit+0x168>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	f003 0302 	and.w	r3, r3, #2
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	4619      	mov	r1, r3
 80004d0:	4835      	ldr	r0, [pc, #212]	@ (80005a8 <HAL_I2C_MspInit+0x16c>)
 80004d2:	f000 fcd3 	bl	8000e7c <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 80004d6:	4b35      	ldr	r3, [pc, #212]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 80004d8:	4a35      	ldr	r2, [pc, #212]	@ (80005b0 <HAL_I2C_MspInit+0x174>)
 80004da:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80004dc:	4b33      	ldr	r3, [pc, #204]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 80004de:	2203      	movs	r2, #3
 80004e0:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004e2:	4b32      	ldr	r3, [pc, #200]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 80004e4:	2210      	movs	r2, #16
 80004e6:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e8:	4b30      	ldr	r3, [pc, #192]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004ee:	4b2f      	ldr	r3, [pc, #188]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004f4:	4b2d      	ldr	r3, [pc, #180]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004fa:	4b2c      	ldr	r3, [pc, #176]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000500:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000506:	4b29      	ldr	r3, [pc, #164]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 8000508:	2200      	movs	r2, #0
 800050a:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 800050c:	4827      	ldr	r0, [pc, #156]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 800050e:	f000 fa6f 	bl	80009f0 <HAL_DMA_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000518:	f7ff ff66 	bl	80003e8 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a23      	ldr	r2, [pc, #140]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 8000520:	639a      	str	r2, [r3, #56]	@ 0x38
 8000522:	4a22      	ldr	r2, [pc, #136]	@ (80005ac <HAL_I2C_MspInit+0x170>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000528:	4b22      	ldr	r3, [pc, #136]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 800052a:	4a23      	ldr	r2, [pc, #140]	@ (80005b8 <HAL_I2C_MspInit+0x17c>)
 800052c:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800052e:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000530:	2203      	movs	r2, #3
 8000532:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000534:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800053a:	4b1e      	ldr	r3, [pc, #120]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000540:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000546:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800054c:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000552:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000554:	2200      	movs	r2, #0
 8000556:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000558:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 800055a:	2200      	movs	r2, #0
 800055c:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 800055e:	4815      	ldr	r0, [pc, #84]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000560:	f000 fa46 	bl	80009f0 <HAL_DMA_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_I2C_MspInit+0x132>
		Error_Handler();
 800056a:	f7ff ff3d 	bl	80003e8 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a10      	ldr	r2, [pc, #64]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000572:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000574:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <HAL_I2C_MspInit+0x178>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	201f      	movs	r0, #31
 8000580:	f000 f9ff 	bl	8000982 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000584:	201f      	movs	r0, #31
 8000586:	f000 fa18 	bl	80009ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	2020      	movs	r0, #32
 8000590:	f000 f9f7 	bl	8000982 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000594:	2020      	movs	r0, #32
 8000596:	f000 fa10 	bl	80009ba <HAL_NVIC_EnableIRQ>
}
 800059a:	bf00      	nop
 800059c:	37b0      	adds	r7, #176	@ 0xb0
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48000400 	.word	0x48000400
 80005ac:	20000080 	.word	0x20000080
 80005b0:	4002006c 	.word	0x4002006c
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	40020080 	.word	0x40020080

080005bc <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
   while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <NMI_Handler+0x4>

080005c4 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <SysTick_Handler>:


void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000612:	f000 f8bb 	bl	800078c <HAL_IncTick>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000620:	4802      	ldr	r0, [pc, #8]	@ (800062c <DMA1_Channel6_IRQHandler+0x10>)
 8000622:	f000 fb3e 	bl	8000ca2 <HAL_DMA_IRQHandler>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000080 	.word	0x20000080

08000630 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000634:	4802      	ldr	r0, [pc, #8]	@ (8000640 <DMA1_Channel7_IRQHandler+0x10>)
 8000636:	f000 fb34 	bl	8000ca2 <HAL_DMA_IRQHandler>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000c8 	.word	0x200000c8

08000644 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 8000648:	4802      	ldr	r0, [pc, #8]	@ (8000654 <I2C1_EV_IRQHandler+0x10>)
 800064a:	f001 f861 	bl	8001710 <HAL_I2C_EV_IRQHandler>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c

08000658 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 800065c:	4802      	ldr	r0, [pc, #8]	@ (8000668 <I2C1_ER_IRQHandler+0x10>)
 800065e:	f001 f871 	bl	8001744 <HAL_I2C_ER_IRQHandler>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000002c 	.word	0x2000002c

0800066c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <SystemInit+0x20>)
 8000672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000676:	4a05      	ldr	r2, [pc, #20]	@ (800068c <SystemInit+0x20>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800067c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000694:	f7ff ffea 	bl	800066c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	@ (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	@ (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f004 f88f 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c2:	f7ff fd9f 	bl	8000204 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006d4:	08004888 	.word	0x08004888
  ldr r2, =_sbss
 80006d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006dc:	20000178 	.word	0x20000178

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>

080006e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f93d 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f2:	200f      	movs	r0, #15
 80006f4:	f000 f80e 	bl	8000714 <HAL_InitTick>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	e001      	b.n	8000708 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000704:	f7ff fe76 	bl	80003f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000708:	79fb      	ldrb	r3, [r7, #7]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <HAL_InitTick+0x6c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d023      	beq.n	8000770 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <HAL_InitTick+0x70>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <HAL_InitTick+0x6c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f949 	bl	80009d6 <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10f      	bne.n	800076a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d809      	bhi.n	8000764 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f913 	bl	8000982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800075c:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <HAL_InitTick+0x74>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e007      	b.n	8000774 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e004      	b.n	8000774 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000000c 	.word	0x2000000c
 8000784:	20000004 	.word	0x20000004
 8000788:	20000008 	.word	0x20000008

0800078c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_IncTick+0x20>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <HAL_IncTick+0x24>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <HAL_IncTick+0x24>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000000c 	.word	0x2000000c
 80007b0:	20000174 	.word	0x20000174

080007b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b03      	ldr	r3, [pc, #12]	@ (80007c8 <HAL_GetTick+0x14>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000174 	.word	0x20000174

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	@ (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db0b      	blt.n	800085a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 021f 	and.w	r2, r3, #31
 8000848:	4907      	ldr	r1, [pc, #28]	@ (8000868 <__NVIC_EnableIRQ+0x38>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	@ (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	@ (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	@ 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f7ff ff8e 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff29 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff3e 	bl	8000814 <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff8e 	bl	80008c0 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5d 	bl	800086c <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff31 	bl	8000830 <__NVIC_EnableIRQ>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffa2 	bl	8000928 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e098      	b.n	8000b34 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b4d      	ldr	r3, [pc, #308]	@ (8000b40 <HAL_DMA_Init+0x150>)
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d80f      	bhi.n	8000a2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b4b      	ldr	r3, [pc, #300]	@ (8000b44 <HAL_DMA_Init+0x154>)
 8000a16:	4413      	add	r3, r2
 8000a18:	4a4b      	ldr	r2, [pc, #300]	@ (8000b48 <HAL_DMA_Init+0x158>)
 8000a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1e:	091b      	lsrs	r3, r3, #4
 8000a20:	009a      	lsls	r2, r3, #2
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a48      	ldr	r2, [pc, #288]	@ (8000b4c <HAL_DMA_Init+0x15c>)
 8000a2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a2c:	e00e      	b.n	8000a4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b46      	ldr	r3, [pc, #280]	@ (8000b50 <HAL_DMA_Init+0x160>)
 8000a36:	4413      	add	r3, r2
 8000a38:	4a43      	ldr	r2, [pc, #268]	@ (8000b48 <HAL_DMA_Init+0x158>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	009a      	lsls	r2, r3, #2
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a42      	ldr	r2, [pc, #264]	@ (8000b54 <HAL_DMA_Init+0x164>)
 8000a4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2202      	movs	r2, #2
 8000a50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000aa6:	d039      	beq.n	8000b1c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	4a27      	ldr	r2, [pc, #156]	@ (8000b4c <HAL_DMA_Init+0x15c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d11a      	bne.n	8000ae8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <HAL_DMA_Init+0x168>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f003 031c 	and.w	r3, r3, #28
 8000abe:	210f      	movs	r1, #15
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4924      	ldr	r1, [pc, #144]	@ (8000b58 <HAL_DMA_Init+0x168>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <HAL_DMA_Init+0x168>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6859      	ldr	r1, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad8:	f003 031c 	and.w	r3, r3, #28
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	491d      	ldr	r1, [pc, #116]	@ (8000b58 <HAL_DMA_Init+0x168>)
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]
 8000ae6:	e019      	b.n	8000b1c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_DMA_Init+0x16c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af0:	f003 031c 	and.w	r3, r3, #28
 8000af4:	210f      	movs	r1, #15
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4917      	ldr	r1, [pc, #92]	@ (8000b5c <HAL_DMA_Init+0x16c>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_DMA_Init+0x16c>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6859      	ldr	r1, [r3, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f003 031c 	and.w	r3, r3, #28
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	4911      	ldr	r1, [pc, #68]	@ (8000b5c <HAL_DMA_Init+0x16c>)
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40020407 	.word	0x40020407
 8000b44:	bffdfff8 	.word	0xbffdfff8
 8000b48:	cccccccd 	.word	0xcccccccd
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	bffdfbf8 	.word	0xbffdfbf8
 8000b54:	40020400 	.word	0x40020400
 8000b58:	400200a8 	.word	0x400200a8
 8000b5c:	400204a8 	.word	0x400204a8

08000b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d101      	bne.n	8000b80 <HAL_DMA_Start_IT+0x20>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e04b      	b.n	8000c18 <HAL_DMA_Start_IT+0xb8>
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d13a      	bne.n	8000c0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2202      	movs	r2, #2
 8000b98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0201 	bic.w	r2, r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f92f 	bl	8000e1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d008      	beq.n	8000bd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 020e 	orr.w	r2, r2, #14
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e00f      	b.n	8000bf8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 0204 	bic.w	r2, r2, #4
 8000be6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 020a 	orr.w	r2, r2, #10
 8000bf6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0201 	orr.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e005      	b.n	8000c16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c12:	2302      	movs	r3, #2
 8000c14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d005      	beq.n	8000c44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e029      	b.n	8000c98 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 020e 	bic.w	r2, r2, #14
 8000c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0201 	bic.w	r2, r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c68:	f003 021c 	and.w	r2, r3, #28
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	2101      	movs	r1, #1
 8000c72:	fa01 f202 	lsl.w	r2, r1, r2
 8000c76:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
    }
  }
  return status;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f003 031c 	and.w	r3, r3, #28
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d026      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x7a>
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d021      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d107      	bne.n	8000cf6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0204 	bic.w	r2, r2, #4
 8000cf4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f003 021c 	and.w	r2, r3, #28
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	2104      	movs	r1, #4
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d071      	beq.n	8000df6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d1a:	e06c      	b.n	8000df6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d20:	f003 031c 	and.w	r3, r3, #28
 8000d24:	2202      	movs	r2, #2
 8000d26:	409a      	lsls	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d02e      	beq.n	8000d8e <HAL_DMA_IRQHandler+0xec>
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d029      	beq.n	8000d8e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10b      	bne.n	8000d60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 020a 	bic.w	r2, r2, #10
 8000d56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d64:	f003 021c 	and.w	r2, r3, #28
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d038      	beq.n	8000df6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d8c:	e033      	b.n	8000df6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	f003 031c 	and.w	r3, r3, #28
 8000d96:	2208      	movs	r2, #8
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d02a      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x156>
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d025      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 020e 	bic.w	r2, r2, #14
 8000dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc0:	f003 021c 	and.w	r2, r3, #28
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fa01 f202 	lsl.w	r2, r1, r2
 8000dce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
}
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e0e:	b2db      	uxtb	r3, r3
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f003 021c 	and.w	r2, r3, #28
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	2101      	movs	r1, #1
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b10      	cmp	r3, #16
 8000e4c:	d108      	bne.n	8000e60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e5e:	e007      	b.n	8000e70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e17f      	b.n	800118c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8171 	beq.w	8001186 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d005      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 0201 	and.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d118      	bne.n	8000f5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f30:	2201      	movs	r2, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	f003 0201 	and.w	r2, r3, #1
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d017      	beq.n	8000f98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	6939      	ldr	r1, [r7, #16]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80ac 	beq.w	8001186 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b5f      	ldr	r3, [pc, #380]	@ (80011ac <HAL_GPIO_Init+0x330>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001032:	4a5e      	ldr	r2, [pc, #376]	@ (80011ac <HAL_GPIO_Init+0x330>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6613      	str	r3, [r2, #96]	@ 0x60
 800103a:	4b5c      	ldr	r3, [pc, #368]	@ (80011ac <HAL_GPIO_Init+0x330>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001046:	4a5a      	ldr	r2, [pc, #360]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x242>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	@ (80011b4 <HAL_GPIO_Init+0x338>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x23e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	@ (80011b8 <HAL_GPIO_Init+0x33c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x23a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	@ (80011bc <HAL_GPIO_Init+0x340>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x236>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	@ (80011c0 <HAL_GPIO_Init+0x344>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x232>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	@ (80011c4 <HAL_GPIO_Init+0x348>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x22e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	@ (80011c8 <HAL_GPIO_Init+0x34c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x22a>
 80010a2:	2306      	movs	r3, #6
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010be:	2300      	movs	r3, #0
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d0:	4937      	ldr	r1, [pc, #220]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010de:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <HAL_GPIO_Init+0x350>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <HAL_GPIO_Init+0x350>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <HAL_GPIO_Init+0x350>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	@ (80011cc <HAL_GPIO_Init+0x350>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <HAL_GPIO_Init+0x350>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	@ (80011cc <HAL_GPIO_Init+0x350>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_GPIO_Init+0x350>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <HAL_GPIO_Init+0x350>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae78 	bne.w	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	48001000 	.word	0x48001000
 80011c4:	48001400 	.word	0x48001400
 80011c8:	48001800 	.word	0x48001800
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e08d      	b.n	80012fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d106      	bne.n	80011fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff f920 	bl	800043c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2224      	movs	r2, #36	@ 0x24
 8001200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001220:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001230:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d107      	bne.n	800124a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	e006      	b.n	8001258 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001256:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d108      	bne.n	8001272 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	e007      	b.n	8001282 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001294:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69d9      	ldr	r1, [r3, #28]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0201 	orr.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2220      	movs	r2, #32
 80012ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af02      	add	r7, sp, #8
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	817b      	strh	r3, [r7, #10]
 8001318:	4613      	mov	r3, r2
 800131a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b20      	cmp	r3, #32
 800132a:	f040 80ef 	bne.w	800150c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800133e:	2302      	movs	r3, #2
 8001340:	e0e5      	b.n	800150e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_I2C_Master_Transmit_DMA+0x48>
 800134c:	2302      	movs	r3, #2
 800134e:	e0de      	b.n	800150e <HAL_I2C_Master_Transmit_DMA+0x206>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2221      	movs	r2, #33	@ 0x21
 800135c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2210      	movs	r2, #16
 8001364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	893a      	ldrh	r2, [r7, #8]
 8001378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a66      	ldr	r2, [pc, #408]	@ (8001518 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4a66      	ldr	r2, [pc, #408]	@ (800151c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8001384:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800138a:	b29b      	uxth	r3, r3
 800138c:	2bff      	cmp	r3, #255	@ 0xff
 800138e:	d906      	bls.n	800139e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	22ff      	movs	r2, #255	@ 0xff
 8001394:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	e007      	b.n	80013ae <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013ac:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d01a      	beq.n	80013ec <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3b01      	subs	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d074      	beq.n	80014de <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d022      	beq.n	8001442 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001400:	4a47      	ldr	r2, [pc, #284]	@ (8001520 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001408:	4a46      	ldr	r2, [pc, #280]	@ (8001524 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800140a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001418:	2200      	movs	r2, #0
 800141a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800142c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001432:	f7ff fb95 	bl	8000b60 <HAL_DMA_Start_IT>
 8001436:	4603      	mov	r3, r0
 8001438:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d13a      	bne.n	80014b6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8001440:	e013      	b.n	800146a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e051      	b.n	800150e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	8979      	ldrh	r1, [r7, #10]
 8001476:	4b2c      	ldr	r3, [pc, #176]	@ (8001528 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f001 fd13 	bl	8002ea8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001486:	b29a      	uxth	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800149c:	2110      	movs	r1, #16
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f001 fd34 	bl	8002f0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e028      	b.n	8001508 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2220      	movs	r2, #32
 80014ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e017      	b.n	800150e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4a12      	ldr	r2, [pc, #72]	@ (800152c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	8979      	ldrh	r1, [r7, #10]
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f001 fcd8 	bl	8002ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001500:	2101      	movs	r1, #1
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f001 fd02 	bl	8002f0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	e000      	b.n	800150e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800150c:	2302      	movs	r3, #2
  }
}
 800150e:	4618      	mov	r0, r3
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	ffff0000 	.word	0xffff0000
 800151c:	08001d1f 	.word	0x08001d1f
 8001520:	08002cf7 	.word	0x08002cf7
 8001524:	08002e3f 	.word	0x08002e3f
 8001528:	80002000 	.word	0x80002000
 800152c:	080018c3 	.word	0x080018c3

08001530 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	460b      	mov	r3, r1
 800153e:	817b      	strh	r3, [r7, #10]
 8001540:	4613      	mov	r3, r2
 8001542:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b20      	cmp	r3, #32
 800154e:	f040 80cd 	bne.w	80016ec <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800155c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001560:	d101      	bne.n	8001566 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8001562:	2302      	movs	r3, #2
 8001564:	e0c3      	b.n	80016ee <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_I2C_Master_Receive_DMA+0x44>
 8001570:	2302      	movs	r3, #2
 8001572:	e0bc      	b.n	80016ee <HAL_I2C_Master_Receive_DMA+0x1be>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2222      	movs	r2, #34	@ 0x22
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2210      	movs	r2, #16
 8001588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	893a      	ldrh	r2, [r7, #8]
 800159c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a55      	ldr	r2, [pc, #340]	@ (80016f8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80015a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4a55      	ldr	r2, [pc, #340]	@ (80016fc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80015a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2bff      	cmp	r3, #255	@ 0xff
 80015b2:	d906      	bls.n	80015c2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80015ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e007      	b.n	80015d2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d070      	beq.n	80016bc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d020      	beq.n	8001624 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e6:	4a46      	ldr	r2, [pc, #280]	@ (8001700 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80015e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ee:	4a45      	ldr	r2, [pc, #276]	@ (8001704 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f6:	2200      	movs	r2, #0
 80015f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fe:	2200      	movs	r2, #0
 8001600:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3324      	adds	r3, #36	@ 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001614:	f7ff faa4 	bl	8000b60 <HAL_DMA_Start_IT>
 8001618:	4603      	mov	r3, r0
 800161a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800161c:	7cfb      	ldrb	r3, [r7, #19]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d138      	bne.n	8001694 <HAL_I2C_Master_Receive_DMA+0x164>
 8001622:	e013      	b.n	800164c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2220      	movs	r2, #32
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001638:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e050      	b.n	80016ee <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001650:	b2da      	uxtb	r2, r3
 8001652:	8979      	ldrh	r1, [r7, #10]
 8001654:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f001 fc24 	bl	8002ea8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800167a:	2110      	movs	r1, #16
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 fc45 	bl	8002f0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e029      	b.n	80016e8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e018      	b.n	80016ee <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a13      	ldr	r2, [pc, #76]	@ (800170c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80016c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	8979      	ldrh	r1, [r7, #10]
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f001 fbe8 	bl	8002ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016e0:	2102      	movs	r1, #2
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f001 fc12 	bl	8002f0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	e000      	b.n	80016ee <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80016ec:	2302      	movs	r3, #2
  }
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	ffff0000 	.word	0xffff0000
 80016fc:	08001d1f 	.word	0x08001d1f
 8001700:	08002d8d 	.word	0x08002d8d
 8001704:	08002e3f 	.word	0x08002e3f
 8001708:	80002400 	.word	0x80002400
 800170c:	080018c3 	.word	0x080018c3

08001710 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
  }
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00f      	beq.n	8001786 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00a      	beq.n	8001786 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001784:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00f      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f043 0208 	orr.w	r2, r3, #8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00f      	beq.n	80017da <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00a      	beq.n	80017da <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 030b 	and.w	r3, r3, #11
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f001 f947 	bl	8002a80 <I2C_ITError>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	70fb      	strb	r3, [r7, #3]
 800182e:	4613      	mov	r3, r2
 8001830:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800189c:	b2db      	uxtb	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b088      	sub	sp, #32
 80018c6:	af02      	add	r7, sp, #8
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <I2C_Master_ISR_IT+0x1e>
 80018dc:	2302      	movs	r3, #2
 80018de:	e121      	b.n	8001b24 <I2C_Master_ISR_IT+0x262>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d012      	beq.n	8001918 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00d      	beq.n	8001918 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2210      	movs	r2, #16
 8001902:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f043 0204 	orr.w	r2, r3, #4
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f001 f9cc 	bl	8002cae <I2C_Flush_TXDR>
 8001916:	e0f2      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	d022      	beq.n	8001968 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01d      	beq.n	8001968 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f023 0304 	bic.w	r3, r3, #4
 8001932:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001966:	e0ca      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d128      	bne.n	80019c4 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001978:	2b00      	cmp	r3, #0
 800197a:	d023      	beq.n	80019c4 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01e      	beq.n	80019c4 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80b6 	beq.w	8001afe <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80019c2:	e09c      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d06a      	beq.n	8001aa4 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d065      	beq.n	8001aa4 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d04e      	beq.n	8001a80 <I2C_Master_ISR_IT+0x1be>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d14a      	bne.n	8001a80 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d91c      	bls.n	8001a3c <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d103      	bne.n	8001a1e <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001a1c:	e002      	b.n	8001a24 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	22ff      	movs	r2, #255	@ 0xff
 8001a22:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	8a79      	ldrh	r1, [r7, #18]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f001 fa37 	bl	8002ea8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a3a:	e032      	b.n	8001aa2 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a4e:	d00b      	beq.n	8001a68 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a5a:	8a79      	ldrh	r1, [r7, #18]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	9000      	str	r0, [sp, #0]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f001 fa21 	bl	8002ea8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a66:	e01c      	b.n	8001aa2 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	8a79      	ldrh	r1, [r7, #18]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f001 fa15 	bl	8002ea8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7e:	e010      	b.n	8001aa2 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a8e:	d003      	beq.n	8001a98 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fcdc 	bl	800244e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a96:	e032      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a98:	2140      	movs	r1, #64	@ 0x40
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fff0 	bl	8002a80 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aa0:	e02d      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
 8001aa2:	e02c      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d027      	beq.n	8001afe <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d022      	beq.n	8001afe <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d119      	bne.n	8001af6 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ad0:	d015      	beq.n	8001afe <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ada:	d108      	bne.n	8001aee <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	e007      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fcad 	bl	800244e <I2C_ITMasterSeqCplt>
 8001af4:	e003      	b.n	8001afe <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 ffc1 	bl	8002a80 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001b12:	6979      	ldr	r1, [r7, #20]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fd33 	bl	8002580 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <I2C_Slave_ISR_IT+0x24>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0e2      	b.n	8001d16 <I2C_Slave_ISR_IT+0x1ea>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fdce 	bl	8002710 <I2C_ITSlaveCplt>
 8001b74:	e0ca      	b.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d04b      	beq.n	8001c18 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d046      	beq.n	8001c18 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d128      	bne.n	8001be6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b28      	cmp	r3, #40	@ 0x28
 8001b9e:	d108      	bne.n	8001bb2 <I2C_Slave_ISR_IT+0x86>
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ba6:	d104      	bne.n	8001bb2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 ff14 	bl	80029d8 <I2C_ITListenCplt>
 8001bb0:	e031      	b.n	8001c16 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b29      	cmp	r3, #41	@ 0x29
 8001bbc:	d10e      	bne.n	8001bdc <I2C_Slave_ISR_IT+0xb0>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bc4:	d00a      	beq.n	8001bdc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f001 f86d 	bl	8002cae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fc77 	bl	80024c8 <I2C_ITSlaveSeqCplt>
 8001bda:	e01c      	b.n	8001c16 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2210      	movs	r2, #16
 8001be2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001be4:	e08f      	b.n	8001d06 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2210      	movs	r2, #16
 8001bec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f043 0204 	orr.w	r2, r3, #4
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <I2C_Slave_ISR_IT+0xdc>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c06:	d17e      	bne.n	8001d06 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 ff36 	bl	8002a80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c14:	e077      	b.n	8001d06 <I2C_Slave_ISR_IT+0x1da>
 8001c16:	e076      	b.n	8001d06 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02f      	beq.n	8001c82 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02a      	beq.n	8001c82 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d018      	beq.n	8001c68 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d14b      	bne.n	8001d0a <I2C_Slave_ISR_IT+0x1de>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c78:	d047      	beq.n	8001d0a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fc24 	bl	80024c8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001c80:	e043      	b.n	8001d0a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001c96:	6939      	ldr	r1, [r7, #16]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 fb54 	bl	8002346 <I2C_ITAddrCplt>
 8001c9e:	e035      	b.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d030      	beq.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d02b      	beq.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d018      	beq.n	8001cf0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001cee:	e00d      	b.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf6:	d002      	beq.n	8001cfe <I2C_Slave_ISR_IT+0x1d2>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fbe2 	bl	80024c8 <I2C_ITSlaveSeqCplt>
 8001d04:	e002      	b.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001d06:	bf00      	nop
 8001d08:	e000      	b.n	8001d0c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001d0a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b088      	sub	sp, #32
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <I2C_Master_ISR_DMA+0x1a>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e0e7      	b.n	8001f08 <I2C_Master_ISR_DMA+0x1ea>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d011      	beq.n	8001d78 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2210      	movs	r2, #16
 8001d5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	f043 0204 	orr.w	r2, r3, #4
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d68:	2120      	movs	r1, #32
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f001 f8ce 	bl	8002f0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 ff9c 	bl	8002cae <I2C_Flush_TXDR>
 8001d76:	e0c2      	b.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d07f      	beq.n	8001e82 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d07a      	beq.n	8001e82 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d9a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d05c      	beq.n	8001e60 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2bff      	cmp	r3, #255	@ 0xff
 8001dbc:	d914      	bls.n	8001de8 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d103      	bne.n	8001dda <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001dd8:	e002      	b.n	8001de0 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	22ff      	movs	r2, #255	@ 0xff
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001de0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e010      	b.n	8001e0a <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001dfa:	d003      	beq.n	8001e04 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e002      	b.n	8001e0a <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001e04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e08:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	8a79      	ldrh	r1, [r7, #18]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f001 f845 	bl	8002ea8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b22      	cmp	r3, #34	@ 0x22
 8001e3a:	d108      	bne.n	8001e4e <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e4c:	e057      	b.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e5e:	e04e      	b.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e6e:	d003      	beq.n	8001e78 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 faec 	bl	800244e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001e76:	e042      	b.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e78:	2140      	movs	r1, #64	@ 0x40
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fe00 	bl	8002a80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001e80:	e03d      	b.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d028      	beq.n	8001ede <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d023      	beq.n	8001ede <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d119      	bne.n	8001ed4 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eae:	d025      	beq.n	8001efc <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001eb8:	d108      	bne.n	8001ecc <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ec8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001eca:	e017      	b.n	8001efc <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fabe 	bl	800244e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001ed2:	e013      	b.n	8001efc <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ed4:	2140      	movs	r1, #64	@ 0x40
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fdd2 	bl	8002a80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001edc:	e00e      	b.n	8001efc <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fb43 	bl	8002580 <I2C_ITMasterCplt>
 8001efa:	e000      	b.n	8001efe <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001efc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001f1c:	4b90      	ldr	r3, [pc, #576]	@ (8002160 <I2C_Mem_ISR_DMA+0x250>)
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <I2C_Mem_ISR_DMA+0x1e>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e12f      	b.n	800218e <I2C_Mem_ISR_DMA+0x27e>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d011      	beq.n	8001f6e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2210      	movs	r2, #16
 8001f50:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f043 0204 	orr.w	r2, r3, #4
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f5e:	2120      	movs	r1, #32
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 ffd3 	bl	8002f0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fea1 	bl	8002cae <I2C_Flush_TXDR>
 8001f6c:	e10a      	b.n	8002184 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f92:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f94:	e0f6      	b.n	8002184 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d06d      	beq.n	800207c <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d068      	beq.n	800207c <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001faa:	2101      	movs	r1, #1
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f001 f831 	bl	8003014 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 ffa9 	bl	8002f0c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d056      	beq.n	8002072 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2bff      	cmp	r3, #255	@ 0xff
 8001fcc:	d91e      	bls.n	800200c <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d103      	bne.n	8001fea <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001fe8:	e002      	b.n	8001ff0 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	22ff      	movs	r2, #255	@ 0xff
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 ff4f 	bl	8002ea8 <I2C_TransferConfig>
 800200a:	e011      	b.n	8002030 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	b299      	uxth	r1, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 ff3c 	bl	8002ea8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b22      	cmp	r3, #34	@ 0x22
 800204c:	d108      	bne.n	8002060 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800205c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800205e:	e091      	b.n	8002184 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800206e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002070:	e088      	b.n	8002184 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002072:	2140      	movs	r1, #64	@ 0x40
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fd03 	bl	8002a80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800207a:	e083      	b.n	8002184 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d070      	beq.n	8002168 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800208c:	2b00      	cmp	r3, #0
 800208e:	d06b      	beq.n	8002168 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002090:	2101      	movs	r1, #1
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 ffbe 	bl	8003014 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002098:	2110      	movs	r1, #16
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 ff36 	bl	8002f0c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b22      	cmp	r3, #34	@ 0x22
 80020aa:	d101      	bne.n	80020b0 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 80020ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <I2C_Mem_ISR_DMA+0x254>)
 80020ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2bff      	cmp	r3, #255	@ 0xff
 80020b8:	d91e      	bls.n	80020f8 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d103      	bne.n	80020d6 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80020d4:	e002      	b.n	80020dc <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	22ff      	movs	r2, #255	@ 0xff
 80020da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e0:	b299      	uxth	r1, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fed9 	bl	8002ea8 <I2C_TransferConfig>
 80020f6:	e011      	b.n	800211c <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	b299      	uxth	r1, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210c:	b2da      	uxtb	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fec6 	bl	8002ea8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b22      	cmp	r3, #34	@ 0x22
 8002138:	d108      	bne.n	800214c <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002148:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800214a:	e01b      	b.n	8002184 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800215a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800215c:	e012      	b.n	8002184 <I2C_Mem_ISR_DMA+0x274>
 800215e:	bf00      	nop
 8002160:	80002000 	.word	0x80002000
 8002164:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f9fe 	bl	8002580 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop

08002198 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <I2C_Slave_ISR_DMA+0x24>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e0c0      	b.n	800233e <I2C_Slave_ISR_DMA+0x1a6>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fa98 	bl	8002710 <I2C_ITSlaveCplt>
 80021e0:	e0a8      	b.n	8002334 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8095 	beq.w	8002318 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808f 	beq.w	8002318 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800220a:	2b00      	cmp	r3, #0
 800220c:	d07d      	beq.n	800230a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800222c:	2301      	movs	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00c      	beq.n	8002252 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800224e:	2301      	movs	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d128      	bne.n	80022aa <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b28      	cmp	r3, #40	@ 0x28
 8002262:	d108      	bne.n	8002276 <I2C_Slave_ISR_DMA+0xde>
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800226a:	d104      	bne.n	8002276 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fbb2 	bl	80029d8 <I2C_ITListenCplt>
 8002274:	e048      	b.n	8002308 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b29      	cmp	r3, #41	@ 0x29
 8002280:	d10e      	bne.n	80022a0 <I2C_Slave_ISR_DMA+0x108>
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002288:	d00a      	beq.n	80022a0 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2210      	movs	r2, #16
 8002290:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fd0b 	bl	8002cae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f915 	bl	80024c8 <I2C_ITSlaveSeqCplt>
 800229e:	e033      	b.n	8002308 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2210      	movs	r2, #16
 80022a6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80022a8:	e034      	b.n	8002314 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2210      	movs	r2, #16
 80022b0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <I2C_Slave_ISR_DMA+0x13c>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d2:	d11f      	bne.n	8002314 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b21      	cmp	r3, #33	@ 0x21
 80022d8:	d002      	beq.n	80022e0 <I2C_Slave_ISR_DMA+0x148>
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	2b29      	cmp	r3, #41	@ 0x29
 80022de:	d103      	bne.n	80022e8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2221      	movs	r2, #33	@ 0x21
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e6:	e008      	b.n	80022fa <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b22      	cmp	r3, #34	@ 0x22
 80022ec:	d002      	beq.n	80022f4 <I2C_Slave_ISR_DMA+0x15c>
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80022f2:	d102      	bne.n	80022fa <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2222      	movs	r2, #34	@ 0x22
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4619      	mov	r1, r3
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fbbd 	bl	8002a80 <I2C_ITError>
      if (treatdmanack == 1U)
 8002306:	e005      	b.n	8002314 <I2C_Slave_ISR_DMA+0x17c>
 8002308:	e004      	b.n	8002314 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2210      	movs	r2, #16
 8002310:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002312:	e00f      	b.n	8002334 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002314:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002316:	e00d      	b.n	8002334 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f809 	bl	8002346 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800235c:	2b28      	cmp	r3, #40	@ 0x28
 800235e:	d16a      	bne.n	8002436 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	0c1b      	lsrs	r3, r3, #16
 8002378:	b29b      	uxth	r3, r3
 800237a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800237e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	b29b      	uxth	r3, r3
 8002388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800239a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d138      	bne.n	8002416 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80023a4:	897b      	ldrh	r3, [r7, #10]
 80023a6:	09db      	lsrs	r3, r3, #7
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	89bb      	ldrh	r3, [r7, #12]
 80023ac:	4053      	eors	r3, r2
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f003 0306 	and.w	r3, r3, #6
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11c      	bne.n	80023f2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80023b8:	897b      	ldrh	r3, [r7, #10]
 80023ba:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d13b      	bne.n	8002446 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2208      	movs	r2, #8
 80023da:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023e4:	89ba      	ldrh	r2, [r7, #12]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fa19 	bl	8001822 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80023f0:	e029      	b.n	8002446 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80023f2:	893b      	ldrh	r3, [r7, #8]
 80023f4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fe0a 	bl	8003014 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002408:	89ba      	ldrh	r2, [r7, #12]
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fa07 	bl	8001822 <HAL_I2C_AddrCallback>
}
 8002414:	e017      	b.n	8002446 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fdfa 	bl	8003014 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002428:	89ba      	ldrh	r2, [r7, #12]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff f9f7 	bl	8001822 <HAL_I2C_AddrCallback>
}
 8002434:	e007      	b.n	8002446 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2208      	movs	r2, #8
 800243c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b21      	cmp	r3, #33	@ 0x21
 8002468:	d115      	bne.n	8002496 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2211      	movs	r2, #17
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800247e:	2101      	movs	r1, #1
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fdc7 	bl	8003014 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fd fe9a 	bl	80001c8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002494:	e014      	b.n	80024c0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2212      	movs	r2, #18
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024aa:	2102      	movs	r1, #2
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fdb1 	bl	8003014 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fd fe8e 	bl	80001dc <HAL_I2C_MasterRxCpltCallback>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e00c      	b.n	8002516 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002514:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b29      	cmp	r3, #41	@ 0x29
 8002520:	d112      	bne.n	8002548 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2228      	movs	r2, #40	@ 0x28
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2221      	movs	r2, #33	@ 0x21
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002530:	2101      	movs	r1, #1
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fd6e 	bl	8003014 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff f95a 	bl	80017fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002546:	e017      	b.n	8002578 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b2a      	cmp	r3, #42	@ 0x2a
 8002552:	d111      	bne.n	8002578 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2228      	movs	r2, #40	@ 0x28
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2222      	movs	r2, #34	@ 0x22
 8002560:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002562:	2102      	movs	r1, #2
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fd55 	bl	8003014 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff f94b 	bl	800180e <HAL_I2C_SlaveRxCpltCallback>
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b21      	cmp	r3, #33	@ 0x21
 80025a0:	d107      	bne.n	80025b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025a2:	2101      	movs	r1, #1
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fd35 	bl	8003014 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2211      	movs	r2, #17
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80025b0:	e00c      	b.n	80025cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b22      	cmp	r3, #34	@ 0x22
 80025bc:	d106      	bne.n	80025cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025be:	2102      	movs	r1, #2
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fd27 	bl	8003014 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2212      	movs	r2, #18
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <I2C_ITMasterCplt+0x188>)
 80025d8:	400b      	ands	r3, r1
 80025da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a49      	ldr	r2, [pc, #292]	@ (800270c <I2C_ITMasterCplt+0x18c>)
 80025e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2210      	movs	r2, #16
 80025f8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b60      	cmp	r3, #96	@ 0x60
 8002610:	d10a      	bne.n	8002628 <I2C_ITMasterCplt+0xa8>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	b2db      	uxtb	r3, r3
 8002624:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002626:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fb40 	bl	8002cae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b60      	cmp	r3, #96	@ 0x60
 800263e:	d002      	beq.n	8002646 <I2C_ITMasterCplt+0xc6>
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fa17 	bl	8002a80 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002652:	e054      	b.n	80026fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b21      	cmp	r3, #33	@ 0x21
 800265e:	d124      	bne.n	80026aa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b40      	cmp	r3, #64	@ 0x40
 8002678:	d10b      	bne.n	8002692 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff f8e1 	bl	8001852 <HAL_I2C_MemTxCpltCallback>
}
 8002690:	e035      	b.n	80026fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fd fd90 	bl	80001c8 <HAL_I2C_MasterTxCpltCallback>
}
 80026a8:	e029      	b.n	80026fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b22      	cmp	r3, #34	@ 0x22
 80026b4:	d123      	bne.n	80026fe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	d10b      	bne.n	80026e8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff f8c0 	bl	8001866 <HAL_I2C_MemRxCpltCallback>
}
 80026e6:	e00a      	b.n	80026fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7fd fd6f 	bl	80001dc <HAL_I2C_MasterRxCpltCallback>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	fe00e800 	.word	0xfe00e800
 800270c:	ffff0000 	.word	0xffff0000

08002710 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002732:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2220      	movs	r2, #32
 800273a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800273c:	7afb      	ldrb	r3, [r7, #11]
 800273e:	2b21      	cmp	r3, #33	@ 0x21
 8002740:	d002      	beq.n	8002748 <I2C_ITSlaveCplt+0x38>
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	2b29      	cmp	r3, #41	@ 0x29
 8002746:	d108      	bne.n	800275a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002748:	f248 0101 	movw	r1, #32769	@ 0x8001
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fc61 	bl	8003014 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2221      	movs	r2, #33	@ 0x21
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
 8002758:	e019      	b.n	800278e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	2b22      	cmp	r3, #34	@ 0x22
 800275e:	d002      	beq.n	8002766 <I2C_ITSlaveCplt+0x56>
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	2b2a      	cmp	r3, #42	@ 0x2a
 8002764:	d108      	bne.n	8002778 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002766:	f248 0102 	movw	r1, #32770	@ 0x8002
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fc52 	bl	8003014 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2222      	movs	r2, #34	@ 0x22
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
 8002776:	e00a      	b.n	800278e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002778:	7afb      	ldrb	r3, [r7, #11]
 800277a:	2b28      	cmp	r3, #40	@ 0x28
 800277c:	d107      	bne.n	800278e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800277e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fc46 	bl	8003014 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b89      	ldr	r3, [pc, #548]	@ (80029d0 <I2C_ITSlaveCplt+0x2c0>)
 80027aa:	400b      	ands	r3, r1
 80027ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa7d 	bl	8002cae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d013      	beq.n	80027e6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01f      	beq.n	8002816 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027e4:	e017      	b.n	8002816 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d012      	beq.n	8002816 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d049      	beq.n	8002916 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002888:	2b00      	cmp	r3, #0
 800288a:	d044      	beq.n	8002916 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d128      	bne.n	80028e8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b28      	cmp	r3, #40	@ 0x28
 80028a0:	d108      	bne.n	80028b4 <I2C_ITSlaveCplt+0x1a4>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028a8:	d104      	bne.n	80028b4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f893 	bl	80029d8 <I2C_ITListenCplt>
 80028b2:	e030      	b.n	8002916 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b29      	cmp	r3, #41	@ 0x29
 80028be:	d10e      	bne.n	80028de <I2C_ITSlaveCplt+0x1ce>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028c6:	d00a      	beq.n	80028de <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2210      	movs	r2, #16
 80028ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f9ec 	bl	8002cae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fdf6 	bl	80024c8 <I2C_ITSlaveSeqCplt>
 80028dc:	e01b      	b.n	8002916 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2210      	movs	r2, #16
 80028e4:	61da      	str	r2, [r3, #28]
 80028e6:	e016      	b.n	8002916 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <I2C_ITSlaveCplt+0x1fa>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002908:	d105      	bne.n	8002916 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f8b5 	bl	8002a80 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002928:	2b00      	cmp	r3, #0
 800292a:	d010      	beq.n	800294e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8a4 	bl	8002a80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b28      	cmp	r3, #40	@ 0x28
 8002942:	d141      	bne.n	80029c8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f846 	bl	80029d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800294c:	e03c      	b.n	80029c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002956:	d014      	beq.n	8002982 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fdb5 	bl	80024c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <I2C_ITSlaveCplt+0x2c4>)
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe ff5f 	bl	800183e <HAL_I2C_ListenCpltCallback>
}
 8002980:	e022      	b.n	80029c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b22      	cmp	r3, #34	@ 0x22
 800298c:	d10e      	bne.n	80029ac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe ff32 	bl	800180e <HAL_I2C_SlaveRxCpltCallback>
}
 80029aa:	e00d      	b.n	80029c8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe ff19 	bl	80017fa <HAL_I2C_SlaveTxCpltCallback>
}
 80029c8:	bf00      	nop
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	fe00e800 	.word	0xfe00e800
 80029d4:	ffff0000 	.word	0xffff0000

080029d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a25      	ldr	r2, [pc, #148]	@ (8002a7c <I2C_ITListenCplt+0xa4>)
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d022      	beq.n	8002a54 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a54:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fadb 	bl	8003014 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2210      	movs	r2, #16
 8002a64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fee5 	bl	800183e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	ffff0000 	.word	0xffff0000

08002a80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a90:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a6d      	ldr	r2, [pc, #436]	@ (8002c54 <I2C_ITError+0x1d4>)
 8002a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b28      	cmp	r3, #40	@ 0x28
 8002ab6:	d005      	beq.n	8002ac4 <I2C_ITError+0x44>
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b29      	cmp	r3, #41	@ 0x29
 8002abc:	d002      	beq.n	8002ac4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ac2:	d10b      	bne.n	8002adc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 faa4 	bl	8003014 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2228      	movs	r2, #40	@ 0x28
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a60      	ldr	r2, [pc, #384]	@ (8002c58 <I2C_ITError+0x1d8>)
 8002ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ada:	e030      	b.n	8002b3e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002adc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fa97 	bl	8003014 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8e1 	bl	8002cae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b60      	cmp	r3, #96	@ 0x60
 8002af6:	d01f      	beq.n	8002b38 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d114      	bne.n	8002b38 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d109      	bne.n	8002b30 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2210      	movs	r2, #16
 8002b22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d039      	beq.n	8002bc0 <I2C_ITError+0x140>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b11      	cmp	r3, #17
 8002b50:	d002      	beq.n	8002b58 <I2C_ITError+0xd8>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b21      	cmp	r3, #33	@ 0x21
 8002b56:	d133      	bne.n	8002bc0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b66:	d107      	bne.n	8002b78 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe f93f 	bl	8000e00 <HAL_DMA_GetState>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d017      	beq.n	8002bb8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	4a33      	ldr	r2, [pc, #204]	@ (8002c5c <I2C_ITError+0x1dc>)
 8002b8e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe f83f 	bl	8000c20 <HAL_DMA_Abort_IT>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d04d      	beq.n	8002c44 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bb6:	e045      	b.n	8002c44 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f851 	bl	8002c60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bbe:	e041      	b.n	8002c44 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d039      	beq.n	8002c3c <I2C_ITError+0x1bc>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b12      	cmp	r3, #18
 8002bcc:	d002      	beq.n	8002bd4 <I2C_ITError+0x154>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b22      	cmp	r3, #34	@ 0x22
 8002bd2:	d133      	bne.n	8002c3c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be2:	d107      	bne.n	8002bf4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe f901 	bl	8000e00 <HAL_DMA_GetState>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d017      	beq.n	8002c34 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c08:	4a14      	ldr	r2, [pc, #80]	@ (8002c5c <I2C_ITError+0x1dc>)
 8002c0a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f801 	bl	8000c20 <HAL_DMA_Abort_IT>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d011      	beq.n	8002c48 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c32:	e009      	b.n	8002c48 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f813 	bl	8002c60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c3a:	e005      	b.n	8002c48 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f80f 	bl	8002c60 <I2C_TreatErrorCallback>
  }
}
 8002c42:	e002      	b.n	8002c4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c44:	bf00      	nop
 8002c46:	e000      	b.n	8002c4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c48:	bf00      	nop
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	ffff0000 	.word	0xffff0000
 8002c58:	08001b2d 	.word	0x08001b2d
 8002c5c:	08002e6d 	.word	0x08002e6d

08002c60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b60      	cmp	r3, #96	@ 0x60
 8002c72:	d10e      	bne.n	8002c92 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fdf5 	bl	800187a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c90:	e009      	b.n	8002ca6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fd faa5 	bl	80001f0 <HAL_I2C_ErrorCallback>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d103      	bne.n	8002ccc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d007      	beq.n	8002cea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	619a      	str	r2, [r3, #24]
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d12:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d104      	bne.n	8002d28 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d1e:	2120      	movs	r1, #32
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f8f3 	bl	8002f0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002d26:	e02d      	b.n	8002d84 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002d30:	441a      	add	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2bff      	cmp	r3, #255	@ 0xff
 8002d3e:	d903      	bls.n	8002d48 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	22ff      	movs	r2, #255	@ 0xff
 8002d44:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d46:	e004      	b.n	8002d52 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3328      	adds	r3, #40	@ 0x28
 8002d62:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002d68:	f7fd fefa 	bl	8000b60 <HAL_DMA_Start_IT>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002d72:	2110      	movs	r1, #16
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fe83 	bl	8002a80 <I2C_ITError>
}
 8002d7a:	e003      	b.n	8002d84 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002d7c:	2140      	movs	r1, #64	@ 0x40
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f8c4 	bl	8002f0c <I2C_Enable_IRQ>
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002db4:	2120      	movs	r1, #32
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8a8 	bl	8002f0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002dbc:	e03b      	b.n	8002e36 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2bff      	cmp	r3, #255	@ 0xff
 8002dd4:	d911      	bls.n	8002dfa <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d103      	bne.n	8002df2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002df0:	e008      	b.n	8002e04 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22ff      	movs	r2, #255	@ 0xff
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002df8:	e004      	b.n	8002e04 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3324      	adds	r3, #36	@ 0x24
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002e1a:	f7fd fea1 	bl	8000b60 <HAL_DMA_Start_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002e24:	2110      	movs	r1, #16
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff fe2a 	bl	8002a80 <I2C_ITError>
}
 8002e2c:	e003      	b.n	8002e36 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002e2e:	2140      	movs	r1, #64	@ 0x40
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f86b 	bl	8002f0c <I2C_Enable_IRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff fe0e 	bl	8002a80 <I2C_ITError>
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e86:	2200      	movs	r2, #0
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	2200      	movs	r2, #0
 8002e98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff fee0 	bl	8002c60 <I2C_TreatErrorCallback>
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec0:	7a7b      	ldrb	r3, [r7, #9]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <I2C_TransferConfig+0x60>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	43db      	mvns	r3, r3
 8002eec:	ea02 0103 	and.w	r1, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	03ff63ff 	.word	0x03ff63ff

08002f0c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f20:	4a39      	ldr	r2, [pc, #228]	@ (8003008 <I2C_Enable_IRQ+0xfc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d032      	beq.n	8002f8c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f2a:	4a38      	ldr	r2, [pc, #224]	@ (800300c <I2C_Enable_IRQ+0x100>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d02d      	beq.n	8002f8c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f34:	4a36      	ldr	r2, [pc, #216]	@ (8003010 <I2C_Enable_IRQ+0x104>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d028      	beq.n	8002f8c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da03      	bge.n	8002f4a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002f5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002f6c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d103      	bne.n	8002f7c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002f7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d133      	bne.n	8002fea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f8a:	e02e      	b.n	8002fea <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da03      	bge.n	8002f9c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002fac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002fbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d103      	bne.n	8002fce <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002fcc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d103      	bne.n	8002fdc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002fda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	2b40      	cmp	r3, #64	@ 0x40
 8002fe0:	d103      	bne.n	8002fea <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	08001d1f 	.word	0x08001d1f
 800300c:	08002199 	.word	0x08002199
 8003010:	08001f11 	.word	0x08001f11

08003014 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00f      	beq.n	800304e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003034:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003042:	2b28      	cmp	r3, #40	@ 0x28
 8003044:	d003      	beq.n	800304e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800304c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00f      	beq.n	8003078 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800305e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800306c:	2b28      	cmp	r3, #40	@ 0x28
 800306e:	d003      	beq.n	8003078 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003076:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003078:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da03      	bge.n	8003088 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003086:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	2b10      	cmp	r3, #16
 800308c:	d103      	bne.n	8003096 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003094:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	2b20      	cmp	r3, #32
 800309a:	d103      	bne.n	80030a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f043 0320 	orr.w	r3, r3, #32
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	2b40      	cmp	r3, #64	@ 0x40
 80030a8:	d103      	bne.n	80030b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	400a      	ands	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d138      	bne.n	8003158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e032      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	@ 0x24
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b20      	cmp	r3, #32
 800317a:	d139      	bne.n	80031f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003186:	2302      	movs	r3, #2
 8003188:	e033      	b.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2224      	movs	r2, #36	@ 0x24
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <HAL_PWREx_GetVoltageRange+0x18>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40007000 	.word	0x40007000

0800321c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800322a:	d130      	bne.n	800328e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800322c:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d038      	beq.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003242:	4a1e      	ldr	r2, [pc, #120]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800324a:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2232      	movs	r2, #50	@ 0x32
 8003250:	fb02 f303 	mul.w	r3, r2, r3
 8003254:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0c9b      	lsrs	r3, r3, #18
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003260:	e002      	b.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b01      	subs	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003268:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003274:	d102      	bne.n	800327c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f2      	bne.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800327c:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d110      	bne.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e00f      	b.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329a:	d007      	beq.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800329c:	4b07      	ldr	r3, [pc, #28]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a4:	4a05      	ldr	r2, [pc, #20]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40007000 	.word	0x40007000
 80032c0:	20000004 	.word	0x20000004
 80032c4:	431bde83 	.word	0x431bde83

080032c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e3ca      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032da:	4b97      	ldr	r3, [pc, #604]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e4:	4b94      	ldr	r3, [pc, #592]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80e4 	beq.w	80034c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_RCC_OscConfig+0x4a>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	f040 808b 	bne.w	8003420 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 8087 	bne.w	8003420 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003312:	4b89      	ldr	r3, [pc, #548]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x62>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e3a2      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1a      	ldr	r2, [r3, #32]
 800332e:	4b82      	ldr	r3, [pc, #520]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_RCC_OscConfig+0x7c>
 800333a:	4b7f      	ldr	r3, [pc, #508]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003342:	e005      	b.n	8003350 <HAL_RCC_OscConfig+0x88>
 8003344:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003350:	4293      	cmp	r3, r2
 8003352:	d223      	bcs.n	800339c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fd1d 	bl	8003d98 <RCC_SetFlashLatencyFromMSIRange>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e383      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003368:	4b73      	ldr	r3, [pc, #460]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a72      	ldr	r2, [pc, #456]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800336e:	f043 0308 	orr.w	r3, r3, #8
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b70      	ldr	r3, [pc, #448]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	496d      	ldr	r1, [pc, #436]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003386:	4b6c      	ldr	r3, [pc, #432]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	4968      	ldr	r1, [pc, #416]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
 800339a:	e025      	b.n	80033e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339c:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a65      	ldr	r2, [pc, #404]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80033a2:	f043 0308 	orr.w	r3, r3, #8
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b63      	ldr	r3, [pc, #396]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4960      	ldr	r1, [pc, #384]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	495b      	ldr	r1, [pc, #364]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fcdd 	bl	8003d98 <RCC_SetFlashLatencyFromMSIRange>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e343      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033e8:	f000 fc4a 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b52      	ldr	r3, [pc, #328]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	4950      	ldr	r1, [pc, #320]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
 8003404:	4a4e      	ldr	r2, [pc, #312]	@ (8003540 <HAL_RCC_OscConfig+0x278>)
 8003406:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003408:	4b4e      	ldr	r3, [pc, #312]	@ (8003544 <HAL_RCC_OscConfig+0x27c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd f981 	bl	8000714 <HAL_InitTick>
 8003412:	4603      	mov	r3, r0
 8003414:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d052      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	e327      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d032      	beq.n	800348e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003428:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a42      	ldr	r2, [pc, #264]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003434:	f7fd f9be 	bl	80007b4 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800343c:	f7fd f9ba 	bl	80007b4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e310      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800344e:	4b3a      	ldr	r3, [pc, #232]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800345a:	4b37      	ldr	r3, [pc, #220]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a36      	ldr	r2, [pc, #216]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4931      	ldr	r1, [pc, #196]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003478:	4b2f      	ldr	r3, [pc, #188]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	492c      	ldr	r1, [pc, #176]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
 800348c:	e01a      	b.n	80034c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800348e:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a29      	ldr	r2, [pc, #164]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800349a:	f7fd f98b 	bl	80007b4 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a2:	f7fd f987 	bl	80007b4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e2dd      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b4:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x1da>
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d074      	beq.n	80035ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x21a>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	d10e      	bne.n	80034fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d10b      	bne.n	80034fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d064      	beq.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d160      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e2ba      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x24a>
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0b      	ldr	r2, [pc, #44]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e026      	b.n	8003560 <HAL_RCC_OscConfig+0x298>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800351a:	d115      	bne.n	8003548 <HAL_RCC_OscConfig+0x280>
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 8003522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a02      	ldr	r2, [pc, #8]	@ (8003538 <HAL_RCC_OscConfig+0x270>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e014      	b.n	8003560 <HAL_RCC_OscConfig+0x298>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	08004840 	.word	0x08004840
 8003540:	20000004 	.word	0x20000004
 8003544:	20000008 	.word	0x20000008
 8003548:	4ba0      	ldr	r3, [pc, #640]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a9f      	ldr	r2, [pc, #636]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b9d      	ldr	r3, [pc, #628]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a9c      	ldr	r2, [pc, #624]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800355a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800355e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd f924 	bl	80007b4 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003570:	f7fd f920 	bl	80007b4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	@ 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e276      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	4b92      	ldr	r3, [pc, #584]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x2a8>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fd f910 	bl	80007b4 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fd f90c 	bl	80007b4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	@ 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e262      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	4b88      	ldr	r3, [pc, #544]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x2d0>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d060      	beq.n	8003688 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_OscConfig+0x310>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d119      	bne.n	8003606 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d116      	bne.n	8003606 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d8:	4b7c      	ldr	r3, [pc, #496]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x328>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e23f      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b76      	ldr	r3, [pc, #472]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	4973      	ldr	r1, [pc, #460]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003604:	e040      	b.n	8003688 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d023      	beq.n	8003656 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360e:	4b6f      	ldr	r3, [pc, #444]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fd f8cb 	bl	80007b4 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003622:	f7fd f8c7 	bl	80007b4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e21d      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003634:	4b65      	ldr	r3, [pc, #404]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003640:	4b62      	ldr	r3, [pc, #392]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	495f      	ldr	r1, [pc, #380]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
 8003654:	e018      	b.n	8003688 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003656:	4b5d      	ldr	r3, [pc, #372]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5c      	ldr	r2, [pc, #368]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800365c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fd f8a7 	bl	80007b4 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366a:	f7fd f8a3 	bl	80007b4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1f9      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367c:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03c      	beq.n	800370e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369c:	4b4b      	ldr	r3, [pc, #300]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a2:	4a4a      	ldr	r2, [pc, #296]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fd f882 	bl	80007b4 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fd f87e 	bl	80007b4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1d4      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c6:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80036c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ef      	beq.n	80036b4 <HAL_RCC_OscConfig+0x3ec>
 80036d4:	e01b      	b.n	800370e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d6:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80036d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036dc:	4a3b      	ldr	r2, [pc, #236]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd f865 	bl	80007b4 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fd f861 	bl	80007b4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1b7      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003700:	4b32      	ldr	r3, [pc, #200]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ef      	bne.n	80036ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80a6 	beq.w	8003868 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372c:	4b27      	ldr	r3, [pc, #156]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003730:	4a26      	ldr	r2, [pc, #152]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003736:	6593      	str	r3, [r2, #88]	@ 0x58
 8003738:	4b24      	ldr	r3, [pc, #144]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003744:	2301      	movs	r3, #1
 8003746:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003748:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <HAL_RCC_OscConfig+0x508>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d118      	bne.n	8003786 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003754:	4b1e      	ldr	r3, [pc, #120]	@ (80037d0 <HAL_RCC_OscConfig+0x508>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <HAL_RCC_OscConfig+0x508>)
 800375a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003760:	f7fd f828 	bl	80007b4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003768:	f7fd f824 	bl	80007b4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e17a      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <HAL_RCC_OscConfig+0x508>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4d8>
 800378e:	4b0f      	ldr	r3, [pc, #60]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003794:	4a0d      	ldr	r2, [pc, #52]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800379e:	e029      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d115      	bne.n	80037d4 <HAL_RCC_OscConfig+0x50c>
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	4a07      	ldr	r2, [pc, #28]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a03      	ldr	r2, [pc, #12]	@ (80037cc <HAL_RCC_OscConfig+0x504>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
 80037d4:	4b9c      	ldr	r3, [pc, #624]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	4a9b      	ldr	r2, [pc, #620]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e4:	4b98      	ldr	r3, [pc, #608]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a97      	ldr	r2, [pc, #604]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d016      	beq.n	800382a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fc ffda 	bl	80007b4 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003802:	e00a      	b.n	800381a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fc ffd6 	bl	80007b4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e12a      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ed      	beq.n	8003804 <HAL_RCC_OscConfig+0x53c>
 8003828:	e015      	b.n	8003856 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fc ffc3 	bl	80007b4 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fc ffbf 	bl	80007b4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e113      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003848:	4b7f      	ldr	r3, [pc, #508]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ed      	bne.n	8003832 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003856:	7ffb      	ldrb	r3, [r7, #31]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b7a      	ldr	r3, [pc, #488]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	4a79      	ldr	r2, [pc, #484]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003866:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80fe 	beq.w	8003a6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	2b02      	cmp	r3, #2
 8003878:	f040 80d0 	bne.w	8003a1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800387c:	4b72      	ldr	r3, [pc, #456]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0203 	and.w	r2, r3, #3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	429a      	cmp	r2, r3
 800388e:	d130      	bne.n	80038f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	3b01      	subs	r3, #1
 800389c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d127      	bne.n	80038f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d11f      	bne.n	80038f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038bc:	2a07      	cmp	r2, #7
 80038be:	bf14      	ite	ne
 80038c0:	2201      	movne	r2, #1
 80038c2:	2200      	moveq	r2, #0
 80038c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d113      	bne.n	80038f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d06e      	beq.n	80039d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	d069      	beq.n	80039cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038f8:	4b53      	ldr	r3, [pc, #332]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003904:	4b50      	ldr	r3, [pc, #320]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0ad      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003914:	4b4c      	ldr	r3, [pc, #304]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4b      	ldr	r2, [pc, #300]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800391a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003920:	f7fc ff48 	bl	80007b4 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fc ff44 	bl	80007b4 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e09a      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393a:	4b43      	ldr	r3, [pc, #268]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003946:	4b40      	ldr	r3, [pc, #256]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	4b40      	ldr	r3, [pc, #256]	@ (8003a4c <HAL_RCC_OscConfig+0x784>)
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003956:	3a01      	subs	r2, #1
 8003958:	0112      	lsls	r2, r2, #4
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003960:	0212      	lsls	r2, r2, #8
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003968:	0852      	lsrs	r2, r2, #1
 800396a:	3a01      	subs	r2, #1
 800396c:	0552      	lsls	r2, r2, #21
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003974:	0852      	lsrs	r2, r2, #1
 8003976:	3a01      	subs	r2, #1
 8003978:	0652      	lsls	r2, r2, #25
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003980:	0912      	lsrs	r2, r2, #4
 8003982:	0452      	lsls	r2, r2, #17
 8003984:	430a      	orrs	r2, r1
 8003986:	4930      	ldr	r1, [pc, #192]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003988:	4313      	orrs	r3, r2
 800398a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800398c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2d      	ldr	r2, [pc, #180]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003998:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a4:	f7fc ff06 	bl	80007b4 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fc ff02 	bl	80007b4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e058      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	4b22      	ldr	r3, [pc, #136]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ca:	e050      	b.n	8003a6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e04f      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d148      	bne.n	8003a6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e8:	4b17      	ldr	r3, [pc, #92]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a16      	ldr	r2, [pc, #88]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039f4:	f7fc fede 	bl	80007b4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fc feda 	bl	80007b4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e030      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x734>
 8003a1a:	e028      	b.n	8003a6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d023      	beq.n	8003a6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a08      	ldr	r2, [pc, #32]	@ (8003a48 <HAL_RCC_OscConfig+0x780>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fc fec1 	bl	80007b4 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	e00c      	b.n	8003a50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fc febd 	bl	80007b4 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d905      	bls.n	8003a50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e013      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <HAL_RCC_OscConfig+0x7b0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ec      	bne.n	8003a36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a5c:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_OscConfig+0x7b0>)
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4905      	ldr	r1, [pc, #20]	@ (8003a78 <HAL_RCC_OscConfig+0x7b0>)
 8003a62:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_RCC_OscConfig+0x7b4>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	60cb      	str	r3, [r1, #12]
 8003a68:	e001      	b.n	8003a6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	feeefffc 	.word	0xfeeefffc

08003a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0e7      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a94:	4b75      	ldr	r3, [pc, #468]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d910      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b72      	ldr	r3, [pc, #456]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 0207 	bic.w	r2, r3, #7
 8003aaa:	4970      	ldr	r1, [pc, #448]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0cf      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4b66      	ldr	r3, [pc, #408]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d908      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae0:	4b63      	ldr	r3, [pc, #396]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4960      	ldr	r1, [pc, #384]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d04c      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b06:	4b5a      	ldr	r3, [pc, #360]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d121      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0a6      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b1e:	4b54      	ldr	r3, [pc, #336]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d115      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e09a      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b36:	4b4e      	ldr	r3, [pc, #312]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e08e      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b46:	4b4a      	ldr	r3, [pc, #296]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e086      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b46      	ldr	r3, [pc, #280]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4943      	ldr	r1, [pc, #268]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7fc fe24 	bl	80007b4 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fc fe20 	bl	80007b4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e06e      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b3a      	ldr	r3, [pc, #232]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d010      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d208      	bcs.n	8003bc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	492b      	ldr	r1, [pc, #172]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc6:	4b29      	ldr	r3, [pc, #164]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d210      	bcs.n	8003bf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd4:	4b25      	ldr	r3, [pc, #148]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 0207 	bic.w	r2, r3, #7
 8003bdc:	4923      	ldr	r1, [pc, #140]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be4:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <HAL_RCC_ClockConfig+0x1ec>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e036      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c02:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4918      	ldr	r1, [pc, #96]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d009      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c20:	4b13      	ldr	r3, [pc, #76]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4910      	ldr	r1, [pc, #64]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c34:	f000 f824 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	490b      	ldr	r1, [pc, #44]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f4>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c50:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003c52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c54:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_ClockConfig+0x1fc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fd5b 	bl	8000714 <HAL_InitTick>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c62:	7afb      	ldrb	r3, [r7, #11]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40022000 	.word	0x40022000
 8003c70:	40021000 	.word	0x40021000
 8003c74:	08004840 	.word	0x08004840
 8003c78:	20000004 	.word	0x20000004
 8003c7c:	20000008 	.word	0x20000008

08003c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	@ 0x24
 8003c84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c98:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	d121      	bne.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d11e      	bne.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cb4:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cc0:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e005      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cf8:	4b25      	ldr	r3, [pc, #148]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e004      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d04:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d134      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d003      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0xac>
 8003d24:	e005      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d26:	4b1a      	ldr	r3, [pc, #104]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d28:	617b      	str	r3, [r7, #20]
      break;
 8003d2a:	e005      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d2e:	617b      	str	r3, [r7, #20]
      break;
 8003d30:	e002      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	617b      	str	r3, [r7, #20]
      break;
 8003d36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d38:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	3301      	adds	r3, #1
 8003d44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	fb03 f202 	mul.w	r2, r3, r2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	0e5b      	lsrs	r3, r3, #25
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d78:	69bb      	ldr	r3, [r7, #24]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3724      	adds	r7, #36	@ 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	08004850 	.word	0x08004850
 8003d90:	00f42400 	.word	0x00f42400
 8003d94:	007a1200 	.word	0x007a1200

08003d98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003da4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003db0:	f7ff fa26 	bl	8003200 <HAL_PWREx_GetVoltageRange>
 8003db4:	6178      	str	r0, [r7, #20]
 8003db6:	e014      	b.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003db8:	4b25      	ldr	r3, [pc, #148]	@ (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	4a24      	ldr	r2, [pc, #144]	@ (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc4:	4b22      	ldr	r3, [pc, #136]	@ (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dd0:	f7ff fa16 	bl	8003200 <HAL_PWREx_GetVoltageRange>
 8003dd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	4a1d      	ldr	r2, [pc, #116]	@ (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de8:	d10b      	bne.n	8003e02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b80      	cmp	r3, #128	@ 0x80
 8003dee:	d919      	bls.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003df4:	d902      	bls.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003df6:	2302      	movs	r3, #2
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	e013      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	e010      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b80      	cmp	r3, #128	@ 0x80
 8003e06:	d902      	bls.n	8003e0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e08:	2303      	movs	r3, #3
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e00a      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b80      	cmp	r3, #128	@ 0x80
 8003e12:	d102      	bne.n	8003e1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e14:	2302      	movs	r3, #2
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e004      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b70      	cmp	r3, #112	@ 0x70
 8003e1e:	d101      	bne.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e20:	2301      	movs	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 0207 	bic.w	r2, r3, #7
 8003e2c:	4909      	ldr	r1, [pc, #36]	@ (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e34:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40022000 	.word	0x40022000

08003e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e60:	2300      	movs	r3, #0
 8003e62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e64:	2300      	movs	r3, #0
 8003e66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d041      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e7c:	d02a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e82:	d824      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e88:	d008      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e8e:	d81e      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e98:	d010      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e9a:	e018      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e9c:	4b86      	ldr	r3, [pc, #536]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a85      	ldr	r2, [pc, #532]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ea8:	e015      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fabb 	bl	800442c <RCCEx_PLLSAI1_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eba:	e00c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3320      	adds	r3, #32
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fba6 	bl	8004614 <RCCEx_PLLSAI2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003edc:	4b76      	ldr	r3, [pc, #472]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eea:	4973      	ldr	r1, [pc, #460]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ef2:	e001      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d041      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f0c:	d02a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f12:	d824      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f18:	d008      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f1e:	d81e      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f28:	d010      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f2a:	e018      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f2c:	4b62      	ldr	r3, [pc, #392]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a61      	ldr	r2, [pc, #388]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f38:	e015      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fa73 	bl	800442c <RCCEx_PLLSAI1_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f4a:	e00c      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3320      	adds	r3, #32
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fb5e 	bl	8004614 <RCCEx_PLLSAI2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f5c:	e003      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	74fb      	strb	r3, [r7, #19]
      break;
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10b      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f6c:	4b52      	ldr	r3, [pc, #328]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f7a:	494f      	ldr	r1, [pc, #316]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f82:	e001      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a0 	beq.w	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f96:	2300      	movs	r3, #0
 8003f98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f9a:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb0:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	4a40      	ldr	r2, [pc, #256]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fd8:	f7fc fbec 	bl	80007b4 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fde:	e009      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fc fbe8 	bl	80007b4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d902      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ff2:	e005      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ff4:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ef      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d15c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004006:	4b2c      	ldr	r3, [pc, #176]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004010:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01f      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d019      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004024:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004030:	4b21      	ldr	r3, [pc, #132]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	4a20      	ldr	r2, [pc, #128]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	4a1c      	ldr	r2, [pc, #112]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fc fba7 	bl	80007b4 <HAL_GetTick>
 8004066:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004068:	e00b      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fc fba3 	bl	80007b4 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d902      	bls.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	74fb      	strb	r3, [r7, #19]
            break;
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ec      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004096:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a6:	4904      	ldr	r1, [pc, #16]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ae:	e009      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c4:	7c7b      	ldrb	r3, [r7, #17]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d105      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ca:	4b9e      	ldr	r3, [pc, #632]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ce:	4a9d      	ldr	r2, [pc, #628]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e2:	4b98      	ldr	r3, [pc, #608]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	f023 0203 	bic.w	r2, r3, #3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	4994      	ldr	r1, [pc, #592]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004104:	4b8f      	ldr	r3, [pc, #572]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410a:	f023 020c 	bic.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	498c      	ldr	r1, [pc, #560]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004126:	4b87      	ldr	r3, [pc, #540]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	4983      	ldr	r1, [pc, #524]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004148:	4b7e      	ldr	r3, [pc, #504]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	497b      	ldr	r1, [pc, #492]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800416a:	4b76      	ldr	r3, [pc, #472]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004178:	4972      	ldr	r1, [pc, #456]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800418c:	4b6d      	ldr	r3, [pc, #436]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419a:	496a      	ldr	r1, [pc, #424]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ae:	4b65      	ldr	r3, [pc, #404]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	4961      	ldr	r1, [pc, #388]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041d0:	4b5c      	ldr	r3, [pc, #368]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041de:	4959      	ldr	r1, [pc, #356]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041f2:	4b54      	ldr	r3, [pc, #336]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004200:	4950      	ldr	r1, [pc, #320]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004214:	4b4b      	ldr	r3, [pc, #300]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	4948      	ldr	r1, [pc, #288]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004236:	4b43      	ldr	r3, [pc, #268]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	493f      	ldr	r1, [pc, #252]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d028      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004258:	4b3a      	ldr	r3, [pc, #232]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004266:	4937      	ldr	r1, [pc, #220]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004276:	d106      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004278:	4b32      	ldr	r3, [pc, #200]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a31      	ldr	r2, [pc, #196]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004282:	60d3      	str	r3, [r2, #12]
 8004284:	e011      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800428a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800428e:	d10c      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f8c8 	bl	800442c <RCCEx_PLLSAI1_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d028      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042b6:	4b23      	ldr	r3, [pc, #140]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	491f      	ldr	r1, [pc, #124]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042d4:	d106      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4a1a      	ldr	r2, [pc, #104]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042e0:	60d3      	str	r3, [r2, #12]
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f899 	bl	800442c <RCCEx_PLLSAI1_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02b      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004314:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004322:	4908      	ldr	r1, [pc, #32]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004332:	d109      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a02      	ldr	r2, [pc, #8]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
 8004340:	e014      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f867 	bl	800442c <RCCEx_PLLSAI1_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004386:	4928      	ldr	r1, [pc, #160]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004396:	d10d      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f844 	bl	800442c <RCCEx_PLLSAI1_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d014      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	74bb      	strb	r3, [r7, #18]
 80043b2:	e011      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3320      	adds	r3, #32
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f925 	bl	8004614 <RCCEx_PLLSAI2_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043e4:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f2:	490d      	ldr	r1, [pc, #52]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004406:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004416:	4904      	ldr	r1, [pc, #16]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800441e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000

0800442c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443a:	4b75      	ldr	r3, [pc, #468]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004446:	4b72      	ldr	r3, [pc, #456]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d10d      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
       ||
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800445e:	4b6c      	ldr	r3, [pc, #432]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
       ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d047      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
 8004476:	e044      	b.n	8004502 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d018      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0x86>
 8004480:	2b03      	cmp	r3, #3
 8004482:	d825      	bhi.n	80044d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d002      	beq.n	800448e <RCCEx_PLLSAI1_Config+0x62>
 8004488:	2b02      	cmp	r3, #2
 800448a:	d009      	beq.n	80044a0 <RCCEx_PLLSAI1_Config+0x74>
 800448c:	e020      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800448e:	4b60      	ldr	r3, [pc, #384]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11d      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449e:	e01a      	b.n	80044d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d116      	bne.n	80044da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b0:	e013      	b.n	80044da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b2:	4b57      	ldr	r3, [pc, #348]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044be:	4b54      	ldr	r3, [pc, #336]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ce:	e006      	b.n	80044de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      break;
 80044d4:	e004      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044de:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	430b      	orrs	r3, r1
 80044fc:	4944      	ldr	r1, [pc, #272]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d17d      	bne.n	8004604 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004508:	4b41      	ldr	r3, [pc, #260]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a40      	ldr	r2, [pc, #256]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004514:	f7fc f94e 	bl	80007b4 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800451a:	e009      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800451c:	f7fc f94a 	bl	80007b4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
        break;
 800452e:	e005      	b.n	800453c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004530:	4b37      	ldr	r3, [pc, #220]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ef      	bne.n	800451c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d160      	bne.n	8004604 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d111      	bne.n	800456c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004548:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	0211      	lsls	r1, r2, #8
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68d2      	ldr	r2, [r2, #12]
 800455e:	0912      	lsrs	r2, r2, #4
 8004560:	0452      	lsls	r2, r2, #17
 8004562:	430a      	orrs	r2, r1
 8004564:	492a      	ldr	r1, [pc, #168]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	610b      	str	r3, [r1, #16]
 800456a:	e027      	b.n	80045bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d112      	bne.n	8004598 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004572:	4b27      	ldr	r3, [pc, #156]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800457a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6892      	ldr	r2, [r2, #8]
 8004582:	0211      	lsls	r1, r2, #8
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6912      	ldr	r2, [r2, #16]
 8004588:	0852      	lsrs	r2, r2, #1
 800458a:	3a01      	subs	r2, #1
 800458c:	0552      	lsls	r2, r2, #21
 800458e:	430a      	orrs	r2, r1
 8004590:	491f      	ldr	r1, [pc, #124]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	610b      	str	r3, [r1, #16]
 8004596:	e011      	b.n	80045bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004598:	4b1d      	ldr	r3, [pc, #116]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6892      	ldr	r2, [r2, #8]
 80045a8:	0211      	lsls	r1, r2, #8
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6952      	ldr	r2, [r2, #20]
 80045ae:	0852      	lsrs	r2, r2, #1
 80045b0:	3a01      	subs	r2, #1
 80045b2:	0652      	lsls	r2, r2, #25
 80045b4:	430a      	orrs	r2, r1
 80045b6:	4916      	ldr	r1, [pc, #88]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fc f8f4 	bl	80007b4 <HAL_GetTick>
 80045cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ce:	e009      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d0:	f7fc f8f0 	bl	80007b4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d902      	bls.n	80045e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	73fb      	strb	r3, [r7, #15]
          break;
 80045e2:	e005      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0ef      	beq.n	80045d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045f6:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	4904      	ldr	r1, [pc, #16]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004600:	4313      	orrs	r3, r2
 8004602:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000

08004614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004622:	4b6a      	ldr	r3, [pc, #424]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800462e:	4b67      	ldr	r3, [pc, #412]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0203 	and.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d10d      	bne.n	800465a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
       ||
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004646:	4b61      	ldr	r3, [pc, #388]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
       ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d047      	beq.n	80046ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	e044      	b.n	80046ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d018      	beq.n	800469a <RCCEx_PLLSAI2_Config+0x86>
 8004668:	2b03      	cmp	r3, #3
 800466a:	d825      	bhi.n	80046b8 <RCCEx_PLLSAI2_Config+0xa4>
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <RCCEx_PLLSAI2_Config+0x62>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d009      	beq.n	8004688 <RCCEx_PLLSAI2_Config+0x74>
 8004674:	e020      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004676:	4b55      	ldr	r3, [pc, #340]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d11d      	bne.n	80046be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004686:	e01a      	b.n	80046be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004688:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d116      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e013      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469a:	4b4c      	ldr	r3, [pc, #304]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a6:	4b49      	ldr	r3, [pc, #292]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b6:	e006      	b.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e004      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10d      	bne.n	80046ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	430b      	orrs	r3, r1
 80046e4:	4939      	ldr	r1, [pc, #228]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d167      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046f0:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a35      	ldr	r2, [pc, #212]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fc f85a 	bl	80007b4 <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004702:	e009      	b.n	8004718 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004704:	f7fc f856 	bl	80007b4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d902      	bls.n	8004718 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	73fb      	strb	r3, [r7, #15]
        break;
 8004716:	e005      	b.n	8004724 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004718:	4b2c      	ldr	r3, [pc, #176]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ef      	bne.n	8004704 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d14a      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004730:	4b26      	ldr	r3, [pc, #152]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	0912      	lsrs	r2, r2, #4
 8004748:	0452      	lsls	r2, r2, #17
 800474a:	430a      	orrs	r2, r1
 800474c:	491f      	ldr	r1, [pc, #124]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	614b      	str	r3, [r1, #20]
 8004752:	e011      	b.n	8004778 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004754:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800475c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6892      	ldr	r2, [r2, #8]
 8004764:	0211      	lsls	r1, r2, #8
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6912      	ldr	r2, [r2, #16]
 800476a:	0852      	lsrs	r2, r2, #1
 800476c:	3a01      	subs	r2, #1
 800476e:	0652      	lsls	r2, r2, #25
 8004770:	430a      	orrs	r2, r1
 8004772:	4916      	ldr	r1, [pc, #88]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004778:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a13      	ldr	r2, [pc, #76]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800477e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004782:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fc f816 	bl	80007b4 <HAL_GetTick>
 8004788:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800478a:	e009      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800478c:	f7fc f812 	bl	80007b4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d902      	bls.n	80047a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	73fb      	strb	r3, [r7, #15]
          break;
 800479e:	e005      	b.n	80047ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ef      	beq.n	800478c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4904      	ldr	r1, [pc, #16]	@ (80047cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000

080047d0 <memset>:
 80047d0:	4402      	add	r2, r0
 80047d2:	4603      	mov	r3, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004818 <__libc_init_array+0x38>)
 80047e4:	4c0d      	ldr	r4, [pc, #52]	@ (800481c <__libc_init_array+0x3c>)
 80047e6:	1b64      	subs	r4, r4, r5
 80047e8:	10a4      	asrs	r4, r4, #2
 80047ea:	2600      	movs	r6, #0
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004820 <__libc_init_array+0x40>)
 80047f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004824 <__libc_init_array+0x44>)
 80047f4:	f000 f818 	bl	8004828 <_init>
 80047f8:	1b64      	subs	r4, r4, r5
 80047fa:	10a4      	asrs	r4, r4, #2
 80047fc:	2600      	movs	r6, #0
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	08004880 	.word	0x08004880
 800481c:	08004880 	.word	0x08004880
 8004820:	08004880 	.word	0x08004880
 8004824:	08004884 	.word	0x08004884

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
