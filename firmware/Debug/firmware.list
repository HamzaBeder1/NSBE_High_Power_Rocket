
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005060  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080051e8  080051e8  000061e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  0800524c  0800524c  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800524c  0800524c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005250  08005250  00006250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005254  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  080052b0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080052b0  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b057  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218e  00000000  00000000  000120e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00014278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083a  00000000  00000000  00014d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024be  00000000  00000000  0001559a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecf5  00000000  00000000  00017a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76a5  00000000  00000000  0002674d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ddf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  0010de38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00110cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051d0 	.word	0x080051d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080051d0 	.word	0x080051d0

080001c8 <writeRegister>:

bool sensorReady = 0;
bool transmitterReady = 0;
I2C_HandleTypeDef hI2C;

void writeRegister(uint8_t addr, uint8_t regAddr, uint8_t value){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	460b      	mov	r3, r1
 80001d4:	71bb      	strb	r3, [r7, #6]
 80001d6:	4613      	mov	r3, r2
 80001d8:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {regAddr, value};
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	733b      	strb	r3, [r7, #12]
 80001de:	797b      	ldrb	r3, [r7, #5]
 80001e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit_DMA(&hI2C, (addr << 1), data, 2);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	b29b      	uxth	r3, r3
 80001e6:	005b      	lsls	r3, r3, #1
 80001e8:	b299      	uxth	r1, r3
 80001ea:	f107 020c 	add.w	r2, r7, #12
 80001ee:	2302      	movs	r3, #2
 80001f0:	4808      	ldr	r0, [pc, #32]	@ (8000214 <writeRegister+0x4c>)
 80001f2:	f001 fa95 	bl	8001720 <HAL_I2C_Master_Transmit_DMA>
	while(!sensorReady);
 80001f6:	bf00      	nop
 80001f8:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <writeRegister+0x50>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	f083 0301 	eor.w	r3, r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f8      	bne.n	80001f8 <writeRegister+0x30>
	sensorReady = 0;
 8000206:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <writeRegister+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000007c 	.word	0x2000007c
 8000218:	20000079 	.word	0x20000079

0800021c <readRegister>:

void readRegister(uint8_t addr, uint8_t regAddr, uint8_t *result, uint16_t size){
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af02      	add	r7, sp, #8
 8000222:	603a      	str	r2, [r7, #0]
 8000224:	461a      	mov	r2, r3
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
 800022a:	460b      	mov	r3, r1
 800022c:	71bb      	strb	r3, [r7, #6]
 800022e:	4613      	mov	r3, r2
 8000230:	80bb      	strh	r3, [r7, #4]
	uint8_t data[1] = {regAddr};
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Sequential_Transmit_DMA(&hI2C, (addr << 1), data, 1, I2C_FIRST_FRAME);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	b29b      	uxth	r3, r3
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	b299      	uxth	r1, r3
 800023e:	f107 020c 	add.w	r2, r7, #12
 8000242:	2300      	movs	r3, #0
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2301      	movs	r3, #1
 8000248:	4815      	ldr	r0, [pc, #84]	@ (80002a0 <readRegister+0x84>)
 800024a:	f001 fb7d 	bl	8001948 <HAL_I2C_Master_Seq_Transmit_DMA>
	while(!sensorReady);
 800024e:	bf00      	nop
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <readRegister+0x88>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	f083 0301 	eor.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d1f8      	bne.n	8000250 <readRegister+0x34>
	sensorReady = 0;
 800025e:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <readRegister+0x88>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Sequential_Receive_DMA(&hI2C, (addr << 1) | (0x01), result, size, I2C_LAST_FRAME);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	b21b      	sxth	r3, r3
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	b21b      	sxth	r3, r3
 8000270:	b299      	uxth	r1, r3
 8000272:	88bb      	ldrh	r3, [r7, #4]
 8000274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000278:	9200      	str	r2, [sp, #0]
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	4808      	ldr	r0, [pc, #32]	@ (80002a0 <readRegister+0x84>)
 800027e:	f001 fcb3 	bl	8001be8 <HAL_I2C_Master_Seq_Receive_DMA>
	while(!transmitterReady);
 8000282:	bf00      	nop
 8000284:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <readRegister+0x8c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	f083 0301 	eor.w	r3, r3, #1
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1f8      	bne.n	8000284 <readRegister+0x68>
	transmitterReady = 0;
 8000292:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <readRegister+0x8c>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
}
 8000298:	bf00      	nop
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000007c 	.word	0x2000007c
 80002a4:	20000079 	.word	0x20000079
 80002a8:	2000007a 	.word	0x2000007a

080002ac <I2C_Init>:
		writeRegister(addr, regAddr+i, value[i]);
	}
}

//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 80002b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000324 <I2C_Init+0x78>)
 80002b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000328 <I2C_Init+0x7c>)
 80002b4:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 80002b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <I2C_Init+0x78>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002bc:	4b19      	ldr	r3, [pc, #100]	@ (8000324 <I2C_Init+0x78>)
 80002be:	2200      	movs	r2, #0
 80002c0:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c2:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <I2C_Init+0x78>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <I2C_Init+0x78>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 80002ce:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <I2C_Init+0x78>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002d4:	4b13      	ldr	r3, [pc, #76]	@ (8000324 <I2C_Init+0x78>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002da:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <I2C_Init+0x78>)
 80002dc:	2200      	movs	r2, #0
 80002de:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <I2C_Init+0x78>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <I2C_Init+0x78>)
 80002e8:	4a10      	ldr	r2, [pc, #64]	@ (800032c <I2C_Init+0x80>)
 80002ea:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 80002ec:	480d      	ldr	r0, [pc, #52]	@ (8000324 <I2C_Init+0x78>)
 80002ee:	f001 f97b 	bl	80015e8 <HAL_I2C_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <I2C_Init+0x50>
	{
		Error_Handler();
 80002f8:	f000 f8f6 	bl	80004e8 <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002fc:	2100      	movs	r1, #0
 80002fe:	4809      	ldr	r0, [pc, #36]	@ (8000324 <I2C_Init+0x78>)
 8000300:	f003 fa57 	bl	80037b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <I2C_Init+0x62>
	{
		Error_Handler();
 800030a:	f000 f8ed 	bl	80004e8 <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 800030e:	2100      	movs	r1, #0
 8000310:	4804      	ldr	r0, [pc, #16]	@ (8000324 <I2C_Init+0x78>)
 8000312:	f003 fa99 	bl	8003848 <HAL_I2CEx_ConfigDigitalFilter>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <I2C_Init+0x74>
    {
    	Error_Handler();
 800031c:	f000 f8e4 	bl	80004e8 <Error_Handler>
    }
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000007c 	.word	0x2000007c
 8000328:	40005400 	.word	0x40005400
 800032c:	00100d14 	.word	0x00100d14

08000330 <HAL_I2C_ErrorCallback>:

#define BUFFERSIZE 100
#define DS3231ADDR 0b1101000


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2CHandle){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a05      	ldr	r2, [pc, #20]	@ (8000368 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d102      	bne.n	800035c <HAL_I2C_MasterTxCpltCallback+0x18>
		sensorReady = 1;
 8000356:	4b05      	ldr	r3, [pc, #20]	@ (800036c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000358:	2201      	movs	r2, #1
 800035a:	701a      	strb	r2, [r3, #0]
	}
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40005400 	.word	0x40005400
 800036c:	20000079 	.word	0x20000079

08000370 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * I2CHandle){
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	if(I2CHandle->Instance == I2C1){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <HAL_I2C_MasterRxCpltCallback+0x24>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d102      	bne.n	8000388 <HAL_I2C_MasterRxCpltCallback+0x18>
		transmitterReady = 1;
 8000382:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
	}
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40005400 	.word	0x40005400
 8000398:	2000007a 	.word	0x2000007a

0800039c <main>:


int main(void)
{
 800039c:	b5b0      	push	{r4, r5, r7, lr}
 800039e:	b08a      	sub	sp, #40	@ 0x28
 80003a0:	af00      	add	r7, sp, #0
  HAL_Init();
 80003a2:	f000 fbaa 	bl	8000afa <HAL_Init>
  SystemClock_Config();
 80003a6:	f000 f833 	bl	8000410 <SystemClock_Config>
  DMA_Init();
 80003aa:	f000 f877 	bl	800049c <DMA_Init>
  I2C_Init();
 80003ae:	f7ff ff7d 	bl	80002ac <I2C_Init>
  uint8_t arr[] = {30, 0, 11, 28, 7, 12};
 80003b2:	4a13      	ldr	r2, [pc, #76]	@ (8000400 <main+0x64>)
 80003b4:	f107 031c 	add.w	r3, r7, #28
 80003b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003bc:	6018      	str	r0, [r3, #0]
 80003be:	3304      	adds	r3, #4
 80003c0:	8019      	strh	r1, [r3, #0]
  //initDS3231(2024, arr, 1, 12);
  //get_bmp_t();
  initMPU6050(0);
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 f896 	bl	80004f4 <initMPU6050>
  uint8_t timeData[6] = {30, 14, 4, 3, 24, 12};
 80003c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <main+0x68>)
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003d2:	6018      	str	r0, [r3, #0]
 80003d4:	3304      	adds	r3, #4
 80003d6:	8019      	strh	r1, [r3, #0]
  char header[] = "Time,Acceleration";
 80003d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <main+0x6c>)
 80003da:	463c      	mov	r4, r7
 80003dc:	461d      	mov	r5, r3
 80003de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e2:	682b      	ldr	r3, [r5, #0]
 80003e4:	8023      	strh	r3, [r4, #0]
  while (1)
  {
	  //getDateAndTime();
	  getAccelMPU6050(second);
 80003e6:	4b09      	ldr	r3, [pc, #36]	@ (800040c <main+0x70>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f93a 	bl	8000664 <getAccelMPU6050>
	  //getAltitudeBMP180(second);
	  int x = 21;
 80003f0:	2315      	movs	r3, #21
 80003f2:	627b      	str	r3, [r7, #36]	@ 0x24
	  x+=1;
 80003f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003f6:	3301      	adds	r3, #1
 80003f8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
 80003fa:	bf00      	nop
 80003fc:	e7f3      	b.n	80003e6 <main+0x4a>
 80003fe:	bf00      	nop
 8000400:	080051e8 	.word	0x080051e8
 8000404:	080051f0 	.word	0x080051f0
 8000408:	080051f8 	.word	0x080051f8
 800040c:	20000078 	.word	0x20000078

08000410 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b096      	sub	sp, #88	@ 0x58
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	2244      	movs	r2, #68	@ 0x44
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f004 fe32 	bl	8005088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	463b      	mov	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000432:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000436:	f003 fa61 	bl	80038fc <HAL_PWREx_ControlVoltageScaling>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000440:	f000 f852 	bl	80004e8 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000444:	2310      	movs	r3, #16
 8000446:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000448:	2301      	movs	r3, #1
 800044a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000450:	2360      	movs	r3, #96	@ 0x60
 8000452:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000454:	2300      	movs	r3, #0
 8000456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4618      	mov	r0, r3
 800045e:	f003 faa3 	bl	80039a8 <HAL_RCC_OscConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000468:	f000 f83e 	bl	80004e8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046c:	230f      	movs	r3, #15
 800046e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000480:	463b      	mov	r3, r7
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fe6b 	bl	8004160 <HAL_RCC_ClockConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000490:	f000 f82a 	bl	80004e8 <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3758      	adds	r7, #88	@ 0x58
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <DMA_Init>:


//PB6 = SCL1, PB7 = SDA1


void DMA_Init(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <DMA_Init+0x48>)
 80004a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004a6:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <DMA_Init+0x48>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ae:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <DMA_Init+0x48>)
 80004b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2010      	movs	r0, #16
 80004c0:	f000 fc6b 	bl	8000d9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004c4:	2010      	movs	r0, #16
 80004c6:	f000 fc84 	bl	8000dd2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2011      	movs	r0, #17
 80004d0:	f000 fc63 	bl	8000d9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004d4:	2011      	movs	r0, #17
 80004d6:	f000 fc7c 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <Error_Handler>:
}



void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  __disable_irq();
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <Error_Handler+0x8>

080004f4 <initMPU6050>:

int accel_idx;
int velocity_idx;
int altitude_idx;

void initMPU6050(unsigned char AFS_SEL){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	switch(AFS_SEL){
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d818      	bhi.n	8000536 <initMPU6050+0x42>
 8000504:	a201      	add	r2, pc, #4	@ (adr r2, 800050c <initMPU6050+0x18>)
 8000506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050a:	bf00      	nop
 800050c:	0800051d 	.word	0x0800051d
 8000510:	08000525 	.word	0x08000525
 8000514:	0800052b 	.word	0x0800052b
 8000518:	08000531 	.word	0x08000531
	case RANGE_2G:
		step = 0.00059877;
 800051c:	4b44      	ldr	r3, [pc, #272]	@ (8000630 <initMPU6050+0x13c>)
 800051e:	4a45      	ldr	r2, [pc, #276]	@ (8000634 <initMPU6050+0x140>)
 8000520:	601a      	str	r2, [r3, #0]
		break;
 8000522:	e009      	b.n	8000538 <initMPU6050+0x44>
	case RANGE_4G:
		step = 0.00119;
 8000524:	4b42      	ldr	r3, [pc, #264]	@ (8000630 <initMPU6050+0x13c>)
 8000526:	4a44      	ldr	r2, [pc, #272]	@ (8000638 <initMPU6050+0x144>)
 8000528:	601a      	str	r2, [r3, #0]
	case RANGE_8G:
		step = 0.002395;
 800052a:	4b41      	ldr	r3, [pc, #260]	@ (8000630 <initMPU6050+0x13c>)
 800052c:	4a43      	ldr	r2, [pc, #268]	@ (800063c <initMPU6050+0x148>)
 800052e:	601a      	str	r2, [r3, #0]
	case RANGE_16G:
		step = 0.00479;
 8000530:	4b3f      	ldr	r3, [pc, #252]	@ (8000630 <initMPU6050+0x13c>)
 8000532:	4a43      	ldr	r2, [pc, #268]	@ (8000640 <initMPU6050+0x14c>)
 8000534:	601a      	str	r2, [r3, #0]
	default:
		break;
 8000536:	bf00      	nop
	}

	writeRegister(MPU6050ADDR, PWR_MGMT_1, 0x80);
 8000538:	2280      	movs	r2, #128	@ 0x80
 800053a:	216b      	movs	r1, #107	@ 0x6b
 800053c:	2068      	movs	r0, #104	@ 0x68
 800053e:	f7ff fe43 	bl	80001c8 <writeRegister>
	bool device_reset = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	75fb      	strb	r3, [r7, #23]
	while(device_reset){
 8000546:	e00e      	b.n	8000566 <initMPU6050+0x72>
		uint8_t pwr_mgmt[1];
		readRegister(MPU6050ADDR, PWR_MGMT_1, pwr_mgmt, 1);
 8000548:	f107 020c 	add.w	r2, r7, #12
 800054c:	2301      	movs	r3, #1
 800054e:	216b      	movs	r1, #107	@ 0x6b
 8000550:	2068      	movs	r0, #104	@ 0x68
 8000552:	f7ff fe63 	bl	800021c <readRegister>
		device_reset = (pwr_mgmt[0] >> 7);
 8000556:	7b3b      	ldrb	r3, [r7, #12]
 8000558:	09db      	lsrs	r3, r3, #7
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	75fb      	strb	r3, [r7, #23]
	while(device_reset){
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1ed      	bne.n	8000548 <initMPU6050+0x54>
	}
	writeRegister(MPU6050ADDR, PWR_MGMT_1, 0x00);
 800056c:	2200      	movs	r2, #0
 800056e:	216b      	movs	r1, #107	@ 0x6b
 8000570:	2068      	movs	r0, #104	@ 0x68
 8000572:	f7ff fe29 	bl	80001c8 <writeRegister>
	uint8_t pwr_mgmt[1];
	readRegister(MPU6050ADDR, PWR_MGMT_1, pwr_mgmt, 1);
 8000576:	f107 0214 	add.w	r2, r7, #20
 800057a:	2301      	movs	r3, #1
 800057c:	216b      	movs	r1, #107	@ 0x6b
 800057e:	2068      	movs	r0, #104	@ 0x68
 8000580:	f7ff fe4c 	bl	800021c <readRegister>
	writeRegister(MPU6050ADDR, SIGNAL_PATH_RESET, 0x07);
 8000584:	2207      	movs	r2, #7
 8000586:	2168      	movs	r1, #104	@ 0x68
 8000588:	2068      	movs	r0, #104	@ 0x68
 800058a:	f7ff fe1d 	bl	80001c8 <writeRegister>
	uint8_t temp[1];
	readRegister(MPU6050ADDR, ACCEL_CONFIG, temp, 1);
 800058e:	f107 0210 	add.w	r2, r7, #16
 8000592:	2301      	movs	r3, #1
 8000594:	211c      	movs	r1, #28
 8000596:	2068      	movs	r0, #104	@ 0x68
 8000598:	f7ff fe40 	bl	800021c <readRegister>
	temp[0] &= 0b11100111;
 800059c:	7c3b      	ldrb	r3, [r7, #16]
 800059e:	f023 0318 	bic.w	r3, r3, #24
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	743b      	strb	r3, [r7, #16]
	temp[0] |= (AFS_SEL << 3);
 80005a6:	7c3b      	ldrb	r3, [r7, #16]
 80005a8:	b25a      	sxtb	r2, r3
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	743b      	strb	r3, [r7, #16]
	writeRegister(MPU6050ADDR, ACCEL_CONFIG, temp[0]);
 80005b8:	7c3b      	ldrb	r3, [r7, #16]
 80005ba:	461a      	mov	r2, r3
 80005bc:	211c      	movs	r1, #28
 80005be:	2068      	movs	r0, #104	@ 0x68
 80005c0:	f7ff fe02 	bl	80001c8 <writeRegister>
	writeRegister(MPU6050ADDR, SMPRT_DIV, 0x00);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2119      	movs	r1, #25
 80005c8:	2068      	movs	r0, #104	@ 0x68
 80005ca:	f7ff fdfd 	bl	80001c8 <writeRegister>

	total_buffer_size = 100;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <initMPU6050+0x150>)
 80005d0:	2264      	movs	r2, #100	@ 0x64
 80005d2:	601a      	str	r2, [r3, #0]
	accel_buffer_MPU6050 = (accelMPU6050*)malloc(sizeof(accelMPU6050)*total_buffer_size);
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <initMPU6050+0x150>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fc68 	bl	8004eb0 <malloc>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <initMPU6050+0x154>)
 80005e6:	601a      	str	r2, [r3, #0]
	velocity_buffer_MPU6050 = (velocityMPU6050*)malloc(sizeof(velocityMPU6050)*total_buffer_size);
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <initMPU6050+0x150>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fc5e 	bl	8004eb0 <malloc>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b14      	ldr	r3, [pc, #80]	@ (800064c <initMPU6050+0x158>)
 80005fa:	601a      	str	r2, [r3, #0]
	altitude_buffer_MPU6050 = (altitudeMPU6050*)malloc(sizeof(altitudeMPU6050)*total_buffer_size);
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <initMPU6050+0x150>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fc54 	bl	8004eb0 <malloc>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <initMPU6050+0x15c>)
 800060e:	601a      	str	r2, [r3, #0]
	curr_buffer_size = 0;
 8000610:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <initMPU6050+0x160>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
	accel_idx = 0;
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <initMPU6050+0x164>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
	velocity_idx = 0;
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <initMPU6050+0x168>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
	altitude_idx = 0;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <initMPU6050+0x16c>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000160 	.word	0x20000160
 8000634:	3a1cf6c6 	.word	0x3a1cf6c6
 8000638:	3a9bf9c6 	.word	0x3a9bf9c6
 800063c:	3b1cf56f 	.word	0x3b1cf56f
 8000640:	3b9cf56f 	.word	0x3b9cf56f
 8000644:	20000170 	.word	0x20000170
 8000648:	20000164 	.word	0x20000164
 800064c:	20000168 	.word	0x20000168
 8000650:	2000016c 	.word	0x2000016c
 8000654:	20000174 	.word	0x20000174
 8000658:	20000178 	.word	0x20000178
 800065c:	2000017c 	.word	0x2000017c
 8000660:	20000180 	.word	0x20000180

08000664 <getAccelMPU6050>:

void getAccelMPU6050(int s){
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b08b      	sub	sp, #44	@ 0x2c
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint8_t accelReg[6];
	readRegister(MPU6050ADDR,ACCEL_XOUT_H, accelReg, 6);
 800066c:	f107 021c 	add.w	r2, r7, #28
 8000670:	2306      	movs	r3, #6
 8000672:	213b      	movs	r1, #59	@ 0x3b
 8000674:	2068      	movs	r0, #104	@ 0x68
 8000676:	f7ff fdd1 	bl	800021c <readRegister>

	int16_t X = (accelReg[0] << 8) | (accelReg[1]);
 800067a:	7f3b      	ldrb	r3, [r7, #28]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21a      	sxth	r2, r3
 8000680:	7f7b      	ldrb	r3, [r7, #29]
 8000682:	b21b      	sxth	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t Y = (accelReg[2] << 8) | (accelReg[3]);
 8000688:	7fbb      	ldrb	r3, [r7, #30]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t Z = (accelReg[4] << 8) | (accelReg[5]);
 8000696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	b21a      	sxth	r2, r3
 800069e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	847b      	strh	r3, [r7, #34]	@ 0x22

	accelMPU6050 a;
	a.accelX = X*step;
 80006a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b4:	4b33      	ldr	r3, [pc, #204]	@ (8000784 <getAccelMPU6050+0x120>)
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006be:	edc7 7a03 	vstr	s15, [r7, #12]
	a.accelY = Y*step;
 80006c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <getAccelMPU6050+0x120>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	edc7 7a04 	vstr	s15, [r7, #16]
	a.accelZ = Z*step;
 80006dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80006e0:	ee07 3a90 	vmov	s15, r3
 80006e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <getAccelMPU6050+0x120>)
 80006ea:	edd3 7a00 	vldr	s15, [r3]
 80006ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006f2:	edc7 7a05 	vstr	s15, [r7, #20]
	a.seconds = s;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	763b      	strb	r3, [r7, #24]

	if(curr_buffer_size + 1 >= total_buffer_size){
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <getAccelMPU6050+0x124>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <getAccelMPU6050+0x128>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	429a      	cmp	r2, r3
 8000708:	d328      	bcc.n	800075c <getAccelMPU6050+0xf8>
		total_buffer_size*=2;
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <getAccelMPU6050+0x128>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <getAccelMPU6050+0x128>)
 8000712:	6013      	str	r3, [r2, #0]
		accel_buffer_MPU6050 = (accelMPU6050*)realloc(accel_buffer_MPU6050, total_buffer_size*sizeof(accelMPU6050));
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <getAccelMPU6050+0x12c>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <getAccelMPU6050+0x128>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	4619      	mov	r1, r3
 8000720:	4610      	mov	r0, r2
 8000722:	f004 fc7b 	bl	800501c <realloc>
 8000726:	4603      	mov	r3, r0
 8000728:	4a19      	ldr	r2, [pc, #100]	@ (8000790 <getAccelMPU6050+0x12c>)
 800072a:	6013      	str	r3, [r2, #0]
		velocity_buffer_MPU6050 = (velocityMPU6050*)realloc(velocity_buffer_MPU6050, total_buffer_size*sizeof(velocityMPU6050));
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <getAccelMPU6050+0x130>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <getAccelMPU6050+0x128>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4610      	mov	r0, r2
 800073a:	f004 fc6f 	bl	800501c <realloc>
 800073e:	4603      	mov	r3, r0
 8000740:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <getAccelMPU6050+0x130>)
 8000742:	6013      	str	r3, [r2, #0]
		altitude_buffer_MPU6050 = (altitudeMPU6050*)realloc(altitude_buffer_MPU6050, total_buffer_size*sizeof(altitudeMPU6050));
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <getAccelMPU6050+0x134>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <getAccelMPU6050+0x128>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4610      	mov	r0, r2
 8000752:	f004 fc63 	bl	800501c <realloc>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <getAccelMPU6050+0x134>)
 800075a:	6013      	str	r3, [r2, #0]
	}

	accel_buffer_MPU6050[accel_idx++] = a;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <getAccelMPU6050+0x12c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <getAccelMPU6050+0x138>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	1c59      	adds	r1, r3, #1
 8000766:	480d      	ldr	r0, [pc, #52]	@ (800079c <getAccelMPU6050+0x138>)
 8000768:	6001      	str	r1, [r0, #0]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	4413      	add	r3, r2
 800076e:	461c      	mov	r4, r3
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800077a:	bf00      	nop
 800077c:	372c      	adds	r7, #44	@ 0x2c
 800077e:	46bd      	mov	sp, r7
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	bf00      	nop
 8000784:	20000160 	.word	0x20000160
 8000788:	20000174 	.word	0x20000174
 800078c:	20000170 	.word	0x20000170
 8000790:	20000164 	.word	0x20000164
 8000794:	20000168 	.word	0x20000168
 8000798:	2000016c 	.word	0x2000016c
 800079c:	20000178 	.word	0x20000178

080007a0 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007aa:	4a0e      	ldr	r2, [pc, #56]	@ (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0ac      	sub	sp, #176	@ 0xb0
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 80007f0:	4b57      	ldr	r3, [pc, #348]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 80007f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f4:	4a56      	ldr	r2, [pc, #344]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 80007f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80007fc:	4b54      	ldr	r3, [pc, #336]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 80007fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000808:	4b51      	ldr	r3, [pc, #324]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	4a50      	ldr	r2, [pc, #320]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000814:	4b4e      	ldr	r3, [pc, #312]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000824:	2288      	movs	r2, #136	@ 0x88
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f004 fc2d 	bl	8005088 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800082e:	2340      	movs	r3, #64	@ 0x40
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000832:	2300      	movs	r3, #0
 8000834:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fe7c 	bl	8004538 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 8000846:	f7ff fe4f 	bl	80004e8 <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800084a:	23c0      	movs	r3, #192	@ 0xc0
 800084c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	2312      	movs	r3, #18
 8000850:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085a:	2304      	movs	r3, #4
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 800085e:	4b3c      	ldr	r3, [pc, #240]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a3b      	ldr	r2, [pc, #236]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b39      	ldr	r3, [pc, #228]	@ (8000950 <HAL_I2C_MspInit+0x168>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4835      	ldr	r0, [pc, #212]	@ (8000954 <HAL_I2C_MspInit+0x16c>)
 800087e:	f000 fd09 	bl	8001294 <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000882:	4b35      	ldr	r3, [pc, #212]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 8000884:	4a35      	ldr	r2, [pc, #212]	@ (800095c <HAL_I2C_MspInit+0x174>)
 8000886:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000888:	4b33      	ldr	r3, [pc, #204]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 800088a:	2203      	movs	r2, #3
 800088c:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088e:	4b32      	ldr	r3, [pc, #200]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 8000890:	2210      	movs	r2, #16
 8000892:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000894:	4b30      	ldr	r3, [pc, #192]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 80008b8:	4827      	ldr	r0, [pc, #156]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 80008ba:	f000 faa5 	bl	8000e08 <HAL_DMA_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 80008c4:	f7ff fe10 	bl	80004e8 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a23      	ldr	r2, [pc, #140]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 80008cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80008ce:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <HAL_I2C_MspInit+0x170>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <HAL_I2C_MspInit+0x17c>)
 80008d8:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 80008dc:	2203      	movs	r2, #3
 80008de:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 80008ee:	2280      	movs	r2, #128	@ 0x80
 80008f0:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 800090a:	4815      	ldr	r0, [pc, #84]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 800090c:	f000 fa7c 	bl	8000e08 <HAL_DMA_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_I2C_MspInit+0x132>
		Error_Handler();
 8000916:	f7ff fde7 	bl	80004e8 <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a10      	ldr	r2, [pc, #64]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 800091e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000920:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <HAL_I2C_MspInit+0x178>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	201f      	movs	r0, #31
 800092c:	f000 fa35 	bl	8000d9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000930:	201f      	movs	r0, #31
 8000932:	f000 fa4e 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2020      	movs	r0, #32
 800093c:	f000 fa2d 	bl	8000d9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000940:	2020      	movs	r0, #32
 8000942:	f000 fa46 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
}
 8000946:	bf00      	nop
 8000948:	37b0      	adds	r7, #176	@ 0xb0
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400
 8000958:	200000d0 	.word	0x200000d0
 800095c:	4002006c 	.word	0x4002006c
 8000960:	20000118 	.word	0x20000118
 8000964:	40020080 	.word	0x40020080

08000968 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_i2c1_tx;
extern DMA_HandleTypeDef hdma_i2c1_rx;
extern I2C_HandleTypeDef hI2C;

void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:


void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80009be:	f000 f8f1 	bl	8000ba4 <HAL_IncTick>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <DMA1_Channel6_IRQHandler+0x10>)
 80009ce:	f000 fb74 	bl	80010ba <HAL_DMA_IRQHandler>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000d0 	.word	0x200000d0

080009dc <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <DMA1_Channel7_IRQHandler+0x10>)
 80009e2:	f000 fb6a 	bl	80010ba <HAL_DMA_IRQHandler>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000118 	.word	0x20000118

080009f0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hI2C);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <I2C1_EV_IRQHandler+0x10>)
 80009f6:	f001 f9fb 	bl	8001df0 <HAL_I2C_EV_IRQHandler>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000007c 	.word	0x2000007c

08000a04 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hI2C);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <I2C1_ER_IRQHandler+0x10>)
 8000a0a:	f001 fa0b 	bl	8001e24 <HAL_I2C_ER_IRQHandler>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000007c 	.word	0x2000007c

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f004 fb36 	bl	80050b8 <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20018000 	.word	0x20018000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	20000184 	.word	0x20000184
 8000a80:	200002d8 	.word	0x200002d8

08000a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f004 faf5 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ada:	f7ff fc5f 	bl	800039c <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000aec:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 8000af0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000af4:	200002d4 	.word	0x200002d4

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>

08000afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f93d 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f80e 	bl	8000b2c <HAL_InitTick>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	e001      	b.n	8000b20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b1c:	f7ff fe40 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d023      	beq.n	8000b88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_InitTick+0x70>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_InitTick+0x6c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f949 	bl	8000dee <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10f      	bne.n	8000b82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d809      	bhi.n	8000b7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f913 	bl	8000d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_InitTick+0x74>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e007      	b.n	8000b8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e004      	b.n	8000b8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	e001      	b.n	8000b8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000188 	.word	0x20000188

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000188 	.word	0x20000188

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e098      	b.n	8000f4c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b4d      	ldr	r3, [pc, #308]	@ (8000f58 <HAL_DMA_Init+0x150>)
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d80f      	bhi.n	8000e46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f5c <HAL_DMA_Init+0x154>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a4b      	ldr	r2, [pc, #300]	@ (8000f60 <HAL_DMA_Init+0x158>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	009a      	lsls	r2, r3, #2
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a48      	ldr	r2, [pc, #288]	@ (8000f64 <HAL_DMA_Init+0x15c>)
 8000e42:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e44:	e00e      	b.n	8000e64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b46      	ldr	r3, [pc, #280]	@ (8000f68 <HAL_DMA_Init+0x160>)
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a43      	ldr	r2, [pc, #268]	@ (8000f60 <HAL_DMA_Init+0x158>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	009a      	lsls	r2, r3, #2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a42      	ldr	r2, [pc, #264]	@ (8000f6c <HAL_DMA_Init+0x164>)
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2202      	movs	r2, #2
 8000e68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ebe:	d039      	beq.n	8000f34 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	4a27      	ldr	r2, [pc, #156]	@ (8000f64 <HAL_DMA_Init+0x15c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d11a      	bne.n	8000f00 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <HAL_DMA_Init+0x168>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	f003 031c 	and.w	r3, r3, #28
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4924      	ldr	r1, [pc, #144]	@ (8000f70 <HAL_DMA_Init+0x168>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <HAL_DMA_Init+0x168>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6859      	ldr	r1, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef0:	f003 031c 	and.w	r3, r3, #28
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	491d      	ldr	r1, [pc, #116]	@ (8000f70 <HAL_DMA_Init+0x168>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
 8000efe:	e019      	b.n	8000f34 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f00:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <HAL_DMA_Init+0x16c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f08:	f003 031c 	and.w	r3, r3, #28
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	4917      	ldr	r1, [pc, #92]	@ (8000f74 <HAL_DMA_Init+0x16c>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <HAL_DMA_Init+0x16c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6859      	ldr	r1, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f003 031c 	and.w	r3, r3, #28
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	4911      	ldr	r1, [pc, #68]	@ (8000f74 <HAL_DMA_Init+0x16c>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40020407 	.word	0x40020407
 8000f5c:	bffdfff8 	.word	0xbffdfff8
 8000f60:	cccccccd 	.word	0xcccccccd
 8000f64:	40020000 	.word	0x40020000
 8000f68:	bffdfbf8 	.word	0xbffdfbf8
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	400200a8 	.word	0x400200a8
 8000f74:	400204a8 	.word	0x400204a8

08000f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_DMA_Start_IT+0x20>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e04b      	b.n	8001030 <HAL_DMA_Start_IT+0xb8>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d13a      	bne.n	8001022 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f92f 	bl	8001234 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 020e 	orr.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00f      	b.n	8001010 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0204 	bic.w	r2, r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 020a 	orr.w	r2, r2, #10
 800100e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e005      	b.n	800102e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800102a:	2302      	movs	r3, #2
 800102c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d005      	beq.n	800105c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e029      	b.n	80010b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 020e 	bic.w	r2, r2, #14
 800106a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001080:	f003 021c 	and.w	r2, r3, #28
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	2101      	movs	r1, #1
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	4798      	blx	r3
    }
  }
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f003 031c 	and.w	r3, r3, #28
 80010da:	2204      	movs	r2, #4
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d026      	beq.n	8001134 <HAL_DMA_IRQHandler+0x7a>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d021      	beq.n	8001134 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0320 	and.w	r3, r3, #32
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d107      	bne.n	800110e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0204 	bic.w	r2, r2, #4
 800110c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f003 021c 	and.w	r2, r3, #28
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	2104      	movs	r1, #4
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	2b00      	cmp	r3, #0
 8001128:	d071      	beq.n	800120e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001132:	e06c      	b.n	800120e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	f003 031c 	and.w	r3, r3, #28
 800113c:	2202      	movs	r2, #2
 800113e:	409a      	lsls	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d02e      	beq.n	80011a6 <HAL_DMA_IRQHandler+0xec>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d029      	beq.n	80011a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10b      	bne.n	8001178 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 020a 	bic.w	r2, r2, #10
 800116e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117c:	f003 021c 	and.w	r2, r3, #28
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	2102      	movs	r1, #2
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001198:	2b00      	cmp	r3, #0
 800119a:	d038      	beq.n	800120e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011a4:	e033      	b.n	800120e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f003 031c 	and.w	r3, r3, #28
 80011ae:	2208      	movs	r2, #8
 80011b0:	409a      	lsls	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02a      	beq.n	8001210 <HAL_DMA_IRQHandler+0x156>
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d025      	beq.n	8001210 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 020e 	bic.w	r2, r2, #14
 80011d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d8:	f003 021c 	and.w	r2, r3, #28
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800120e:	bf00      	nop
 8001210:	bf00      	nop
}
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001226:	b2db      	uxtb	r3, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f003 021c 	and.w	r2, r3, #28
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b10      	cmp	r3, #16
 8001264:	d108      	bne.n	8001278 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001276:	e007      	b.n	8001288 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	60da      	str	r2, [r3, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e17f      	b.n	80015a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8171 	beq.w	800159e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d005      	beq.n	80012d4 <HAL_GPIO_Init+0x40>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 0201 	and.w	r2, r3, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b03      	cmp	r3, #3
 8001340:	d118      	bne.n	8001374 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80ac 	beq.w	800159e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b5f      	ldr	r3, [pc, #380]	@ (80015c4 <HAL_GPIO_Init+0x330>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144a:	4a5e      	ldr	r2, [pc, #376]	@ (80015c4 <HAL_GPIO_Init+0x330>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	@ 0x60
 8001452:	4b5c      	ldr	r3, [pc, #368]	@ (80015c4 <HAL_GPIO_Init+0x330>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145e:	4a5a      	ldr	r2, [pc, #360]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001488:	d025      	beq.n	80014d6 <HAL_GPIO_Init+0x242>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	@ (80015cc <HAL_GPIO_Init+0x338>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_GPIO_Init+0x23e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	@ (80015d0 <HAL_GPIO_Init+0x33c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_GPIO_Init+0x23a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	@ (80015d4 <HAL_GPIO_Init+0x340>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x236>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	@ (80015d8 <HAL_GPIO_Init+0x344>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x232>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	@ (80015dc <HAL_GPIO_Init+0x348>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4a      	ldr	r2, [pc, #296]	@ (80015e0 <HAL_GPIO_Init+0x34c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x22a>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00c      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00a      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014d6:	2300      	movs	r3, #0
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e8:	4937      	ldr	r1, [pc, #220]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800151a:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001544:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156e:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001598:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <HAL_GPIO_Init+0x350>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f47f ae78 	bne.w	80012a4 <HAL_GPIO_Init+0x10>
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	48000400 	.word	0x48000400
 80015d0:	48000800 	.word	0x48000800
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48001000 	.word	0x48001000
 80015dc:	48001400 	.word	0x48001400
 80015e0:	48001800 	.word	0x48001800
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e08d      	b.n	8001716 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff f8ea 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2224      	movs	r2, #36	@ 0x24
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e006      	b.n	8001670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800166e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d108      	bne.n	800168a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	e007      	b.n	800169a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001698:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69d9      	ldr	r1, [r3, #28]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	460b      	mov	r3, r1
 800172e:	817b      	strh	r3, [r7, #10]
 8001730:	4613      	mov	r3, r2
 8001732:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b20      	cmp	r3, #32
 8001742:	f040 80ef 	bne.w	8001924 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001754:	d101      	bne.n	800175a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
 8001758:	e0e5      	b.n	8001926 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_I2C_Master_Transmit_DMA+0x48>
 8001764:	2302      	movs	r3, #2
 8001766:	e0de      	b.n	8001926 <HAL_I2C_Master_Transmit_DMA+0x206>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2221      	movs	r2, #33	@ 0x21
 8001774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2210      	movs	r2, #16
 800177c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	893a      	ldrh	r2, [r7, #8]
 8001790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a66      	ldr	r2, [pc, #408]	@ (8001930 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8001796:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a66      	ldr	r2, [pc, #408]	@ (8001934 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800179c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2bff      	cmp	r3, #255	@ 0xff
 80017a6:	d906      	bls.n	80017b6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	22ff      	movs	r2, #255	@ 0xff
 80017ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80017ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	e007      	b.n	80017c6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017c4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01a      	beq.n	8001804 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	d074      	beq.n	80018f6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001810:	2b00      	cmp	r3, #0
 8001812:	d022      	beq.n	800185a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001818:	4a47      	ldr	r2, [pc, #284]	@ (8001938 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001820:	4a46      	ldr	r2, [pc, #280]	@ (800193c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8001822:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001844:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800184a:	f7ff fb95 	bl	8000f78 <HAL_DMA_Start_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d13a      	bne.n	80018ce <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8001858:	e013      	b.n	8001882 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e051      	b.n	8001926 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001886:	b2db      	uxtb	r3, r3
 8001888:	3301      	adds	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	8979      	ldrh	r1, [r7, #10]
 800188e:	4b2c      	ldr	r3, [pc, #176]	@ (8001940 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f001 fe5d 	bl	8003554 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80018b4:	2110      	movs	r1, #16
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f001 fe7e 	bl	80035b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e028      	b.n	8001920 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e017      	b.n	8001926 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	8979      	ldrh	r1, [r7, #10]
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f001 fe22 	bl	8003554 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001918:	2101      	movs	r1, #1
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f001 fe4c 	bl	80035b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	ffff0000 	.word	0xffff0000
 8001934:	080023cb 	.word	0x080023cb
 8001938:	080033a3 	.word	0x080033a3
 800193c:	080034eb 	.word	0x080034eb
 8001940:	80002000 	.word	0x80002000
 8001944:	08001f6f 	.word	0x08001f6f

08001948 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	461a      	mov	r2, r3
 8001954:	460b      	mov	r3, r1
 8001956:	817b      	strh	r3, [r7, #10]
 8001958:	4613      	mov	r3, r2
 800195a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800195c:	4b90      	ldr	r3, [pc, #576]	@ (8001ba0 <HAL_I2C_Master_Seq_Transmit_DMA+0x258>)
 800195e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b20      	cmp	r3, #32
 800196e:	f040 8135 	bne.w	8001bdc <HAL_I2C_Master_Seq_Transmit_DMA+0x294>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_I2C_Master_Seq_Transmit_DMA+0x38>
 800197c:	2302      	movs	r3, #2
 800197e:	e12e      	b.n	8001bde <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2221      	movs	r2, #33	@ 0x21
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2210      	movs	r2, #16
 8001994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	893a      	ldrh	r2, [r7, #8]
 80019a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ba4 <HAL_I2C_Master_Seq_Transmit_DMA+0x25c>)
 80019b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2bff      	cmp	r3, #255	@ 0xff
 80019be:	d906      	bls.n	80019ce <HAL_I2C_Master_Seq_Transmit_DMA+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	22ff      	movs	r2, #255	@ 0xff
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80019c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e007      	b.n	80019de <HAL_I2C_Master_Seq_Transmit_DMA+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d021      	beq.n	8001a2a <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
 80019e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019f2:	d11a      	bne.n	8001a2a <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0e:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	2b11      	cmp	r3, #17
 8001a30:	d10e      	bne.n	8001a50 <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8001a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a34:	2baa      	cmp	r3, #170	@ 0xaa
 8001a36:	d003      	beq.n	8001a40 <HAL_I2C_Master_Seq_Transmit_DMA+0xf8>
 8001a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3a:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 8001a3e:	d101      	bne.n	8001a44 <HAL_I2C_Master_Seq_Transmit_DMA+0xfc>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_I2C_Master_Seq_Transmit_DMA+0xfe>
 8001a44:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	e00a      	b.n	8001a66 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f001 fe93 	bl	800377c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2bff      	cmp	r3, #255	@ 0xff
 8001a5e:	d802      	bhi.n	8001a66 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
      {
        xfermode = hi2c->XferOptions;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8084 	beq.w	8001b78 <HAL_I2C_Master_Seq_Transmit_DMA+0x230>
    {
      if (hi2c->hdmatx != NULL)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d022      	beq.n	8001abe <HAL_I2C_Master_Seq_Transmit_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba8 <HAL_I2C_Master_Seq_Transmit_DMA+0x260>)
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a84:	4a49      	ldr	r2, [pc, #292]	@ (8001bac <HAL_I2C_Master_Seq_Transmit_DMA+0x264>)
 8001a86:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a94:	2200      	movs	r2, #0
 8001a96:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001aa8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8001aae:	f7ff fa63 	bl	8000f78 <HAL_DMA_Start_IT>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001ab6:	7cfb      	ldrb	r3, [r7, #19]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d149      	bne.n	8001b50 <HAL_I2C_Master_Seq_Transmit_DMA+0x208>
 8001abc:	e013      	b.n	8001ae6 <HAL_I2C_Master_Seq_Transmit_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07b      	b.n	8001bde <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      {
        /* Send Slave Address and set NBYTES to write */
        if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 8001ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ac>
 8001aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001af2:	d109      	bne.n	8001b08 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	8979      	ldrh	r1, [r7, #10]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f001 fd27 	bl	8003554 <I2C_TransferConfig>
 8001b06:	e009      	b.n	8001b1c <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
        }
        else
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	8979      	ldrh	r1, [r7, #10]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f001 fd1c 	bl	8003554 <I2C_TransferConfig>
        }

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001b36:	2110      	movs	r1, #16
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f001 fd3d 	bl	80035b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e043      	b.n	8001bd8 <HAL_I2C_Master_Seq_Transmit_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b64:	f043 0210 	orr.w	r2, r3, #16
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e032      	b.n	8001bde <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <HAL_I2C_Master_Seq_Transmit_DMA+0x268>)
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 8001b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_I2C_Master_Seq_Transmit_DMA+0x244>
 8001b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b8a:	d113      	bne.n	8001bb4 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	8979      	ldrh	r1, [r7, #10]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f001 fcdb 	bl	8003554 <I2C_TransferConfig>
 8001b9e:	e013      	b.n	8001bc8 <HAL_I2C_Master_Seq_Transmit_DMA+0x280>
 8001ba0:	80002000 	.word	0x80002000
 8001ba4:	080023cb 	.word	0x080023cb
 8001ba8:	080033a3 	.word	0x080033a3
 8001bac:	080034eb 	.word	0x080034eb
 8001bb0:	08001f6f 	.word	0x08001f6f
      }
      else
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	8979      	ldrh	r1, [r7, #10]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f001 fcc6 	bl	8003554 <I2C_TransferConfig>
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f001 fcf0 	bl	80035b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
  }
  else
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop

08001be8 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	817b      	strh	r3, [r7, #10]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8001bfc:	4b77      	ldr	r3, [pc, #476]	@ (8001ddc <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 8001bfe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	f040 80e1 	bne.w	8001dd0 <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_I2C_Master_Seq_Receive_DMA+0x34>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e0da      	b.n	8001dd2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2222      	movs	r2, #34	@ 0x22
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	893a      	ldrh	r2, [r7, #8]
 8001c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a64      	ldr	r2, [pc, #400]	@ (8001de0 <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2bff      	cmp	r3, #255	@ 0xff
 8001c5a:	d906      	bls.n	8001c6a <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	22ff      	movs	r2, #255	@ 0xff
 8001c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e007      	b.n	8001c7a <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d10e      	bne.n	8001ca0 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8001c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c84:	2baa      	cmp	r3, #170	@ 0xaa
 8001c86:	d003      	beq.n	8001c90 <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
 8001c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8a:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 8001c8e:	d101      	bne.n	8001c94 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
 8001c94:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	e00a      	b.n	8001cb6 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f001 fd6b 	bl	800377c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2bff      	cmp	r3, #255	@ 0xff
 8001cae:	d802      	bhi.n	8001cb6 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d070      	beq.n	8001da0 <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d020      	beq.n	8001d08 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cca:	4a46      	ldr	r2, [pc, #280]	@ (8001de4 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
 8001ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd2:	4a45      	ldr	r2, [pc, #276]	@ (8001de8 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3324      	adds	r3, #36	@ 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001cf8:	f7ff f93e 	bl	8000f78 <HAL_DMA_Start_IT>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d138      	bne.n	8001d78 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
 8001d06:	e013      	b.n	8001d30 <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e050      	b.n	8001dd2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	8979      	ldrh	r1, [r7, #10]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f001 fc08 	bl	8003554 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001d5e:	2110      	movs	r1, #16
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f001 fc29 	bl	80035b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e029      	b.n	8001dcc <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e018      	b.n	8001dd2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
 8001da4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	8979      	ldrh	r1, [r7, #10]
 8001dae:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f001 fbcc 	bl	8003554 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f001 fbf6 	bl	80035b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	80002400 	.word	0x80002400
 8001de0:	080023cb 	.word	0x080023cb
 8001de4:	08003439 	.word	0x08003439
 8001de8:	080034eb 	.word	0x080034eb
 8001dec:	08001f6f 	.word	0x08001f6f

08001df0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	68f9      	ldr	r1, [r7, #12]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00f      	beq.n	8001e66 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00f      	beq.n	8001e90 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f043 0208 	orr.w	r2, r3, #8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00f      	beq.n	8001eba <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	f043 0202 	orr.w	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 030b 	and.w	r3, r3, #11
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f001 f92d 	bl	800312c <I2C_ITError>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b088      	sub	sp, #32
 8001f72:	af02      	add	r7, sp, #8
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <I2C_Master_ISR_IT+0x1e>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e121      	b.n	80021d0 <I2C_Master_ISR_IT+0x262>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2210      	movs	r2, #16
 8001fae:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f001 f9cc 	bl	800335a <I2C_Flush_TXDR>
 8001fc2:	e0f2      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d022      	beq.n	8002014 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01d      	beq.n	8002014 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f023 0304 	bic.w	r3, r3, #4
 8001fde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002012:	e0ca      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d128      	bne.n	8002070 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002024:	2b00      	cmp	r3, #0
 8002026:	d023      	beq.n	8002070 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01e      	beq.n	8002070 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80b6 	beq.w	80021aa <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800206e:	e09c      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06a      	beq.n	8002150 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002080:	2b00      	cmp	r3, #0
 8002082:	d065      	beq.n	8002150 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d04e      	beq.n	800212c <I2C_Master_ISR_IT+0x1be>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d14a      	bne.n	800212c <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b29b      	uxth	r3, r3
 800209e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2bff      	cmp	r3, #255	@ 0xff
 80020ac:	d91c      	bls.n	80020e8 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d103      	bne.n	80020ca <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80020c8:	e002      	b.n	80020d0 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	22ff      	movs	r2, #255	@ 0xff
 80020ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	8a79      	ldrh	r1, [r7, #18]
 80020d8:	2300      	movs	r3, #0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f001 fa37 	bl	8003554 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e6:	e032      	b.n	800214e <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020fa:	d00b      	beq.n	8002114 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002106:	8a79      	ldrh	r1, [r7, #18]
 8002108:	2000      	movs	r0, #0
 800210a:	9000      	str	r0, [sp, #0]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f001 fa21 	bl	8003554 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002112:	e01c      	b.n	800214e <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8a79      	ldrh	r1, [r7, #18]
 800211c:	2300      	movs	r3, #0
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f001 fa15 	bl	8003554 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212a:	e010      	b.n	800214e <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800213a:	d003      	beq.n	8002144 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fcdc 	bl	8002afa <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002142:	e032      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002144:	2140      	movs	r1, #64	@ 0x40
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fff0 	bl	800312c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800214c:	e02d      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
 800214e:	e02c      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d027      	beq.n	80021aa <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002160:	2b00      	cmp	r3, #0
 8002162:	d022      	beq.n	80021aa <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d119      	bne.n	80021a2 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002178:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800217c:	d015      	beq.n	80021aa <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002186:	d108      	bne.n	800219a <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	e007      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fcad 	bl	8002afa <I2C_ITMasterSeqCplt>
 80021a0:	e003      	b.n	80021aa <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80021a2:	2140      	movs	r1, #64	@ 0x40
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 ffc1 	bl	800312c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80021be:	6979      	ldr	r1, [r7, #20]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fd33 	bl	8002c2c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <I2C_Slave_ISR_IT+0x24>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e0e2      	b.n	80023c2 <I2C_Slave_ISR_IT+0x1ea>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002218:	6939      	ldr	r1, [r7, #16]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fdce 	bl	8002dbc <I2C_ITSlaveCplt>
 8002220:	e0ca      	b.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	d04b      	beq.n	80022c4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002232:	2b00      	cmp	r3, #0
 8002234:	d046      	beq.n	80022c4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d128      	bne.n	8002292 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b28      	cmp	r3, #40	@ 0x28
 800224a:	d108      	bne.n	800225e <I2C_Slave_ISR_IT+0x86>
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002252:	d104      	bne.n	800225e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002254:	6939      	ldr	r1, [r7, #16]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 ff14 	bl	8003084 <I2C_ITListenCplt>
 800225c:	e031      	b.n	80022c2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b29      	cmp	r3, #41	@ 0x29
 8002268:	d10e      	bne.n	8002288 <I2C_Slave_ISR_IT+0xb0>
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002270:	d00a      	beq.n	8002288 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2210      	movs	r2, #16
 8002278:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f001 f86d 	bl	800335a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fc77 	bl	8002b74 <I2C_ITSlaveSeqCplt>
 8002286:	e01c      	b.n	80022c2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002290:	e08f      	b.n	80023b2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <I2C_Slave_ISR_IT+0xdc>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b2:	d17e      	bne.n	80023b2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	4619      	mov	r1, r3
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 ff36 	bl	800312c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022c0:	e077      	b.n	80023b2 <I2C_Slave_ISR_IT+0x1da>
 80022c2:	e076      	b.n	80023b2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d02f      	beq.n	800232e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d02a      	beq.n	800232e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d018      	beq.n	8002314 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d14b      	bne.n	80023b6 <I2C_Slave_ISR_IT+0x1de>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002324:	d047      	beq.n	80023b6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fc24 	bl	8002b74 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800232c:	e043      	b.n	80023b6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002342:	6939      	ldr	r1, [r7, #16]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fb54 	bl	80029f2 <I2C_ITAddrCplt>
 800234a:	e035      	b.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d030      	beq.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800235c:	2b00      	cmp	r3, #0
 800235e:	d02b      	beq.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d018      	beq.n	800239c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	@ 0x28
 800239a:	e00d      	b.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a2:	d002      	beq.n	80023aa <I2C_Slave_ISR_IT+0x1d2>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fbe2 	bl	8002b74 <I2C_ITSlaveSeqCplt>
 80023b0:	e002      	b.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80023b6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b088      	sub	sp, #32
 80023ce:	af02      	add	r7, sp, #8
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <I2C_Master_ISR_DMA+0x1a>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0e7      	b.n	80025b4 <I2C_Master_ISR_DMA+0x1ea>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d011      	beq.n	8002424 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2210      	movs	r2, #16
 8002406:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002414:	2120      	movs	r1, #32
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f001 f8ce 	bl	80035b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 ff9c 	bl	800335a <I2C_Flush_TXDR>
 8002422:	e0c2      	b.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d07f      	beq.n	800252e <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002434:	2b00      	cmp	r3, #0
 8002436:	d07a      	beq.n	800252e <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002446:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d05c      	beq.n	800250c <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2bff      	cmp	r3, #255	@ 0xff
 8002468:	d914      	bls.n	8002494 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d103      	bne.n	8002486 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002484:	e002      	b.n	800248c <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	22ff      	movs	r2, #255	@ 0xff
 800248a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800248c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e010      	b.n	80024b6 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024a6:	d003      	beq.n	80024b0 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e002      	b.n	80024b6 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80024b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024b4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	8a79      	ldrh	r1, [r7, #18]
 80024be:	2300      	movs	r3, #0
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f001 f845 	bl	8003554 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b22      	cmp	r3, #34	@ 0x22
 80024e6:	d108      	bne.n	80024fa <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80024f8:	e057      	b.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002508:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800250a:	e04e      	b.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800251a:	d003      	beq.n	8002524 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 faec 	bl	8002afa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002522:	e042      	b.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002524:	2140      	movs	r1, #64	@ 0x40
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fe00 	bl	800312c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800252c:	e03d      	b.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d028      	beq.n	800258a <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800253e:	2b00      	cmp	r3, #0
 8002540:	d023      	beq.n	800258a <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d119      	bne.n	8002580 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800255a:	d025      	beq.n	80025a8 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002564:	d108      	bne.n	8002578 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002574:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002576:	e017      	b.n	80025a8 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fabe 	bl	8002afa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800257e:	e013      	b.n	80025a8 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002580:	2140      	movs	r1, #64	@ 0x40
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fdd2 	bl	800312c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002588:	e00e      	b.n	80025a8 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fb43 	bl	8002c2c <I2C_ITMasterCplt>
 80025a6:	e000      	b.n	80025aa <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80025a8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80025c8:	4b90      	ldr	r3, [pc, #576]	@ (800280c <I2C_Mem_ISR_DMA+0x250>)
 80025ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <I2C_Mem_ISR_DMA+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e12f      	b.n	800283a <I2C_Mem_ISR_DMA+0x27e>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d011      	beq.n	800261a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2210      	movs	r2, #16
 80025fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800260a:	2120      	movs	r1, #32
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 ffd3 	bl	80035b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fea1 	bl	800335a <I2C_Flush_TXDR>
 8002618:	e10a      	b.n	8002830 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00e      	beq.n	8002642 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f04f 32ff 	mov.w	r2, #4294967295
 800263e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002640:	e0f6      	b.n	8002830 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d06d      	beq.n	8002728 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002652:	2b00      	cmp	r3, #0
 8002654:	d068      	beq.n	8002728 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002656:	2101      	movs	r1, #1
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f001 f831 	bl	80036c0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800265e:	2110      	movs	r1, #16
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 ffa9 	bl	80035b8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d056      	beq.n	800271e <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2bff      	cmp	r3, #255	@ 0xff
 8002678:	d91e      	bls.n	80026b8 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d103      	bne.n	8002696 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002694:	e002      	b.n	800269c <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	22ff      	movs	r2, #255	@ 0xff
 800269a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a0:	b299      	uxth	r1, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 ff4f 	bl	8003554 <I2C_TransferConfig>
 80026b6:	e011      	b.n	80026dc <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c6:	b299      	uxth	r1, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 ff3c 	bl	8003554 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b22      	cmp	r3, #34	@ 0x22
 80026f8:	d108      	bne.n	800270c <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002708:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800270a:	e091      	b.n	8002830 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800271a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800271c:	e088      	b.n	8002830 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800271e:	2140      	movs	r1, #64	@ 0x40
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fd03 	bl	800312c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002726:	e083      	b.n	8002830 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d070      	beq.n	8002814 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002738:	2b00      	cmp	r3, #0
 800273a:	d06b      	beq.n	8002814 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800273c:	2101      	movs	r1, #1
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 ffbe 	bl	80036c0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002744:	2110      	movs	r1, #16
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 ff36 	bl	80035b8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b22      	cmp	r3, #34	@ 0x22
 8002756:	d101      	bne.n	800275c <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002758:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <I2C_Mem_ISR_DMA+0x254>)
 800275a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	2bff      	cmp	r3, #255	@ 0xff
 8002764:	d91e      	bls.n	80027a4 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d103      	bne.n	8002782 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002780:	e002      	b.n	8002788 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	22ff      	movs	r2, #255	@ 0xff
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278c:	b299      	uxth	r1, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002792:	b2da      	uxtb	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fed9 	bl	8003554 <I2C_TransferConfig>
 80027a2:	e011      	b.n	80027c8 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	b299      	uxth	r1, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fec6 	bl	8003554 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b22      	cmp	r3, #34	@ 0x22
 80027e4:	d108      	bne.n	80027f8 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027f4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027f6:	e01b      	b.n	8002830 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002806:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002808:	e012      	b.n	8002830 <I2C_Mem_ISR_DMA+0x274>
 800280a:	bf00      	nop
 800280c:	80002000 	.word	0x80002000
 8002810:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f9fe 	bl	8002c2c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop

08002844 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <I2C_Slave_ISR_DMA+0x24>
 8002864:	2302      	movs	r3, #2
 8002866:	e0c0      	b.n	80029ea <I2C_Slave_ISR_DMA+0x1a6>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa98 	bl	8002dbc <I2C_ITSlaveCplt>
 800288c:	e0a8      	b.n	80029e0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8095 	beq.w	80029c4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 808f 	beq.w	80029c4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07d      	beq.n	80029b6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00c      	beq.n	80028fe <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d128      	bne.n	8002956 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b28      	cmp	r3, #40	@ 0x28
 800290e:	d108      	bne.n	8002922 <I2C_Slave_ISR_DMA+0xde>
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002916:	d104      	bne.n	8002922 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fbb2 	bl	8003084 <I2C_ITListenCplt>
 8002920:	e048      	b.n	80029b4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b29      	cmp	r3, #41	@ 0x29
 800292c:	d10e      	bne.n	800294c <I2C_Slave_ISR_DMA+0x108>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002934:	d00a      	beq.n	800294c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2210      	movs	r2, #16
 800293c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fd0b 	bl	800335a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f915 	bl	8002b74 <I2C_ITSlaveSeqCplt>
 800294a:	e033      	b.n	80029b4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002954:	e034      	b.n	80029c0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2210      	movs	r2, #16
 800295c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f043 0204 	orr.w	r2, r3, #4
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002970:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <I2C_Slave_ISR_DMA+0x13c>
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297e:	d11f      	bne.n	80029c0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b21      	cmp	r3, #33	@ 0x21
 8002984:	d002      	beq.n	800298c <I2C_Slave_ISR_DMA+0x148>
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b29      	cmp	r3, #41	@ 0x29
 800298a:	d103      	bne.n	8002994 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2221      	movs	r2, #33	@ 0x21
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30
 8002992:	e008      	b.n	80029a6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b22      	cmp	r3, #34	@ 0x22
 8002998:	d002      	beq.n	80029a0 <I2C_Slave_ISR_DMA+0x15c>
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b2a      	cmp	r3, #42	@ 0x2a
 800299e:	d102      	bne.n	80029a6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2222      	movs	r2, #34	@ 0x22
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	4619      	mov	r1, r3
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fbbd 	bl	800312c <I2C_ITError>
      if (treatdmanack == 1U)
 80029b2:	e005      	b.n	80029c0 <I2C_Slave_ISR_DMA+0x17c>
 80029b4:	e004      	b.n	80029c0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2210      	movs	r2, #16
 80029bc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029be:	e00f      	b.n	80029e0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80029c0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029c2:	e00d      	b.n	80029e0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f809 	bl	80029f2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a08:	2b28      	cmp	r3, #40	@ 0x28
 8002a0a:	d16a      	bne.n	8002ae2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002a2a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a38:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002a46:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d138      	bne.n	8002ac2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a50:	897b      	ldrh	r3, [r7, #10]
 8002a52:	09db      	lsrs	r3, r3, #7
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	89bb      	ldrh	r3, [r7, #12]
 8002a58:	4053      	eors	r3, r2
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f003 0306 	and.w	r3, r3, #6
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d11c      	bne.n	8002a9e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d13b      	bne.n	8002af2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2208      	movs	r2, #8
 8002a86:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a90:	89ba      	ldrh	r2, [r7, #12]
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fa33 	bl	8001f02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a9c:	e029      	b.n	8002af2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002a9e:	893b      	ldrh	r3, [r7, #8]
 8002aa0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fe0a 	bl	80036c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ab4:	89ba      	ldrh	r2, [r7, #12]
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fa21 	bl	8001f02 <HAL_I2C_AddrCallback>
}
 8002ac0:	e017      	b.n	8002af2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fdfa 	bl	80036c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ad4:	89ba      	ldrh	r2, [r7, #12]
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fa11 	bl	8001f02 <HAL_I2C_AddrCallback>
}
 8002ae0:	e007      	b.n	8002af2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b21      	cmp	r3, #33	@ 0x21
 8002b14:	d115      	bne.n	8002b42 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2211      	movs	r2, #17
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fdc7 	bl	80036c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd fc02 	bl	8000344 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b40:	e014      	b.n	8002b6c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2212      	movs	r2, #18
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b56:	2102      	movs	r1, #2
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fdb1 	bl	80036c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd fc02 	bl	8000370 <HAL_I2C_MasterRxCpltCallback>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00c      	b.n	8002bc2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b29      	cmp	r3, #41	@ 0x29
 8002bcc:	d112      	bne.n	8002bf4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2228      	movs	r2, #40	@ 0x28
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2221      	movs	r2, #33	@ 0x21
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bdc:	2101      	movs	r1, #1
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fd6e 	bl	80036c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff f974 	bl	8001eda <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bf2:	e017      	b.n	8002c24 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bfe:	d111      	bne.n	8002c24 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2228      	movs	r2, #40	@ 0x28
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2222      	movs	r2, #34	@ 0x22
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c0e:	2102      	movs	r1, #2
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fd55 	bl	80036c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff f965 	bl	8001eee <HAL_I2C_SlaveRxCpltCallback>
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b21      	cmp	r3, #33	@ 0x21
 8002c4c:	d107      	bne.n	8002c5e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c4e:	2101      	movs	r1, #1
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fd35 	bl	80036c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2211      	movs	r2, #17
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c5c:	e00c      	b.n	8002c78 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b22      	cmp	r3, #34	@ 0x22
 8002c68:	d106      	bne.n	8002c78 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fd27 	bl	80036c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2212      	movs	r2, #18
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b4c      	ldr	r3, [pc, #304]	@ (8002db4 <I2C_ITMasterCplt+0x188>)
 8002c84:	400b      	ands	r3, r1
 8002c86:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a49      	ldr	r2, [pc, #292]	@ (8002db8 <I2C_ITMasterCplt+0x18c>)
 8002c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f043 0204 	orr.w	r2, r3, #4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b60      	cmp	r3, #96	@ 0x60
 8002cbc:	d10a      	bne.n	8002cd4 <I2C_ITMasterCplt+0xa8>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fb40 	bl	800335a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b60      	cmp	r3, #96	@ 0x60
 8002cea:	d002      	beq.n	8002cf2 <I2C_ITMasterCplt+0xc6>
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa17 	bl	800312c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cfe:	e054      	b.n	8002daa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b21      	cmp	r3, #33	@ 0x21
 8002d0a:	d124      	bne.n	8002d56 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	d10b      	bne.n	8002d3e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff f8fb 	bl	8001f32 <HAL_I2C_MemTxCpltCallback>
}
 8002d3c:	e035      	b.n	8002daa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd faf8 	bl	8000344 <HAL_I2C_MasterTxCpltCallback>
}
 8002d54:	e029      	b.n	8002daa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b22      	cmp	r3, #34	@ 0x22
 8002d60:	d123      	bne.n	8002daa <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b40      	cmp	r3, #64	@ 0x40
 8002d7a:	d10b      	bne.n	8002d94 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff f8da 	bl	8001f46 <HAL_I2C_MemRxCpltCallback>
}
 8002d92:	e00a      	b.n	8002daa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fd fae3 	bl	8000370 <HAL_I2C_MasterRxCpltCallback>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	fe00e800 	.word	0xfe00e800
 8002db8:	ffff0000 	.word	0xffff0000

08002dbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dde:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2220      	movs	r2, #32
 8002de6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002de8:	7afb      	ldrb	r3, [r7, #11]
 8002dea:	2b21      	cmp	r3, #33	@ 0x21
 8002dec:	d002      	beq.n	8002df4 <I2C_ITSlaveCplt+0x38>
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	2b29      	cmp	r3, #41	@ 0x29
 8002df2:	d108      	bne.n	8002e06 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002df4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fc61 	bl	80036c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2221      	movs	r2, #33	@ 0x21
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e04:	e019      	b.n	8002e3a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	2b22      	cmp	r3, #34	@ 0x22
 8002e0a:	d002      	beq.n	8002e12 <I2C_ITSlaveCplt+0x56>
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e10:	d108      	bne.n	8002e24 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002e12:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fc52 	bl	80036c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2222      	movs	r2, #34	@ 0x22
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e22:	e00a      	b.n	8002e3a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	2b28      	cmp	r3, #40	@ 0x28
 8002e28:	d107      	bne.n	8002e3a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002e2a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fc46 	bl	80036c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e48:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b89      	ldr	r3, [pc, #548]	@ (800307c <I2C_ITSlaveCplt+0x2c0>)
 8002e56:	400b      	ands	r3, r1
 8002e58:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa7d 	bl	800335a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d013      	beq.n	8002e92 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e78:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01f      	beq.n	8002ec2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e90:	e017      	b.n	8002ec2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1c:	f043 0204 	orr.w	r2, r3, #4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d049      	beq.n	8002fc2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d044      	beq.n	8002fc2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d128      	bne.n	8002f94 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b28      	cmp	r3, #40	@ 0x28
 8002f4c:	d108      	bne.n	8002f60 <I2C_ITSlaveCplt+0x1a4>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f54:	d104      	bne.n	8002f60 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f56:	6979      	ldr	r1, [r7, #20]
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f893 	bl	8003084 <I2C_ITListenCplt>
 8002f5e:	e030      	b.n	8002fc2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b29      	cmp	r3, #41	@ 0x29
 8002f6a:	d10e      	bne.n	8002f8a <I2C_ITSlaveCplt+0x1ce>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f72:	d00a      	beq.n	8002f8a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f9ec 	bl	800335a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fdf6 	bl	8002b74 <I2C_ITSlaveSeqCplt>
 8002f88:	e01b      	b.n	8002fc2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2210      	movs	r2, #16
 8002f90:	61da      	str	r2, [r3, #28]
 8002f92:	e016      	b.n	8002fc2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <I2C_ITSlaveCplt+0x1fa>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb4:	d105      	bne.n	8002fc2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f8b5 	bl	800312c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d010      	beq.n	8002ffa <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8a4 	bl	800312c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b28      	cmp	r3, #40	@ 0x28
 8002fee:	d141      	bne.n	8003074 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f846 	bl	8003084 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ff8:	e03c      	b.n	8003074 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003002:	d014      	beq.n	800302e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fdb5 	bl	8002b74 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1c      	ldr	r2, [pc, #112]	@ (8003080 <I2C_ITSlaveCplt+0x2c4>)
 800300e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe ff79 	bl	8001f1e <HAL_I2C_ListenCpltCallback>
}
 800302c:	e022      	b.n	8003074 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b22      	cmp	r3, #34	@ 0x22
 8003038:	d10e      	bne.n	8003058 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fe ff4c 	bl	8001eee <HAL_I2C_SlaveRxCpltCallback>
}
 8003056:	e00d      	b.n	8003074 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe ff33 	bl	8001eda <HAL_I2C_SlaveTxCpltCallback>
}
 8003074:	bf00      	nop
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	fe00e800 	.word	0xfe00e800
 8003080:	ffff0000 	.word	0xffff0000

08003084 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a25      	ldr	r2, [pc, #148]	@ (8003128 <I2C_ITListenCplt+0xa4>)
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d022      	beq.n	8003100 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	f043 0204 	orr.w	r2, r3, #4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003100:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fadb 	bl	80036c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2210      	movs	r2, #16
 8003110:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe feff 	bl	8001f1e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	ffff0000 	.word	0xffff0000

0800312c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800313c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a6d      	ldr	r2, [pc, #436]	@ (8003300 <I2C_ITError+0x1d4>)
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b28      	cmp	r3, #40	@ 0x28
 8003162:	d005      	beq.n	8003170 <I2C_ITError+0x44>
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b29      	cmp	r3, #41	@ 0x29
 8003168:	d002      	beq.n	8003170 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b2a      	cmp	r3, #42	@ 0x2a
 800316e:	d10b      	bne.n	8003188 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003170:	2103      	movs	r1, #3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 faa4 	bl	80036c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2228      	movs	r2, #40	@ 0x28
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a60      	ldr	r2, [pc, #384]	@ (8003304 <I2C_ITError+0x1d8>)
 8003184:	635a      	str	r2, [r3, #52]	@ 0x34
 8003186:	e030      	b.n	80031ea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003188:	f248 0103 	movw	r1, #32771	@ 0x8003
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fa97 	bl	80036c0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8e1 	bl	800335a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b60      	cmp	r3, #96	@ 0x60
 80031a2:	d01f      	beq.n	80031e4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d114      	bne.n	80031e4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d109      	bne.n	80031dc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2210      	movs	r2, #16
 80031ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2220      	movs	r2, #32
 80031e2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d039      	beq.n	800326c <I2C_ITError+0x140>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b11      	cmp	r3, #17
 80031fc:	d002      	beq.n	8003204 <I2C_ITError+0xd8>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b21      	cmp	r3, #33	@ 0x21
 8003202:	d133      	bne.n	800326c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003212:	d107      	bne.n	8003224 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003222:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fff5 	bl	8001218 <HAL_DMA_GetState>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d017      	beq.n	8003264 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	4a33      	ldr	r2, [pc, #204]	@ (8003308 <I2C_ITError+0x1dc>)
 800323a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fef5 	bl	8001038 <HAL_DMA_Abort_IT>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d04d      	beq.n	80032f0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800325e:	4610      	mov	r0, r2
 8003260:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003262:	e045      	b.n	80032f0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f851 	bl	800330c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800326a:	e041      	b.n	80032f0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d039      	beq.n	80032e8 <I2C_ITError+0x1bc>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b12      	cmp	r3, #18
 8003278:	d002      	beq.n	8003280 <I2C_ITError+0x154>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b22      	cmp	r3, #34	@ 0x22
 800327e:	d133      	bne.n	80032e8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800328a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800328e:	d107      	bne.n	80032a0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800329e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd ffb7 	bl	8001218 <HAL_DMA_GetState>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d017      	beq.n	80032e0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <I2C_ITError+0x1dc>)
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd feb7 	bl	8001038 <HAL_DMA_Abort_IT>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d011      	beq.n	80032f4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032da:	4610      	mov	r0, r2
 80032dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032de:	e009      	b.n	80032f4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f813 	bl	800330c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032e6:	e005      	b.n	80032f4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f80f 	bl	800330c <I2C_TreatErrorCallback>
  }
}
 80032ee:	e002      	b.n	80032f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032f4:	bf00      	nop
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	ffff0000 	.word	0xffff0000
 8003304:	080021d9 	.word	0x080021d9
 8003308:	08003519 	.word	0x08003519

0800330c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b60      	cmp	r3, #96	@ 0x60
 800331e:	d10e      	bne.n	800333e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fe0f 	bl	8001f5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800333c:	e009      	b.n	8003352 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fc ffef 	bl	8000330 <HAL_I2C_ErrorCallback>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	d103      	bne.n	8003378 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2200      	movs	r2, #0
 8003376:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d007      	beq.n	8003396 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	619a      	str	r2, [r3, #24]
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033be:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80033ca:	2120      	movs	r1, #32
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8f3 	bl	80035b8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80033d2:	e02d      	b.n	8003430 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80033dc:	441a      	add	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2bff      	cmp	r3, #255	@ 0xff
 80033ea:	d903      	bls.n	80033f4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	22ff      	movs	r2, #255	@ 0xff
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80033f2:	e004      	b.n	80033fe <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	4619      	mov	r1, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3328      	adds	r3, #40	@ 0x28
 800340e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003414:	f7fd fdb0 	bl	8000f78 <HAL_DMA_Start_IT>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800341e:	2110      	movs	r1, #16
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff fe83 	bl	800312c <I2C_ITError>
}
 8003426:	e003      	b.n	8003430 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003428:	2140      	movs	r1, #64	@ 0x40
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f8c4 	bl	80035b8 <I2C_Enable_IRQ>
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003454:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003460:	2120      	movs	r1, #32
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8a8 	bl	80035b8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003468:	e03b      	b.n	80034e2 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2bff      	cmp	r3, #255	@ 0xff
 8003480:	d911      	bls.n	80034a6 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d103      	bne.n	800349e <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800349c:	e008      	b.n	80034b0 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22ff      	movs	r2, #255	@ 0xff
 80034a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80034a4:	e004      	b.n	80034b0 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3324      	adds	r3, #36	@ 0x24
 80034ba:	4619      	mov	r1, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80034c6:	f7fd fd57 	bl	8000f78 <HAL_DMA_Start_IT>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80034d0:	2110      	movs	r1, #16
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fe2a 	bl	800312c <I2C_ITError>
}
 80034d8:	e003      	b.n	80034e2 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80034da:	2140      	movs	r1, #64	@ 0x40
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f86b 	bl	80035b8 <I2C_Enable_IRQ>
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003506:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003508:	2110      	movs	r1, #16
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fe0e 	bl	800312c <I2C_ITError>
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	2200      	movs	r2, #0
 8003534:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	2200      	movs	r2, #0
 8003544:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff fee0 	bl	800330c <I2C_TreatErrorCallback>
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	4613      	mov	r3, r2
 8003564:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800356c:	7a7b      	ldrb	r3, [r7, #9]
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003574:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	4313      	orrs	r3, r2
 800357e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003582:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	0d5b      	lsrs	r3, r3, #21
 800358e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003592:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <I2C_TransferConfig+0x60>)
 8003594:	430b      	orrs	r3, r1
 8003596:	43db      	mvns	r3, r3
 8003598:	ea02 0103 	and.w	r1, r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	03ff63ff 	.word	0x03ff63ff

080035b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	4a39      	ldr	r2, [pc, #228]	@ (80036b4 <I2C_Enable_IRQ+0xfc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d032      	beq.n	8003638 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80035d6:	4a38      	ldr	r2, [pc, #224]	@ (80036b8 <I2C_Enable_IRQ+0x100>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d02d      	beq.n	8003638 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80035e0:	4a36      	ldr	r2, [pc, #216]	@ (80036bc <I2C_Enable_IRQ+0x104>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d028      	beq.n	8003638 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da03      	bge.n	80035f6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80035f4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003606:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003618:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	2b10      	cmp	r3, #16
 800361e:	d103      	bne.n	8003628 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003626:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	2b20      	cmp	r3, #32
 800362c:	d133      	bne.n	8003696 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003636:	e02e      	b.n	8003696 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da03      	bge.n	8003648 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003646:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003658:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800366a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	2b10      	cmp	r3, #16
 8003670:	d103      	bne.n	800367a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003678:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	2b20      	cmp	r3, #32
 800367e:	d103      	bne.n	8003688 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003686:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003688:	887b      	ldrh	r3, [r7, #2]
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d103      	bne.n	8003696 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003694:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	080023cb 	.word	0x080023cb
 80036b8:	08002845 	.word	0x08002845
 80036bc:	080025bd 	.word	0x080025bd

080036c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00f      	beq.n	80036fa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80036e0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036ee:	2b28      	cmp	r3, #40	@ 0x28
 80036f0:	d003      	beq.n	80036fa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80036f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00f      	beq.n	8003724 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800370a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003718:	2b28      	cmp	r3, #40	@ 0x28
 800371a:	d003      	beq.n	8003724 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003722:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003724:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003728:	2b00      	cmp	r3, #0
 800372a:	da03      	bge.n	8003734 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003732:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d103      	bne.n	8003742 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003740:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	2b20      	cmp	r3, #32
 8003746:	d103      	bne.n	8003750 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f043 0320 	orr.w	r3, r3, #32
 800374e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	2b40      	cmp	r3, #64	@ 0x40
 8003754:	d103      	bne.n	800375e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800375c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43da      	mvns	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	400a      	ands	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	2baa      	cmp	r3, #170	@ 0xaa
 800378a:	d103      	bne.n	8003794 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003792:	e008      	b.n	80037a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 800379c:	d103      	bne.n	80037a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037a4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d138      	bne.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e032      	b.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2224      	movs	r2, #36	@ 0x24
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003804:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	d139      	bne.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003868:	2302      	movs	r3, #2
 800386a:	e033      	b.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800389a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40007000 	.word	0x40007000

080038fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390a:	d130      	bne.n	800396e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800390c:	4b23      	ldr	r3, [pc, #140]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003918:	d038      	beq.n	800398c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800391a:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003922:	4a1e      	ldr	r2, [pc, #120]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003924:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800392a:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2232      	movs	r2, #50	@ 0x32
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0c9b      	lsrs	r3, r3, #18
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003940:	e002      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3b01      	subs	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003948:	4b14      	ldr	r3, [pc, #80]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003954:	d102      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f2      	bne.n	8003942 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800395c:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003968:	d110      	bne.n	800398c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e00f      	b.n	800398e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397a:	d007      	beq.n	800398c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800397c:	4b07      	ldr	r3, [pc, #28]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003984:	4a05      	ldr	r2, [pc, #20]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800398a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40007000 	.word	0x40007000
 80039a0:	20000000 	.word	0x20000000
 80039a4:	431bde83 	.word	0x431bde83

080039a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e3ca      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ba:	4b97      	ldr	r3, [pc, #604]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c4:	4b94      	ldr	r3, [pc, #592]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80e4 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_RCC_OscConfig+0x4a>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	f040 808b 	bne.w	8003b00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 8087 	bne.w	8003b00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039f2:	4b89      	ldr	r3, [pc, #548]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_RCC_OscConfig+0x62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e3a2      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	4b82      	ldr	r3, [pc, #520]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_RCC_OscConfig+0x7c>
 8003a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a22:	e005      	b.n	8003a30 <HAL_RCC_OscConfig+0x88>
 8003a24:	4b7c      	ldr	r3, [pc, #496]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d223      	bcs.n	8003a7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fd1d 	bl	8004478 <RCC_SetFlashLatencyFromMSIRange>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e383      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a48:	4b73      	ldr	r3, [pc, #460]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a72      	ldr	r2, [pc, #456]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b70      	ldr	r3, [pc, #448]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	496d      	ldr	r1, [pc, #436]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a66:	4b6c      	ldr	r3, [pc, #432]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	4968      	ldr	r1, [pc, #416]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	e025      	b.n	8003ac8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a7c:	4b66      	ldr	r3, [pc, #408]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a65      	ldr	r2, [pc, #404]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a82:	f043 0308 	orr.w	r3, r3, #8
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b63      	ldr	r3, [pc, #396]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4960      	ldr	r1, [pc, #384]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	495b      	ldr	r1, [pc, #364]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fcdd 	bl	8004478 <RCC_SetFlashLatencyFromMSIRange>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e343      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac8:	f000 fc4a 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b52      	ldr	r3, [pc, #328]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	4950      	ldr	r1, [pc, #320]	@ (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8003c20 <HAL_RCC_OscConfig+0x278>)
 8003ae6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8003c24 <HAL_RCC_OscConfig+0x27c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd f81d 	bl	8000b2c <HAL_InitTick>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d052      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	e327      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d032      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b08:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a42      	ldr	r2, [pc, #264]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b14:	f7fd f85a 	bl	8000bcc <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b1c:	f7fd f856 	bl	8000bcc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e310      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b3a:	4b37      	ldr	r3, [pc, #220]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a36      	ldr	r2, [pc, #216]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b40:	f043 0308 	orr.w	r3, r3, #8
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b34      	ldr	r3, [pc, #208]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4931      	ldr	r1, [pc, #196]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b58:	4b2f      	ldr	r3, [pc, #188]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	492c      	ldr	r1, [pc, #176]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
 8003b6c:	e01a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a29      	ldr	r2, [pc, #164]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b7a:	f7fd f827 	bl	8000bcc <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b82:	f7fd f823 	bl	8000bcc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e2dd      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b94:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x1da>
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d074      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x21a>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d10e      	bne.n	8003bda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d064      	beq.n	8003c98 <HAL_RCC_OscConfig+0x2f0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d160      	bne.n	8003c98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e2ba      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x24a>
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0b      	ldr	r2, [pc, #44]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e026      	b.n	8003c40 <HAL_RCC_OscConfig+0x298>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bfa:	d115      	bne.n	8003c28 <HAL_RCC_OscConfig+0x280>
 8003bfc:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a05      	ldr	r2, [pc, #20]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003c02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a02      	ldr	r2, [pc, #8]	@ (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e014      	b.n	8003c40 <HAL_RCC_OscConfig+0x298>
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	0800520c 	.word	0x0800520c
 8003c20:	20000000 	.word	0x20000000
 8003c24:	20000004 	.word	0x20000004
 8003c28:	4ba0      	ldr	r3, [pc, #640]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a9f      	ldr	r2, [pc, #636]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b9d      	ldr	r3, [pc, #628]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a9c      	ldr	r2, [pc, #624]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fc ffc0 	bl	8000bcc <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fc ffbc 	bl	8000bcc <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	@ 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e276      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c62:	4b92      	ldr	r3, [pc, #584]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2a8>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fc ffac 	bl	8000bcc <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fc ffa8 	bl	8000bcc <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	@ 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e262      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8a:	4b88      	ldr	r3, [pc, #544]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2d0>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d060      	beq.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x310>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d116      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x328>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e23f      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b76      	ldr	r3, [pc, #472]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	4973      	ldr	r1, [pc, #460]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	e040      	b.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d023      	beq.n	8003d36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cee:	4b6f      	ldr	r3, [pc, #444]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fc ff67 	bl	8000bcc <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fc ff63 	bl	8000bcc <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e21d      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d14:	4b65      	ldr	r3, [pc, #404]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b62      	ldr	r3, [pc, #392]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	495f      	ldr	r1, [pc, #380]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
 8003d34:	e018      	b.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b5d      	ldr	r3, [pc, #372]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fc ff43 	bl	8000bcc <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4a:	f7fc ff3f 	bl	8000bcc <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e1f9      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d5c:	4b53      	ldr	r3, [pc, #332]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d03c      	beq.n	8003dee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d82:	4a4a      	ldr	r2, [pc, #296]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fc ff1e 	bl	8000bcc <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fc ff1a 	bl	8000bcc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e1d4      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da6:	4b41      	ldr	r3, [pc, #260]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ef      	beq.n	8003d94 <HAL_RCC_OscConfig+0x3ec>
 8003db4:	e01b      	b.n	8003dee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db6:	4b3d      	ldr	r3, [pc, #244]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fc ff01 	bl	8000bcc <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dce:	f7fc fefd 	bl	8000bcc <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1b7      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de0:	4b32      	ldr	r3, [pc, #200]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ef      	bne.n	8003dce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80a6 	beq.w	8003f48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e00:	4b2a      	ldr	r3, [pc, #168]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10d      	bne.n	8003e28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e10:	4a26      	ldr	r2, [pc, #152]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e18:	4b24      	ldr	r3, [pc, #144]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e28:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d118      	bne.n	8003e66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e34:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e40:	f7fc fec4 	bl	8000bcc <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fc fec0 	bl	8000bcc <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e17a      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5a:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <HAL_RCC_OscConfig+0x508>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d108      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4d8>
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	4a0d      	ldr	r2, [pc, #52]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e7e:	e029      	b.n	8003ed4 <HAL_RCC_OscConfig+0x52c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d115      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x50c>
 8003e88:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	4a07      	ldr	r2, [pc, #28]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e98:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	4a03      	ldr	r2, [pc, #12]	@ (8003eac <HAL_RCC_OscConfig+0x504>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea8:	e014      	b.n	8003ed4 <HAL_RCC_OscConfig+0x52c>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	4a9b      	ldr	r2, [pc, #620]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ec4:	4b98      	ldr	r3, [pc, #608]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a97      	ldr	r2, [pc, #604]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d016      	beq.n	8003f0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fc fe76 	bl	8000bcc <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fc fe72 	bl	8000bcc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e12a      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	4b8b      	ldr	r3, [pc, #556]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ed      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x53c>
 8003f08:	e015      	b.n	8003f36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0a:	f7fc fe5f 	bl	8000bcc <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f12:	f7fc fe5b 	bl	8000bcc <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e113      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f28:	4b7f      	ldr	r3, [pc, #508]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ed      	bne.n	8003f12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f36:	7ffb      	ldrb	r3, [r7, #31]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	4a79      	ldr	r2, [pc, #484]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80fe 	beq.w	800414e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	f040 80d0 	bne.w	80040fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f5c:	4b72      	ldr	r3, [pc, #456]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f003 0203 	and.w	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d130      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d127      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d11f      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f9c:	2a07      	cmp	r2, #7
 8003f9e:	bf14      	ite	ne
 8003fa0:	2201      	movne	r2, #1
 8003fa2:	2200      	moveq	r2, #0
 8003fa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d113      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d06e      	beq.n	80040b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	d069      	beq.n	80040ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fd8:	4b53      	ldr	r3, [pc, #332]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fe4:	4b50      	ldr	r3, [pc, #320]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0ad      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004000:	f7fc fde4 	bl	8000bcc <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fc fde0 	bl	8000bcc <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e09a      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401a:	4b43      	ldr	r3, [pc, #268]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004026:	4b40      	ldr	r3, [pc, #256]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	4b40      	ldr	r3, [pc, #256]	@ (800412c <HAL_RCC_OscConfig+0x784>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004036:	3a01      	subs	r2, #1
 8004038:	0112      	lsls	r2, r2, #4
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004040:	0212      	lsls	r2, r2, #8
 8004042:	4311      	orrs	r1, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004048:	0852      	lsrs	r2, r2, #1
 800404a:	3a01      	subs	r2, #1
 800404c:	0552      	lsls	r2, r2, #21
 800404e:	4311      	orrs	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004054:	0852      	lsrs	r2, r2, #1
 8004056:	3a01      	subs	r2, #1
 8004058:	0652      	lsls	r2, r2, #25
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004060:	0912      	lsrs	r2, r2, #4
 8004062:	0452      	lsls	r2, r2, #17
 8004064:	430a      	orrs	r2, r1
 8004066:	4930      	ldr	r1, [pc, #192]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8004068:	4313      	orrs	r3, r2
 800406a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800406c:	4b2e      	ldr	r3, [pc, #184]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2d      	ldr	r2, [pc, #180]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8004072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004076:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004078:	4b2b      	ldr	r3, [pc, #172]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a2a      	ldr	r2, [pc, #168]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004082:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004084:	f7fc fda2 	bl	8000bcc <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fc fd9e 	bl	8000bcc <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e058      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409e:	4b22      	ldr	r3, [pc, #136]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040aa:	e050      	b.n	800414e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e04f      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d148      	bne.n	800414e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a19      	ldr	r2, [pc, #100]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c8:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040d4:	f7fc fd7a 	bl	8000bcc <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fc fd76 	bl	8000bcc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e030      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x734>
 80040fa:	e028      	b.n	800414e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	d023      	beq.n	800414a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004102:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <HAL_RCC_OscConfig+0x780>)
 8004108:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800410c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fc fd5d 	bl	8000bcc <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004114:	e00c      	b.n	8004130 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fc fd59 	bl	8000bcc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d905      	bls.n	8004130 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e013      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
 8004128:	40021000 	.word	0x40021000
 800412c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004130:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <HAL_RCC_OscConfig+0x7b0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ec      	bne.n	8004116 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800413c:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_RCC_OscConfig+0x7b0>)
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	4905      	ldr	r1, [pc, #20]	@ (8004158 <HAL_RCC_OscConfig+0x7b0>)
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_RCC_OscConfig+0x7b4>)
 8004144:	4013      	ands	r3, r2
 8004146:	60cb      	str	r3, [r1, #12]
 8004148:	e001      	b.n	800414e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	feeefffc 	.word	0xfeeefffc

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0e7      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b75      	ldr	r3, [pc, #468]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d910      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b72      	ldr	r3, [pc, #456]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 0207 	bic.w	r2, r3, #7
 800418a:	4970      	ldr	r1, [pc, #448]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b6e      	ldr	r3, [pc, #440]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0cf      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	4b66      	ldr	r3, [pc, #408]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041bc:	429a      	cmp	r2, r3
 80041be:	d908      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b63      	ldr	r3, [pc, #396]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4960      	ldr	r1, [pc, #384]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d04c      	beq.n	8004278 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d121      	bne.n	8004236 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0a6      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041fe:	4b54      	ldr	r3, [pc, #336]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d115      	bne.n	8004236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e09a      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004216:	4b4e      	ldr	r3, [pc, #312]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e08e      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004226:	4b4a      	ldr	r3, [pc, #296]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e086      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004236:	4b46      	ldr	r3, [pc, #280]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f023 0203 	bic.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4943      	ldr	r1, [pc, #268]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004248:	f7fc fcc0 	bl	8000bcc <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424e:	e00a      	b.n	8004266 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004250:	f7fc fcbc 	bl	8000bcc <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e06e      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	4b3a      	ldr	r3, [pc, #232]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 020c 	and.w	r2, r3, #12
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	429a      	cmp	r2, r3
 8004276:	d1eb      	bne.n	8004250 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	4b31      	ldr	r3, [pc, #196]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004290:	429a      	cmp	r2, r3
 8004292:	d208      	bcs.n	80042a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b2e      	ldr	r3, [pc, #184]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	492b      	ldr	r1, [pc, #172]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a6:	4b29      	ldr	r3, [pc, #164]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d210      	bcs.n	80042d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b4:	4b25      	ldr	r3, [pc, #148]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 0207 	bic.w	r2, r3, #7
 80042bc:	4923      	ldr	r1, [pc, #140]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c4:	4b21      	ldr	r3, [pc, #132]	@ (800434c <HAL_RCC_ClockConfig+0x1ec>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e036      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4918      	ldr	r1, [pc, #96]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4910      	ldr	r1, [pc, #64]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004314:	f000 f824 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	490b      	ldr	r1, [pc, #44]	@ (8004354 <HAL_RCC_ClockConfig+0x1f4>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	4a09      	ldr	r2, [pc, #36]	@ (8004358 <HAL_RCC_ClockConfig+0x1f8>)
 8004332:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004334:	4b09      	ldr	r3, [pc, #36]	@ (800435c <HAL_RCC_ClockConfig+0x1fc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc fbf7 	bl	8000b2c <HAL_InitTick>
 800433e:	4603      	mov	r3, r0
 8004340:	72fb      	strb	r3, [r7, #11]

  return status;
 8004342:	7afb      	ldrb	r3, [r7, #11]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40022000 	.word	0x40022000
 8004350:	40021000 	.word	0x40021000
 8004354:	0800520c 	.word	0x0800520c
 8004358:	20000000 	.word	0x20000000
 800435c:	20000004 	.word	0x20000004

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	b089      	sub	sp, #36	@ 0x24
 8004364:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436e:	4b3e      	ldr	r3, [pc, #248]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004378:	4b3b      	ldr	r3, [pc, #236]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x34>
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d121      	bne.n	80043d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d11e      	bne.n	80043d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004394:	4b34      	ldr	r3, [pc, #208]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043a0:	4b31      	ldr	r3, [pc, #196]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e005      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043bc:	4a2b      	ldr	r2, [pc, #172]	@ (800446c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10d      	bne.n	80043e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d102      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d8:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x110>)
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	e004      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043e4:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x114>)
 80043e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d134      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0xa6>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d003      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0xac>
 8004404:	e005      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004406:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x110>)
 8004408:	617b      	str	r3, [r7, #20]
      break;
 800440a:	e005      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x114>)
 800440e:	617b      	str	r3, [r7, #20]
      break;
 8004410:	e002      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	617b      	str	r3, [r7, #20]
      break;
 8004416:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004418:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	3301      	adds	r3, #1
 8004424:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004426:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	fb03 f202 	mul.w	r2, r3, r2
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800443e:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x108>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	0e5b      	lsrs	r3, r3, #25
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	3301      	adds	r3, #1
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004458:	69bb      	ldr	r3, [r7, #24]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	@ 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	0800521c 	.word	0x0800521c
 8004470:	00f42400 	.word	0x00f42400
 8004474:	007a1200 	.word	0x007a1200

08004478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004484:	4b2a      	ldr	r3, [pc, #168]	@ (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004490:	f7ff fa26 	bl	80038e0 <HAL_PWREx_GetVoltageRange>
 8004494:	6178      	str	r0, [r7, #20]
 8004496:	e014      	b.n	80044c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449c:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a4:	4b22      	ldr	r3, [pc, #136]	@ (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044b0:	f7ff fa16 	bl	80038e0 <HAL_PWREx_GetVoltageRange>
 80044b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	d10b      	bne.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b80      	cmp	r3, #128	@ 0x80
 80044ce:	d919      	bls.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80044d4:	d902      	bls.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044d6:	2302      	movs	r3, #2
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e013      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044dc:	2301      	movs	r3, #1
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	e010      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b80      	cmp	r3, #128	@ 0x80
 80044e6:	d902      	bls.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044e8:	2303      	movs	r3, #3
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e00a      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b80      	cmp	r3, #128	@ 0x80
 80044f2:	d102      	bne.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044f4:	2302      	movs	r3, #2
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e004      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b70      	cmp	r3, #112	@ 0x70
 80044fe:	d101      	bne.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004500:	2301      	movs	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 0207 	bic.w	r2, r3, #7
 800450c:	4909      	ldr	r1, [pc, #36]	@ (8004534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004514:	4b07      	ldr	r3, [pc, #28]	@ (8004534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	40022000 	.word	0x40022000

08004538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004540:	2300      	movs	r3, #0
 8004542:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004544:	2300      	movs	r3, #0
 8004546:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004550:	2b00      	cmp	r3, #0
 8004552:	d041      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004558:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800455c:	d02a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800455e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004562:	d824      	bhi.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004564:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004568:	d008      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800456a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800456e:	d81e      	bhi.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004578:	d010      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800457a:	e018      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800457c:	4b86      	ldr	r3, [pc, #536]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a85      	ldr	r2, [pc, #532]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004586:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004588:	e015      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3304      	adds	r3, #4
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fabb 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800459a:	e00c      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3320      	adds	r3, #32
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fba6 	bl	8004cf4 <RCCEx_PLLSAI2_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	74fb      	strb	r3, [r7, #19]
      break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b6:	7cfb      	ldrb	r3, [r7, #19]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045bc:	4b76      	ldr	r3, [pc, #472]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ca:	4973      	ldr	r1, [pc, #460]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045d2:	e001      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d041      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045ec:	d02a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045f2:	d824      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045f8:	d008      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045fe:	d81e      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004608:	d010      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800460a:	e018      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800460c:	4b62      	ldr	r3, [pc, #392]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a61      	ldr	r2, [pc, #388]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004616:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004618:	e015      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3304      	adds	r3, #4
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fa73 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800462a:	e00c      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3320      	adds	r3, #32
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fb5e 	bl	8004cf4 <RCCEx_PLLSAI2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	74fb      	strb	r3, [r7, #19]
      break;
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800464c:	4b52      	ldr	r3, [pc, #328]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004652:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800465a:	494f      	ldr	r1, [pc, #316]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004662:	e001      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a0 	beq.w	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800467a:	4b47      	ldr	r3, [pc, #284]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b41      	ldr	r3, [pc, #260]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004694:	4a40      	ldr	r2, [pc, #256]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469a:	6593      	str	r3, [r2, #88]	@ 0x58
 800469c:	4b3e      	ldr	r3, [pc, #248]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ac:	4b3b      	ldr	r3, [pc, #236]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3a      	ldr	r2, [pc, #232]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b8:	f7fc fa88 	bl	8000bcc <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046be:	e009      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fc fa84 	bl	8000bcc <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	74fb      	strb	r3, [r7, #19]
        break;
 80046d2:	e005      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046d4:	4b31      	ldr	r3, [pc, #196]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d15c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01f      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	429a      	cmp	r2, r3
 8004702:	d019      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004704:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004710:	4b21      	ldr	r3, [pc, #132]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004716:	4a20      	ldr	r2, [pc, #128]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004720:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004726:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004730:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fc fa43 	bl	8000bcc <HAL_GetTick>
 8004746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004748:	e00b      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fc fa3f 	bl	8000bcc <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d902      	bls.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	74fb      	strb	r3, [r7, #19]
            break;
 8004760:	e006      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ec      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10c      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004776:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004786:	4904      	ldr	r1, [pc, #16]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800478e:	e009      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	74bb      	strb	r3, [r7, #18]
 8004794:	e006      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000
 800479c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a4:	7c7b      	ldrb	r3, [r7, #17]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d105      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	4a9d      	ldr	r2, [pc, #628]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c2:	4b98      	ldr	r3, [pc, #608]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f023 0203 	bic.w	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	4994      	ldr	r1, [pc, #592]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	f023 020c 	bic.w	r2, r3, #12
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f2:	498c      	ldr	r1, [pc, #560]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004806:	4b87      	ldr	r3, [pc, #540]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	4983      	ldr	r1, [pc, #524]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004828:	4b7e      	ldr	r3, [pc, #504]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	497b      	ldr	r1, [pc, #492]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800484a:	4b76      	ldr	r3, [pc, #472]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004858:	4972      	ldr	r1, [pc, #456]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800486c:	4b6d      	ldr	r3, [pc, #436]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004872:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487a:	496a      	ldr	r1, [pc, #424]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800488e:	4b65      	ldr	r3, [pc, #404]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	4961      	ldr	r1, [pc, #388]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048be:	4959      	ldr	r1, [pc, #356]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048d2:	4b54      	ldr	r3, [pc, #336]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e0:	4950      	ldr	r1, [pc, #320]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	4948      	ldr	r1, [pc, #288]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004916:	4b43      	ldr	r3, [pc, #268]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	493f      	ldr	r1, [pc, #252]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d028      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004938:	4b3a      	ldr	r3, [pc, #232]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004946:	4937      	ldr	r1, [pc, #220]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004956:	d106      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004958:	4b32      	ldr	r3, [pc, #200]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a31      	ldr	r2, [pc, #196]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004962:	60d3      	str	r3, [r2, #12]
 8004964:	e011      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800496a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800496e:	d10c      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	2101      	movs	r1, #1
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f8c8 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004980:	7cfb      	ldrb	r3, [r7, #19]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d028      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004996:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a4:	491f      	ldr	r1, [pc, #124]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b4:	d106      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049c0:	60d3      	str	r3, [r2, #12]
 80049c2:	e011      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3304      	adds	r3, #4
 80049d2:	2101      	movs	r1, #1
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f899 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049de:	7cfb      	ldrb	r3, [r7, #19]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02b      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a02:	4908      	ldr	r1, [pc, #32]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a12:	d109      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a14:	4b03      	ldr	r3, [pc, #12]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a02      	ldr	r2, [pc, #8]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a1e:	60d3      	str	r3, [r2, #12]
 8004a20:	e014      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	2101      	movs	r1, #1
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 f867 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a42:	7cfb      	ldrb	r3, [r7, #19]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a48:	7cfb      	ldrb	r3, [r7, #19]
 8004a4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02f      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a58:	4b2b      	ldr	r3, [pc, #172]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a66:	4928      	ldr	r1, [pc, #160]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a76:	d10d      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f844 	bl	8004b0c <RCCEx_PLLSAI1_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d014      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	74bb      	strb	r3, [r7, #18]
 8004a92:	e011      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3320      	adds	r3, #32
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f925 	bl	8004cf4 <RCCEx_PLLSAI2_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ac4:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ad2:	490d      	ldr	r1, [pc, #52]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae6:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af6:	4904      	ldr	r1, [pc, #16]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004afe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021000 	.word	0x40021000

08004b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b1a:	4b75      	ldr	r3, [pc, #468]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b26:	4b72      	ldr	r3, [pc, #456]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0203 	and.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d10d      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
       ||
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d047      	beq.n	8004be2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	e044      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d018      	beq.n	8004b92 <RCCEx_PLLSAI1_Config+0x86>
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d825      	bhi.n	8004bb0 <RCCEx_PLLSAI1_Config+0xa4>
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d002      	beq.n	8004b6e <RCCEx_PLLSAI1_Config+0x62>
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d009      	beq.n	8004b80 <RCCEx_PLLSAI1_Config+0x74>
 8004b6c:	e020      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b6e:	4b60      	ldr	r3, [pc, #384]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11d      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7e:	e01a      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b80:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d116      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b90:	e013      	b.n	8004bba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b92:	4b57      	ldr	r3, [pc, #348]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b9e:	4b54      	ldr	r3, [pc, #336]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bae:	e006      	b.n	8004bbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb4:	e004      	b.n	8004bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e002      	b.n	8004bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e000      	b.n	8004bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10d      	bne.n	8004be2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	4944      	ldr	r1, [pc, #272]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d17d      	bne.n	8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004be8:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a40      	ldr	r2, [pc, #256]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fb ffea 	bl	8000bcc <HAL_GetTick>
 8004bf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bfa:	e009      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bfc:	f7fb ffe6 	bl	8000bcc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d902      	bls.n	8004c10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c0e:	e005      	b.n	8004c1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c10:	4b37      	ldr	r3, [pc, #220]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ef      	bne.n	8004bfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d160      	bne.n	8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d111      	bne.n	8004c4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c28:	4b31      	ldr	r3, [pc, #196]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6892      	ldr	r2, [r2, #8]
 8004c38:	0211      	lsls	r1, r2, #8
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68d2      	ldr	r2, [r2, #12]
 8004c3e:	0912      	lsrs	r2, r2, #4
 8004c40:	0452      	lsls	r2, r2, #17
 8004c42:	430a      	orrs	r2, r1
 8004c44:	492a      	ldr	r1, [pc, #168]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	610b      	str	r3, [r1, #16]
 8004c4a:	e027      	b.n	8004c9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d112      	bne.n	8004c78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c52:	4b27      	ldr	r3, [pc, #156]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c5a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6892      	ldr	r2, [r2, #8]
 8004c62:	0211      	lsls	r1, r2, #8
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6912      	ldr	r2, [r2, #16]
 8004c68:	0852      	lsrs	r2, r2, #1
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	0552      	lsls	r2, r2, #21
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	491f      	ldr	r1, [pc, #124]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	610b      	str	r3, [r1, #16]
 8004c76:	e011      	b.n	8004c9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c78:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6892      	ldr	r2, [r2, #8]
 8004c88:	0211      	lsls	r1, r2, #8
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6952      	ldr	r2, [r2, #20]
 8004c8e:	0852      	lsrs	r2, r2, #1
 8004c90:	3a01      	subs	r2, #1
 8004c92:	0652      	lsls	r2, r2, #25
 8004c94:	430a      	orrs	r2, r1
 8004c96:	4916      	ldr	r1, [pc, #88]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c9c:	4b14      	ldr	r3, [pc, #80]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a13      	ldr	r2, [pc, #76]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fb ff90 	bl	8000bcc <HAL_GetTick>
 8004cac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cae:	e009      	b.n	8004cc4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cb0:	f7fb ff8c 	bl	8000bcc <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d902      	bls.n	8004cc4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	73fb      	strb	r3, [r7, #15]
          break;
 8004cc2:	e005      	b.n	8004cd0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ef      	beq.n	8004cb0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cd6:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	4904      	ldr	r1, [pc, #16]	@ (8004cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000

08004cf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d02:	4b6a      	ldr	r3, [pc, #424]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d0e:	4b67      	ldr	r3, [pc, #412]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0203 	and.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d10d      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
       ||
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d26:	4b61      	ldr	r3, [pc, #388]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
       ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d047      	beq.n	8004dca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
 8004d3e:	e044      	b.n	8004dca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d018      	beq.n	8004d7a <RCCEx_PLLSAI2_Config+0x86>
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d825      	bhi.n	8004d98 <RCCEx_PLLSAI2_Config+0xa4>
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d002      	beq.n	8004d56 <RCCEx_PLLSAI2_Config+0x62>
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d009      	beq.n	8004d68 <RCCEx_PLLSAI2_Config+0x74>
 8004d54:	e020      	b.n	8004d98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d56:	4b55      	ldr	r3, [pc, #340]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11d      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d66:	e01a      	b.n	8004d9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d68:	4b50      	ldr	r3, [pc, #320]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d116      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d78:	e013      	b.n	8004da2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10f      	bne.n	8004da6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d86:	4b49      	ldr	r3, [pc, #292]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d96:	e006      	b.n	8004da6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9c:	e004      	b.n	8004da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e002      	b.n	8004da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004da2:	bf00      	nop
 8004da4:	e000      	b.n	8004da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004da6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dae:	4b3f      	ldr	r3, [pc, #252]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	4939      	ldr	r1, [pc, #228]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d167      	bne.n	8004ea0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a35      	ldr	r2, [pc, #212]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ddc:	f7fb fef6 	bl	8000bcc <HAL_GetTick>
 8004de0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004de2:	e009      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004de4:	f7fb fef2 	bl	8000bcc <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d902      	bls.n	8004df8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	73fb      	strb	r3, [r7, #15]
        break;
 8004df6:	e005      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004df8:	4b2c      	ldr	r3, [pc, #176]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ef      	bne.n	8004de4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d14a      	bne.n	8004ea0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d111      	bne.n	8004e34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e10:	4b26      	ldr	r3, [pc, #152]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6892      	ldr	r2, [r2, #8]
 8004e20:	0211      	lsls	r1, r2, #8
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68d2      	ldr	r2, [r2, #12]
 8004e26:	0912      	lsrs	r2, r2, #4
 8004e28:	0452      	lsls	r2, r2, #17
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	491f      	ldr	r1, [pc, #124]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	614b      	str	r3, [r1, #20]
 8004e32:	e011      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e34:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6892      	ldr	r2, [r2, #8]
 8004e44:	0211      	lsls	r1, r2, #8
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6912      	ldr	r2, [r2, #16]
 8004e4a:	0852      	lsrs	r2, r2, #1
 8004e4c:	3a01      	subs	r2, #1
 8004e4e:	0652      	lsls	r2, r2, #25
 8004e50:	430a      	orrs	r2, r1
 8004e52:	4916      	ldr	r1, [pc, #88]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e58:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fb feb2 	bl	8000bcc <HAL_GetTick>
 8004e68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e6a:	e009      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e6c:	f7fb feae 	bl	8000bcc <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d902      	bls.n	8004e80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e7e:	e005      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e80:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ef      	beq.n	8004e6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	4904      	ldr	r1, [pc, #16]	@ (8004eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000

08004eb0 <malloc>:
 8004eb0:	4b02      	ldr	r3, [pc, #8]	@ (8004ebc <malloc+0xc>)
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	f000 b825 	b.w	8004f04 <_malloc_r>
 8004eba:	bf00      	nop
 8004ebc:	2000000c 	.word	0x2000000c

08004ec0 <sbrk_aligned>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8004f00 <sbrk_aligned+0x40>)
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	6831      	ldr	r1, [r6, #0]
 8004ec8:	4605      	mov	r5, r0
 8004eca:	b911      	cbnz	r1, 8004ed2 <sbrk_aligned+0x12>
 8004ecc:	f000 f8e4 	bl	8005098 <_sbrk_r>
 8004ed0:	6030      	str	r0, [r6, #0]
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 f8df 	bl	8005098 <_sbrk_r>
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	d103      	bne.n	8004ee6 <sbrk_aligned+0x26>
 8004ede:	f04f 34ff 	mov.w	r4, #4294967295
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	1cc4      	adds	r4, r0, #3
 8004ee8:	f024 0403 	bic.w	r4, r4, #3
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d0f8      	beq.n	8004ee2 <sbrk_aligned+0x22>
 8004ef0:	1a21      	subs	r1, r4, r0
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f8d0 	bl	8005098 <_sbrk_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d1f2      	bne.n	8004ee2 <sbrk_aligned+0x22>
 8004efc:	e7ef      	b.n	8004ede <sbrk_aligned+0x1e>
 8004efe:	bf00      	nop
 8004f00:	2000018c 	.word	0x2000018c

08004f04 <_malloc_r>:
 8004f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f08:	1ccd      	adds	r5, r1, #3
 8004f0a:	f025 0503 	bic.w	r5, r5, #3
 8004f0e:	3508      	adds	r5, #8
 8004f10:	2d0c      	cmp	r5, #12
 8004f12:	bf38      	it	cc
 8004f14:	250c      	movcc	r5, #12
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	4606      	mov	r6, r0
 8004f1a:	db01      	blt.n	8004f20 <_malloc_r+0x1c>
 8004f1c:	42a9      	cmp	r1, r5
 8004f1e:	d904      	bls.n	8004f2a <_malloc_r+0x26>
 8004f20:	230c      	movs	r3, #12
 8004f22:	6033      	str	r3, [r6, #0]
 8004f24:	2000      	movs	r0, #0
 8004f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005000 <_malloc_r+0xfc>
 8004f2e:	f000 f869 	bl	8005004 <__malloc_lock>
 8004f32:	f8d8 3000 	ldr.w	r3, [r8]
 8004f36:	461c      	mov	r4, r3
 8004f38:	bb44      	cbnz	r4, 8004f8c <_malloc_r+0x88>
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f7ff ffbf 	bl	8004ec0 <sbrk_aligned>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	4604      	mov	r4, r0
 8004f46:	d158      	bne.n	8004ffa <_malloc_r+0xf6>
 8004f48:	f8d8 4000 	ldr.w	r4, [r8]
 8004f4c:	4627      	mov	r7, r4
 8004f4e:	2f00      	cmp	r7, #0
 8004f50:	d143      	bne.n	8004fda <_malloc_r+0xd6>
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	d04b      	beq.n	8004fee <_malloc_r+0xea>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	4639      	mov	r1, r7
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	eb04 0903 	add.w	r9, r4, r3
 8004f60:	f000 f89a 	bl	8005098 <_sbrk_r>
 8004f64:	4581      	cmp	r9, r0
 8004f66:	d142      	bne.n	8004fee <_malloc_r+0xea>
 8004f68:	6821      	ldr	r1, [r4, #0]
 8004f6a:	1a6d      	subs	r5, r5, r1
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7ff ffa6 	bl	8004ec0 <sbrk_aligned>
 8004f74:	3001      	adds	r0, #1
 8004f76:	d03a      	beq.n	8004fee <_malloc_r+0xea>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	442b      	add	r3, r5
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	bb62      	cbnz	r2, 8004fe0 <_malloc_r+0xdc>
 8004f86:	f8c8 7000 	str.w	r7, [r8]
 8004f8a:	e00f      	b.n	8004fac <_malloc_r+0xa8>
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	1b52      	subs	r2, r2, r5
 8004f90:	d420      	bmi.n	8004fd4 <_malloc_r+0xd0>
 8004f92:	2a0b      	cmp	r2, #11
 8004f94:	d917      	bls.n	8004fc6 <_malloc_r+0xc2>
 8004f96:	1961      	adds	r1, r4, r5
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	6025      	str	r5, [r4, #0]
 8004f9c:	bf18      	it	ne
 8004f9e:	6059      	strne	r1, [r3, #4]
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	bf08      	it	eq
 8004fa4:	f8c8 1000 	streq.w	r1, [r8]
 8004fa8:	5162      	str	r2, [r4, r5]
 8004faa:	604b      	str	r3, [r1, #4]
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f82f 	bl	8005010 <__malloc_unlock>
 8004fb2:	f104 000b 	add.w	r0, r4, #11
 8004fb6:	1d23      	adds	r3, r4, #4
 8004fb8:	f020 0007 	bic.w	r0, r0, #7
 8004fbc:	1ac2      	subs	r2, r0, r3
 8004fbe:	bf1c      	itt	ne
 8004fc0:	1a1b      	subne	r3, r3, r0
 8004fc2:	50a3      	strne	r3, [r4, r2]
 8004fc4:	e7af      	b.n	8004f26 <_malloc_r+0x22>
 8004fc6:	6862      	ldr	r2, [r4, #4]
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	bf0c      	ite	eq
 8004fcc:	f8c8 2000 	streq.w	r2, [r8]
 8004fd0:	605a      	strne	r2, [r3, #4]
 8004fd2:	e7eb      	b.n	8004fac <_malloc_r+0xa8>
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	6864      	ldr	r4, [r4, #4]
 8004fd8:	e7ae      	b.n	8004f38 <_malloc_r+0x34>
 8004fda:	463c      	mov	r4, r7
 8004fdc:	687f      	ldr	r7, [r7, #4]
 8004fde:	e7b6      	b.n	8004f4e <_malloc_r+0x4a>
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d1fb      	bne.n	8004fe0 <_malloc_r+0xdc>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6053      	str	r3, [r2, #4]
 8004fec:	e7de      	b.n	8004fac <_malloc_r+0xa8>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	6033      	str	r3, [r6, #0]
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f000 f80c 	bl	8005010 <__malloc_unlock>
 8004ff8:	e794      	b.n	8004f24 <_malloc_r+0x20>
 8004ffa:	6005      	str	r5, [r0, #0]
 8004ffc:	e7d6      	b.n	8004fac <_malloc_r+0xa8>
 8004ffe:	bf00      	nop
 8005000:	20000190 	.word	0x20000190

08005004 <__malloc_lock>:
 8005004:	4801      	ldr	r0, [pc, #4]	@ (800500c <__malloc_lock+0x8>)
 8005006:	f000 b881 	b.w	800510c <__retarget_lock_acquire_recursive>
 800500a:	bf00      	nop
 800500c:	200002d0 	.word	0x200002d0

08005010 <__malloc_unlock>:
 8005010:	4801      	ldr	r0, [pc, #4]	@ (8005018 <__malloc_unlock+0x8>)
 8005012:	f000 b87c 	b.w	800510e <__retarget_lock_release_recursive>
 8005016:	bf00      	nop
 8005018:	200002d0 	.word	0x200002d0

0800501c <realloc>:
 800501c:	4b02      	ldr	r3, [pc, #8]	@ (8005028 <realloc+0xc>)
 800501e:	460a      	mov	r2, r1
 8005020:	4601      	mov	r1, r0
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	f000 b802 	b.w	800502c <_realloc_r>
 8005028:	2000000c 	.word	0x2000000c

0800502c <_realloc_r>:
 800502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005030:	4680      	mov	r8, r0
 8005032:	4615      	mov	r5, r2
 8005034:	460c      	mov	r4, r1
 8005036:	b921      	cbnz	r1, 8005042 <_realloc_r+0x16>
 8005038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800503c:	4611      	mov	r1, r2
 800503e:	f7ff bf61 	b.w	8004f04 <_malloc_r>
 8005042:	b92a      	cbnz	r2, 8005050 <_realloc_r+0x24>
 8005044:	f000 f872 	bl	800512c <_free_r>
 8005048:	2400      	movs	r4, #0
 800504a:	4620      	mov	r0, r4
 800504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005050:	f000 f8b6 	bl	80051c0 <_malloc_usable_size_r>
 8005054:	4285      	cmp	r5, r0
 8005056:	4606      	mov	r6, r0
 8005058:	d802      	bhi.n	8005060 <_realloc_r+0x34>
 800505a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800505e:	d8f4      	bhi.n	800504a <_realloc_r+0x1e>
 8005060:	4629      	mov	r1, r5
 8005062:	4640      	mov	r0, r8
 8005064:	f7ff ff4e 	bl	8004f04 <_malloc_r>
 8005068:	4607      	mov	r7, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	d0ec      	beq.n	8005048 <_realloc_r+0x1c>
 800506e:	42b5      	cmp	r5, r6
 8005070:	462a      	mov	r2, r5
 8005072:	4621      	mov	r1, r4
 8005074:	bf28      	it	cs
 8005076:	4632      	movcs	r2, r6
 8005078:	f000 f84a 	bl	8005110 <memcpy>
 800507c:	4621      	mov	r1, r4
 800507e:	4640      	mov	r0, r8
 8005080:	f000 f854 	bl	800512c <_free_r>
 8005084:	463c      	mov	r4, r7
 8005086:	e7e0      	b.n	800504a <_realloc_r+0x1e>

08005088 <memset>:
 8005088:	4402      	add	r2, r0
 800508a:	4603      	mov	r3, r0
 800508c:	4293      	cmp	r3, r2
 800508e:	d100      	bne.n	8005092 <memset+0xa>
 8005090:	4770      	bx	lr
 8005092:	f803 1b01 	strb.w	r1, [r3], #1
 8005096:	e7f9      	b.n	800508c <memset+0x4>

08005098 <_sbrk_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d06      	ldr	r5, [pc, #24]	@ (80050b4 <_sbrk_r+0x1c>)
 800509c:	2300      	movs	r3, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fb fcb8 	bl	8000a18 <_sbrk>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_sbrk_r+0x1a>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_sbrk_r+0x1a>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	200002cc 	.word	0x200002cc

080050b8 <__errno>:
 80050b8:	4b01      	ldr	r3, [pc, #4]	@ (80050c0 <__errno+0x8>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	2000000c 	.word	0x2000000c

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	@ (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005108 <__libc_init_array+0x44>)
 80050d8:	f000 f87a 	bl	80051d0 <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	0800524c 	.word	0x0800524c
 8005100:	0800524c 	.word	0x0800524c
 8005104:	0800524c 	.word	0x0800524c
 8005108:	08005250 	.word	0x08005250

0800510c <__retarget_lock_acquire_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_release_recursive>:
 800510e:	4770      	bx	lr

08005110 <memcpy>:
 8005110:	440a      	add	r2, r1
 8005112:	4291      	cmp	r1, r2
 8005114:	f100 33ff 	add.w	r3, r0, #4294967295
 8005118:	d100      	bne.n	800511c <memcpy+0xc>
 800511a:	4770      	bx	lr
 800511c:	b510      	push	{r4, lr}
 800511e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005126:	4291      	cmp	r1, r2
 8005128:	d1f9      	bne.n	800511e <memcpy+0xe>
 800512a:	bd10      	pop	{r4, pc}

0800512c <_free_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4605      	mov	r5, r0
 8005130:	2900      	cmp	r1, #0
 8005132:	d041      	beq.n	80051b8 <_free_r+0x8c>
 8005134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005138:	1f0c      	subs	r4, r1, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	bfb8      	it	lt
 800513e:	18e4      	addlt	r4, r4, r3
 8005140:	f7ff ff60 	bl	8005004 <__malloc_lock>
 8005144:	4a1d      	ldr	r2, [pc, #116]	@ (80051bc <_free_r+0x90>)
 8005146:	6813      	ldr	r3, [r2, #0]
 8005148:	b933      	cbnz	r3, 8005158 <_free_r+0x2c>
 800514a:	6063      	str	r3, [r4, #4]
 800514c:	6014      	str	r4, [r2, #0]
 800514e:	4628      	mov	r0, r5
 8005150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005154:	f7ff bf5c 	b.w	8005010 <__malloc_unlock>
 8005158:	42a3      	cmp	r3, r4
 800515a:	d908      	bls.n	800516e <_free_r+0x42>
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	1821      	adds	r1, r4, r0
 8005160:	428b      	cmp	r3, r1
 8005162:	bf01      	itttt	eq
 8005164:	6819      	ldreq	r1, [r3, #0]
 8005166:	685b      	ldreq	r3, [r3, #4]
 8005168:	1809      	addeq	r1, r1, r0
 800516a:	6021      	streq	r1, [r4, #0]
 800516c:	e7ed      	b.n	800514a <_free_r+0x1e>
 800516e:	461a      	mov	r2, r3
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	b10b      	cbz	r3, 8005178 <_free_r+0x4c>
 8005174:	42a3      	cmp	r3, r4
 8005176:	d9fa      	bls.n	800516e <_free_r+0x42>
 8005178:	6811      	ldr	r1, [r2, #0]
 800517a:	1850      	adds	r0, r2, r1
 800517c:	42a0      	cmp	r0, r4
 800517e:	d10b      	bne.n	8005198 <_free_r+0x6c>
 8005180:	6820      	ldr	r0, [r4, #0]
 8005182:	4401      	add	r1, r0
 8005184:	1850      	adds	r0, r2, r1
 8005186:	4283      	cmp	r3, r0
 8005188:	6011      	str	r1, [r2, #0]
 800518a:	d1e0      	bne.n	800514e <_free_r+0x22>
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	6053      	str	r3, [r2, #4]
 8005192:	4408      	add	r0, r1
 8005194:	6010      	str	r0, [r2, #0]
 8005196:	e7da      	b.n	800514e <_free_r+0x22>
 8005198:	d902      	bls.n	80051a0 <_free_r+0x74>
 800519a:	230c      	movs	r3, #12
 800519c:	602b      	str	r3, [r5, #0]
 800519e:	e7d6      	b.n	800514e <_free_r+0x22>
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	1821      	adds	r1, r4, r0
 80051a4:	428b      	cmp	r3, r1
 80051a6:	bf04      	itt	eq
 80051a8:	6819      	ldreq	r1, [r3, #0]
 80051aa:	685b      	ldreq	r3, [r3, #4]
 80051ac:	6063      	str	r3, [r4, #4]
 80051ae:	bf04      	itt	eq
 80051b0:	1809      	addeq	r1, r1, r0
 80051b2:	6021      	streq	r1, [r4, #0]
 80051b4:	6054      	str	r4, [r2, #4]
 80051b6:	e7ca      	b.n	800514e <_free_r+0x22>
 80051b8:	bd38      	pop	{r3, r4, r5, pc}
 80051ba:	bf00      	nop
 80051bc:	20000190 	.word	0x20000190

080051c0 <_malloc_usable_size_r>:
 80051c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c4:	1f18      	subs	r0, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bfbc      	itt	lt
 80051ca:	580b      	ldrlt	r3, [r1, r0]
 80051cc:	18c0      	addlt	r0, r0, r3
 80051ce:	4770      	bx	lr

080051d0 <_init>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr

080051dc <_fini>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr
