
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007584  08007584  00008584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076fc  080076fc  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080076fc  080076fc  000086fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007704  08007704  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007704  08007704  00008704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007708  08007708  00008708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800770c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  2000000c  08007718  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08007718  0000968c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001665e  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003359  00000000  00000000  0001f69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  000229f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e22  00000000  00000000  00023c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041aa  00000000  00000000  00024a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a789  00000000  00000000  00028bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0652  00000000  00000000  00043385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001339d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  00133a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00138590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800756c 	.word	0x0800756c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800756c 	.word	0x0800756c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <I2C_Init>:
		writeRegister(addr, regAddr+i, value[i]);
	}
}

//PB6 = SCL1, PB7 = SDA1
void I2C_Init(void){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	hI2C.Instance = I2C1;
 80004cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000540 <I2C_Init+0x78>)
 80004ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000544 <I2C_Init+0x7c>)
 80004d0:	601a      	str	r2, [r3, #0]
	hI2C.Init.OwnAddress2 = 0;
 80004d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <I2C_Init+0x78>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004d8:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <I2C_Init+0x78>)
 80004da:	2200      	movs	r2, #0
 80004dc:	619a      	str	r2, [r3, #24]
	hI2C.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004de:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <I2C_Init+0x78>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	60da      	str	r2, [r3, #12]
	hI2C.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e4:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <I2C_Init+0x78>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
	hI2C.Init.OwnAddress1 = 0;
 80004ea:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <I2C_Init+0x78>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
	hI2C.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <I2C_Init+0x78>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	619a      	str	r2, [r3, #24]
	hI2C.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f6:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <I2C_Init+0x78>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	61da      	str	r2, [r3, #28]
	hI2C.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <I2C_Init+0x78>)
 80004fe:	2200      	movs	r2, #0
 8000500:	621a      	str	r2, [r3, #32]
	//hI2C.Init.Timing = 0x00100D19;
	hI2C.Init.Timing = 0x00100D14;
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <I2C_Init+0x78>)
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <I2C_Init+0x80>)
 8000506:	605a      	str	r2, [r3, #4]
	if (HAL_I2C_Init(&hI2C) != HAL_OK)
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <I2C_Init+0x78>)
 800050a:	f001 fb43 	bl	8001b94 <HAL_I2C_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <I2C_Init+0x50>
	{
		Error_Handler();
 8000514:	f000 f92a 	bl	800076c <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hI2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000518:	2100      	movs	r1, #0
 800051a:	4809      	ldr	r0, [pc, #36]	@ (8000540 <I2C_Init+0x78>)
 800051c:	f001 fbd5 	bl	8001cca <HAL_I2CEx_ConfigAnalogFilter>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <I2C_Init+0x62>
	{
		Error_Handler();
 8000526:	f000 f921 	bl	800076c <Error_Handler>
	}

    if (HAL_I2CEx_ConfigDigitalFilter(&hI2C, 0) != HAL_OK)
 800052a:	2100      	movs	r1, #0
 800052c:	4804      	ldr	r0, [pc, #16]	@ (8000540 <I2C_Init+0x78>)
 800052e:	f001 fc17 	bl	8001d60 <HAL_I2CEx_ConfigDigitalFilter>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <I2C_Init+0x74>
    {
    	Error_Handler();
 8000538:	f000 f918 	bl	800076c <Error_Handler>
    }
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000028 	.word	0x20000028
 8000544:	40005400 	.word	0x40005400
 8000548:	00100d14 	.word	0x00100d14

0800054c <main>:
{
	buffer_idx++;
	HAL_UART_Receive_IT(&huart3, &buffer[buffer_idx], 1);
}
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
 HAL_Init();
 8000552:	f000 fe7a 	bl	800124a <HAL_Init>
 SystemClock_Config();
 8000556:	f000 f891 	bl	800067c <SystemClock_Config>
 GPIO_Init();
 800055a:	f000 f8d5 	bl	8000708 <GPIO_Init>
 UART_Init();
 800055e:	f000 f90b 	bl	8000778 <UART_Init>
 I2C_Init();
 8000562:	f7ff ffb1 	bl	80004c8 <I2C_Init>
 SPI_Init();
 8000566:	f000 fc31 	bl	8000dcc <SPI_Init>

 bool result = initialize_SD_card();
 800056a:	f000 fb7f 	bl	8000c6c <initialize_SD_card>
 800056e:	4603      	mov	r3, r0
 8000570:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 if(!result)
 8000574:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000578:	f083 0301 	eor.w	r3, r3, #1
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <main+0x3a>
	  while(1);
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x36>
 result = is_SD_card_initialized();
 8000586:	f000 fc15 	bl	8000db4 <is_SD_card_initialized>
 800058a:	4603      	mov	r3, r0
 800058c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 if(!result)
 8000590:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000594:	f083 0301 	eor.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <main+0x56>
	  while(1);
 800059e:	bf00      	nop
 80005a0:	e7fd      	b.n	800059e <main+0x52>
 res = f_mount(&fs, "", 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	492f      	ldr	r1, [pc, #188]	@ (8000664 <main+0x118>)
 80005a6:	4830      	ldr	r0, [pc, #192]	@ (8000668 <main+0x11c>)
 80005a8:	f006 fa58 	bl	8006a5c <f_mount>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b2e      	ldr	r3, [pc, #184]	@ (800066c <main+0x120>)
 80005b2:	701a      	strb	r2, [r3, #0]
 if(res != FR_OK)
 80005b4:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <main+0x120>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <main+0x74>
	  while(1);
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x70>
 res = f_open(&file, "text.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80005c0:	220a      	movs	r2, #10
 80005c2:	492b      	ldr	r1, [pc, #172]	@ (8000670 <main+0x124>)
 80005c4:	482b      	ldr	r0, [pc, #172]	@ (8000674 <main+0x128>)
 80005c6:	f006 fa8f 	bl	8006ae8 <f_open>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b27      	ldr	r3, [pc, #156]	@ (800066c <main+0x120>)
 80005d0:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 80005d2:	4b26      	ldr	r3, [pc, #152]	@ (800066c <main+0x120>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d126      	bne.n	8000628 <main+0xdc>
	  const char* text = "Hello, SD card!\n";
 80005da:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <main+0x12c>)
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	  UINT bytesWritten;
	  res = f_write(&file, text, strlen(text), &bytesWritten);
 80005de:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80005e0:	f7ff fdf2 	bl	80001c8 <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80005ec:	4821      	ldr	r0, [pc, #132]	@ (8000674 <main+0x128>)
 80005ee:	f006 fd74 	bl	80070da <f_write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <main+0x120>)
 80005f8:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <main+0x120>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <main+0xba>
		  while(1);
 8000602:	bf00      	nop
 8000604:	e7fd      	b.n	8000602 <main+0xb6>
	  f_close(&file);
 8000606:	481b      	ldr	r0, [pc, #108]	@ (8000674 <main+0x128>)
 8000608:	f006 ff5a 	bl	80074c0 <f_close>
 }
 else
	  while(1);
 res = f_open(&file, "text.txt", FA_READ);
 800060c:	2201      	movs	r2, #1
 800060e:	4918      	ldr	r1, [pc, #96]	@ (8000670 <main+0x124>)
 8000610:	4818      	ldr	r0, [pc, #96]	@ (8000674 <main+0x128>)
 8000612:	f006 fa69 	bl	8006ae8 <f_open>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <main+0x120>)
 800061c:	701a      	strb	r2, [r3, #0]
 if(res == FR_OK){
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <main+0x120>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d11c      	bne.n	8000660 <main+0x114>
 8000626:	e000      	b.n	800062a <main+0xde>
	  while(1);
 8000628:	e7fe      	b.n	8000628 <main+0xdc>
	  char buffer[64];
	  UINT bytesRead;
	  res = f_read(&file, buffer, sizeof(buffer) - 1, &bytesRead);
 800062a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800062e:	4639      	mov	r1, r7
 8000630:	223f      	movs	r2, #63	@ 0x3f
 8000632:	4810      	ldr	r0, [pc, #64]	@ (8000674 <main+0x128>)
 8000634:	f006 fc12 	bl	8006e5c <f_read>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <main+0x120>)
 800063e:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK)
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <main+0x120>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <main+0x100>
		  while(1);
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <main+0xfc>
	  buffer[bytesRead] = '\0';
 800064c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800064e:	3350      	adds	r3, #80	@ 0x50
 8000650:	443b      	add	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	f803 2c50 	strb.w	r2, [r3, #-80]
	  f_close(&file);
 8000658:	4806      	ldr	r0, [pc, #24]	@ (8000674 <main+0x128>)
 800065a:	f006 ff31 	bl	80074c0 <f_close>
 800065e:	e000      	b.n	8000662 <main+0x116>
 }
 else
	  while(1);
 8000660:	e7fe      	b.n	8000660 <main+0x114>

 while(1){
 8000662:	e7fe      	b.n	8000662 <main+0x116>
 8000664:	08007584 	.word	0x08007584
 8000668:	2000010c 	.word	0x2000010c
 800066c:	2000056c 	.word	0x2000056c
 8000670:	08007588 	.word	0x08007588
 8000674:	2000033c 	.word	0x2000033c
 8000678:	08007594 	.word	0x08007594

0800067c <SystemClock_Config>:

 }

}
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	@ 0x58
 8000680:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	@ 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 ff42 	bl	8007514 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a2:	f001 fbb7 	bl	8001e14 <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
 {
   Error_Handler();
 80006ac:	f000 f85e 	bl	800076c <Error_Handler>
 }
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b0:	2310      	movs	r3, #16
 80006b2:	617b      	str	r3, [r7, #20]
 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006bc:	2360      	movs	r3, #96	@ 0x60
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fbf9 	bl	8001ec0 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x5c>
 {
   Error_Handler();
 80006d4:	f000 f84a 	bl	800076c <Error_Handler>
 }
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	603b      	str	r3, [r7, #0]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 ffc1 	bl	8002678 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x84>
 {
   Error_Handler();
 80006fc:	f000 f836 	bl	800076c <Error_Handler>
 }
}
 8000700:	bf00      	nop
 8000702:	3758      	adds	r7, #88	@ 0x58
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <GPIO_Init>:
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn,0,0);
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
}
void GPIO_Init(void){
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */
	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <GPIO_Init+0x60>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000720:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <GPIO_Init+0x60>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <GPIO_Init+0x60>)
 800072a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]
	 /*Configure GPIO pin Output Level */
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073e:	f001 fa11 	bl	8001b64 <HAL_GPIO_WritePin>
	 /*Configure GPIO pin : PA9 */
	 GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000742:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000746:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075c:	f001 f858 	bl	8001810 <HAL_GPIO_Init>
	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000

0800076c <Error_Handler>:
 {
   Error_Handler();
 }*/
}
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
 __disable_irq();
 while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <UART_Init>:


//TX = 11, RX = 10
void calculate_checksum(uint8_t *ck1, uint8_t *ck2, uint8_t* buff, uint8_t size);
void UART_Init();
void UART_Init(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 38400;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <UART_Init+0x58>)
 8000784:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000788:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <UART_Init+0x58>)
 80007bc:	f003 fb3a 	bl	8003e34 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <UART_Init+0x52>
	{
	  while(1);
 80007c6:	bf00      	nop
 80007c8:	e7fd      	b.n	80007c6 <UART_Init+0x4e>
	}
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000570 	.word	0x20000570
 80007d4:	40004800 	.word	0x40004800

080007d8 <send_command>:
#include "sd.h"


static bool is_initialized = 0;

bool send_command(uint8_t* cmd, uint8_t response){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af02      	add	r7, sp, #8
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
	bool success = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f001 f9b7 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 6, HAL_MAX_DELAY);
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	2206      	movs	r2, #6
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4836      	ldr	r0, [pc, #216]	@ (80008d8 <send_command+0x100>)
 8000800:	f002 fea4 	bl	800354c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f001 f9a9 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f000 fd8e 	bl	8001334 <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	e053      	b.n	80008c6 <send_command+0xee>
		uint8_t result[1];
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f001 f99c 	bl	8001b64 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, result, 1, HAL_MAX_DELAY);
 800082c:	23ff      	movs	r3, #255	@ 0xff
 800082e:	743b      	strb	r3, [r7, #16]
 8000830:	f107 0214 	add.w	r2, r7, #20
 8000834:	f107 0110 	add.w	r1, r7, #16
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	4825      	ldr	r0, [pc, #148]	@ (80008d8 <send_command+0x100>)
 8000842:	f002 ffd9 	bl	80037f8 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000850:	f001 f988 	bl	8001b64 <HAL_GPIO_WritePin>
		if(result[0] == response){
 8000854:	7d3b      	ldrb	r3, [r7, #20]
 8000856:	78fa      	ldrb	r2, [r7, #3]
 8000858:	429a      	cmp	r2, r3
 800085a:	d12e      	bne.n	80008ba <send_command+0xe2>
			if(cmd[0] == 0x48){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b48      	cmp	r3, #72	@ 0x48
 8000862:	d127      	bne.n	80008b4 <send_command+0xdc>
				uint8_t result_cmd8[4];
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f001 f979 	bl	8001b64 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF, 0xFF, 0xFF}, result_cmd8, 4, HAL_MAX_DELAY);
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <send_command+0x104>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	f107 020c 	add.w	r2, r7, #12
 800087c:	f107 0108 	add.w	r1, r7, #8
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2304      	movs	r3, #4
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <send_command+0x100>)
 800088a:	f002 ffb5 	bl	80037f8 <HAL_SPI_TransmitReceive>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f001 f964 	bl	8001b64 <HAL_GPIO_WritePin>
				if(result_cmd8[0] != 0x00 || result_cmd8[1] != 0x00 || result_cmd8[2] != 0x01 || result_cmd8[3] != 0xAA)
 800089c:	7b3b      	ldrb	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10e      	bne.n	80008c0 <send_command+0xe8>
 80008a2:	7b7b      	ldrb	r3, [r7, #13]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d10b      	bne.n	80008c0 <send_command+0xe8>
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d108      	bne.n	80008c0 <send_command+0xe8>
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	2baa      	cmp	r3, #170	@ 0xaa
 80008b2:	d105      	bne.n	80008c0 <send_command+0xe8>
					continue;
			}
			success = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	77fb      	strb	r3, [r7, #31]
 80008b8:	e009      	b.n	80008ce <send_command+0xf6>
			break;
		}
		HAL_Delay(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fd3a 	bl	8001334 <HAL_Delay>
	for(int i = 0; i < 1000; i++){
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	3301      	adds	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008cc:	dba7      	blt.n	800081e <send_command+0x46>
	}
	return success;
 80008ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200005fc 	.word	0x200005fc
 80008dc:	080075a8 	.word	0x080075a8

080008e0 <initialize_SPI_mode>:

void initialize_SPI_mode(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f0:	f001 f938 	bl	8001b64 <HAL_GPIO_WritePin>
	uint8_t dummy[10];
	memset(dummy, 0xFF, sizeof(dummy));
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	220a      	movs	r2, #10
 80008f8:	21ff      	movs	r1, #255	@ 0xff
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fe0a 	bl	8007514 <memset>
	HAL_SPI_Transmit(&hspi1, dummy, sizeof(dummy), HAL_MAX_DELAY);
 8000900:	1d39      	adds	r1, r7, #4
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	220a      	movs	r2, #10
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <initialize_SPI_mode+0x38>)
 800090a:	f002 fe1f 	bl	800354c <HAL_SPI_Transmit>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200005fc 	.word	0x200005fc

0800091c <read_block>:

bool read_block(uint32_t block, uint8_t* data){
 800091c:	b580      	push	{r7, lr}
 800091e:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8000922:	af02      	add	r7, sp, #8
 8000924:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000928:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800092c:	6018      	str	r0, [r3, #0]
 800092e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000932:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8000936:	6019      	str	r1, [r3, #0]
	uint8_t cmd17[6];
	cmd17[0] = 0x51;
 8000938:	2351      	movs	r3, #81	@ 0x51
 800093a:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
	cmd17[1] = (block >> 24)&0xFF;
 800093e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000942:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	0e1b      	lsrs	r3, r3, #24
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	cmd17[2] = (block >> 16)&0xFF;
 8000950:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000954:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	0c1b      	lsrs	r3, r3, #16
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	cmd17[3] = (block >> 8) & 0xFF;
 8000962:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000966:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
	cmd17[4] = (block)&0xFF;
 8000974:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000978:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
	cmd17[5] = 0xFF;
 8000984:	23ff      	movs	r3, #255	@ 0xff
 8000986:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
	bool result = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	result = send_command(cmd17, 0x00);
 8000990:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff1e 	bl	80007d8 <send_command>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
	if(!result)
 80009a2:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80009a6:	f083 0301 	eor.w	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <read_block+0x98>
		return 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	e07e      	b.n	8000ab2 <read_block+0x196>
	uint8_t response[1];
	for(int i = 0; i < 1000; i++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80009ba:	e027      	b.n	8000a0c <read_block+0xf0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c6:	f001 f8cd 	bl	8001b64 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 80009ca:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80009ce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80009d2:	22ff      	movs	r2, #255	@ 0xff
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80009da:	f107 010c 	add.w	r1, r7, #12
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2301      	movs	r3, #1
 80009e6:	4835      	ldr	r0, [pc, #212]	@ (8000abc <read_block+0x1a0>)
 80009e8:	f002 ff06 	bl	80037f8 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f6:	f001 f8b5 	bl	8001b64 <HAL_GPIO_WritePin>
		if(response[0] == 0xFE){
 80009fa:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 80009fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a00:	d00a      	beq.n	8000a18 <read_block+0xfc>
	for(int i = 0; i < 1000; i++){
 8000a02:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000a06:	3301      	adds	r3, #1
 8000a08:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000a0c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8000a10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a14:	dbd2      	blt.n	80009bc <read_block+0xa0>
 8000a16:	e000      	b.n	8000a1a <read_block+0xfe>
			break;
 8000a18:	bf00      	nop
		}
	}

	if(response[0] != 0xFE)
 8000a1a:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8000a1e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a20:	d001      	beq.n	8000a26 <read_block+0x10a>
		return 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e045      	b.n	8000ab2 <read_block+0x196>

	uint8_t send[512];
	memset(send, 0xFF,512);
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a2e:	21ff      	movs	r1, #255	@ 0xff
 8000a30:	4618      	mov	r0, r3
 8000a32:	f006 fd6f 	bl	8007514 <memset>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a40:	f001 f890 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send, data, 512, HAL_MAX_DELAY);
 8000a44:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000a48:	f5a3 720a 	sub.w	r2, r3, #552	@ 0x228
 8000a4c:	f107 0118 	add.w	r1, r7, #24
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	4817      	ldr	r0, [pc, #92]	@ (8000abc <read_block+0x1a0>)
 8000a5e:	f002 fecb 	bl	80037f8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f001 f87a 	bl	8001b64 <HAL_GPIO_WritePin>

	uint8_t crc[2];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f001 f873 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF, 0xFF}, crc, 2, HAL_MAX_DELAY);
 8000a7e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000a82:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <read_block+0x1a4>)
 8000a88:	8812      	ldrh	r2, [r2, #0]
 8000a8a:	801a      	strh	r2, [r3, #0]
 8000a8c:	f107 0214 	add.w	r2, r7, #20
 8000a90:	f107 0110 	add.w	r1, r7, #16
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	4807      	ldr	r0, [pc, #28]	@ (8000abc <read_block+0x1a0>)
 8000a9e:	f002 feab 	bl	80037f8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f001 f85a 	bl	8001b64 <HAL_GPIO_WritePin>
	return 1;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200005fc 	.word	0x200005fc
 8000ac0:	080075ac 	.word	0x080075ac

08000ac4 <write_block>:

bool write_block(uint32_t block, uint8_t* data){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	@ 0x38
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	uint8_t cmd24[6];
	cmd24[0] = 0x58;
 8000ace:	2358      	movs	r3, #88	@ 0x58
 8000ad0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	cmd24[1] = (block >> 24)&0xFF;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	0e1b      	lsrs	r3, r3, #24
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	cmd24[2] = (block >> 16)&0xFF;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	0c1b      	lsrs	r3, r3, #16
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	cmd24[3] = (block >> 8) & 0xFF;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	cmd24[4] = (block)&0xFF;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	cmd24[5] = 0xFF;
 8000afa:	23ff      	movs	r3, #255	@ 0xff
 8000afc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	bool result = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	result = send_command(cmd24, 0x00);
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe63 	bl	80007d8 <send_command>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if(!result)
 8000b18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b1c:	f083 0301 	eor.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <write_block+0x66>
		return 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e097      	b.n	8000c5a <write_block+0x196>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f001 f816 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFE}, 1, HAL_MAX_DELAY);
 8000b38:	23fe      	movs	r3, #254	@ 0xfe
 8000b3a:	f887 3020 	strb.w	r3, [r7, #32]
 8000b3e:	f107 0120 	add.w	r1, r7, #32
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	2201      	movs	r2, #1
 8000b48:	4846      	ldr	r0, [pc, #280]	@ (8000c64 <write_block+0x1a0>)
 8000b4a:	f002 fcff 	bl	800354c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b58:	f001 f804 	bl	8001b64 <HAL_GPIO_WritePin>

	for(int i = 0; i < 512; i++){
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b60:	e01d      	b.n	8000b9e <write_block+0xda>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6c:	f000 fffa 	bl	8001b64 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t[]){data[i]}, 1, HAL_MAX_DELAY);
 8000b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	743b      	strb	r3, [r7, #16]
 8000b7a:	f107 0110 	add.w	r1, r7, #16
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	2201      	movs	r2, #1
 8000b84:	4837      	ldr	r0, [pc, #220]	@ (8000c64 <write_block+0x1a0>)
 8000b86:	f002 fce1 	bl	800354c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f000 ffe6 	bl	8001b64 <HAL_GPIO_WritePin>
	for(int i = 0; i < 512; i++){
 8000b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ba4:	dbdd      	blt.n	8000b62 <write_block+0x9e>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f000 ffd8 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t[]){0xFF, 0xFF}, 2, HAL_MAX_DELAY);
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c68 <write_block+0x1a4>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	83bb      	strh	r3, [r7, #28]
 8000bba:	f107 011c 	add.w	r1, r7, #28
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4827      	ldr	r0, [pc, #156]	@ (8000c64 <write_block+0x1a0>)
 8000bc6:	f002 fcc1 	bl	800354c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd4:	f000 ffc6 	bl	8001b64 <HAL_GPIO_WritePin>

	uint8_t response[1];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f000 ffbf 	bl	8001b64 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 8000be6:	23ff      	movs	r3, #255	@ 0xff
 8000be8:	753b      	strb	r3, [r7, #20]
 8000bea:	f107 0218 	add.w	r2, r7, #24
 8000bee:	f107 0114 	add.w	r1, r7, #20
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	481a      	ldr	r0, [pc, #104]	@ (8000c64 <write_block+0x1a0>)
 8000bfc:	f002 fdfc 	bl	80037f8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0a:	f000 ffab 	bl	8001b64 <HAL_GPIO_WritePin>
	if((uint8_t)(response[0]&0x1F) != 0x05)
 8000c0e:	7e3b      	ldrb	r3, [r7, #24]
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	2b05      	cmp	r3, #5
 8000c16:	d001      	beq.n	8000c1c <write_block+0x158>
		return 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e01e      	b.n	8000c5a <write_block+0x196>

	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c26:	f000 ff9d 	bl	8001b64 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t[]){0xFF}, response, 1, HAL_MAX_DELAY);
 8000c2a:	23ff      	movs	r3, #255	@ 0xff
 8000c2c:	733b      	strb	r3, [r7, #12]
 8000c2e:	f107 0218 	add.w	r2, r7, #24
 8000c32:	f107 010c 	add.w	r1, r7, #12
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4809      	ldr	r0, [pc, #36]	@ (8000c64 <write_block+0x1a0>)
 8000c40:	f002 fdda 	bl	80037f8 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4e:	f000 ff89 	bl	8001b64 <HAL_GPIO_WritePin>
		if(response[0] != 0x00)
 8000c52:	7e3b      	ldrb	r3, [r7, #24]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0e1      	beq.n	8000c1c <write_block+0x158>
			break;
	}

	return 1;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3730      	adds	r7, #48	@ 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200005fc 	.word	0x200005fc
 8000c68:	080075ac 	.word	0x080075ac

08000c6c <initialize_SD_card>:

bool initialize_SD_card(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
	uint8_t cmd0[6] = {0x40, 0x00, 0x00, 0x00, 0x00, 0x95};
 8000c72:	4a4a      	ldr	r2, [pc, #296]	@ (8000d9c <initialize_SD_card+0x130>)
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c7c:	6018      	str	r0, [r3, #0]
 8000c7e:	3304      	adds	r3, #4
 8000c80:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd8[6] = {0x48, 0x00, 0x00, 0x01, 0xAA, 0x87};
 8000c82:	4a47      	ldr	r2, [pc, #284]	@ (8000da0 <initialize_SD_card+0x134>)
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c8c:	6018      	str	r0, [r3, #0]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd55[6] = {0x77, 0x00, 0x00, 0x00, 0x00, 0xFF};
 8000c92:	4a44      	ldr	r2, [pc, #272]	@ (8000da4 <initialize_SD_card+0x138>)
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9c:	6018      	str	r0, [r3, #0]
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	8019      	strh	r1, [r3, #0]
		  uint8_t acdm41[6] = {0x69, 0x40,0x00, 0x00, 0x00, 0xFF};
 8000ca2:	4a41      	ldr	r2, [pc, #260]	@ (8000da8 <initialize_SD_card+0x13c>)
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cac:	6018      	str	r0, [r3, #0]
 8000cae:	3304      	adds	r3, #4
 8000cb0:	8019      	strh	r1, [r3, #0]
		  uint8_t cmd16[6] = {0x50, 0x00, 0x00, 0x02, 0x00, 0xFF};
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dac <initialize_SD_card+0x140>)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cba:	6018      	str	r0, [r3, #0]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	8019      	strh	r1, [r3, #0]
		  bool result = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		  initialize_SPI_mode();
 8000cc6:	f7ff fe0b 	bl	80008e0 <initialize_SPI_mode>
		  while(result == 0)
 8000cca:	e008      	b.n	8000cde <initialize_SD_card+0x72>
			  result = send_command(cmd0, 0x01);
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd80 	bl	80007d8 <send_command>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000cde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ce2:	f083 0301 	eor.w	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1ef      	bne.n	8000ccc <initialize_SD_card+0x60>
		  result = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000cf2:	e008      	b.n	8000d06 <initialize_SD_card+0x9a>
			  result = send_command(cmd8, 0x01);
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fd6c 	bl	80007d8 <send_command>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0)
 8000d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1ef      	bne.n	8000cf4 <initialize_SD_card+0x88>
		  result = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000d1a:	e01a      	b.n	8000d52 <initialize_SD_card+0xe6>
			  bool temp = send_command(cmd55, 0x01);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd58 	bl	80007d8 <send_command>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			  if(!temp)
 8000d2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d32:	f083 0301 	eor.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d109      	bne.n	8000d50 <initialize_SD_card+0xe4>
				  continue;
			  result = send_command(acdm41, 0x00);
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fd48 	bl	80007d8 <send_command>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d4e:	e000      	b.n	8000d52 <initialize_SD_card+0xe6>
				  continue;
 8000d50:	bf00      	nop
		  while(result == 0){
 8000d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d56:	f083 0301 	eor.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1dd      	bne.n	8000d1c <initialize_SD_card+0xb0>
		  }
		  result = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000d66:	e007      	b.n	8000d78 <initialize_SD_card+0x10c>
			  result = send_command(cmd16, 0x00);
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fd33 	bl	80007d8 <send_command>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  while(result == 0){
 8000d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f0      	bne.n	8000d68 <initialize_SD_card+0xfc>
		  }
		  result = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  is_initialized = 1;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <initialize_SD_card+0x144>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
		  return 1;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3728      	adds	r7, #40	@ 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	080075b0 	.word	0x080075b0
 8000da0:	080075b8 	.word	0x080075b8
 8000da4:	080075c0 	.word	0x080075c0
 8000da8:	080075c8 	.word	0x080075c8
 8000dac:	080075d0 	.word	0x080075d0
 8000db0:	200005f8 	.word	0x200005f8

08000db4 <is_SD_card_initialized>:

bool is_SD_card_initialized(){
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
	return is_initialized;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <is_SD_card_initialized+0x14>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200005f8 	.word	0x200005f8

08000dcc <SPI_Init>:
 #include "spi.h"

SPI_HandleTypeDef hspi1;
//PA5 = SCK, PA6 = MISO, PA7 = MOSI, PA9 = CS
void SPI_Init(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	 /* USER CODE END SPI1_Init 0 */
	 /* USER CODE BEGIN SPI1_Init 1 */
	 /* USER CODE END SPI1_Init 1 */
	 /* SPI1 parameter configuration*/
	 hspi1.Instance = SPI1;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <SPI_Init+0x74>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <SPI_Init+0x78>)
 8000dd4:	601a      	str	r2, [r3, #0]
	 hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <SPI_Init+0x74>)
 8000dd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ddc:	605a      	str	r2, [r3, #4]
	 hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <SPI_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
	 hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <SPI_Init+0x74>)
 8000de6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dea:	60da      	str	r2, [r3, #12]
	 hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <SPI_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
	 hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <SPI_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
	 hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <SPI_Init+0x74>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfe:	619a      	str	r2, [r3, #24]
	 hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <SPI_Init+0x74>)
 8000e02:	2230      	movs	r2, #48	@ 0x30
 8000e04:	61da      	str	r2, [r3, #28]
	 hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <SPI_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
	 hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <SPI_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24
	 hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <SPI_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	@ 0x28
	 hspi1.Init.CRCPolynomial = 7;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <SPI_Init+0x74>)
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	 hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <SPI_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	@ 0x30
	 hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SPI_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	635a      	str	r2, [r3, #52]	@ 0x34
	 if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <SPI_Init+0x74>)
 8000e2c:	f002 fb04 	bl	8003438 <HAL_SPI_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SPI_Init+0x6e>
	 {
	   Error_Handler();
 8000e36:	f7ff fc99 	bl	800076c <Error_Handler>
	 }
	 /* USER CODE BEGIN SPI1_Init 2 */
	 /* USER CODE END SPI1_Init 2 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200005fc 	.word	0x200005fc
 8000e44:	40013000 	.word	0x40013000

08000e48 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_i2c1_rx;
extern DMA_HandleTypeDef hdma_i2c1_tx;

void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0ac      	sub	sp, #176	@ 0xb0
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000e98:	4b57      	ldr	r3, [pc, #348]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9c:	4a56      	ldr	r2, [pc, #344]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000e9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea4:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b51      	ldr	r3, [pc, #324]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	4a50      	ldr	r2, [pc, #320]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ecc:	2288      	movs	r2, #136	@ 0x88
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f006 fb1f 	bl	8007514 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ed6:	2340      	movs	r3, #64	@ 0x40
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ede:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fdec 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_I2C_MspInit+0x62>
	{
	  Error_Handler();
 8000eee:	f7ff fc3d 	bl	800076c <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000ef2:	23c0      	movs	r3, #192	@ 0xc0
 8000ef4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef6:	2312      	movs	r3, #18
 8000ef8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f02:	2304      	movs	r3, #4
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
	__GPIOB_CLK_ENABLE();
 8000f06:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <HAL_I2C_MspInit+0x168>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4835      	ldr	r0, [pc, #212]	@ (8000ffc <HAL_I2C_MspInit+0x16c>)
 8000f26:	f000 fc73 	bl	8001810 <HAL_GPIO_Init>

	hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f2a:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f2c:	4a35      	ldr	r2, [pc, #212]	@ (8001004 <HAL_I2C_MspInit+0x174>)
 8000f2e:	601a      	str	r2, [r3, #0]
	hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f32:	2203      	movs	r2, #3
 8000f34:	605a      	str	r2, [r3, #4]
	hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f36:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f38:	2210      	movs	r2, #16
 8000f3a:	609a      	str	r2, [r3, #8]
	hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
	hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f42:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	611a      	str	r2, [r3, #16]
	hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
	hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
	hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
	hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5a:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK){
 8000f60:	4827      	ldr	r0, [pc, #156]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f62:	f000 fb1d 	bl	80015a0 <HAL_DMA_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_I2C_MspInit+0xe0>
		Error_Handler();
 8000f6c:	f7ff fbfe 	bl	800076c <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmatx, hdma_i2c1_tx);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a23      	ldr	r2, [pc, #140]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f74:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <HAL_I2C_MspInit+0x170>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6293      	str	r3, [r2, #40]	@ 0x28

	hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <HAL_I2C_MspInit+0x17c>)
 8000f80:	601a      	str	r2, [r3, #0]
	hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	605a      	str	r2, [r3, #4]
	hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
	hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
	hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000f96:	2280      	movs	r2, #128	@ 0x80
 8000f98:	611a      	str	r2, [r3, #16]
	hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
	hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
	hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
	hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]

	if(HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK){
 8000fb2:	4815      	ldr	r0, [pc, #84]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000fb4:	f000 faf4 	bl	80015a0 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_I2C_MspInit+0x132>
		Error_Handler();
 8000fbe:	f7ff fbd5 	bl	800076c <Error_Handler>
	}

	__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <HAL_I2C_MspInit+0x178>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201f      	movs	r0, #31
 8000fd4:	f000 faad 	bl	8001532 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fd8:	201f      	movs	r0, #31
 8000fda:	f000 fac6 	bl	800156a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2020      	movs	r0, #32
 8000fe4:	f000 faa5 	bl	8001532 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fe8:	2020      	movs	r0, #32
 8000fea:	f000 fabe 	bl	800156a <HAL_NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	37b0      	adds	r7, #176	@ 0xb0
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	2000007c 	.word	0x2000007c
 8001004:	4002006c 	.word	0x4002006c
 8001008:	200000c4 	.word	0x200000c4
 800100c:	40020080 	.word	0x40020080

08001010 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a17      	ldr	r2, [pc, #92]	@ (800108c <HAL_SPI_MspInit+0x7c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d128      	bne.n	8001084 <HAL_SPI_MspInit+0x74>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800103c:	6613      	str	r3, [r2, #96]	@ 0x60
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001062:	23e0      	movs	r3, #224	@ 0xe0
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001072:	2305      	movs	r3, #5
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001080:	f000 fbc6 	bl	8001810 <HAL_GPIO_Init>
  }
}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	@ 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40013000 	.word	0x40013000
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_UART_MspInit>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ac      	sub	sp, #176	@ 0xb0
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2288      	movs	r2, #136	@ 0x88
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 fa2d 	bl	8007514 <memset>
  if(huart->Instance==USART3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <HAL_UART_MspInit+0xc0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d143      	bne.n	800114c <HAL_UART_MspInit+0xb8>
  {
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c4:	2304      	movs	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fcf5 	bl	8002ac0 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010dc:	f7ff fb46 	bl	800076c <Error_Handler>
    }
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <HAL_UART_MspInit+0xc4>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <HAL_UART_MspInit+0xc4>)
 80010e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <HAL_UART_MspInit+0xc4>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_UART_MspInit+0xc4>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <HAL_UART_MspInit+0xc4>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_UART_MspInit+0xc4>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001110:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112a:	2307      	movs	r3, #7
 800112c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001134:	4619      	mov	r1, r3
 8001136:	4809      	ldr	r0, [pc, #36]	@ (800115c <HAL_UART_MspInit+0xc8>)
 8001138:	f000 fb6a 	bl	8001810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2027      	movs	r0, #39	@ 0x27
 8001142:	f000 f9f6 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001146:	2027      	movs	r0, #39	@ 0x27
 8001148:	f000 fa0f 	bl	800156a <HAL_NVIC_EnableIRQ>
  }
}
 800114c:	bf00      	nop
 800114e:	37b0      	adds	r7, #176	@ 0xb0
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40004800 	.word	0x40004800
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400

08001160 <NMI_Handler>:
#include "main.h"
#include "stm32l4xx_it.h"
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
   while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <NMI_Handler+0x4>

08001168 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <MemManage_Handler+0x4>

08001178 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <UsageFault_Handler+0x4>

08001188 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80011b6:	f000 f89d 	bl	80012f4 <HAL_IncTick>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <USART3_IRQHandler+0x10>)
 80011c6:	f002 fe83 	bl	8003ed0 <HAL_UART_IRQHandler>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000570 	.word	0x20000570

080011d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff ffea 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f006 f97d 	bl	8007524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122a:	f7ff f98f 	bl	800054c <main>

0800122e <LoopForever>:

LoopForever:
    b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800123c:	0800770c 	.word	0x0800770c
  ldr r2, =_sbss
 8001240:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001244:	2000068c 	.word	0x2000068c

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>

0800124a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f961 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f80e 	bl	800127c <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e001      	b.n	8001270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126c:	f7ff fdec 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001270:	79fb      	ldrb	r3, [r7, #7]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <HAL_InitTick+0x6c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d023      	beq.n	80012d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <HAL_InitTick+0x70>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <HAL_InitTick+0x6c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f96d 	bl	8001586 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10f      	bne.n	80012d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d809      	bhi.n	80012cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f937 	bl	8001532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_InitTick+0x74>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e007      	b.n	80012dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e004      	b.n	80012dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	e001      	b.n	80012dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000004 	.word	0x20000004

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008
 8001318:	20000660 	.word	0x20000660

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000660 	.word	0x20000660

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffde 	bl	800131c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	@ (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	@ (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	@ (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	@ 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff29 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff3e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff31 	bl	80013e0 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e098      	b.n	80016e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <HAL_DMA_Init+0x150>)
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d80f      	bhi.n	80015de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b4b      	ldr	r3, [pc, #300]	@ (80016f4 <HAL_DMA_Init+0x154>)
 80015c6:	4413      	add	r3, r2
 80015c8:	4a4b      	ldr	r2, [pc, #300]	@ (80016f8 <HAL_DMA_Init+0x158>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a48      	ldr	r2, [pc, #288]	@ (80016fc <HAL_DMA_Init+0x15c>)
 80015da:	641a      	str	r2, [r3, #64]	@ 0x40
 80015dc:	e00e      	b.n	80015fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b46      	ldr	r3, [pc, #280]	@ (8001700 <HAL_DMA_Init+0x160>)
 80015e6:	4413      	add	r3, r2
 80015e8:	4a43      	ldr	r2, [pc, #268]	@ (80016f8 <HAL_DMA_Init+0x158>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	009a      	lsls	r2, r3, #2
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a42      	ldr	r2, [pc, #264]	@ (8001704 <HAL_DMA_Init+0x164>)
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001616:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001656:	d039      	beq.n	80016cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a27      	ldr	r2, [pc, #156]	@ (80016fc <HAL_DMA_Init+0x15c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d11a      	bne.n	8001698 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001662:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <HAL_DMA_Init+0x168>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f003 031c 	and.w	r3, r3, #28
 800166e:	210f      	movs	r1, #15
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	4924      	ldr	r1, [pc, #144]	@ (8001708 <HAL_DMA_Init+0x168>)
 8001678:	4013      	ands	r3, r2
 800167a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <HAL_DMA_Init+0x168>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001688:	f003 031c 	and.w	r3, r3, #28
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	491d      	ldr	r1, [pc, #116]	@ (8001708 <HAL_DMA_Init+0x168>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
 8001696:	e019      	b.n	80016cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <HAL_DMA_Init+0x16c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	f003 031c 	and.w	r3, r3, #28
 80016a4:	210f      	movs	r1, #15
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4917      	ldr	r1, [pc, #92]	@ (800170c <HAL_DMA_Init+0x16c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016b2:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_DMA_Init+0x16c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f003 031c 	and.w	r3, r3, #28
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	4911      	ldr	r1, [pc, #68]	@ (800170c <HAL_DMA_Init+0x16c>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40020407 	.word	0x40020407
 80016f4:	bffdfff8 	.word	0xbffdfff8
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	40020000 	.word	0x40020000
 8001700:	bffdfbf8 	.word	0xbffdfbf8
 8001704:	40020400 	.word	0x40020400
 8001708:	400200a8 	.word	0x400200a8
 800170c:	400204a8 	.word	0x400204a8

08001710 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d008      	beq.n	800173a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2204      	movs	r2, #4
 800172c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e022      	b.n	8001780 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 020e 	bic.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f003 021c 	and.w	r2, r3, #28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d005      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2204      	movs	r2, #4
 80017a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e029      	b.n	8001804 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020e 	bic.w	r2, r2, #14
 80017be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d4:	f003 021c 	and.w	r2, r3, #28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
    }
  }
  return status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e17f      	b.n	8001b20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8171 	beq.w	8001b1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d005      	beq.n	8001850 <HAL_GPIO_Init+0x40>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	f003 0201 	and.w	r2, r3, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d118      	bne.n	80018f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	6939      	ldr	r1, [r7, #16]
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80ac 	beq.w	8001b1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b40 <HAL_GPIO_Init+0x330>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b40 <HAL_GPIO_Init+0x330>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001b40 <HAL_GPIO_Init+0x330>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019da:	4a5a      	ldr	r2, [pc, #360]	@ (8001b44 <HAL_GPIO_Init+0x334>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x242>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4f      	ldr	r2, [pc, #316]	@ (8001b48 <HAL_GPIO_Init+0x338>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x23e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4e      	ldr	r2, [pc, #312]	@ (8001b4c <HAL_GPIO_Init+0x33c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x23a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4d      	ldr	r2, [pc, #308]	@ (8001b50 <HAL_GPIO_Init+0x340>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x236>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x344>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x232>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	@ (8001b58 <HAL_GPIO_Init+0x348>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x22e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <HAL_GPIO_Init+0x34c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x22a>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00c      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e00a      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a52:	2300      	movs	r3, #0
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a64:	4937      	ldr	r1, [pc, #220]	@ (8001b44 <HAL_GPIO_Init+0x334>)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a72:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a96:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac0:	4a27      	ldr	r2, [pc, #156]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ac6:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aea:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b14:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae78 	bne.w	8001820 <HAL_GPIO_Init+0x10>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	48001400 	.word	0x48001400
 8001b5c:	48001800 	.word	0x48001800
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
 8001b70:	4613      	mov	r3, r2
 8001b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e08d      	b.n	8001cc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f968 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2224      	movs	r2, #36	@ 0x24
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e006      	b.n	8001c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d108      	bne.n	8001c36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	e007      	b.n	8001c46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69d9      	ldr	r1, [r3, #28]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d138      	bne.n	8001d52 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e032      	b.n	8001d54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2224      	movs	r2, #36	@ 0x24
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d139      	bne.n	8001dea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e033      	b.n	8001dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	@ 0x24
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001db2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e22:	d130      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e30:	d038      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2232      	movs	r2, #50	@ 0x32
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e58:	e002      	b.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6c:	d102      	bne.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f2      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e80:	d110      	bne.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e00f      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e92:	d007      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e9c:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e3ca      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4b97      	ldr	r3, [pc, #604]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001edc:	4b94      	ldr	r3, [pc, #592]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80e4 	beq.w	80020bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4a>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	f040 808b 	bne.w	8002018 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f040 8087 	bne.w	8002018 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0a:	4b89      	ldr	r3, [pc, #548]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e3a2      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	4b82      	ldr	r3, [pc, #520]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d004      	beq.n	8001f3c <HAL_RCC_OscConfig+0x7c>
 8001f32:	4b7f      	ldr	r3, [pc, #508]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f3a:	e005      	b.n	8001f48 <HAL_RCC_OscConfig+0x88>
 8001f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d223      	bcs.n	8001f94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fd55 	bl	8002a00 <RCC_SetFlashLatencyFromMSIRange>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e383      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f60:	4b73      	ldr	r3, [pc, #460]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a72      	ldr	r2, [pc, #456]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b70      	ldr	r3, [pc, #448]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	496d      	ldr	r1, [pc, #436]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	4968      	ldr	r1, [pc, #416]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
 8001f92:	e025      	b.n	8001fe0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f94:	4b66      	ldr	r3, [pc, #408]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a65      	ldr	r2, [pc, #404]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b63      	ldr	r3, [pc, #396]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4960      	ldr	r1, [pc, #384]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	495b      	ldr	r1, [pc, #364]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fd15 	bl	8002a00 <RCC_SetFlashLatencyFromMSIRange>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e343      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe0:	f000 fc4a 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b52      	ldr	r3, [pc, #328]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	4950      	ldr	r1, [pc, #320]	@ (8002134 <HAL_RCC_OscConfig+0x274>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8002138 <HAL_RCC_OscConfig+0x278>)
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002000:	4b4e      	ldr	r3, [pc, #312]	@ (800213c <HAL_RCC_OscConfig+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f939 	bl	800127c <HAL_InitTick>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d052      	beq.n	80020ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	e327      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002020:	4b43      	ldr	r3, [pc, #268]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a42      	ldr	r2, [pc, #264]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202c:	f7ff f976 	bl	800131c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002034:	f7ff f972 	bl	800131c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e310      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002046:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002052:	4b37      	ldr	r3, [pc, #220]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a36      	ldr	r2, [pc, #216]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b34      	ldr	r3, [pc, #208]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4931      	ldr	r1, [pc, #196]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002070:	4b2f      	ldr	r3, [pc, #188]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	492c      	ldr	r1, [pc, #176]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	e01a      	b.n	80020bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002086:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002092:	f7ff f943 	bl	800131c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209a:	f7ff f93f 	bl	800131c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e2dd      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ac:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x1da>
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d074      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x21a>
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d10e      	bne.n	80020f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d064      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d160      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e2ba      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x24a>
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0b      	ldr	r2, [pc, #44]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e026      	b.n	8002158 <HAL_RCC_OscConfig+0x298>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002112:	d115      	bne.n	8002140 <HAL_RCC_OscConfig+0x280>
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 800211a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a02      	ldr	r2, [pc, #8]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x298>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	08007634 	.word	0x08007634
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004
 8002140:	4ba0      	ldr	r3, [pc, #640]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a9f      	ldr	r2, [pc, #636]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b9d      	ldr	r3, [pc, #628]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a9c      	ldr	r2, [pc, #624]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff f8dc 	bl	800131c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f8d8 	bl	800131c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	@ 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e276      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217a:	4b92      	ldr	r3, [pc, #584]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2a8>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f8c8 	bl	800131c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f8c4 	bl	800131c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e262      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a2:	4b88      	ldr	r3, [pc, #544]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x2d0>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d060      	beq.n	8002280 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x310>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d0:	4b7c      	ldr	r3, [pc, #496]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x328>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e23f      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b76      	ldr	r3, [pc, #472]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4973      	ldr	r1, [pc, #460]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	e040      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002206:	4b6f      	ldr	r3, [pc, #444]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6e      	ldr	r2, [pc, #440]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f883 	bl	800131c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff f87f 	bl	800131c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e21d      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b65      	ldr	r3, [pc, #404]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b62      	ldr	r3, [pc, #392]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	495f      	ldr	r1, [pc, #380]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e018      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b5d      	ldr	r3, [pc, #372]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5c      	ldr	r2, [pc, #368]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f85f 	bl	800131c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff f85b 	bl	800131c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e1f9      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002274:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002294:	4b4b      	ldr	r3, [pc, #300]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229a:	4a4a      	ldr	r2, [pc, #296]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff f83a 	bl	800131c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff f836 	bl	800131c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1d4      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022be:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d4:	4a3b      	ldr	r2, [pc, #236]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff f81d 	bl	800131c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff f819 	bl	800131c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1b7      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b32      	ldr	r3, [pc, #200]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a6 	beq.w	8002460 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002318:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	4a26      	ldr	r2, [pc, #152]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002330:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d118      	bne.n	800237e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002358:	f7fe ffe0 	bl	800131c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe ffdc 	bl	800131c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e17a      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_RCC_OscConfig+0x508>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d8>
 8002386:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002396:	e029      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d115      	bne.n	80023cc <HAL_RCC_OscConfig+0x50c>
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	4a07      	ldr	r2, [pc, #28]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	4a03      	ldr	r2, [pc, #12]	@ (80023c4 <HAL_RCC_OscConfig+0x504>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c0:	e014      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
 80023cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	4a9b      	ldr	r2, [pc, #620]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023dc:	4b98      	ldr	r3, [pc, #608]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a97      	ldr	r2, [pc, #604]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d016      	beq.n	8002422 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe ff92 	bl	800131c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe ff8e 	bl	800131c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e12a      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	4b8b      	ldr	r3, [pc, #556]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ed      	beq.n	80023fc <HAL_RCC_OscConfig+0x53c>
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe ff7b 	bl	800131c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe ff77 	bl	800131c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e113      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	4b7f      	ldr	r3, [pc, #508]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ed      	bne.n	800242a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244e:	7ffb      	ldrb	r3, [r7, #31]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b7a      	ldr	r3, [pc, #488]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	4a79      	ldr	r2, [pc, #484]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80fe 	beq.w	8002666 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	2b02      	cmp	r3, #2
 8002470:	f040 80d0 	bne.w	8002614 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002474:	4b72      	ldr	r3, [pc, #456]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	429a      	cmp	r2, r3
 8002486:	d130      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	3b01      	subs	r3, #1
 8002494:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d127      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d11f      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024b4:	2a07      	cmp	r2, #7
 80024b6:	bf14      	ite	ne
 80024b8:	2201      	movne	r2, #1
 80024ba:	2200      	moveq	r2, #0
 80024bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	4293      	cmp	r3, r2
 80024c0:	d113      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	3b01      	subs	r3, #1
 80024e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d06e      	beq.n	80025c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d069      	beq.n	80025c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024f0:	4b53      	ldr	r3, [pc, #332]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024fc:	4b50      	ldr	r3, [pc, #320]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0ad      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800250c:	4b4c      	ldr	r3, [pc, #304]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a4b      	ldr	r2, [pc, #300]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002518:	f7fe ff00 	bl	800131c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fefc 	bl	800131c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e09a      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	4b43      	ldr	r3, [pc, #268]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253e:	4b40      	ldr	r3, [pc, #256]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	4b40      	ldr	r3, [pc, #256]	@ (8002644 <HAL_RCC_OscConfig+0x784>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800254e:	3a01      	subs	r2, #1
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002558:	0212      	lsls	r2, r2, #8
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002560:	0852      	lsrs	r2, r2, #1
 8002562:	3a01      	subs	r2, #1
 8002564:	0552      	lsls	r2, r2, #21
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800256c:	0852      	lsrs	r2, r2, #1
 800256e:	3a01      	subs	r2, #1
 8002570:	0652      	lsls	r2, r2, #25
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002578:	0912      	lsrs	r2, r2, #4
 800257a:	0452      	lsls	r2, r2, #17
 800257c:	430a      	orrs	r2, r1
 800257e:	4930      	ldr	r1, [pc, #192]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002584:	4b2e      	ldr	r3, [pc, #184]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2d      	ldr	r2, [pc, #180]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002590:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a2a      	ldr	r2, [pc, #168]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800259a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800259c:	f7fe febe 	bl	800131c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe feba 	bl	800131c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e058      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c2:	e050      	b.n	8002666 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e04f      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d148      	bne.n	8002666 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a19      	ldr	r2, [pc, #100]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80025da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e0:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a16      	ldr	r2, [pc, #88]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025ec:	f7fe fe96 	bl	800131c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fe92 	bl	800131c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e030      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x734>
 8002612:	e028      	b.n	8002666 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d023      	beq.n	8002662 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a08      	ldr	r2, [pc, #32]	@ (8002640 <HAL_RCC_OscConfig+0x780>)
 8002620:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fe79 	bl	800131c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	e00c      	b.n	8002648 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe fe75 	bl	800131c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d905      	bls.n	8002648 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e013      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
 8002640:	40021000 	.word	0x40021000
 8002644:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_OscConfig+0x7b0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ec      	bne.n	800262e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_OscConfig+0x7b0>)
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4905      	ldr	r1, [pc, #20]	@ (8002670 <HAL_RCC_OscConfig+0x7b0>)
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_OscConfig+0x7b4>)
 800265c:	4013      	ands	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
 8002660:	e001      	b.n	8002666 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	feeefffc 	.word	0xfeeefffc

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0e7      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b75      	ldr	r3, [pc, #468]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d910      	bls.n	80026bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b72      	ldr	r3, [pc, #456]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4970      	ldr	r1, [pc, #448]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0cf      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b66      	ldr	r3, [pc, #408]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d908      	bls.n	80026ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b63      	ldr	r3, [pc, #396]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4960      	ldr	r1, [pc, #384]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d04c      	beq.n	8002790 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d121      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0a6      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	4b54      	ldr	r3, [pc, #336]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d115      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e09a      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272e:	4b4e      	ldr	r3, [pc, #312]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e08e      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800273e:	4b4a      	ldr	r3, [pc, #296]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e086      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b46      	ldr	r3, [pc, #280]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4943      	ldr	r1, [pc, #268]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fddc 	bl	800131c <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fdd8 	bl	800131c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e06e      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b3a      	ldr	r3, [pc, #232]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4b31      	ldr	r3, [pc, #196]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d208      	bcs.n	80027be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	492b      	ldr	r1, [pc, #172]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027be:	4b29      	ldr	r3, [pc, #164]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d210      	bcs.n	80027ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 0207 	bic.w	r2, r3, #7
 80027d4:	4923      	ldr	r1, [pc, #140]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027dc:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <HAL_RCC_ClockConfig+0x1ec>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e036      	b.n	800285c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4918      	ldr	r1, [pc, #96]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4910      	ldr	r1, [pc, #64]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800282c:	f000 f824 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	490b      	ldr	r1, [pc, #44]	@ (800286c <HAL_RCC_ClockConfig+0x1f4>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_RCC_ClockConfig+0x1f8>)
 800284a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1fc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fd13 	bl	800127c <HAL_InitTick>
 8002856:	4603      	mov	r3, r0
 8002858:	72fb      	strb	r3, [r7, #11]

  return status;
 800285a:	7afb      	ldrb	r3, [r7, #11]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	08007634 	.word	0x08007634
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	@ 0x24
 800287c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002886:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002890:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x34>
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d121      	bne.n	80028ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d11e      	bne.n	80028ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028ac:	4b34      	ldr	r3, [pc, #208]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028b8:	4b31      	ldr	r3, [pc, #196]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e005      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x110>)
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e004      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028fc:	4b23      	ldr	r3, [pc, #140]	@ (800298c <HAL_RCC_GetSysClockFreq+0x114>)
 80028fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d134      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002906:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0xa6>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d003      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0xac>
 800291c:	e005      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800291e:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x110>)
 8002920:	617b      	str	r3, [r7, #20]
      break;
 8002922:	e005      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_RCC_GetSysClockFreq+0x114>)
 8002926:	617b      	str	r3, [r7, #20]
      break;
 8002928:	e002      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	617b      	str	r3, [r7, #20]
      break;
 800292e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002930:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	3301      	adds	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	fb03 f202 	mul.w	r2, r3, r2
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x108>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	0e5b      	lsrs	r3, r3, #25
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	3301      	adds	r3, #1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002970:	69bb      	ldr	r3, [r7, #24]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	0800764c 	.word	0x0800764c
 8002988:	00f42400 	.word	0x00f42400
 800298c:	007a1200 	.word	0x007a1200

08002990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b03      	ldr	r3, [pc, #12]	@ (80029a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029ac:	f7ff fff0 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4904      	ldr	r1, [pc, #16]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08007644 	.word	0x08007644

080029d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029d8:	f7ff ffda 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0adb      	lsrs	r3, r3, #11
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4904      	ldr	r1, [pc, #16]	@ (80029fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08007644 	.word	0x08007644

08002a00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a18:	f7ff f9ee 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a1c:	6178      	str	r0, [r7, #20]
 8002a1e:	e014      	b.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a38:	f7ff f9de 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a50:	d10b      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	@ 0x80
 8002a56:	d919      	bls.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a5c:	d902      	bls.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a5e:	2302      	movs	r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e013      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e010      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b80      	cmp	r3, #128	@ 0x80
 8002a6e:	d902      	bls.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a70:	2303      	movs	r3, #3
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	e00a      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	d102      	bne.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e004      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b70      	cmp	r3, #112	@ 0x70
 8002a86:	d101      	bne.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a88:	2301      	movs	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 0207 	bic.w	r2, r3, #7
 8002a94:	4909      	ldr	r1, [pc, #36]	@ (8002abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a9c:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40022000 	.word	0x40022000

08002ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ac8:	2300      	movs	r3, #0
 8002aca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002acc:	2300      	movs	r3, #0
 8002ace:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d041      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ae0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ae4:	d02a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ae6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002aea:	d824      	bhi.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002aec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002af2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002af6:	d81e      	bhi.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002afc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b00:	d010      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b02:	e018      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b04:	4b86      	ldr	r3, [pc, #536]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a85      	ldr	r2, [pc, #532]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b10:	e015      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fabb 	bl	8003094 <RCCEx_PLLSAI1_Config>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b22:	e00c      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3320      	adds	r3, #32
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fba6 	bl	800327c <RCCEx_PLLSAI2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	74fb      	strb	r3, [r7, #19]
      break;
 8002b3a:	e000      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b44:	4b76      	ldr	r3, [pc, #472]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b52:	4973      	ldr	r1, [pc, #460]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b5a:	e001      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d041      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b74:	d02a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b7a:	d824      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b86:	d81e      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b90:	d010      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b94:	4b62      	ldr	r3, [pc, #392]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a61      	ldr	r2, [pc, #388]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ba0:	e015      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fa73 	bl	8003094 <RCCEx_PLLSAI1_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bb2:	e00c      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3320      	adds	r3, #32
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fb5e 	bl	800327c <RCCEx_PLLSAI2_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bc4:	e003      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	74fb      	strb	r3, [r7, #19]
      break;
 8002bca:	e000      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bd4:	4b52      	ldr	r3, [pc, #328]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002be2:	494f      	ldr	r1, [pc, #316]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a0 	beq.w	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c02:	4b47      	ldr	r3, [pc, #284]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c24:	4b3e      	ldr	r3, [pc, #248]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c30:	2301      	movs	r3, #1
 8002c32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c34:	4b3b      	ldr	r3, [pc, #236]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3a      	ldr	r2, [pc, #232]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fb6c 	bl	800131c <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c46:	e009      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe fb68 	bl	800131c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	74fb      	strb	r3, [r7, #19]
        break;
 8002c5a:	e005      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c5c:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d15c      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01f      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d019      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c8c:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c98:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	4a20      	ldr	r2, [pc, #128]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cae:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fb27 	bl	800131c <HAL_GetTick>
 8002cce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd0:	e00b      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe fb23 	bl	800131c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d902      	bls.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cea:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ec      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d0e:	4904      	ldr	r1, [pc, #16]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d16:	e009      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
 8002d1c:	e006      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2c:	7c7b      	ldrb	r3, [r7, #17]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b9e      	ldr	r3, [pc, #632]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d36:	4a9d      	ldr	r2, [pc, #628]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d4a:	4b98      	ldr	r3, [pc, #608]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d50:	f023 0203 	bic.w	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d58:	4994      	ldr	r1, [pc, #592]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f023 020c 	bic.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7a:	498c      	ldr	r1, [pc, #560]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d8e:	4b87      	ldr	r3, [pc, #540]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	4983      	ldr	r1, [pc, #524]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002db0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	497b      	ldr	r1, [pc, #492]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dd2:	4b76      	ldr	r3, [pc, #472]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de0:	4972      	ldr	r1, [pc, #456]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df4:	4b6d      	ldr	r3, [pc, #436]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	496a      	ldr	r1, [pc, #424]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e16:	4b65      	ldr	r3, [pc, #404]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e24:	4961      	ldr	r1, [pc, #388]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e38:	4b5c      	ldr	r3, [pc, #368]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e46:	4959      	ldr	r1, [pc, #356]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e5a:	4b54      	ldr	r3, [pc, #336]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e68:	4950      	ldr	r1, [pc, #320]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	4948      	ldr	r1, [pc, #288]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e9e:	4b43      	ldr	r3, [pc, #268]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	493f      	ldr	r1, [pc, #252]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d028      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ece:	4937      	ldr	r1, [pc, #220]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ede:	d106      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee0:	4b32      	ldr	r3, [pc, #200]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a31      	ldr	r2, [pc, #196]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eea:	60d3      	str	r3, [r2, #12]
 8002eec:	e011      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8c8 	bl	8003094 <RCCEx_PLLSAI1_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f1e:	4b23      	ldr	r3, [pc, #140]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	491f      	ldr	r1, [pc, #124]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a1a      	ldr	r2, [pc, #104]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f48:	60d3      	str	r3, [r2, #12]
 8002f4a:	e011      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f899 	bl	8003094 <RCCEx_PLLSAI1_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d02b      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8a:	4908      	ldr	r1, [pc, #32]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9c:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a02      	ldr	r2, [pc, #8]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa6:	60d3      	str	r3, [r2, #12]
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f867 	bl	8003094 <RCCEx_PLLSAI1_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d02f      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fee:	4928      	ldr	r1, [pc, #160]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ffe:	d10d      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	2102      	movs	r1, #2
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f844 	bl	8003094 <RCCEx_PLLSAI1_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d014      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003016:	7cfb      	ldrb	r3, [r7, #19]
 8003018:	74bb      	strb	r3, [r7, #18]
 800301a:	e011      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003024:	d10c      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3320      	adds	r3, #32
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f925 	bl	800327c <RCCEx_PLLSAI2_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800304c:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800305a:	490d      	ldr	r1, [pc, #52]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800306e:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003074:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800307e:	4904      	ldr	r1, [pc, #16]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003086:	7cbb      	ldrb	r3, [r7, #18]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000

08003094 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030a2:	4b75      	ldr	r3, [pc, #468]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d018      	beq.n	80030e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ae:	4b72      	ldr	r3, [pc, #456]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0203 	and.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d10d      	bne.n	80030da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
       ||
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
       ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d047      	beq.n	800316a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e044      	b.n	800316a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d018      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x86>
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d825      	bhi.n	8003138 <RCCEx_PLLSAI1_Config+0xa4>
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d002      	beq.n	80030f6 <RCCEx_PLLSAI1_Config+0x62>
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d009      	beq.n	8003108 <RCCEx_PLLSAI1_Config+0x74>
 80030f4:	e020      	b.n	8003138 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030f6:	4b60      	ldr	r3, [pc, #384]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d11d      	bne.n	800313e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003106:	e01a      	b.n	800313e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003108:	4b5b      	ldr	r3, [pc, #364]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d116      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003118:	e013      	b.n	8003142 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800311a:	4b57      	ldr	r3, [pc, #348]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003126:	4b54      	ldr	r3, [pc, #336]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003136:	e006      	b.n	8003146 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	e004      	b.n	8003148 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003146:	bf00      	nop
    }

    if(status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800314e:	4b4a      	ldr	r3, [pc, #296]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	430b      	orrs	r3, r1
 8003164:	4944      	ldr	r1, [pc, #272]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d17d      	bne.n	800326c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003170:	4b41      	ldr	r3, [pc, #260]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a40      	ldr	r2, [pc, #256]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800317a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fe f8ce 	bl	800131c <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003182:	e009      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003184:	f7fe f8ca 	bl	800131c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d902      	bls.n	8003198 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	73fb      	strb	r3, [r7, #15]
        break;
 8003196:	e005      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003198:	4b37      	ldr	r3, [pc, #220]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ef      	bne.n	8003184 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d160      	bne.n	800326c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d111      	bne.n	80031d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b0:	4b31      	ldr	r3, [pc, #196]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80031b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6892      	ldr	r2, [r2, #8]
 80031c0:	0211      	lsls	r1, r2, #8
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	0912      	lsrs	r2, r2, #4
 80031c8:	0452      	lsls	r2, r2, #17
 80031ca:	430a      	orrs	r2, r1
 80031cc:	492a      	ldr	r1, [pc, #168]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	610b      	str	r3, [r1, #16]
 80031d2:	e027      	b.n	8003224 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d112      	bne.n	8003200 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031da:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80031e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6892      	ldr	r2, [r2, #8]
 80031ea:	0211      	lsls	r1, r2, #8
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6912      	ldr	r2, [r2, #16]
 80031f0:	0852      	lsrs	r2, r2, #1
 80031f2:	3a01      	subs	r2, #1
 80031f4:	0552      	lsls	r2, r2, #21
 80031f6:	430a      	orrs	r2, r1
 80031f8:	491f      	ldr	r1, [pc, #124]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	610b      	str	r3, [r1, #16]
 80031fe:	e011      	b.n	8003224 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003200:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003208:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6892      	ldr	r2, [r2, #8]
 8003210:	0211      	lsls	r1, r2, #8
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6952      	ldr	r2, [r2, #20]
 8003216:	0852      	lsrs	r2, r2, #1
 8003218:	3a01      	subs	r2, #1
 800321a:	0652      	lsls	r2, r2, #25
 800321c:	430a      	orrs	r2, r1
 800321e:	4916      	ldr	r1, [pc, #88]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003224:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a13      	ldr	r2, [pc, #76]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800322e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe f874 	bl	800131c <HAL_GetTick>
 8003234:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003236:	e009      	b.n	800324c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003238:	f7fe f870 	bl	800131c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d902      	bls.n	800324c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	73fb      	strb	r3, [r7, #15]
          break;
 800324a:	e005      	b.n	8003258 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800324c:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ef      	beq.n	8003238 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	4904      	ldr	r1, [pc, #16]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000

0800327c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800328a:	4b6a      	ldr	r3, [pc, #424]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d018      	beq.n	80032c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003296:	4b67      	ldr	r3, [pc, #412]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0203 	and.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d10d      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
       ||
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032ae:	4b61      	ldr	r3, [pc, #388]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
       ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d047      	beq.n	8003352 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	e044      	b.n	8003352 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d018      	beq.n	8003302 <RCCEx_PLLSAI2_Config+0x86>
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d825      	bhi.n	8003320 <RCCEx_PLLSAI2_Config+0xa4>
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d002      	beq.n	80032de <RCCEx_PLLSAI2_Config+0x62>
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d009      	beq.n	80032f0 <RCCEx_PLLSAI2_Config+0x74>
 80032dc:	e020      	b.n	8003320 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032de:	4b55      	ldr	r3, [pc, #340]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11d      	bne.n	8003326 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ee:	e01a      	b.n	8003326 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f0:	4b50      	ldr	r3, [pc, #320]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003300:	e013      	b.n	800332a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003302:	4b4c      	ldr	r3, [pc, #304]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800330e:	4b49      	ldr	r3, [pc, #292]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800331e:	e006      	b.n	800332e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e004      	b.n	8003330 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003326:	bf00      	nop
 8003328:	e002      	b.n	8003330 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800332a:	bf00      	nop
 800332c:	e000      	b.n	8003330 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800332e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10d      	bne.n	8003352 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003336:	4b3f      	ldr	r3, [pc, #252]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	430b      	orrs	r3, r1
 800334c:	4939      	ldr	r1, [pc, #228]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d167      	bne.n	8003428 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003358:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a35      	ldr	r2, [pc, #212]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003364:	f7fd ffda 	bl	800131c <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800336a:	e009      	b.n	8003380 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800336c:	f7fd ffd6 	bl	800131c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	73fb      	strb	r3, [r7, #15]
        break;
 800337e:	e005      	b.n	800338c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003380:	4b2c      	ldr	r3, [pc, #176]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ef      	bne.n	800336c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d14a      	bne.n	8003428 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d111      	bne.n	80033bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003398:	4b26      	ldr	r3, [pc, #152]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6892      	ldr	r2, [r2, #8]
 80033a8:	0211      	lsls	r1, r2, #8
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68d2      	ldr	r2, [r2, #12]
 80033ae:	0912      	lsrs	r2, r2, #4
 80033b0:	0452      	lsls	r2, r2, #17
 80033b2:	430a      	orrs	r2, r1
 80033b4:	491f      	ldr	r1, [pc, #124]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	614b      	str	r3, [r1, #20]
 80033ba:	e011      	b.n	80033e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	0211      	lsls	r1, r2, #8
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6912      	ldr	r2, [r2, #16]
 80033d2:	0852      	lsrs	r2, r2, #1
 80033d4:	3a01      	subs	r2, #1
 80033d6:	0652      	lsls	r2, r2, #25
 80033d8:	430a      	orrs	r2, r1
 80033da:	4916      	ldr	r1, [pc, #88]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033e0:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fd ff96 	bl	800131c <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033f2:	e009      	b.n	8003408 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033f4:	f7fd ff92 	bl	800131c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	73fb      	strb	r3, [r7, #15]
          break;
 8003406:	e005      	b.n	8003414 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003408:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ef      	beq.n	80033f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4904      	ldr	r1, [pc, #16]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000

08003438 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07c      	b.n	8003544 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fd fdd3 	bl	8001010 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003480:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800348a:	d902      	bls.n	8003492 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e002      	b.n	8003498 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003496:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034a0:	d007      	beq.n	80034b2 <HAL_SPI_Init+0x7a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034aa:	d002      	beq.n	80034b2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034c2:	d903      	bls.n	80034cc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80034ca:	e002      	b.n	80034d2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0204 	and.w	r2, r3, #4
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	ea42 0103 	orr.w	r1, r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_SPI_Transmit+0x26>
 800356e:	2302      	movs	r3, #2
 8003570:	e13e      	b.n	80037f0 <HAL_SPI_Transmit+0x2a4>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357a:	f7fd fecf 	bl	800131c <HAL_GetTick>
 800357e:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d002      	beq.n	8003592 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003590:	e125      	b.n	80037de <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_SPI_Transmit+0x52>
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a2:	e11c      	b.n	80037de <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ee:	d107      	bne.n	8003600 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b40      	cmp	r3, #64	@ 0x40
 800360c:	d007      	beq.n	800361e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003626:	d947      	bls.n	80036b8 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_SPI_Transmit+0xee>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d138      	bne.n	80036ac <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3302      	adds	r3, #2
 8003648:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003658:	e028      	b.n	80036ac <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d10f      	bne.n	8003688 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3302      	adds	r3, #2
 8003676:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003686:	e011      	b.n	80036ac <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_SPI_Transmit+0x15a>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d00a      	beq.n	80036ac <HAL_SPI_Transmit+0x160>
 8003696:	f7fd fe41 	bl	800131c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d802      	bhi.n	80036ac <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036aa:	e098      	b.n	80037de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1d1      	bne.n	800365a <HAL_SPI_Transmit+0x10e>
 80036b6:	e070      	b.n	800379a <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <HAL_SPI_Transmit+0x17e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d162      	bne.n	8003790 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d90f      	bls.n	80036f4 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	881a      	ldrh	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3302      	adds	r3, #2
 80036e2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b02      	subs	r3, #2
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036f2:	e04d      	b.n	8003790 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	320c      	adds	r2, #12
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003712:	e03d      	b.n	8003790 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d124      	bne.n	800376c <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d90f      	bls.n	800374c <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	881a      	ldrh	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3302      	adds	r3, #2
 800373a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b02      	subs	r3, #2
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800374a:	e021      	b.n	8003790 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	60ba      	str	r2, [r7, #8]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	320c      	adds	r2, #12
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800376a:	e011      	b.n	8003790 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_SPI_Transmit+0x23e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d00a      	beq.n	8003790 <HAL_SPI_Transmit+0x244>
 800377a:	f7fd fdcf 	bl	800131c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d802      	bhi.n	8003790 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800378e:	e026      	b.n	80037de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1bc      	bne.n	8003714 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fb02 	bl	8003da8 <SPI_EndRxTxTransaction>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e000      	b.n	80037de <HAL_SPI_Transmit+0x292>
  }

error:
 80037dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	@ 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8003812:	2301      	movs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_SPI_TransmitReceive+0x32>
 8003826:	2302      	movs	r3, #2
 8003828:	e1e2      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x3f8>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003832:	f7fd fd73 	bl	800131c <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d00e      	beq.n	800386c <HAL_SPI_TransmitReceive+0x74>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003854:	d106      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x6c>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d003      	beq.n	800386c <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003864:	2302      	movs	r3, #2
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800386a:	e1b7      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_SPI_TransmitReceive+0x86>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_TransmitReceive+0x86>
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003884:	e1aa      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b04      	cmp	r3, #4
 8003890:	d003      	beq.n	800389a <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2205      	movs	r2, #5
 8003896:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	887a      	ldrh	r2, [r7, #2]
 80038aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	887a      	ldrh	r2, [r7, #2]
 80038b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038dc:	d805      	bhi.n	80038ea <HAL_SPI_TransmitReceive+0xf2>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d908      	bls.n	80038fc <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e007      	b.n	800390c <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003916:	2b40      	cmp	r3, #64	@ 0x40
 8003918:	d007      	beq.n	800392a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003932:	d975      	bls.n	8003a20 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x14e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d160      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3302      	adds	r3, #2
 8003954:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003964:	e050      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01c      	beq.n	80039a6 <HAL_SPI_TransmitReceive+0x1ae>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d017      	beq.n	80039a6 <HAL_SPI_TransmitReceive+0x1ae>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d110      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3302      	adds	r3, #2
 8003992:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01a      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x1f0>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d113      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3302      	adds	r3, #2
 80039d0:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039e4:	2301      	movs	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80039e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d00b      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x210>
 80039f0:	f7fd fc94 	bl	800131c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d803      	bhi.n	8003a08 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003a06:	e0e9      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1a9      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x16e>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1a3      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x16e>
 8003a1e:	e0c9      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x23c>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 80b3 	bne.w	8003b9a <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d90f      	bls.n	8003a5e <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b02      	subs	r3, #2
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a5c:	e09d      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	60ba      	str	r2, [r7, #8]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	320c      	adds	r2, #12
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7c:	e08d      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d031      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x2f0>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02c      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x2f0>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d125      	bne.n	8003ae8 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d90f      	bls.n	8003ac6 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b02      	subs	r3, #2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ac4:	e00e      	b.n	8003ae4 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	60ba      	str	r2, [r7, #8]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	320c      	adds	r2, #12
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d042      	beq.n	8003b7a <HAL_SPI_TransmitReceive+0x382>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d13b      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d920      	bls.n	8003b50 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b02      	subs	r3, #2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d81b      	bhi.n	8003b76 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e012      	b.n	8003b76 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f103 020c 	add.w	r2, r3, #12
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	6079      	str	r1, [r7, #4]
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b76:	2301      	movs	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d00b      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0x3a2>
 8003b82:	f7fd fbcb 	bl	800131c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d803      	bhi.n	8003b9a <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003b98:	e020      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f af6c 	bne.w	8003a7e <HAL_SPI_TransmitReceive+0x286>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f47f af65 	bne.w	8003a7e <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f8f5 	bl	8003da8 <SPI_EndRxTxTransaction>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd8:	e000      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8003bda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003bec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	@ 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c06:	e04c      	b.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d048      	beq.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003c16:	f7fd fb81 	bl	800131c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d83d      	bhi.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c3e:	d111      	bne.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c48:	d004      	beq.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c52:	d107      	bne.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c6c:	d10f      	bne.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e00e      	b.n	8003cc0 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4013      	ands	r3, r2
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d101      	bne.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	e000      	b.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d1a4      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003cd6:	e05a      	b.n	8003d8e <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cde:	d109      	bne.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	330c      	adds	r3, #12
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d048      	beq.n	8003d8e <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003d02:	f7fd fb0b 	bl	800131c <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d83d      	bhi.n	8003d8e <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d2a:	d111      	bne.n	8003d50 <SPI_WaitFifoStateUntilTimeout+0x88>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d34:	d004      	beq.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d107      	bne.n	8003d50 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d58:	d10f      	bne.n	8003d7a <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e008      	b.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d19c      	bne.n	8003cd8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff ff81 	bl	8003cc8 <SPI_WaitFifoStateUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e027      	b.n	8003e2c <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	2180      	movs	r1, #128	@ 0x80
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff ff06 	bl	8003bf8 <SPI_WaitFlagStateUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e014      	b.n	8003e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff ff5a 	bl	8003cc8 <SPI_WaitFifoStateUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e000      	b.n	8003e2c <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e040      	b.n	8003ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd f91c 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	@ 0x24
 8003e60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fe06 	bl	8004a8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fb4b 	bl	800451c <UART_SetConfig>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e01b      	b.n	8003ec8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fe85 	bl	8004bd0 <UART_CheckIdleState>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0ba      	sub	sp, #232	@ 0xe8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ef6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003efa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003efe:	4013      	ands	r3, r2
 8003f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d115      	bne.n	8003f38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00f      	beq.n	8003f38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 82ca 	beq.w	80044c2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
      }
      return;
 8003f36:	e2c4      	b.n	80044c2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8117 	beq.w	8004170 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f52:	4b85      	ldr	r3, [pc, #532]	@ (8004168 <HAL_UART_IRQHandler+0x298>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 810a 	beq.w	8004170 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d011      	beq.n	8003f8c <HAL_UART_IRQHandler+0xbc>
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d011      	beq.n	8003fbc <HAL_UART_IRQHandler+0xec>
 8003f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb2:	f043 0204 	orr.w	r2, r3, #4
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d011      	beq.n	8003fec <HAL_UART_IRQHandler+0x11c>
 8003fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2204      	movs	r2, #4
 8003fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe2:	f043 0202 	orr.w	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d017      	beq.n	8004028 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004008:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2208      	movs	r2, #8
 8004016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800401e:	f043 0208 	orr.w	r2, r3, #8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <HAL_UART_IRQHandler+0x18a>
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004048:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8230 	beq.w	80044c6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a2:	2b40      	cmp	r3, #64	@ 0x40
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d04f      	beq.n	8004152 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fea1 	bl	8004dfa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c2:	2b40      	cmp	r3, #64	@ 0x40
 80040c4:	d141      	bne.n	800414a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3308      	adds	r3, #8
 80040cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800410a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1d9      	bne.n	80040c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004116:	2b00      	cmp	r3, #0
 8004118:	d013      	beq.n	8004142 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411e:	4a13      	ldr	r2, [pc, #76]	@ (800416c <HAL_UART_IRQHandler+0x29c>)
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd fb30 	bl	800178c <HAL_DMA_Abort_IT>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d017      	beq.n	8004162 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800413c:	4610      	mov	r0, r2
 800413e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	e00f      	b.n	8004162 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f9d4 	bl	80044f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	e00b      	b.n	8004162 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f9d0 	bl	80044f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	e007      	b.n	8004162 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9cc 	bl	80044f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004160:	e1b1      	b.n	80044c6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004162:	bf00      	nop
    return;
 8004164:	e1af      	b.n	80044c6 <HAL_UART_IRQHandler+0x5f6>
 8004166:	bf00      	nop
 8004168:	04000120 	.word	0x04000120
 800416c:	08004ec3 	.word	0x08004ec3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 816a 	bne.w	800444e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8163 	beq.w	800444e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 815c 	beq.w	800444e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2210      	movs	r2, #16
 800419c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	f040 80d4 	bne.w	8004356 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80ad 	beq.w	800431e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ce:	429a      	cmp	r2, r3
 80041d0:	f080 80a5 	bcs.w	800431e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 8086 	bne.w	80042fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800420c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800421a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800421e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004226:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1da      	bne.n	80041f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800424a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3308      	adds	r3, #8
 800425a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800425e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004262:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004266:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e1      	bne.n	800423a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800429a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800429c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e3      	bne.n	8004276 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042cc:	f023 0310 	bic.w	r3, r3, #16
 80042d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e4      	bne.n	80042bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fa0a 	bl	8001710 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800430e:	b29b      	uxth	r3, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	b29b      	uxth	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8f4 	bl	8004504 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800431c:	e0d5      	b.n	80044ca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004324:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004328:	429a      	cmp	r2, r3
 800432a:	f040 80ce 	bne.w	80044ca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b20      	cmp	r3, #32
 800433c:	f040 80c5 	bne.w	80044ca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8d8 	bl	8004504 <HAL_UARTEx_RxEventCallback>
      return;
 8004354:	e0b9      	b.n	80044ca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004362:	b29b      	uxth	r3, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80ab 	beq.w	80044ce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a6 	beq.w	80044ce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e4      	bne.n	8004382 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	623b      	str	r3, [r7, #32]
   return(result);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3308      	adds	r3, #8
 80043d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80043de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e3      	bne.n	80043b8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	60fb      	str	r3, [r7, #12]
   return(result);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f023 0310 	bic.w	r3, r3, #16
 8004418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	617b      	str	r3, [r7, #20]
   return(result);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e4      	bne.n	8004404 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f85c 	bl	8004504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800444c:	e03f      	b.n	80044ce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00e      	beq.n	8004478 <HAL_UART_IRQHandler+0x5a8>
 800445a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800445e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800446e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fd66 	bl	8004f42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004476:	e02d      	b.n	80044d4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00e      	beq.n	80044a2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01c      	beq.n	80044d2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
    }
    return;
 80044a0:	e017      	b.n	80044d2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d012      	beq.n	80044d4 <HAL_UART_IRQHandler+0x604>
 80044ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fd17 	bl	8004eee <UART_EndTransmit_IT>
    return;
 80044c0:	e008      	b.n	80044d4 <HAL_UART_IRQHandler+0x604>
      return;
 80044c2:	bf00      	nop
 80044c4:	e006      	b.n	80044d4 <HAL_UART_IRQHandler+0x604>
    return;
 80044c6:	bf00      	nop
 80044c8:	e004      	b.n	80044d4 <HAL_UART_IRQHandler+0x604>
      return;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <HAL_UART_IRQHandler+0x604>
      return;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <HAL_UART_IRQHandler+0x604>
    return;
 80044d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044d4:	37e8      	adds	r7, #232	@ 0xe8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop

080044dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b08a      	sub	sp, #40	@ 0x28
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	431a      	orrs	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	431a      	orrs	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	4313      	orrs	r3, r2
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4ba4      	ldr	r3, [pc, #656]	@ (80047dc <UART_SetConfig+0x2c0>)
 800454c:	4013      	ands	r3, r2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004554:	430b      	orrs	r3, r1
 8004556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a99      	ldr	r2, [pc, #612]	@ (80047e0 <UART_SetConfig+0x2c4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	4313      	orrs	r3, r2
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004598:	430a      	orrs	r2, r1
 800459a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a90      	ldr	r2, [pc, #576]	@ (80047e4 <UART_SetConfig+0x2c8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d126      	bne.n	80045f4 <UART_SetConfig+0xd8>
 80045a6:	4b90      	ldr	r3, [pc, #576]	@ (80047e8 <UART_SetConfig+0x2cc>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d81b      	bhi.n	80045ec <UART_SetConfig+0xd0>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <UART_SetConfig+0xa0>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045dd 	.word	0x080045dd
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045e5 	.word	0x080045e5
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e116      	b.n	8004802 <UART_SetConfig+0x2e6>
 80045d4:	2302      	movs	r3, #2
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e112      	b.n	8004802 <UART_SetConfig+0x2e6>
 80045dc:	2304      	movs	r3, #4
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e2:	e10e      	b.n	8004802 <UART_SetConfig+0x2e6>
 80045e4:	2308      	movs	r3, #8
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ea:	e10a      	b.n	8004802 <UART_SetConfig+0x2e6>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f2:	e106      	b.n	8004802 <UART_SetConfig+0x2e6>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a7c      	ldr	r2, [pc, #496]	@ (80047ec <UART_SetConfig+0x2d0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d138      	bne.n	8004670 <UART_SetConfig+0x154>
 80045fe:	4b7a      	ldr	r3, [pc, #488]	@ (80047e8 <UART_SetConfig+0x2cc>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004604:	f003 030c 	and.w	r3, r3, #12
 8004608:	2b0c      	cmp	r3, #12
 800460a:	d82d      	bhi.n	8004668 <UART_SetConfig+0x14c>
 800460c:	a201      	add	r2, pc, #4	@ (adr r2, 8004614 <UART_SetConfig+0xf8>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004649 	.word	0x08004649
 8004618:	08004669 	.word	0x08004669
 800461c:	08004669 	.word	0x08004669
 8004620:	08004669 	.word	0x08004669
 8004624:	08004659 	.word	0x08004659
 8004628:	08004669 	.word	0x08004669
 800462c:	08004669 	.word	0x08004669
 8004630:	08004669 	.word	0x08004669
 8004634:	08004651 	.word	0x08004651
 8004638:	08004669 	.word	0x08004669
 800463c:	08004669 	.word	0x08004669
 8004640:	08004669 	.word	0x08004669
 8004644:	08004661 	.word	0x08004661
 8004648:	2300      	movs	r3, #0
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464e:	e0d8      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004650:	2302      	movs	r3, #2
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004656:	e0d4      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004658:	2304      	movs	r3, #4
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465e:	e0d0      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004660:	2308      	movs	r3, #8
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004666:	e0cc      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004668:	2310      	movs	r3, #16
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e0c8      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a5e      	ldr	r2, [pc, #376]	@ (80047f0 <UART_SetConfig+0x2d4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d125      	bne.n	80046c6 <UART_SetConfig+0x1aa>
 800467a:	4b5b      	ldr	r3, [pc, #364]	@ (80047e8 <UART_SetConfig+0x2cc>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004684:	2b30      	cmp	r3, #48	@ 0x30
 8004686:	d016      	beq.n	80046b6 <UART_SetConfig+0x19a>
 8004688:	2b30      	cmp	r3, #48	@ 0x30
 800468a:	d818      	bhi.n	80046be <UART_SetConfig+0x1a2>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d00a      	beq.n	80046a6 <UART_SetConfig+0x18a>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d814      	bhi.n	80046be <UART_SetConfig+0x1a2>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <UART_SetConfig+0x182>
 8004698:	2b10      	cmp	r3, #16
 800469a:	d008      	beq.n	80046ae <UART_SetConfig+0x192>
 800469c:	e00f      	b.n	80046be <UART_SetConfig+0x1a2>
 800469e:	2300      	movs	r3, #0
 80046a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a4:	e0ad      	b.n	8004802 <UART_SetConfig+0x2e6>
 80046a6:	2302      	movs	r3, #2
 80046a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ac:	e0a9      	b.n	8004802 <UART_SetConfig+0x2e6>
 80046ae:	2304      	movs	r3, #4
 80046b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b4:	e0a5      	b.n	8004802 <UART_SetConfig+0x2e6>
 80046b6:	2308      	movs	r3, #8
 80046b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046bc:	e0a1      	b.n	8004802 <UART_SetConfig+0x2e6>
 80046be:	2310      	movs	r3, #16
 80046c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c4:	e09d      	b.n	8004802 <UART_SetConfig+0x2e6>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a4a      	ldr	r2, [pc, #296]	@ (80047f4 <UART_SetConfig+0x2d8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d125      	bne.n	800471c <UART_SetConfig+0x200>
 80046d0:	4b45      	ldr	r3, [pc, #276]	@ (80047e8 <UART_SetConfig+0x2cc>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046da:	2bc0      	cmp	r3, #192	@ 0xc0
 80046dc:	d016      	beq.n	800470c <UART_SetConfig+0x1f0>
 80046de:	2bc0      	cmp	r3, #192	@ 0xc0
 80046e0:	d818      	bhi.n	8004714 <UART_SetConfig+0x1f8>
 80046e2:	2b80      	cmp	r3, #128	@ 0x80
 80046e4:	d00a      	beq.n	80046fc <UART_SetConfig+0x1e0>
 80046e6:	2b80      	cmp	r3, #128	@ 0x80
 80046e8:	d814      	bhi.n	8004714 <UART_SetConfig+0x1f8>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <UART_SetConfig+0x1d8>
 80046ee:	2b40      	cmp	r3, #64	@ 0x40
 80046f0:	d008      	beq.n	8004704 <UART_SetConfig+0x1e8>
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x1f8>
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fa:	e082      	b.n	8004802 <UART_SetConfig+0x2e6>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004702:	e07e      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470a:	e07a      	b.n	8004802 <UART_SetConfig+0x2e6>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004712:	e076      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e072      	b.n	8004802 <UART_SetConfig+0x2e6>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a35      	ldr	r2, [pc, #212]	@ (80047f8 <UART_SetConfig+0x2dc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d12a      	bne.n	800477c <UART_SetConfig+0x260>
 8004726:	4b30      	ldr	r3, [pc, #192]	@ (80047e8 <UART_SetConfig+0x2cc>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004734:	d01a      	beq.n	800476c <UART_SetConfig+0x250>
 8004736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473a:	d81b      	bhi.n	8004774 <UART_SetConfig+0x258>
 800473c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004740:	d00c      	beq.n	800475c <UART_SetConfig+0x240>
 8004742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004746:	d815      	bhi.n	8004774 <UART_SetConfig+0x258>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <UART_SetConfig+0x238>
 800474c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004750:	d008      	beq.n	8004764 <UART_SetConfig+0x248>
 8004752:	e00f      	b.n	8004774 <UART_SetConfig+0x258>
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e052      	b.n	8004802 <UART_SetConfig+0x2e6>
 800475c:	2302      	movs	r3, #2
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004762:	e04e      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004764:	2304      	movs	r3, #4
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476a:	e04a      	b.n	8004802 <UART_SetConfig+0x2e6>
 800476c:	2308      	movs	r3, #8
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004772:	e046      	b.n	8004802 <UART_SetConfig+0x2e6>
 8004774:	2310      	movs	r3, #16
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477a:	e042      	b.n	8004802 <UART_SetConfig+0x2e6>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <UART_SetConfig+0x2c4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d13a      	bne.n	80047fc <UART_SetConfig+0x2e0>
 8004786:	4b18      	ldr	r3, [pc, #96]	@ (80047e8 <UART_SetConfig+0x2cc>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004794:	d01a      	beq.n	80047cc <UART_SetConfig+0x2b0>
 8004796:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800479a:	d81b      	bhi.n	80047d4 <UART_SetConfig+0x2b8>
 800479c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a0:	d00c      	beq.n	80047bc <UART_SetConfig+0x2a0>
 80047a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a6:	d815      	bhi.n	80047d4 <UART_SetConfig+0x2b8>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <UART_SetConfig+0x298>
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b0:	d008      	beq.n	80047c4 <UART_SetConfig+0x2a8>
 80047b2:	e00f      	b.n	80047d4 <UART_SetConfig+0x2b8>
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e022      	b.n	8004802 <UART_SetConfig+0x2e6>
 80047bc:	2302      	movs	r3, #2
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c2:	e01e      	b.n	8004802 <UART_SetConfig+0x2e6>
 80047c4:	2304      	movs	r3, #4
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ca:	e01a      	b.n	8004802 <UART_SetConfig+0x2e6>
 80047cc:	2308      	movs	r3, #8
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d2:	e016      	b.n	8004802 <UART_SetConfig+0x2e6>
 80047d4:	2310      	movs	r3, #16
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047da:	e012      	b.n	8004802 <UART_SetConfig+0x2e6>
 80047dc:	efff69f3 	.word	0xefff69f3
 80047e0:	40008000 	.word	0x40008000
 80047e4:	40013800 	.word	0x40013800
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40004400 	.word	0x40004400
 80047f0:	40004800 	.word	0x40004800
 80047f4:	40004c00 	.word	0x40004c00
 80047f8:	40005000 	.word	0x40005000
 80047fc:	2310      	movs	r3, #16
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a9f      	ldr	r2, [pc, #636]	@ (8004a84 <UART_SetConfig+0x568>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d17a      	bne.n	8004902 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800480c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004810:	2b08      	cmp	r3, #8
 8004812:	d824      	bhi.n	800485e <UART_SetConfig+0x342>
 8004814:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <UART_SetConfig+0x300>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004841 	.word	0x08004841
 8004820:	0800485f 	.word	0x0800485f
 8004824:	08004849 	.word	0x08004849
 8004828:	0800485f 	.word	0x0800485f
 800482c:	0800484f 	.word	0x0800484f
 8004830:	0800485f 	.word	0x0800485f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800485f 	.word	0x0800485f
 800483c:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7fe f8b2 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004844:	61f8      	str	r0, [r7, #28]
        break;
 8004846:	e010      	b.n	800486a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b8f      	ldr	r3, [pc, #572]	@ (8004a88 <UART_SetConfig+0x56c>)
 800484a:	61fb      	str	r3, [r7, #28]
        break;
 800484c:	e00d      	b.n	800486a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7fe f813 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8004852:	61f8      	str	r0, [r7, #28]
        break;
 8004854:	e009      	b.n	800486a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800485a:	61fb      	str	r3, [r7, #28]
        break;
 800485c:	e005      	b.n	800486a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004868:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80fb 	beq.w	8004a68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	429a      	cmp	r2, r3
 8004880:	d305      	bcc.n	800488e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	429a      	cmp	r2, r3
 800488c:	d903      	bls.n	8004896 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004894:	e0e8      	b.n	8004a68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	2200      	movs	r2, #0
 800489a:	461c      	mov	r4, r3
 800489c:	4615      	mov	r5, r2
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	022b      	lsls	r3, r5, #8
 80048a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048ac:	0222      	lsls	r2, r4, #8
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	6849      	ldr	r1, [r1, #4]
 80048b2:	0849      	lsrs	r1, r1, #1
 80048b4:	2000      	movs	r0, #0
 80048b6:	4688      	mov	r8, r1
 80048b8:	4681      	mov	r9, r0
 80048ba:	eb12 0a08 	adds.w	sl, r2, r8
 80048be:	eb43 0b09 	adc.w	fp, r3, r9
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d0:	4650      	mov	r0, sl
 80048d2:	4659      	mov	r1, fp
 80048d4:	f7fb fc80 	bl	80001d8 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4613      	mov	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048e6:	d308      	bcc.n	80048fa <UART_SetConfig+0x3de>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ee:	d204      	bcs.n	80048fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	e0b6      	b.n	8004a68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004900:	e0b2      	b.n	8004a68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800490a:	d15e      	bne.n	80049ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800490c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004910:	2b08      	cmp	r3, #8
 8004912:	d828      	bhi.n	8004966 <UART_SetConfig+0x44a>
 8004914:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <UART_SetConfig+0x400>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004941 	.word	0x08004941
 8004920:	08004949 	.word	0x08004949
 8004924:	08004951 	.word	0x08004951
 8004928:	08004967 	.word	0x08004967
 800492c:	08004957 	.word	0x08004957
 8004930:	08004967 	.word	0x08004967
 8004934:	08004967 	.word	0x08004967
 8004938:	08004967 	.word	0x08004967
 800493c:	0800495f 	.word	0x0800495f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7fe f832 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004944:	61f8      	str	r0, [r7, #28]
        break;
 8004946:	e014      	b.n	8004972 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7fe f844 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 800494c:	61f8      	str	r0, [r7, #28]
        break;
 800494e:	e010      	b.n	8004972 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004950:	4b4d      	ldr	r3, [pc, #308]	@ (8004a88 <UART_SetConfig+0x56c>)
 8004952:	61fb      	str	r3, [r7, #28]
        break;
 8004954:	e00d      	b.n	8004972 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7fd ff8f 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 800495a:	61f8      	str	r0, [r7, #28]
        break;
 800495c:	e009      	b.n	8004972 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004962:	61fb      	str	r3, [r7, #28]
        break;
 8004964:	e005      	b.n	8004972 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004970:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d077      	beq.n	8004a68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005a      	lsls	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	441a      	add	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d916      	bls.n	80049c2 <UART_SetConfig+0x4a6>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499a:	d212      	bcs.n	80049c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f023 030f 	bic.w	r3, r3, #15
 80049a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	8afb      	ldrh	r3, [r7, #22]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	8afa      	ldrh	r2, [r7, #22]
 80049be:	60da      	str	r2, [r3, #12]
 80049c0:	e052      	b.n	8004a68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049c8:	e04e      	b.n	8004a68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d827      	bhi.n	8004a22 <UART_SetConfig+0x506>
 80049d2:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <UART_SetConfig+0x4bc>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004a23 	.word	0x08004a23
 80049e8:	08004a13 	.word	0x08004a13
 80049ec:	08004a23 	.word	0x08004a23
 80049f0:	08004a23 	.word	0x08004a23
 80049f4:	08004a23 	.word	0x08004a23
 80049f8:	08004a1b 	.word	0x08004a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fc:	f7fd ffd4 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004a00:	61f8      	str	r0, [r7, #28]
        break;
 8004a02:	e014      	b.n	8004a2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a04:	f7fd ffe6 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004a08:	61f8      	str	r0, [r7, #28]
        break;
 8004a0a:	e010      	b.n	8004a2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a88 <UART_SetConfig+0x56c>)
 8004a0e:	61fb      	str	r3, [r7, #28]
        break;
 8004a10:	e00d      	b.n	8004a2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a12:	f7fd ff31 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8004a16:	61f8      	str	r0, [r7, #28]
        break;
 8004a18:	e009      	b.n	8004a2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1e:	61fb      	str	r3, [r7, #28]
        break;
 8004a20:	e005      	b.n	8004a2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a2c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d019      	beq.n	8004a68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	085a      	lsrs	r2, r3, #1
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	441a      	add	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b0f      	cmp	r3, #15
 8004a4c:	d909      	bls.n	8004a62 <UART_SetConfig+0x546>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a54:	d205      	bcs.n	8004a62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e002      	b.n	8004a68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3728      	adds	r7, #40	@ 0x28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a82:	bf00      	nop
 8004a84:	40008000 	.word	0x40008000
 8004a88:	00f42400 	.word	0x00f42400

08004a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b8a:	d10a      	bne.n	8004ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b098      	sub	sp, #96	@ 0x60
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be0:	f7fc fb9c 	bl	800131c <HAL_GetTick>
 8004be4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d12e      	bne.n	8004c52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f88c 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d021      	beq.n	8004c52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e6      	bne.n	8004c0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e062      	b.n	8004d18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d149      	bne.n	8004cf4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f856 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d03c      	beq.n	8004cf4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	623b      	str	r3, [r7, #32]
   return(result);
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ccc:	61fa      	str	r2, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e011      	b.n	8004d18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3758      	adds	r7, #88	@ 0x58
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	e04f      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d04b      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fc faef 	bl	800131c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e04e      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d037      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b80      	cmp	r3, #128	@ 0x80
 8004d66:	d034      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b40      	cmp	r3, #64	@ 0x40
 8004d6c:	d031      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d110      	bne.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f838 	bl	8004dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e029      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dac:	d111      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f81e 	bl	8004dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e00f      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d0a0      	beq.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b095      	sub	sp, #84	@ 0x54
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d118      	bne.n	8004ea2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e6      	bne.n	8004e70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004eb6:	bf00      	nop
 8004eb8:	3754      	adds	r7, #84	@ 0x54
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ece:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff fb05 	bl	80044f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b088      	sub	sp, #32
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	613b      	str	r3, [r7, #16]
   return(result);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fad1 	bl	80044dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3a:	bf00      	nop
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f56:	b480      	push	{r7}
 8004f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f5a:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	71fb      	strb	r3, [r7, #7]
	switch(pdrv){
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d108      	bne.n	8004f88 <disk_status+0x22>
	case DEV_MMC:
		if(is_SD_card_initialized())
 8004f76:	f7fb ff1d 	bl	8000db4 <is_SD_card_initialized>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <disk_status+0x1e>
			return 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e002      	b.n	8004f8a <disk_status+0x24>
		else
			return STA_NOINIT;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <disk_status+0x24>
	default:
		return STA_NOINIT;
 8004f88:	2301      	movs	r3, #1
	}
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat = STA_NOINIT;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d107      	bne.n	8004fb6 <disk_initialize+0x24>
	case DEV_MMC:
		if(initialize_SD_card() == 1)
 8004fa6:	f7fb fe61 	bl	8000c6c <initialize_SD_card>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <disk_initialize+0x28>
			stat = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
		break;
 8004fb4:	e001      	b.n	8004fba <disk_initialize+0x28>
	default:
		return STA_NOINIT;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e001      	b.n	8004fbe <disk_initialize+0x2c>
		break;
 8004fba:	bf00      	nop
	}
	return stat;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]
  switch(pdrv){
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d127      	bne.n	800502c <disk_read+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 8004fdc:	f7fb feea 	bl	8000db4 <is_SD_card_initialized>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f083 0301 	eor.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <disk_read+0x2a>
			return RES_NOTRDY;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e01e      	b.n	800502e <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e014      	b.n	8005020 <disk_read+0x5a>
			if(!read_block(sector+i, buff+(i*512)))
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	18d0      	adds	r0, r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	025b      	lsls	r3, r3, #9
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	4413      	add	r3, r2
 8005004:	4619      	mov	r1, r3
 8005006:	f7fb fc89 	bl	800091c <read_block>
 800500a:	4603      	mov	r3, r0
 800500c:	f083 0301 	eor.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <disk_read+0x54>
				return RES_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e009      	b.n	800502e <disk_read+0x68>
		for(UINT i = 0; i < count; i++){
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	3301      	adds	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d3e6      	bcc.n	8004ff6 <disk_read+0x30>
		}
		return RES_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <disk_read+0x68>
	default:
		return RES_PARERR;
 800502c:	2304      	movs	r3, #4
	}
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b086      	sub	sp, #24
 800503a:	af00      	add	r7, sp, #0
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	4603      	mov	r3, r0
 8005044:	73fb      	strb	r3, [r7, #15]
	switch(pdrv){
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d127      	bne.n	800509c <disk_write+0x66>
	case DEV_MMC:
		if(!is_SD_card_initialized())
 800504c:	f7fb feb2 	bl	8000db4 <is_SD_card_initialized>
 8005050:	4603      	mov	r3, r0
 8005052:	f083 0301 	eor.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <disk_write+0x2a>
			return RES_NOTRDY;
 800505c:	2303      	movs	r3, #3
 800505e:	e01e      	b.n	800509e <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e014      	b.n	8005090 <disk_write+0x5a>
			if(!write_block(sector+i, buff+(i*512)))
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	18d0      	adds	r0, r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	025b      	lsls	r3, r3, #9
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	4413      	add	r3, r2
 8005074:	4619      	mov	r1, r3
 8005076:	f7fb fd25 	bl	8000ac4 <write_block>
 800507a:	4603      	mov	r3, r0
 800507c:	f083 0301 	eor.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <disk_write+0x54>
				return RES_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e009      	b.n	800509e <disk_write+0x68>
		for(UINT i = 0; i < count; i++){
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3301      	adds	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3e6      	bcc.n	8005066 <disk_write+0x30>
		}
		return RES_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	e000      	b.n	800509e <disk_write+0x68>
	default:
		return RES_PARERR;
 800509c:	2304      	movs	r3, #4
	}
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	603a      	str	r2, [r7, #0]
 80050b2:	71fb      	strb	r3, [r7, #7]
 80050b4:	460b      	mov	r3, r1
 80050b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]

  switch(cmd){
 80050bc:	79bb      	ldrb	r3, [r7, #6]
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d825      	bhi.n	800510e <disk_ioctl+0x66>
 80050c2:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <disk_ioctl+0x20>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050dd 	.word	0x080050dd
 80050cc:	080050e3 	.word	0x080050e3
 80050d0:	080050ef 	.word	0x080050ef
 80050d4:	080050fd 	.word	0x080050fd
 80050d8:	08005109 	.word	0x08005109
  case CTRL_SYNC:
	  res = RES_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
	  break;
 80050e0:	e018      	b.n	8005114 <disk_ioctl+0x6c>
  case GET_SECTOR_COUNT:
	  *(DWORD*)buff = 67,108,864;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2243      	movs	r2, #67	@ 0x43
 80050e6:	601a      	str	r2, [r3, #0]
	  res = RES_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	73fb      	strb	r3, [r7, #15]
	  break;
 80050ec:	e012      	b.n	8005114 <disk_ioctl+0x6c>
  case GET_SECTOR_SIZE:
	  *(WORD*)buff = 512;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050f4:	801a      	strh	r2, [r3, #0]
	  res = RES_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
	  break;
 80050fa:	e00b      	b.n	8005114 <disk_ioctl+0x6c>
  case GET_BLOCK_SIZE:
	  *(DWORD*)buff = 32;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2220      	movs	r2, #32
 8005100:	601a      	str	r2, [r3, #0]
	  res = RES_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
	  break;
 8005106:	e005      	b.n	8005114 <disk_ioctl+0x6c>
  case CTRL_TRIM:
	  res = RES_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	73fb      	strb	r3, [r7, #15]
	  break;
 800510c:	e002      	b.n	8005114 <disk_ioctl+0x6c>
  default:
	  res = RES_PARERR;
 800510e:	2304      	movs	r3, #4
 8005110:	73fb      	strb	r3, [r7, #15]
	  break;
 8005112:	bf00      	nop
  }
}
 8005114:	bf00      	nop
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop

08005124 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3301      	adds	r3, #1
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005134:	89fb      	ldrh	r3, [r7, #14]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	b21a      	sxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b21b      	sxth	r3, r3
 8005140:	4313      	orrs	r3, r2
 8005142:	b21b      	sxth	r3, r3
 8005144:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005146:	89fb      	ldrh	r3, [r7, #14]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3303      	adds	r3, #3
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	3202      	adds	r2, #2
 800516c:	7812      	ldrb	r2, [r2, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	3201      	adds	r2, #1
 800517a:	7812      	ldrb	r2, [r2, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	7812      	ldrb	r2, [r2, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
	return rv;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	887a      	ldrh	r2, [r7, #2]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	1c53      	adds	r3, r2, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	6179      	str	r1, [r7, #20]
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3b01      	subs	r3, #1
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f1      	bne.n	8005242 <mem_cpy+0x1a>
	}
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	617a      	str	r2, [r7, #20]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3b01      	subs	r3, #1
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f3      	bne.n	800527a <mem_set+0x10>
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	@ 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	61fa      	str	r2, [r7, #28]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	4619      	mov	r1, r3
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	61ba      	str	r2, [r7, #24]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	1acb      	subs	r3, r1, r3
 80052cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <mem_cmp+0x40>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0eb      	beq.n	80052b8 <mem_cmp+0x18>

	return r;
 80052e0:	697b      	ldr	r3, [r7, #20]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3724      	adds	r7, #36	@ 0x24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80052f8:	e002      	b.n	8005300 <chk_chr+0x12>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3301      	adds	r3, #1
 80052fe:	607b      	str	r3, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <chk_chr+0x26>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	4293      	cmp	r3, r2
 8005312:	d1f2      	bne.n	80052fa <chk_chr+0xc>
	return *str;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	781b      	ldrb	r3, [r3, #0]
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e029      	b.n	800538c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005338:	4a27      	ldr	r2, [pc, #156]	@ (80053d8 <chk_lock+0xb4>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	4413      	add	r3, r2
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01d      	beq.n	8005382 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005346:	4a24      	ldr	r2, [pc, #144]	@ (80053d8 <chk_lock+0xb4>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	4413      	add	r3, r2
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d116      	bne.n	8005386 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005358:	4a1f      	ldr	r2, [pc, #124]	@ (80053d8 <chk_lock+0xb4>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	4413      	add	r3, r2
 8005360:	3304      	adds	r3, #4
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005368:	429a      	cmp	r2, r3
 800536a:	d10c      	bne.n	8005386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800536c:	4a1a      	ldr	r2, [pc, #104]	@ (80053d8 <chk_lock+0xb4>)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	4413      	add	r3, r2
 8005374:	3308      	adds	r3, #8
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800537c:	429a      	cmp	r2, r3
 800537e:	d102      	bne.n	8005386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005380:	e007      	b.n	8005392 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005382:	2301      	movs	r3, #1
 8005384:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d9d2      	bls.n	8005338 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b02      	cmp	r3, #2
 8005396:	d109      	bne.n	80053ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <chk_lock+0x80>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d101      	bne.n	80053a8 <chk_lock+0x84>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e010      	b.n	80053ca <chk_lock+0xa6>
 80053a8:	2312      	movs	r3, #18
 80053aa:	e00e      	b.n	80053ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d108      	bne.n	80053c4 <chk_lock+0xa0>
 80053b2:	4a09      	ldr	r2, [pc, #36]	@ (80053d8 <chk_lock+0xb4>)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	4413      	add	r3, r2
 80053ba:	330c      	adds	r3, #12
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c2:	d101      	bne.n	80053c8 <chk_lock+0xa4>
 80053c4:	2310      	movs	r3, #16
 80053c6:	e000      	b.n	80053ca <chk_lock+0xa6>
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	2000066c 	.word	0x2000066c

080053dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	e002      	b.n	80053ee <enq_lock+0x12>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3301      	adds	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d806      	bhi.n	8005402 <enq_lock+0x26>
 80053f4:	4a09      	ldr	r2, [pc, #36]	@ (800541c <enq_lock+0x40>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f2      	bne.n	80053e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b02      	cmp	r3, #2
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	2000066c 	.word	0x2000066c

08005420 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e01f      	b.n	8005470 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005430:	4a41      	ldr	r2, [pc, #260]	@ (8005538 <inc_lock+0x118>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4413      	add	r3, r2
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d113      	bne.n	800546a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005442:	4a3d      	ldr	r2, [pc, #244]	@ (8005538 <inc_lock+0x118>)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	4413      	add	r3, r2
 800544a:	3304      	adds	r3, #4
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005452:	429a      	cmp	r2, r3
 8005454:	d109      	bne.n	800546a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005456:	4a38      	ldr	r2, [pc, #224]	@ (8005538 <inc_lock+0x118>)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	4413      	add	r3, r2
 800545e:	3308      	adds	r3, #8
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005466:	429a      	cmp	r2, r3
 8005468:	d006      	beq.n	8005478 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d9dc      	bls.n	8005430 <inc_lock+0x10>
 8005476:	e000      	b.n	800547a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005478:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d132      	bne.n	80054e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e002      	b.n	800548c <inc_lock+0x6c>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d806      	bhi.n	80054a0 <inc_lock+0x80>
 8005492:	4a29      	ldr	r2, [pc, #164]	@ (8005538 <inc_lock+0x118>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	4413      	add	r3, r2
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f2      	bne.n	8005486 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d101      	bne.n	80054aa <inc_lock+0x8a>
 80054a6:	2300      	movs	r3, #0
 80054a8:	e040      	b.n	800552c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4922      	ldr	r1, [pc, #136]	@ (8005538 <inc_lock+0x118>)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	440b      	add	r3, r1
 80054b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	491e      	ldr	r1, [pc, #120]	@ (8005538 <inc_lock+0x118>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	440b      	add	r3, r1
 80054c4:	3304      	adds	r3, #4
 80054c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695a      	ldr	r2, [r3, #20]
 80054cc:	491a      	ldr	r1, [pc, #104]	@ (8005538 <inc_lock+0x118>)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	440b      	add	r3, r1
 80054d4:	3308      	adds	r3, #8
 80054d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80054d8:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <inc_lock+0x118>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	4413      	add	r3, r2
 80054e0:	330c      	adds	r3, #12
 80054e2:	2200      	movs	r2, #0
 80054e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <inc_lock+0xe0>
 80054ec:	4a12      	ldr	r2, [pc, #72]	@ (8005538 <inc_lock+0x118>)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4413      	add	r3, r2
 80054f4:	330c      	adds	r3, #12
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <inc_lock+0xe0>
 80054fc:	2300      	movs	r3, #0
 80054fe:	e015      	b.n	800552c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d108      	bne.n	8005518 <inc_lock+0xf8>
 8005506:	4a0c      	ldr	r2, [pc, #48]	@ (8005538 <inc_lock+0x118>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	4413      	add	r3, r2
 800550e:	330c      	adds	r3, #12
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	e001      	b.n	800551c <inc_lock+0xfc>
 8005518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800551c:	4906      	ldr	r1, [pc, #24]	@ (8005538 <inc_lock+0x118>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	440b      	add	r3, r1
 8005524:	330c      	adds	r3, #12
 8005526:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3301      	adds	r3, #1
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	2000066c 	.word	0x2000066c

0800553c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d825      	bhi.n	800559c <dec_lock+0x60>
		n = Files[i].ctr;
 8005550:	4a17      	ldr	r2, [pc, #92]	@ (80055b0 <dec_lock+0x74>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4413      	add	r3, r2
 8005558:	330c      	adds	r3, #12
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800555e:	89fb      	ldrh	r3, [r7, #14]
 8005560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005564:	d101      	bne.n	800556a <dec_lock+0x2e>
 8005566:	2300      	movs	r3, #0
 8005568:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800556a:	89fb      	ldrh	r3, [r7, #14]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <dec_lock+0x3a>
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	3b01      	subs	r3, #1
 8005574:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005576:	4a0e      	ldr	r2, [pc, #56]	@ (80055b0 <dec_lock+0x74>)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	4413      	add	r3, r2
 800557e:	330c      	adds	r3, #12
 8005580:	89fa      	ldrh	r2, [r7, #14]
 8005582:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <dec_lock+0x5a>
 800558a:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <dec_lock+0x74>)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	4413      	add	r3, r2
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	737b      	strb	r3, [r7, #13]
 800559a:	e001      	b.n	80055a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800559c:	2302      	movs	r3, #2
 800559e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80055a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	2000066c 	.word	0x2000066c

080055b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e010      	b.n	80055e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055c2:	4a0d      	ldr	r2, [pc, #52]	@ (80055f8 <clear_lock+0x44>)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	4413      	add	r3, r2
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d105      	bne.n	80055de <clear_lock+0x2a>
 80055d2:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <clear_lock+0x44>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	4413      	add	r3, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d9eb      	bls.n	80055c2 <clear_lock+0xe>
	}
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	2000066c 	.word	0x2000066c

080055fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	78db      	ldrb	r3, [r3, #3]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d034      	beq.n	800567a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	7858      	ldrb	r0, [r3, #1]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005620:	2301      	movs	r3, #1
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	f7ff fd07 	bl	8005036 <disk_write>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <sync_window+0x38>
			res = FR_DISK_ERR;
 800562e:	2301      	movs	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
 8005632:	e022      	b.n	800567a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	1ad2      	subs	r2, r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	429a      	cmp	r2, r3
 8005648:	d217      	bcs.n	800567a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	789b      	ldrb	r3, [r3, #2]
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	e010      	b.n	8005674 <sync_window+0x78>
					wsect += fs->fsize;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	7858      	ldrb	r0, [r3, #1]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005666:	2301      	movs	r3, #1
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	f7ff fce4 	bl	8005036 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	3b01      	subs	r3, #1
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d8eb      	bhi.n	8005652 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d01b      	beq.n	80056d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ffad 	bl	80055fc <sync_window>
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d113      	bne.n	80056d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7858      	ldrb	r0, [r3, #1]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80056b6:	2301      	movs	r3, #1
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	f7ff fc84 	bl	8004fc6 <disk_read>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80056c4:	f04f 33ff 	mov.w	r3, #4294967295
 80056c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff87 	bl	80055fc <sync_window>
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d158      	bne.n	80057aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d148      	bne.n	8005792 <sync_fs+0xb2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	791b      	ldrb	r3, [r3, #4]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d144      	bne.n	8005792 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3330      	adds	r3, #48	@ 0x30
 800570c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fda9 	bl	800526a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3330      	adds	r3, #48	@ 0x30
 800571c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005720:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fd38 	bl	800519a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3330      	adds	r3, #48	@ 0x30
 800572e:	4921      	ldr	r1, [pc, #132]	@ (80057b4 <sync_fs+0xd4>)
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fd4d 	bl	80051d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3330      	adds	r3, #48	@ 0x30
 800573a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800573e:	491e      	ldr	r1, [pc, #120]	@ (80057b8 <sync_fs+0xd8>)
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fd45 	bl	80051d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3330      	adds	r3, #48	@ 0x30
 800574a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7ff fd3b 	bl	80051d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3330      	adds	r3, #48	@ 0x30
 800575e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f7ff fd31 	bl	80051d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7858      	ldrb	r0, [r3, #1]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	2301      	movs	r3, #1
 8005788:	f7ff fc55 	bl	8005036 <disk_write>
			fs->fsi_flag = 0;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2200      	movs	r2, #0
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fc84 	bl	80050a8 <disk_ioctl>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <sync_fs+0xca>
 80057a6:	2301      	movs	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	41615252 	.word	0x41615252
 80057b8:	61417272 	.word	0x61417272

080057bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	3b02      	subs	r3, #2
 80057ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	3b02      	subs	r3, #2
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d301      	bcc.n	80057dc <clust2sect+0x20>
 80057d8:	2300      	movs	r3, #0
 80057da:	e008      	b.n	80057ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	895b      	ldrh	r3, [r3, #10]
 80057e0:	461a      	mov	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	fb03 f202 	mul.w	r2, r3, r2
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	4413      	add	r3, r2
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d904      	bls.n	800581a <get_fat+0x20>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <get_fat+0x26>
		val = 1;	/* Internal error */
 800581a:	2301      	movs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e08e      	b.n	800593e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005820:	f04f 33ff 	mov.w	r3, #4294967295
 8005824:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d061      	beq.n	80058f2 <get_fat+0xf8>
 800582e:	2b03      	cmp	r3, #3
 8005830:	dc7b      	bgt.n	800592a <get_fat+0x130>
 8005832:	2b01      	cmp	r3, #1
 8005834:	d002      	beq.n	800583c <get_fat+0x42>
 8005836:	2b02      	cmp	r3, #2
 8005838:	d041      	beq.n	80058be <get_fat+0xc4>
 800583a:	e076      	b.n	800592a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	0a5b      	lsrs	r3, r3, #9
 8005852:	4413      	add	r3, r2
 8005854:	4619      	mov	r1, r3
 8005856:	6938      	ldr	r0, [r7, #16]
 8005858:	f7ff ff14 	bl	8005684 <move_window>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d166      	bne.n	8005930 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	60fa      	str	r2, [r7, #12]
 8005868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005874:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6a1a      	ldr	r2, [r3, #32]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	0a5b      	lsrs	r3, r3, #9
 800587e:	4413      	add	r3, r2
 8005880:	4619      	mov	r1, r3
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f7ff fefe 	bl	8005684 <move_window>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d152      	bne.n	8005934 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <get_fat+0xba>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	e002      	b.n	80058ba <get_fat+0xc0>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ba:	617b      	str	r3, [r7, #20]
			break;
 80058bc:	e03f      	b.n	800593e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	4413      	add	r3, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	6938      	ldr	r0, [r7, #16]
 80058cc:	f7ff feda 	bl	8005684 <move_window>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d130      	bne.n	8005938 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80058e4:	4413      	add	r3, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fc1c 	bl	8005124 <ld_word>
 80058ec:	4603      	mov	r3, r0
 80058ee:	617b      	str	r3, [r7, #20]
			break;
 80058f0:	e025      	b.n	800593e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	09db      	lsrs	r3, r3, #7
 80058fa:	4413      	add	r3, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	6938      	ldr	r0, [r7, #16]
 8005900:	f7ff fec0 	bl	8005684 <move_window>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d118      	bne.n	800593c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005918:	4413      	add	r3, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fc1a 	bl	8005154 <ld_dword>
 8005920:	4603      	mov	r3, r0
 8005922:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005926:	617b      	str	r3, [r7, #20]
			break;
 8005928:	e009      	b.n	800593e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e006      	b.n	800593e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005930:	bf00      	nop
 8005932:	e004      	b.n	800593e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005934:	bf00      	nop
 8005936:	e002      	b.n	800593e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800593c:	bf00      	nop
		}
	}

	return val;
 800593e:	697b      	ldr	r3, [r7, #20]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b089      	sub	sp, #36	@ 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005954:	2302      	movs	r3, #2
 8005956:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b01      	cmp	r3, #1
 800595c:	f240 80d9 	bls.w	8005b12 <put_fat+0x1ca>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	f080 80d3 	bcs.w	8005b12 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b03      	cmp	r3, #3
 8005972:	f000 8096 	beq.w	8005aa2 <put_fat+0x15a>
 8005976:	2b03      	cmp	r3, #3
 8005978:	f300 80cb 	bgt.w	8005b12 <put_fat+0x1ca>
 800597c:	2b01      	cmp	r3, #1
 800597e:	d002      	beq.n	8005986 <put_fat+0x3e>
 8005980:	2b02      	cmp	r3, #2
 8005982:	d06e      	beq.n	8005a62 <put_fat+0x11a>
 8005984:	e0c5      	b.n	8005b12 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4413      	add	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	0a5b      	lsrs	r3, r3, #9
 800599c:	4413      	add	r3, r2
 800599e:	4619      	mov	r1, r3
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff fe6f 	bl	8005684 <move_window>
 80059a6:	4603      	mov	r3, r0
 80059a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059aa:	7ffb      	ldrb	r3, [r7, #31]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 80a9 	bne.w	8005b04 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	61b9      	str	r1, [r7, #24]
 80059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c2:	4413      	add	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00d      	beq.n	80059ec <put_fat+0xa4>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	b25a      	sxtb	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	4313      	orrs	r3, r2
 80059e6:	b25b      	sxtb	r3, r3
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e001      	b.n	80059f0 <put_fat+0xa8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1a      	ldr	r2, [r3, #32]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	0a5b      	lsrs	r3, r3, #9
 8005a02:	4413      	add	r3, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff fe3c 	bl	8005684 <move_window>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a10:	7ffb      	ldrb	r3, [r7, #31]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d178      	bne.n	8005b08 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	4413      	add	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <put_fat+0xf0>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e00e      	b.n	8005a56 <put_fat+0x10e>
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f023 030f 	bic.w	r3, r3, #15
 8005a42:	b25a      	sxtb	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	b25b      	sxtb	r3, r3
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	b25b      	sxtb	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	70da      	strb	r2, [r3, #3]
			break;
 8005a60:	e057      	b.n	8005b12 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff fe08 	bl	8005684 <move_window>
 8005a74:	4603      	mov	r3, r0
 8005a76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a78:	7ffb      	ldrb	r3, [r7, #31]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d146      	bne.n	8005b0c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005a8c:	4413      	add	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	b292      	uxth	r2, r2
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fb80 	bl	800519a <st_word>
			fs->wflag = 1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	70da      	strb	r2, [r3, #3]
			break;
 8005aa0:	e037      	b.n	8005b12 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	09db      	lsrs	r3, r3, #7
 8005aaa:	4413      	add	r3, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff fde8 	bl	8005684 <move_window>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ab8:	7ffb      	ldrb	r3, [r7, #31]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d128      	bne.n	8005b10 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005ad2:	4413      	add	r3, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fb3d 	bl	8005154 <ld_dword>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005ae0:	4323      	orrs	r3, r4
 8005ae2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005af2:	4413      	add	r3, r2
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fb6a 	bl	80051d0 <st_dword>
			fs->wflag = 1;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	70da      	strb	r2, [r3, #3]
			break;
 8005b02:	e006      	b.n	8005b12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005b04:	bf00      	nop
 8005b06:	e004      	b.n	8005b12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005b08:	bf00      	nop
 8005b0a:	e002      	b.n	8005b12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005b10:	bf00      	nop
		}
	}
	return res;
 8005b12:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3724      	adds	r7, #36	@ 0x24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd90      	pop	{r4, r7, pc}

08005b1c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d904      	bls.n	8005b42 <remove_chain+0x26>
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d301      	bcc.n	8005b46 <remove_chain+0x2a>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e04b      	b.n	8005bde <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00c      	beq.n	8005b66 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	69b8      	ldr	r0, [r7, #24]
 8005b54:	f7ff fef8 	bl	8005948 <put_fat>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005b5c:	7ffb      	ldrb	r3, [r7, #31]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <remove_chain+0x4a>
 8005b62:	7ffb      	ldrb	r3, [r7, #31]
 8005b64:	e03b      	b.n	8005bde <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff fe46 	bl	80057fa <get_fat>
 8005b6e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d031      	beq.n	8005bda <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <remove_chain+0x64>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e02e      	b.n	8005bde <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d101      	bne.n	8005b8c <remove_chain+0x70>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e028      	b.n	8005bde <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	69b8      	ldr	r0, [r7, #24]
 8005b92:	f7ff fed9 	bl	8005948 <put_fat>
 8005b96:	4603      	mov	r3, r0
 8005b98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005b9a:	7ffb      	ldrb	r3, [r7, #31]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <remove_chain+0x88>
 8005ba0:	7ffb      	ldrb	r3, [r7, #31]
 8005ba2:	e01c      	b.n	8005bde <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	3b02      	subs	r3, #2
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d20b      	bcs.n	8005bca <remove_chain+0xae>
			fs->free_clst++;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	791b      	ldrb	r3, [r3, #4]
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d3c6      	bcc.n	8005b66 <remove_chain+0x4a>
 8005bd8:	e000      	b.n	8005bdc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005bda:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b088      	sub	sp, #32
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10d      	bne.n	8005c18 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <create_chain+0x2c>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d31b      	bcc.n	8005c4a <create_chain+0x64>
 8005c12:	2301      	movs	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e018      	b.n	8005c4a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fded 	bl	80057fa <get_fat>
 8005c20:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d801      	bhi.n	8005c2c <create_chain+0x46>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e070      	b.n	8005d0e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d101      	bne.n	8005c38 <create_chain+0x52>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	e06a      	b.n	8005d0e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d201      	bcs.n	8005c46 <create_chain+0x60>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	e063      	b.n	8005d0e <create_chain+0x128>
		scl = clst;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3301      	adds	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d307      	bcc.n	8005c6e <create_chain+0x88>
				ncl = 2;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d901      	bls.n	8005c6e <create_chain+0x88>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e04f      	b.n	8005d0e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005c6e:	69f9      	ldr	r1, [r7, #28]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff fdc2 	bl	80057fa <get_fat>
 8005c76:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00e      	beq.n	8005c9c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d003      	beq.n	8005c8c <create_chain+0xa6>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d101      	bne.n	8005c90 <create_chain+0xaa>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	e03e      	b.n	8005d0e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d1da      	bne.n	8005c4e <create_chain+0x68>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e038      	b.n	8005d0e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005c9c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca2:	69f9      	ldr	r1, [r7, #28]
 8005ca4:	6938      	ldr	r0, [r7, #16]
 8005ca6:	f7ff fe4f 	bl	8005948 <put_fat>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d109      	bne.n	8005cc8 <create_chain+0xe2>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d006      	beq.n	8005cc8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6938      	ldr	r0, [r7, #16]
 8005cc0:	f7ff fe42 	bl	8005948 <put_fat>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d116      	bne.n	8005cfc <create_chain+0x116>
		fs->last_clst = ncl;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	3b02      	subs	r3, #2
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d804      	bhi.n	8005cec <create_chain+0x106>
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	1e5a      	subs	r2, r3, #1
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	791b      	ldrb	r3, [r3, #4]
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	711a      	strb	r2, [r3, #4]
 8005cfa:	e007      	b.n	8005d0c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d102      	bne.n	8005d08 <create_chain+0x122>
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
 8005d06:	e000      	b.n	8005d0a <create_chain+0x124>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005d0c:	69fb      	ldr	r3, [r7, #28]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	0a5b      	lsrs	r3, r3, #9
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	8952      	ldrh	r2, [r2, #10]
 8005d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	613a      	str	r2, [r7, #16]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <clmt_clust+0x3a>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e010      	b.n	8005d72 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d307      	bcc.n	8005d68 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	3304      	adds	r3, #4
 8005d64:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d66:	e7e9      	b.n	8005d3c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005d68:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d94:	d204      	bcs.n	8005da0 <dir_sdi+0x22>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e063      	b.n	8005e6c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <dir_sdi+0x46>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d902      	bls.n	8005dc4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10c      	bne.n	8005de4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	8912      	ldrh	r2, [r2, #8]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d301      	bcc.n	8005dda <dir_sdi+0x5c>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e048      	b.n	8005e6c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	61da      	str	r2, [r3, #28]
 8005de2:	e029      	b.n	8005e38 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	895b      	ldrh	r3, [r3, #10]
 8005de8:	025b      	lsls	r3, r3, #9
 8005dea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005dec:	e019      	b.n	8005e22 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6979      	ldr	r1, [r7, #20]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fd01 	bl	80057fa <get_fat>
 8005df8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d101      	bne.n	8005e06 <dir_sdi+0x88>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e032      	b.n	8005e6c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d904      	bls.n	8005e16 <dir_sdi+0x98>
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d301      	bcc.n	8005e1a <dir_sdi+0x9c>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e028      	b.n	8005e6c <dir_sdi+0xee>
			ofs -= csz;
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d2e1      	bcs.n	8005dee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	6938      	ldr	r0, [r7, #16]
 8005e2e:	f7ff fcc5 	bl	80057bc <clust2sect>
 8005e32:	4602      	mov	r2, r0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <dir_sdi+0xcc>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e010      	b.n	8005e6c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	0a5b      	lsrs	r3, r3, #9
 8005e52:	441a      	add	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	3320      	adds	r3, #32
 8005e8a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <dir_next+0x28>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e9a:	d301      	bcc.n	8005ea0 <dir_next+0x2c>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	e0aa      	b.n	8005ff6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 8098 	bne.w	8005fdc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	8912      	ldrh	r2, [r2, #8]
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f0c0 8088 	bcc.w	8005fdc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	61da      	str	r2, [r3, #28]
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	e08f      	b.n	8005ff6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	0a5b      	lsrs	r3, r3, #9
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	8952      	ldrh	r2, [r2, #10]
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d17a      	bne.n	8005fdc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7ff fc83 	bl	80057fa <get_fat>
 8005ef4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d801      	bhi.n	8005f00 <dir_next+0x8c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e07a      	b.n	8005ff6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d101      	bne.n	8005f0c <dir_next+0x98>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e074      	b.n	8005ff6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d358      	bcc.n	8005fc8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	61da      	str	r2, [r3, #28]
 8005f22:	2304      	movs	r3, #4
 8005f24:	e067      	b.n	8005ff6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f7ff fe59 	bl	8005be6 <create_chain>
 8005f34:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <dir_next+0xcc>
 8005f3c:	2307      	movs	r3, #7
 8005f3e:	e05a      	b.n	8005ff6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <dir_next+0xd6>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e055      	b.n	8005ff6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d101      	bne.n	8005f56 <dir_next+0xe2>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e04f      	b.n	8005ff6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff fb50 	bl	80055fc <sync_window>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <dir_next+0xf2>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e047      	b.n	8005ff6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3330      	adds	r3, #48	@ 0x30
 8005f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff f97a 	bl	800526a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	6979      	ldr	r1, [r7, #20]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7ff fc1d 	bl	80057bc <clust2sect>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f88:	e012      	b.n	8005fb0 <dir_next+0x13c>
						fs->wflag = 1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff fb33 	bl	80055fc <sync_window>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <dir_next+0x12c>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e02a      	b.n	8005ff6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	895b      	ldrh	r3, [r3, #10]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d3e6      	bcc.n	8005f8a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005fce:	6979      	ldr	r1, [r7, #20]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff fbf3 	bl	80057bc <clust2sect>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	441a      	add	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800600e:	2100      	movs	r1, #0
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff feb4 	bl	8005d7e <dir_sdi>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d12b      	bne.n	8006078 <dir_alloc+0x7a>
		n = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	4619      	mov	r1, r3
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fb2a 	bl	8005684 <move_window>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11d      	bne.n	8006076 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2be5      	cmp	r3, #229	@ 0xe5
 8006042:	d004      	beq.n	800604e <dir_alloc+0x50>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d107      	bne.n	800605e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	3301      	adds	r3, #1
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d102      	bne.n	8006062 <dir_alloc+0x64>
 800605c:	e00c      	b.n	8006078 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff05 	bl	8005e74 <dir_next>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0d7      	beq.n	8006024 <dir_alloc+0x26>
 8006074:	e000      	b.n	8006078 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006076:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b04      	cmp	r3, #4
 800607c:	d101      	bne.n	8006082 <dir_alloc+0x84>
 800607e:	2307      	movs	r3, #7
 8006080:	75fb      	strb	r3, [r7, #23]
	return res;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	331a      	adds	r3, #26
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff f842 	bl	8005124 <ld_word>
 80060a0:	4603      	mov	r3, r0
 80060a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d109      	bne.n	80060c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff f837 	bl	8005124 <ld_word>
 80060b6:	4603      	mov	r3, r0
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80060c0:	68fb      	ldr	r3, [r7, #12]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	331a      	adds	r3, #26
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	b292      	uxth	r2, r2
 80060de:	4611      	mov	r1, r2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff f85a 	bl	800519a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d109      	bne.n	8006102 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f103 0214 	add.w	r2, r3, #20
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7ff f84c 	bl	800519a <st_word>
	}
}
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006118:	2100      	movs	r1, #0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fe2f 	bl	8005d7e <dir_sdi>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <dir_find+0x24>
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	e03e      	b.n	80061ac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	4619      	mov	r1, r3
 8006134:	6938      	ldr	r0, [r7, #16]
 8006136:	f7ff faa5 	bl	8005684 <move_window>
 800613a:	4603      	mov	r3, r0
 800613c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d12f      	bne.n	80061a4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <dir_find+0x4e>
 8006152:	2304      	movs	r3, #4
 8006154:	75fb      	strb	r3, [r7, #23]
 8006156:	e028      	b.n	80061aa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	330b      	adds	r3, #11
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006164:	b2da      	uxtb	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	330b      	adds	r3, #11
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <dir_find+0x86>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a18      	ldr	r0, [r3, #32]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3324      	adds	r3, #36	@ 0x24
 8006182:	220b      	movs	r2, #11
 8006184:	4619      	mov	r1, r3
 8006186:	f7ff f88b 	bl	80052a0 <mem_cmp>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006190:	2100      	movs	r1, #0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fe6e 	bl	8005e74 <dir_next>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0c5      	beq.n	800612e <dir_find+0x24>
 80061a2:	e002      	b.n	80061aa <dir_find+0xa0>
		if (res != FR_OK) break;
 80061a4:	bf00      	nop
 80061a6:	e000      	b.n	80061aa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80061a8:	bf00      	nop

	return res;
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80061c2:	2101      	movs	r1, #1
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ff1a 	bl	8005ffe <dir_alloc>
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11c      	bne.n	800620e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4619      	mov	r1, r3
 80061da:	68b8      	ldr	r0, [r7, #8]
 80061dc:	f7ff fa52 	bl	8005684 <move_window>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d111      	bne.n	800620e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	2220      	movs	r2, #32
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff f839 	bl	800526a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a18      	ldr	r0, [r3, #32]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3324      	adds	r3, #36	@ 0x24
 8006200:	220b      	movs	r2, #11
 8006202:	4619      	mov	r1, r3
 8006204:	f7ff f810 	bl	8005228 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2201      	movs	r2, #1
 800620c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3324      	adds	r3, #36	@ 0x24
 800622c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800622e:	220b      	movs	r2, #11
 8006230:	2120      	movs	r1, #32
 8006232:	68b8      	ldr	r0, [r7, #8]
 8006234:	f7ff f819 	bl	800526a <mem_set>
	si = i = 0; ni = 8;
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	2308      	movs	r3, #8
 8006242:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	61fa      	str	r2, [r7, #28]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006252:	7efb      	ldrb	r3, [r7, #27]
 8006254:	2b20      	cmp	r3, #32
 8006256:	d94e      	bls.n	80062f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006258:	7efb      	ldrb	r3, [r7, #27]
 800625a:	2b2f      	cmp	r3, #47	@ 0x2f
 800625c:	d006      	beq.n	800626c <create_name+0x54>
 800625e:	7efb      	ldrb	r3, [r7, #27]
 8006260:	2b5c      	cmp	r3, #92	@ 0x5c
 8006262:	d110      	bne.n	8006286 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006264:	e002      	b.n	800626c <create_name+0x54>
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3301      	adds	r3, #1
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b2f      	cmp	r3, #47	@ 0x2f
 8006276:	d0f6      	beq.n	8006266 <create_name+0x4e>
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b5c      	cmp	r3, #92	@ 0x5c
 8006282:	d0f0      	beq.n	8006266 <create_name+0x4e>
			break;
 8006284:	e038      	b.n	80062f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006286:	7efb      	ldrb	r3, [r7, #27]
 8006288:	2b2e      	cmp	r3, #46	@ 0x2e
 800628a:	d003      	beq.n	8006294 <create_name+0x7c>
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d30c      	bcc.n	80062ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b0b      	cmp	r3, #11
 8006298:	d002      	beq.n	80062a0 <create_name+0x88>
 800629a:	7efb      	ldrb	r3, [r7, #27]
 800629c:	2b2e      	cmp	r3, #46	@ 0x2e
 800629e:	d001      	beq.n	80062a4 <create_name+0x8c>
 80062a0:	2306      	movs	r3, #6
 80062a2:	e044      	b.n	800632e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80062a4:	2308      	movs	r3, #8
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	230b      	movs	r3, #11
 80062aa:	617b      	str	r3, [r7, #20]
			continue;
 80062ac:	e022      	b.n	80062f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80062ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da04      	bge.n	80062c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80062b6:	7efb      	ldrb	r3, [r7, #27]
 80062b8:	3b80      	subs	r3, #128	@ 0x80
 80062ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006338 <create_name+0x120>)
 80062bc:	5cd3      	ldrb	r3, [r2, r3]
 80062be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80062c0:	7efb      	ldrb	r3, [r7, #27]
 80062c2:	4619      	mov	r1, r3
 80062c4:	481d      	ldr	r0, [pc, #116]	@ (800633c <create_name+0x124>)
 80062c6:	f7ff f812 	bl	80052ee <chk_chr>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <create_name+0xbc>
 80062d0:	2306      	movs	r3, #6
 80062d2:	e02c      	b.n	800632e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80062d4:	7efb      	ldrb	r3, [r7, #27]
 80062d6:	2b60      	cmp	r3, #96	@ 0x60
 80062d8:	d905      	bls.n	80062e6 <create_name+0xce>
 80062da:	7efb      	ldrb	r3, [r7, #27]
 80062dc:	2b7a      	cmp	r3, #122	@ 0x7a
 80062de:	d802      	bhi.n	80062e6 <create_name+0xce>
 80062e0:	7efb      	ldrb	r3, [r7, #27]
 80062e2:	3b20      	subs	r3, #32
 80062e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	613a      	str	r2, [r7, #16]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4413      	add	r3, r2
 80062f0:	7efa      	ldrb	r2, [r7, #27]
 80062f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80062f4:	e7a6      	b.n	8006244 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80062f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	441a      	add	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <create_name+0xf4>
 8006308:	2306      	movs	r3, #6
 800630a:	e010      	b.n	800632e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2be5      	cmp	r3, #229	@ 0xe5
 8006312:	d102      	bne.n	800631a <create_name+0x102>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2205      	movs	r2, #5
 8006318:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800631a:	7efb      	ldrb	r3, [r7, #27]
 800631c:	2b20      	cmp	r3, #32
 800631e:	d801      	bhi.n	8006324 <create_name+0x10c>
 8006320:	2204      	movs	r2, #4
 8006322:	e000      	b.n	8006326 <create_name+0x10e>
 8006324:	2200      	movs	r2, #0
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	330b      	adds	r3, #11
 800632a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800632c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	0800767c 	.word	0x0800767c
 800633c:	080075f0 	.word	0x080075f0

08006340 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006354:	e002      	b.n	800635c <follow_path+0x1c>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b2f      	cmp	r3, #47	@ 0x2f
 8006362:	d0f8      	beq.n	8006356 <follow_path+0x16>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b5c      	cmp	r3, #92	@ 0x5c
 800636a:	d0f4      	beq.n	8006356 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2200      	movs	r2, #0
 8006370:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b1f      	cmp	r3, #31
 8006378:	d80a      	bhi.n	8006390 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2280      	movs	r2, #128	@ 0x80
 800637e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006382:	2100      	movs	r1, #0
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fcfa 	bl	8005d7e <dir_sdi>
 800638a:	4603      	mov	r3, r0
 800638c:	75fb      	strb	r3, [r7, #23]
 800638e:	e043      	b.n	8006418 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006390:	463b      	mov	r3, r7
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ff3f 	bl	8006218 <create_name>
 800639a:	4603      	mov	r3, r0
 800639c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d134      	bne.n	800640e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff feb0 	bl	800610a <dir_find>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80063b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d127      	bne.n	8006412 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d122      	bne.n	8006412 <follow_path+0xd2>
 80063cc:	2305      	movs	r3, #5
 80063ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80063d0:	e01f      	b.n	8006412 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063d2:	7afb      	ldrb	r3, [r7, #11]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11c      	bne.n	8006416 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	799b      	ldrb	r3, [r3, #6]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80063e8:	2305      	movs	r3, #5
 80063ea:	75fb      	strb	r3, [r7, #23]
 80063ec:	e014      	b.n	8006418 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	4413      	add	r3, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff fe43 	bl	800608c <ld_clust>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800640c:	e7c0      	b.n	8006390 <follow_path+0x50>
			if (res != FR_OK) break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <follow_path+0xd8>
				break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006416:	bf00      	nop
			}
		}
	}

	return res;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800642a:	f04f 33ff 	mov.w	r3, #4294967295
 800642e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d031      	beq.n	800649c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	e002      	b.n	8006446 <get_ldnumber+0x24>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3301      	adds	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b20      	cmp	r3, #32
 800644c:	d903      	bls.n	8006456 <get_ldnumber+0x34>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b3a      	cmp	r3, #58	@ 0x3a
 8006454:	d1f4      	bne.n	8006440 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b3a      	cmp	r3, #58	@ 0x3a
 800645c:	d11c      	bne.n	8006498 <get_ldnumber+0x76>
			tp = *path;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	60fa      	str	r2, [r7, #12]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	3b30      	subs	r3, #48	@ 0x30
 800646e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b09      	cmp	r3, #9
 8006474:	d80e      	bhi.n	8006494 <get_ldnumber+0x72>
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	429a      	cmp	r2, r3
 800647c:	d10a      	bne.n	8006494 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d107      	bne.n	8006494 <get_ldnumber+0x72>
					vol = (int)i;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	3301      	adds	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	e002      	b.n	800649e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800649c:	693b      	ldr	r3, [r7, #16]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	70da      	strb	r2, [r3, #3]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f04f 32ff 	mov.w	r2, #4294967295
 80064c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff f8dc 	bl	8005684 <move_window>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <check_fs+0x2a>
 80064d2:	2304      	movs	r3, #4
 80064d4:	e038      	b.n	8006548 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3330      	adds	r3, #48	@ 0x30
 80064da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fe20 	bl	8005124 <ld_word>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d001      	beq.n	80064f4 <check_fs+0x48>
 80064f0:	2303      	movs	r3, #3
 80064f2:	e029      	b.n	8006548 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064fa:	2be9      	cmp	r3, #233	@ 0xe9
 80064fc:	d009      	beq.n	8006512 <check_fs+0x66>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006504:	2beb      	cmp	r3, #235	@ 0xeb
 8006506:	d11e      	bne.n	8006546 <check_fs+0x9a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800650e:	2b90      	cmp	r3, #144	@ 0x90
 8006510:	d119      	bne.n	8006546 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3330      	adds	r3, #48	@ 0x30
 8006516:	3336      	adds	r3, #54	@ 0x36
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fe1b 	bl	8005154 <ld_dword>
 800651e:	4603      	mov	r3, r0
 8006520:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006524:	4a0a      	ldr	r2, [pc, #40]	@ (8006550 <check_fs+0xa4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d101      	bne.n	800652e <check_fs+0x82>
 800652a:	2300      	movs	r3, #0
 800652c:	e00c      	b.n	8006548 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3330      	adds	r3, #48	@ 0x30
 8006532:	3352      	adds	r3, #82	@ 0x52
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fe0d 	bl	8005154 <ld_dword>
 800653a:	4603      	mov	r3, r0
 800653c:	4a05      	ldr	r2, [pc, #20]	@ (8006554 <check_fs+0xa8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <check_fs+0x9a>
 8006542:	2300      	movs	r3, #0
 8006544:	e000      	b.n	8006548 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006546:	2302      	movs	r3, #2
}
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	00544146 	.word	0x00544146
 8006554:	33544146 	.word	0x33544146

08006558 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b096      	sub	sp, #88	@ 0x58
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff ff58 	bl	8006422 <get_ldnumber>
 8006572:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006576:	2b00      	cmp	r3, #0
 8006578:	da01      	bge.n	800657e <find_volume+0x26>
 800657a:	230b      	movs	r3, #11
 800657c:	e22d      	b.n	80069da <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800657e:	4aa1      	ldr	r2, [pc, #644]	@ (8006804 <find_volume+0x2ac>)
 8006580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006586:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <find_volume+0x3a>
 800658e:	230c      	movs	r3, #12
 8006590:	e223      	b.n	80069da <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006596:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01a      	beq.n	80065de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fcda 	bl	8004f66 <disk_status>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10c      	bne.n	80065de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <find_volume+0x82>
 80065ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80065d6:	230a      	movs	r3, #10
 80065d8:	e1ff      	b.n	80069da <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80065da:	2300      	movs	r3, #0
 80065dc:	e1fd      	b.n	80069da <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80065e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80065ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fcce 	bl	8004f92 <disk_initialize>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80065fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006608:	2303      	movs	r3, #3
 800660a:	e1e6      	b.n	80069da <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <find_volume+0xca>
 8006612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800661e:	230a      	movs	r3, #10
 8006620:	e1db      	b.n	80069da <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006626:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006628:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800662a:	f7ff ff3f 	bl	80064ac <check_fs>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006634:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006638:	2b02      	cmp	r3, #2
 800663a:	d149      	bne.n	80066d0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800663c:	2300      	movs	r3, #0
 800663e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006640:	e01e      	b.n	8006680 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006650:	4413      	add	r3, r2
 8006652:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	3304      	adds	r3, #4
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <find_volume+0x114>
 800665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006660:	3308      	adds	r3, #8
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fd76 	bl	8005154 <ld_dword>
 8006668:	4602      	mov	r2, r0
 800666a:	e000      	b.n	800666e <find_volume+0x116>
 800666c:	2200      	movs	r2, #0
 800666e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	3358      	adds	r3, #88	@ 0x58
 8006674:	443b      	add	r3, r7
 8006676:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800667a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800667c:	3301      	adds	r3, #1
 800667e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006682:	2b03      	cmp	r3, #3
 8006684:	d9dd      	bls.n	8006642 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006686:	2300      	movs	r3, #0
 8006688:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800668a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <find_volume+0x13e>
 8006690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006692:	3b01      	subs	r3, #1
 8006694:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	3358      	adds	r3, #88	@ 0x58
 800669c:	443b      	add	r3, r7
 800669e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80066a2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80066a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <find_volume+0x15e>
 80066aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066ae:	f7ff fefd 	bl	80064ac <check_fs>
 80066b2:	4603      	mov	r3, r0
 80066b4:	e000      	b.n	80066b8 <find_volume+0x160>
 80066b6:	2303      	movs	r3, #3
 80066b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80066bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d905      	bls.n	80066d0 <find_volume+0x178>
 80066c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c6:	3301      	adds	r3, #1
 80066c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d9e2      	bls.n	8006696 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80066d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d101      	bne.n	80066dc <find_volume+0x184>
 80066d8:	2301      	movs	r3, #1
 80066da:	e17e      	b.n	80069da <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80066dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d901      	bls.n	80066e8 <find_volume+0x190>
 80066e4:	230d      	movs	r3, #13
 80066e6:	e178      	b.n	80069da <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80066e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ea:	3330      	adds	r3, #48	@ 0x30
 80066ec:	330b      	adds	r3, #11
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fd18 	bl	8005124 <ld_word>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066fa:	d001      	beq.n	8006700 <find_volume+0x1a8>
 80066fc:	230d      	movs	r3, #13
 80066fe:	e16c      	b.n	80069da <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006702:	3330      	adds	r3, #48	@ 0x30
 8006704:	3316      	adds	r3, #22
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fd0c 	bl	8005124 <ld_word>
 800670c:	4603      	mov	r3, r0
 800670e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <find_volume+0x1cc>
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	3330      	adds	r3, #48	@ 0x30
 800671a:	3324      	adds	r3, #36	@ 0x24
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fd19 	bl	8005154 <ld_dword>
 8006722:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006726:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006728:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	789b      	ldrb	r3, [r3, #2]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d005      	beq.n	8006748 <find_volume+0x1f0>
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	789b      	ldrb	r3, [r3, #2]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d001      	beq.n	8006748 <find_volume+0x1f0>
 8006744:	230d      	movs	r3, #13
 8006746:	e148      	b.n	80069da <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	789b      	ldrb	r3, [r3, #2]
 800674c:	461a      	mov	r2, r3
 800674e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800675c:	461a      	mov	r2, r3
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	895b      	ldrh	r3, [r3, #10]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d008      	beq.n	800677c <find_volume+0x224>
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	895b      	ldrh	r3, [r3, #10]
 800676e:	461a      	mov	r2, r3
 8006770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006772:	895b      	ldrh	r3, [r3, #10]
 8006774:	3b01      	subs	r3, #1
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <find_volume+0x228>
 800677c:	230d      	movs	r3, #13
 800677e:	e12c      	b.n	80069da <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	3330      	adds	r3, #48	@ 0x30
 8006784:	3311      	adds	r3, #17
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fccc 	bl	8005124 <ld_word>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006792:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	891b      	ldrh	r3, [r3, #8]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <find_volume+0x24e>
 80067a2:	230d      	movs	r3, #13
 80067a4:	e119      	b.n	80069da <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80067a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a8:	3330      	adds	r3, #48	@ 0x30
 80067aa:	3313      	adds	r3, #19
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fcb9 	bl	8005124 <ld_word>
 80067b2:	4603      	mov	r3, r0
 80067b4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80067b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <find_volume+0x272>
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	3330      	adds	r3, #48	@ 0x30
 80067c0:	3320      	adds	r3, #32
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fcc6 	bl	8005154 <ld_dword>
 80067c8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	3330      	adds	r3, #48	@ 0x30
 80067ce:	330e      	adds	r3, #14
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fca7 	bl	8005124 <ld_word>
 80067d6:	4603      	mov	r3, r0
 80067d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80067da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <find_volume+0x28c>
 80067e0:	230d      	movs	r3, #13
 80067e2:	e0fa      	b.n	80069da <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80067e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80067e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e8:	4413      	add	r3, r2
 80067ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ec:	8912      	ldrh	r2, [r2, #8]
 80067ee:	0912      	lsrs	r2, r2, #4
 80067f0:	b292      	uxth	r2, r2
 80067f2:	4413      	add	r3, r2
 80067f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80067f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d204      	bcs.n	8006808 <find_volume+0x2b0>
 80067fe:	230d      	movs	r3, #13
 8006800:	e0eb      	b.n	80069da <find_volume+0x482>
 8006802:	bf00      	nop
 8006804:	20000664 	.word	0x20000664
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006810:	8952      	ldrh	r2, [r2, #10]
 8006812:	fbb3 f3f2 	udiv	r3, r3, r2
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <find_volume+0x2ca>
 800681e:	230d      	movs	r3, #13
 8006820:	e0db      	b.n	80069da <find_volume+0x482>
		fmt = FS_FAT32;
 8006822:	2303      	movs	r3, #3
 8006824:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800682e:	4293      	cmp	r3, r2
 8006830:	d802      	bhi.n	8006838 <find_volume+0x2e0>
 8006832:	2302      	movs	r3, #2
 8006834:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800683e:	4293      	cmp	r3, r2
 8006840:	d802      	bhi.n	8006848 <find_volume+0x2f0>
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	1c9a      	adds	r2, r3, #2
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006854:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006856:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800685a:	441a      	add	r2, r3
 800685c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006860:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	441a      	add	r2, r3
 8006866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006868:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800686a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800686e:	2b03      	cmp	r3, #3
 8006870:	d11e      	bne.n	80068b0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	3330      	adds	r3, #48	@ 0x30
 8006876:	332a      	adds	r3, #42	@ 0x2a
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fc53 	bl	8005124 <ld_word>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <find_volume+0x330>
 8006884:	230d      	movs	r3, #13
 8006886:	e0a8      	b.n	80069da <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	891b      	ldrh	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <find_volume+0x33c>
 8006890:	230d      	movs	r3, #13
 8006892:	e0a2      	b.n	80069da <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006896:	3330      	adds	r3, #48	@ 0x30
 8006898:	332c      	adds	r3, #44	@ 0x2c
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe fc5a 	bl	8005154 <ld_dword>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80068a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ae:	e01f      	b.n	80068f0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80068b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b2:	891b      	ldrh	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <find_volume+0x364>
 80068b8:	230d      	movs	r3, #13
 80068ba:	e08e      	b.n	80069da <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	6a1a      	ldr	r2, [r3, #32]
 80068c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068c2:	441a      	add	r2, r3
 80068c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80068c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d103      	bne.n	80068d8 <find_volume+0x380>
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	e00a      	b.n	80068ee <find_volume+0x396>
 80068d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	4613      	mov	r3, r2
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	4413      	add	r3, r2
 80068e2:	085a      	lsrs	r2, r3, #1
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80068ee:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80068fa:	0a5b      	lsrs	r3, r3, #9
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d201      	bcs.n	8006904 <find_volume+0x3ac>
 8006900:	230d      	movs	r3, #13
 8006902:	e06a      	b.n	80069da <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	611a      	str	r2, [r3, #16]
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006912:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	2280      	movs	r2, #128	@ 0x80
 8006918:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800691a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800691e:	2b03      	cmp	r3, #3
 8006920:	d149      	bne.n	80069b6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006924:	3330      	adds	r3, #48	@ 0x30
 8006926:	3330      	adds	r3, #48	@ 0x30
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe fbfb 	bl	8005124 <ld_word>
 800692e:	4603      	mov	r3, r0
 8006930:	2b01      	cmp	r3, #1
 8006932:	d140      	bne.n	80069b6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006936:	3301      	adds	r3, #1
 8006938:	4619      	mov	r1, r3
 800693a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800693c:	f7fe fea2 	bl	8005684 <move_window>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d137      	bne.n	80069b6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	2200      	movs	r2, #0
 800694a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	3330      	adds	r3, #48	@ 0x30
 8006950:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe fbe5 	bl	8005124 <ld_word>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006962:	429a      	cmp	r2, r3
 8006964:	d127      	bne.n	80069b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006968:	3330      	adds	r3, #48	@ 0x30
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fbf2 	bl	8005154 <ld_dword>
 8006970:	4603      	mov	r3, r0
 8006972:	4a1c      	ldr	r2, [pc, #112]	@ (80069e4 <find_volume+0x48c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d11e      	bne.n	80069b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	3330      	adds	r3, #48	@ 0x30
 800697c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe fbe7 	bl	8005154 <ld_dword>
 8006986:	4603      	mov	r3, r0
 8006988:	4a17      	ldr	r2, [pc, #92]	@ (80069e8 <find_volume+0x490>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d113      	bne.n	80069b6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	3330      	adds	r3, #48	@ 0x30
 8006992:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fbdc 	bl	8005154 <ld_dword>
 800699c:	4602      	mov	r2, r0
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	3330      	adds	r3, #48	@ 0x30
 80069a6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe fbd2 	bl	8005154 <ld_dword>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80069b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80069bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80069be:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <find_volume+0x494>)
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <find_volume+0x494>)
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	4b08      	ldr	r3, [pc, #32]	@ (80069ec <find_volume+0x494>)
 80069cc:	881a      	ldrh	r2, [r3, #0]
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80069d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80069d4:	f7fe fdee 	bl	80055b4 <clear_lock>
#endif
	return FR_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3758      	adds	r7, #88	@ 0x58
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	41615252 	.word	0x41615252
 80069e8:	61417272 	.word	0x61417272
 80069ec:	20000668 	.word	0x20000668

080069f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80069fa:	2309      	movs	r3, #9
 80069fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01c      	beq.n	8006a3e <validate+0x4e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d018      	beq.n	8006a3e <validate+0x4e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d013      	beq.n	8006a3e <validate+0x4e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	889a      	ldrh	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	88db      	ldrh	r3, [r3, #6]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d10c      	bne.n	8006a3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fa9b 	bl	8004f66 <disk_status>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <validate+0x4e>
			res = FR_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <validate+0x5a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	e000      	b.n	8006a4c <validate+0x5c>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	6013      	str	r3, [r2, #0]
	return res;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006a6e:	f107 0310 	add.w	r3, r7, #16
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fcd5 	bl	8006422 <get_ldnumber>
 8006a78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da01      	bge.n	8006a84 <f_mount+0x28>
 8006a80:	230b      	movs	r3, #11
 8006a82:	e02b      	b.n	8006adc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006a84:	4a17      	ldr	r2, [pc, #92]	@ (8006ae4 <f_mount+0x88>)
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006a94:	69b8      	ldr	r0, [r7, #24]
 8006a96:	f7fe fd8d 	bl	80055b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	490d      	ldr	r1, [pc, #52]	@ (8006ae4 <f_mount+0x88>)
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <f_mount+0x66>
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d001      	beq.n	8006ac6 <f_mount+0x6a>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e00a      	b.n	8006adc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ac6:	f107 010c 	add.w	r1, r7, #12
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	2200      	movs	r2, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fd41 	bl	8006558 <find_volume>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000664 	.word	0x20000664

08006ae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b098      	sub	sp, #96	@ 0x60
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <f_open+0x18>
 8006afc:	2309      	movs	r3, #9
 8006afe:	e1a9      	b.n	8006e54 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006b08:	79fa      	ldrb	r2, [r7, #7]
 8006b0a:	f107 0110 	add.w	r1, r7, #16
 8006b0e:	f107 0308 	add.w	r3, r7, #8
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fd20 	bl	8006558 <find_volume>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 818d 	bne.w	8006e42 <f_open+0x35a>
		dj.obj.fs = fs;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	f107 0314 	add.w	r3, r7, #20
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fc03 	bl	8006340 <follow_path>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006b40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d118      	bne.n	8006b7a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006b48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b4c:	b25b      	sxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da03      	bge.n	8006b5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006b52:	2306      	movs	r3, #6
 8006b54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006b58:	e00f      	b.n	8006b7a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	bf8c      	ite	hi
 8006b60:	2301      	movhi	r3, #1
 8006b62:	2300      	movls	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	f107 0314 	add.w	r3, r7, #20
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fbd8 	bl	8005324 <chk_lock>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	f003 031c 	and.w	r3, r3, #28
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d07f      	beq.n	8006c84 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006b84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d017      	beq.n	8006bbc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006b8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d10e      	bne.n	8006bb2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006b94:	f7fe fc22 	bl	80053dc <enq_lock>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d006      	beq.n	8006bac <f_open+0xc4>
 8006b9e:	f107 0314 	add.w	r3, r7, #20
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fb06 	bl	80061b4 <dir_register>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	e000      	b.n	8006bae <f_open+0xc6>
 8006bac:	2312      	movs	r3, #18
 8006bae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	f043 0308 	orr.w	r3, r3, #8
 8006bb8:	71fb      	strb	r3, [r7, #7]
 8006bba:	e010      	b.n	8006bde <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006bbc:	7ebb      	ldrb	r3, [r7, #26]
 8006bbe:	f003 0311 	and.w	r3, r3, #17
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <f_open+0xe6>
					res = FR_DENIED;
 8006bc6:	2307      	movs	r3, #7
 8006bc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006bcc:	e007      	b.n	8006bde <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <f_open+0xf6>
 8006bd8:	2308      	movs	r3, #8
 8006bda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006bde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d168      	bne.n	8006cb8 <f_open+0x1d0>
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d063      	beq.n	8006cb8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006bf0:	f7fe f9b1 	bl	8004f56 <get_fattime>
 8006bf4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf8:	330e      	adds	r3, #14
 8006bfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe fae7 	bl	80051d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c04:	3316      	adds	r3, #22
 8006c06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe fae1 	bl	80051d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c10:	330b      	adds	r3, #11
 8006c12:	2220      	movs	r2, #32
 8006c14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fa35 	bl	800608c <ld_clust>
 8006c22:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff fa4d 	bl	80060ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c32:	331c      	adds	r3, #28
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe faca 	bl	80051d0 <st_dword>
					fs->wflag = 1;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d037      	beq.n	8006cb8 <f_open+0x1d0>
						dw = fs->winsect;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006c4e:	f107 0314 	add.w	r3, r7, #20
 8006c52:	2200      	movs	r2, #0
 8006c54:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe ff60 	bl	8005b1c <remove_chain>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006c62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d126      	bne.n	8006cb8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fd08 	bl	8005684 <move_window>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c7e:	3a01      	subs	r2, #1
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	e019      	b.n	8006cb8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006c84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d115      	bne.n	8006cb8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006c8c:	7ebb      	ldrb	r3, [r7, #26]
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <f_open+0x1b6>
					res = FR_NO_FILE;
 8006c96:	2304      	movs	r3, #4
 8006c98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006c9c:	e00c      	b.n	8006cb8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <f_open+0x1d0>
 8006ca8:	7ebb      	ldrb	r3, [r7, #26]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <f_open+0x1d0>
						res = FR_DENIED;
 8006cb2:	2307      	movs	r3, #7
 8006cb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006cb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d126      	bne.n	8006d0e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	bf8c      	ite	hi
 8006ce6:	2301      	movhi	r3, #1
 8006ce8:	2300      	movls	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	f107 0314 	add.w	r3, r7, #20
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe fb93 	bl	8005420 <inc_lock>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <f_open+0x226>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f040 8095 	bne.w	8006e42 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff f9b4 	bl	800608c <ld_clust>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2c:	331c      	adds	r3, #28
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fa10 	bl	8005154 <ld_dword>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	88da      	ldrh	r2, [r3, #6]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	79fa      	ldrb	r2, [r7, #7]
 8006d52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3330      	adds	r3, #48	@ 0x30
 8006d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fa7a 	bl	800526a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d060      	beq.n	8006e42 <f_open+0x35a>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d05c      	beq.n	8006e42 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	895b      	ldrh	r3, [r3, #10]
 8006d94:	025b      	lsls	r3, r3, #9
 8006d96:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006da4:	e016      	b.n	8006dd4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fd25 	bl	80057fa <get_fat>
 8006db0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d802      	bhi.n	8006dbe <f_open+0x2d6>
 8006db8:	2302      	movs	r3, #2
 8006dba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d102      	bne.n	8006dcc <f_open+0x2e4>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006dcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <f_open+0x2fc>
 8006ddc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d8e0      	bhi.n	8006da6 <f_open+0x2be>
				}
				fp->clust = clst;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006de8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006dea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d127      	bne.n	8006e42 <f_open+0x35a>
 8006df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d022      	beq.n	8006e42 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fcdb 	bl	80057bc <clust2sect>
 8006e06:	6478      	str	r0, [r7, #68]	@ 0x44
 8006e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <f_open+0x32e>
						res = FR_INT_ERR;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006e14:	e015      	b.n	8006e42 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e18:	0a5a      	lsrs	r2, r3, #9
 8006e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e1c:	441a      	add	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	7858      	ldrb	r0, [r3, #1]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	2301      	movs	r3, #1
 8006e32:	f7fe f8c8 	bl	8004fc6 <disk_read>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <f_open+0x35a>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006e42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <f_open+0x368>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006e50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3760      	adds	r7, #96	@ 0x60
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08e      	sub	sp, #56	@ 0x38
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f107 0214 	add.w	r2, r7, #20
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fdb7 	bl	80069f0 <validate>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006e88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <f_read+0x44>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	7d5b      	ldrb	r3, [r3, #21]
 8006e94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006e98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <f_read+0x4a>
 8006ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ea4:	e115      	b.n	80070d2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	7d1b      	ldrb	r3, [r3, #20]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <f_read+0x5a>
 8006eb2:	2307      	movs	r3, #7
 8006eb4:	e10d      	b.n	80070d2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	f240 80fe 	bls.w	80070c8 <f_read+0x26c>
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006ed0:	e0fa      	b.n	80070c8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 80c6 	bne.w	800706c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	0a5b      	lsrs	r3, r3, #9
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	8952      	ldrh	r2, [r2, #10]
 8006eea:	3a01      	subs	r2, #1
 8006eec:	4013      	ands	r3, r2
 8006eee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d12f      	bne.n	8006f56 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f04:	e013      	b.n	8006f2e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7fe fefe 	bl	8005d16 <clmt_clust>
 8006f1a:	6338      	str	r0, [r7, #48]	@ 0x30
 8006f1c:	e007      	b.n	8006f2e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f7fe fc67 	bl	80057fa <get_fat>
 8006f2c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d804      	bhi.n	8006f3e <f_read+0xe2>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2202      	movs	r2, #2
 8006f38:	755a      	strb	r2, [r3, #21]
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e0c9      	b.n	80070d2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d104      	bne.n	8006f50 <f_read+0xf4>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	755a      	strb	r2, [r3, #21]
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e0c0      	b.n	80070d2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f54:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f7fe fc2c 	bl	80057bc <clust2sect>
 8006f64:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <f_read+0x11a>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	755a      	strb	r2, [r3, #21]
 8006f72:	2302      	movs	r3, #2
 8006f74:	e0ad      	b.n	80070d2 <f_read+0x276>
			sect += csect;
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d039      	beq.n	8006ffe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8e:	4413      	add	r3, r2
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	8952      	ldrh	r2, [r2, #10]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d905      	bls.n	8006fa4 <f_read+0x148>
					cc = fs->csize - csect;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	895b      	ldrh	r3, [r3, #10]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	7858      	ldrb	r0, [r3, #1]
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fae:	f7fe f80a 	bl	8004fc6 <disk_read>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d004      	beq.n	8006fc2 <f_read+0x166>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	755a      	strb	r2, [r3, #21]
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e087      	b.n	80070d2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	7d1b      	ldrb	r3, [r3, #20]
 8006fc6:	b25b      	sxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da14      	bge.n	8006ff6 <f_read+0x19a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d90d      	bls.n	8006ff6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a1a      	ldr	r2, [r3, #32]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	025b      	lsls	r3, r3, #9
 8006fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe6:	18d0      	adds	r0, r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3330      	adds	r3, #48	@ 0x30
 8006fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f7fe f919 	bl	8005228 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	025b      	lsls	r3, r3, #9
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006ffc:	e050      	b.n	80070a0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	429a      	cmp	r2, r3
 8007006:	d02e      	beq.n	8007066 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	7d1b      	ldrb	r3, [r3, #20]
 800700c:	b25b      	sxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	da18      	bge.n	8007044 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	7858      	ldrb	r0, [r3, #1]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	2301      	movs	r3, #1
 8007022:	f7fe f808 	bl	8005036 <disk_write>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <f_read+0x1da>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	755a      	strb	r2, [r3, #21]
 8007032:	2301      	movs	r3, #1
 8007034:	e04d      	b.n	80070d2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7d1b      	ldrb	r3, [r3, #20]
 800703a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	7858      	ldrb	r0, [r3, #1]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800704e:	2301      	movs	r3, #1
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	f7fd ffb8 	bl	8004fc6 <disk_read>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <f_read+0x20a>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	755a      	strb	r2, [r3, #21]
 8007062:	2301      	movs	r3, #1
 8007064:	e035      	b.n	80070d2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007074:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007078:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800707a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	429a      	cmp	r2, r3
 8007080:	d901      	bls.n	8007086 <f_read+0x22a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	4413      	add	r3, r2
 8007096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007098:	4619      	mov	r1, r3
 800709a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800709c:	f7fe f8c4 	bl	8005228 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80070a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a4:	4413      	add	r3, r2
 80070a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	441a      	add	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	619a      	str	r2, [r3, #24]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	441a      	add	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f47f af01 	bne.w	8006ed2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3738      	adds	r7, #56	@ 0x38
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08c      	sub	sp, #48	@ 0x30
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
 80070e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f107 0210 	add.w	r2, r7, #16
 80070f8:	4611      	mov	r1, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fc78 	bl	80069f0 <validate>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <f_write+0x44>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	7d5b      	ldrb	r3, [r3, #21]
 8007112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <f_write+0x4a>
 800711e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007122:	e14b      	b.n	80073bc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	7d1b      	ldrb	r3, [r3, #20]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <f_write+0x5a>
 8007130:	2307      	movs	r3, #7
 8007132:	e143      	b.n	80073bc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	441a      	add	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	429a      	cmp	r2, r3
 8007142:	f080 812d 	bcs.w	80073a0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	43db      	mvns	r3, r3
 800714c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800714e:	e127      	b.n	80073a0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 80e3 	bne.w	8007324 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	0a5b      	lsrs	r3, r3, #9
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	8952      	ldrh	r2, [r2, #10]
 8007168:	3a01      	subs	r2, #1
 800716a:	4013      	ands	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d143      	bne.n	80071fc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10c      	bne.n	8007196 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	2b00      	cmp	r3, #0
 8007186:	d11a      	bne.n	80071be <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2100      	movs	r1, #0
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fd2a 	bl	8005be6 <create_chain>
 8007192:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007194:	e013      	b.n	80071be <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	4619      	mov	r1, r3
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7fe fdb6 	bl	8005d16 <clmt_clust>
 80071aa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80071ac:	e007      	b.n	80071be <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fe fd15 	bl	8005be6 <create_chain>
 80071bc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 80f2 	beq.w	80073aa <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d104      	bne.n	80071d6 <f_write+0xfc>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2202      	movs	r2, #2
 80071d0:	755a      	strb	r2, [r3, #21]
 80071d2:	2302      	movs	r3, #2
 80071d4:	e0f2      	b.n	80073bc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d104      	bne.n	80071e8 <f_write+0x10e>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	755a      	strb	r2, [r3, #21]
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0e9      	b.n	80073bc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <f_write+0x122>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071fa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	7d1b      	ldrb	r3, [r3, #20]
 8007200:	b25b      	sxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	da18      	bge.n	8007238 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	7858      	ldrb	r0, [r3, #1]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	2301      	movs	r3, #1
 8007216:	f7fd ff0e 	bl	8005036 <disk_write>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <f_write+0x150>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	755a      	strb	r2, [r3, #21]
 8007226:	2301      	movs	r3, #1
 8007228:	e0c8      	b.n	80073bc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	7d1b      	ldrb	r3, [r3, #20]
 800722e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007232:	b2da      	uxtb	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f7fe fabb 	bl	80057bc <clust2sect>
 8007246:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <f_write+0x17e>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2202      	movs	r2, #2
 8007252:	755a      	strb	r2, [r3, #21]
 8007254:	2302      	movs	r3, #2
 8007256:	e0b1      	b.n	80073bc <f_write+0x2e2>
			sect += csect;
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	4413      	add	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	0a5b      	lsrs	r3, r3, #9
 8007264:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d03c      	beq.n	80072e6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	4413      	add	r3, r2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	8952      	ldrh	r2, [r2, #10]
 8007276:	4293      	cmp	r3, r2
 8007278:	d905      	bls.n	8007286 <f_write+0x1ac>
					cc = fs->csize - csect;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	895b      	ldrh	r3, [r3, #10]
 800727e:	461a      	mov	r2, r3
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	7858      	ldrb	r0, [r3, #1]
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	69f9      	ldr	r1, [r7, #28]
 8007290:	f7fd fed1 	bl	8005036 <disk_write>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <f_write+0x1ca>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	755a      	strb	r2, [r3, #21]
 80072a0:	2301      	movs	r3, #1
 80072a2:	e08b      	b.n	80073bc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a1a      	ldr	r2, [r3, #32]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	6a3a      	ldr	r2, [r7, #32]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d915      	bls.n	80072de <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1a      	ldr	r2, [r3, #32]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	025b      	lsls	r3, r3, #9
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ca:	4619      	mov	r1, r3
 80072cc:	f7fd ffac 	bl	8005228 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	7d1b      	ldrb	r3, [r3, #20]
 80072d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	025b      	lsls	r3, r3, #9
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80072e4:	e03f      	b.n	8007366 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d016      	beq.n	800731e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d210      	bcs.n	800731e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	7858      	ldrb	r0, [r3, #1]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007306:	2301      	movs	r3, #1
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	f7fd fe5c 	bl	8004fc6 <disk_read>
 800730e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	755a      	strb	r2, [r3, #21]
 800731a:	2301      	movs	r3, #1
 800731c:	e04e      	b.n	80073bc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	429a      	cmp	r2, r3
 8007338:	d901      	bls.n	800733e <f_write+0x264>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734c:	4413      	add	r3, r2
 800734e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007350:	69f9      	ldr	r1, [r7, #28]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd ff68 	bl	8005228 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	7d1b      	ldrb	r3, [r3, #20]
 800735c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	4413      	add	r3, r2
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	619a      	str	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	429a      	cmp	r2, r3
 8007384:	bf38      	it	cc
 8007386:	461a      	movcc	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	441a      	add	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f47f aed4 	bne.w	8007150 <f_write+0x76>
 80073a8:	e000      	b.n	80073ac <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80073aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	7d1b      	ldrb	r3, [r3, #20]
 80073b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3730      	adds	r7, #48	@ 0x30
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f107 0208 	add.w	r2, r7, #8
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fb0b 	bl	80069f0 <validate>
 80073da:	4603      	mov	r3, r0
 80073dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073de:	7dfb      	ldrb	r3, [r7, #23]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d168      	bne.n	80074b6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7d1b      	ldrb	r3, [r3, #20]
 80073e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d062      	beq.n	80074b6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	7d1b      	ldrb	r3, [r3, #20]
 80073f4:	b25b      	sxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da15      	bge.n	8007426 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	7858      	ldrb	r0, [r3, #1]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1a      	ldr	r2, [r3, #32]
 8007408:	2301      	movs	r3, #1
 800740a:	f7fd fe14 	bl	8005036 <disk_write>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <f_sync+0x54>
 8007414:	2301      	movs	r3, #1
 8007416:	e04f      	b.n	80074b8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7d1b      	ldrb	r3, [r3, #20]
 800741c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007420:	b2da      	uxtb	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007426:	f7fd fd96 	bl	8004f56 <get_fattime>
 800742a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe f925 	bl	8005684 <move_window>
 800743a:	4603      	mov	r3, r0
 800743c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d138      	bne.n	80074b6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007448:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	330b      	adds	r3, #11
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	330b      	adds	r3, #11
 8007454:	f042 0220 	orr.w	r2, r2, #32
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	461a      	mov	r2, r3
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	f7fe fe2f 	bl	80060ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f103 021c 	add.w	r2, r3, #28
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f7fd fea9 	bl	80051d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3316      	adds	r3, #22
 8007482:	6939      	ldr	r1, [r7, #16]
 8007484:	4618      	mov	r0, r3
 8007486:	f7fd fea3 	bl	80051d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3312      	adds	r3, #18
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd fe82 	bl	800519a <st_word>
					fs->wflag = 1;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2201      	movs	r2, #1
 800749a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe f91e 	bl	80056e0 <sync_fs>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7d1b      	ldrb	r3, [r3, #20]
 80074ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff7b 	bl	80073c4 <f_sync>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d118      	bne.n	800750a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f107 0208 	add.w	r2, r7, #8
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fa85 	bl	80069f0 <validate>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10c      	bne.n	800750a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe f821 	bl	800553c <dec_lock>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <memset>:
 8007514:	4402      	add	r2, r0
 8007516:	4603      	mov	r3, r0
 8007518:	4293      	cmp	r3, r2
 800751a:	d100      	bne.n	800751e <memset+0xa>
 800751c:	4770      	bx	lr
 800751e:	f803 1b01 	strb.w	r1, [r3], #1
 8007522:	e7f9      	b.n	8007518 <memset+0x4>

08007524 <__libc_init_array>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	4d0d      	ldr	r5, [pc, #52]	@ (800755c <__libc_init_array+0x38>)
 8007528:	4c0d      	ldr	r4, [pc, #52]	@ (8007560 <__libc_init_array+0x3c>)
 800752a:	1b64      	subs	r4, r4, r5
 800752c:	10a4      	asrs	r4, r4, #2
 800752e:	2600      	movs	r6, #0
 8007530:	42a6      	cmp	r6, r4
 8007532:	d109      	bne.n	8007548 <__libc_init_array+0x24>
 8007534:	4d0b      	ldr	r5, [pc, #44]	@ (8007564 <__libc_init_array+0x40>)
 8007536:	4c0c      	ldr	r4, [pc, #48]	@ (8007568 <__libc_init_array+0x44>)
 8007538:	f000 f818 	bl	800756c <_init>
 800753c:	1b64      	subs	r4, r4, r5
 800753e:	10a4      	asrs	r4, r4, #2
 8007540:	2600      	movs	r6, #0
 8007542:	42a6      	cmp	r6, r4
 8007544:	d105      	bne.n	8007552 <__libc_init_array+0x2e>
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	f855 3b04 	ldr.w	r3, [r5], #4
 800754c:	4798      	blx	r3
 800754e:	3601      	adds	r6, #1
 8007550:	e7ee      	b.n	8007530 <__libc_init_array+0xc>
 8007552:	f855 3b04 	ldr.w	r3, [r5], #4
 8007556:	4798      	blx	r3
 8007558:	3601      	adds	r6, #1
 800755a:	e7f2      	b.n	8007542 <__libc_init_array+0x1e>
 800755c:	08007704 	.word	0x08007704
 8007560:	08007704 	.word	0x08007704
 8007564:	08007704 	.word	0x08007704
 8007568:	08007708 	.word	0x08007708

0800756c <_init>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr

08007578 <_fini>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr
